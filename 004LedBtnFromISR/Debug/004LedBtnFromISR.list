
004LedBtnFromISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005990  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000008  08005c54  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c18  2000001c  08005c68  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c34  08005c68  00021c34  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000158ea  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e14  00000000  00000000  00035936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001720  00000000  00000000  00038750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015b8  00000000  00000000  00039e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c5cf  00000000  00000000  0003b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001555e  00000000  00000000  000579f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c38d5  00000000  00000000  0006cf55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0013082a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000060d8  00000000  00000000  0013087c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005ab8 	.word	0x08005ab8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	08005ab8 	.word	0x08005ab8

08000180 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000180:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000182:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000186:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000210 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800018a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800018e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000192:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000194:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000196:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000198:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800019a:	d332      	bcc.n	8000202 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800019c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800019e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001a0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001a2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001a4:	d314      	bcc.n	80001d0 <_CheckCase2>

080001a6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001a6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001a8:	19d0      	adds	r0, r2, r7
 80001aa:	bf00      	nop

080001ac <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001ac:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001b4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001b6:	d005      	beq.n	80001c4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001b8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001bc:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001c0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001c2:	d1f3      	bne.n	80001ac <_LoopCopyStraight>

080001c4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001c4:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001c8:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001ca:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001ce:	4770      	bx	lr

080001d0 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 80001d0:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 80001d2:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001d4:	d319      	bcc.n	800020a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001d6:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001d8:	1b12      	subs	r2, r2, r4

080001da <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001da:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001de:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001e2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001e4:	d1f9      	bne.n	80001da <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001e6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001e8:	d005      	beq.n	80001f6 <_No2ChunkNeeded>

080001ea <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001ea:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ee:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001f2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001f4:	d1f9      	bne.n	80001ea <_LoopCopyAfterWrapAround>

080001f6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001f6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001fa:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001fc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001fe:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000200:	4770      	bx	lr

08000202 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000202:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000204:	3801      	subs	r0, #1
        CMP      R0,R2
 8000206:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000208:	d2cd      	bcs.n	80001a6 <_Case4>

0800020a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800020a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800020c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800020e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000210:	20001608 	.word	0x20001608

08000214 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f103 0208 	add.w	r2, r3, #8
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f103 0208 	add.w	r2, r3, #8
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f103 0208 	add.w	r2, r3, #8
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002cc:	d103      	bne.n	80002d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e00c      	b.n	80002f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3308      	adds	r3, #8
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e002      	b.n	80002e4 <vListInsert+0x2e>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d2f6      	bcs.n	80002de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	683a      	ldr	r2, [r7, #0]
 80002fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6892      	ldr	r2, [r2, #8]
 800033e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6852      	ldr	r2, [r2, #4]
 8000348:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d103      	bne.n	800035c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af04      	add	r7, sp, #16
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	4613      	mov	r3, r2
 800038a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4618      	mov	r0, r3
 8000392:	f001 f9e3 	bl	800175c <pvPortMalloc>
 8000396:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00e      	beq.n	80003bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800039e:	205c      	movs	r0, #92	; 0x5c
 80003a0:	f001 f9dc 	bl	800175c <pvPortMalloc>
 80003a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	631a      	str	r2, [r3, #48]	; 0x30
 80003b2:	e005      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80003b4:	6978      	ldr	r0, [r7, #20]
 80003b6:	f001 fab1 	bl	800191c <vPortFree>
 80003ba:	e001      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d013      	beq.n	80003ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	2300      	movs	r3, #0
 80003ca:	9303      	str	r3, [sp, #12]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f000 f80e 	bl	80003fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80003e2:	69f8      	ldr	r0, [r7, #28]
 80003e4:	f000 f8a2 	bl	800052c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80003e8:	2301      	movs	r3, #1
 80003ea:	61bb      	str	r3, [r7, #24]
 80003ec:	e002      	b.n	80003f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80003f4:	69bb      	ldr	r3, [r7, #24]
    }
 80003f6:	4618      	mov	r0, r3
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b088      	sub	sp, #32
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	461a      	mov	r2, r3
 8000416:	21a5      	movs	r1, #165	; 0xa5
 8000418:	f005 fb46 	bl	8005aa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000426:	3b01      	subs	r3, #1
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	f023 0307 	bic.w	r3, r3, #7
 8000434:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00a      	beq.n	8000456 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000444:	f383 8811 	msr	BASEPRI, r3
 8000448:	f3bf 8f6f 	isb	sy
 800044c:	f3bf 8f4f 	dsb	sy
 8000450:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000452:	bf00      	nop
 8000454:	e7fe      	b.n	8000454 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d01f      	beq.n	800049c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	e012      	b.n	8000488 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	4413      	add	r3, r2
 8000468:	7819      	ldrb	r1, [r3, #0]
 800046a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	4413      	add	r3, r2
 8000470:	3334      	adds	r3, #52	; 0x34
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d006      	beq.n	8000490 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3301      	adds	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d9e9      	bls.n	8000462 <prvInitialiseNewTask+0x64>
 800048e:	e000      	b.n	8000492 <prvInitialiseNewTask+0x94>
            {
                break;
 8000490:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800049a:	e003      	b.n	80004a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d901      	bls.n	80004ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004aa:	2304      	movs	r3, #4
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80004ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80004b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b8:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80004ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004bc:	2200      	movs	r2, #0
 80004be:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80004c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c2:	3304      	adds	r3, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fec5 	bl	8000254 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80004ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004cc:	3318      	adds	r3, #24
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fec0 	bl	8000254 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80004d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004dc:	f1c3 0205 	rsb	r2, r3, #5
 80004e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80004e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80004ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ec:	3354      	adds	r3, #84	; 0x54
 80004ee:	2204      	movs	r2, #4
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f005 fad8 	bl	8005aa8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	3358      	adds	r3, #88	; 0x58
 80004fc:	2201      	movs	r2, #1
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f005 fad1 	bl	8005aa8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	68f9      	ldr	r1, [r7, #12]
 800050a:	69b8      	ldr	r0, [r7, #24]
 800050c:	f000 fe4c 	bl	80011a8 <pxPortInitialiseStack>
 8000510:	4602      	mov	r2, r0
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000534:	f000 ffe6 	bl	8001504 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a3a      	ldr	r2, [pc, #232]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000540:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000542:	4b3a      	ldr	r3, [pc, #232]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d109      	bne.n	800055e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d110      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000558:	f000 fb6a 	bl	8000c30 <prvInitialiseTaskLists>
 800055c:	e00d      	b.n	800057a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000570:	429a      	cmp	r2, r3
 8000572:	d802      	bhi.n	800057a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000582:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <prvAddNewTaskToReadyList+0x94>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb99 	bl	8002ccc <SEGGER_SYSVIEW_OnTaskCreate>
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	461d      	mov	r5, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	1ae3      	subs	r3, r4, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	462b      	mov	r3, r5
 80005bc:	f001 facc 	bl	8001b58 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fc06 	bl	8002dd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <prvAddNewTaskToReadyList+0x110>)
 80005e8:	441a      	add	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3304      	adds	r3, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f7ff fe3c 	bl	800026e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80005f6:	f000 ffb5 	bl	8001564 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <prvAddNewTaskToReadyList+0x114>)
 8000612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	20000110 	.word	0x20000110
 800062c:	20000038 	.word	0x20000038
 8000630:	2000011c 	.word	0x2000011c
 8000634:	2000012c 	.word	0x2000012c
 8000638:	20000118 	.word	0x20000118
 800063c:	2000003c 	.word	0x2000003c
 8000640:	e000ed04 	.word	0xe000ed04

08000644 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800064c:	f000 ff5a 	bl	8001504 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d102      	bne.n	800065c <vTaskSuspend+0x18>
 8000656:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <vTaskSuspend+0x13c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	e000      	b.n	800065e <vTaskSuspend+0x1a>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fc58 	bl	8002f18 <SEGGER_SYSVIEW_ShrinkId>
 8000668:	4603      	mov	r3, r0
 800066a:	4619      	mov	r1, r3
 800066c:	2029      	movs	r0, #41	; 0x29
 800066e:	f001 fe1d 	bl	80022ac <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	3304      	adds	r3, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fe56 	bl	8000328 <uxListRemove>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d115      	bne.n	80006ae <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000686:	493f      	ldr	r1, [pc, #252]	; (8000784 <vTaskSuspend+0x140>)
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10a      	bne.n	80006ae <vTaskSuspend+0x6a>
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069c:	2201      	movs	r2, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <vTaskSuspend+0x144>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4013      	ands	r3, r2
 80006aa:	4a37      	ldr	r2, [pc, #220]	; (8000788 <vTaskSuspend+0x144>)
 80006ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d004      	beq.n	80006c0 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3318      	adds	r3, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe34 	bl	8000328 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	211b      	movs	r1, #27
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fbc7 	bl	8002e58 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3304      	adds	r3, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	482e      	ldr	r0, [pc, #184]	; (800078c <vTaskSuspend+0x148>)
 80006d2:	f7ff fdcc 	bl	800026e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e010      	b.n	80006fe <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	4413      	add	r3, r2
 80006e2:	3358      	adds	r3, #88	; 0x58
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d105      	bne.n	80006f8 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	4413      	add	r3, r2
 80006f2:	3358      	adds	r3, #88	; 0x58
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	2b00      	cmp	r3, #0
 8000702:	ddeb      	ble.n	80006dc <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000704:	f000 ff2e 	bl	8001564 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <vTaskSuspend+0x14c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000710:	f000 fef8 	bl	8001504 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000714:	f000 fb0a 	bl	8000d2c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000718:	f000 ff24 	bl	8001564 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <vTaskSuspend+0x13c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	429a      	cmp	r2, r3
 8000724:	d127      	bne.n	8000776 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <vTaskSuspend+0x14c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d017      	beq.n	800075e <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <vTaskSuspend+0x150>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00a      	beq.n	800074c <vTaskSuspend+0x108>
        __asm volatile
 8000736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	60fb      	str	r3, [r7, #12]
    }
 8000748:	bf00      	nop
 800074a:	e7fe      	b.n	800074a <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <vTaskSuspend+0x154>)
 800074e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	f3bf 8f4f 	dsb	sy
 8000758:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800075c:	e00b      	b.n	8000776 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <vTaskSuspend+0x148>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <vTaskSuspend+0x158>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d103      	bne.n	8000772 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <vTaskSuspend+0x13c>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
    }
 8000770:	e001      	b.n	8000776 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8000772:	f000 f9db 	bl	8000b2c <vTaskSwitchContext>
    }
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000038 	.word	0x20000038
 8000784:	2000003c 	.word	0x2000003c
 8000788:	20000118 	.word	0x20000118
 800078c:	200000fc 	.word	0x200000fc
 8000790:	2000011c 	.word	0x2000011c
 8000794:	20000138 	.word	0x20000138
 8000798:	e000ed04 	.word	0xe000ed04
 800079c:	20000110 	.word	0x20000110

080007a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <vTaskStartScheduler+0x98>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2300      	movs	r3, #0
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	4922      	ldr	r1, [pc, #136]	; (800083c <vTaskStartScheduler+0x9c>)
 80007b4:	4822      	ldr	r0, [pc, #136]	; (8000840 <vTaskStartScheduler+0xa0>)
 80007b6:	f7ff fde1 	bl	800037c <xTaskCreate>
 80007ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d124      	bne.n	800080c <vTaskStartScheduler+0x6c>
        __asm volatile
 80007c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c6:	f383 8811 	msr	BASEPRI, r3
 80007ca:	f3bf 8f6f 	isb	sy
 80007ce:	f3bf 8f4f 	dsb	sy
 80007d2:	60bb      	str	r3, [r7, #8]
    }
 80007d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <vTaskStartScheduler+0xa4>)
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <vTaskStartScheduler+0xa8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <vTaskStartScheduler+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <vTaskStartScheduler+0xb0>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <vTaskStartScheduler+0x98>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d102      	bne.n	80007fc <vTaskStartScheduler+0x5c>
 80007f6:	f002 fa4d 	bl	8002c94 <SEGGER_SYSVIEW_OnIdle>
 80007fa:	e004      	b.n	8000806 <vTaskStartScheduler+0x66>
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <vTaskStartScheduler+0xb0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f002 faa5 	bl	8002d50 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000806:	f000 fd5d 	bl	80012c4 <xPortStartScheduler>
 800080a:	e00e      	b.n	800082a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000812:	d10a      	bne.n	800082a <vTaskStartScheduler+0x8a>
        __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	607b      	str	r3, [r7, #4]
    }
 8000826:	bf00      	nop
 8000828:	e7fe      	b.n	8000828 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <vTaskStartScheduler+0xb4>)
 800082c:	681b      	ldr	r3, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000134 	.word	0x20000134
 800083c:	08005ad0 	.word	0x08005ad0
 8000840:	08000c01 	.word	0x08000c01
 8000844:	20000130 	.word	0x20000130
 8000848:	2000011c 	.word	0x2000011c
 800084c:	20000114 	.word	0x20000114
 8000850:	20000038 	.word	0x20000038
 8000854:	20000008 	.word	0x20000008

08000858 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <vTaskSuspendAll+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a03      	ldr	r2, [pc, #12]	; (8000870 <vTaskSuspendAll+0x18>)
 8000864:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000138 	.word	0x20000138

08000874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <xTaskResumeAll+0x11c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10a      	bne.n	80008a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	603b      	str	r3, [r7, #0]
    }
 800089c:	bf00      	nop
 800089e:	e7fe      	b.n	800089e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80008a0:	f000 fe30 	bl	8001504 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <xTaskResumeAll+0x11c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a39      	ldr	r2, [pc, #228]	; (8000990 <xTaskResumeAll+0x11c>)
 80008ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008ae:	4b38      	ldr	r3, [pc, #224]	; (8000990 <xTaskResumeAll+0x11c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d165      	bne.n	8000982 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <xTaskResumeAll+0x120>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d061      	beq.n	8000982 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80008be:	e032      	b.n	8000926 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <xTaskResumeAll+0x124>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3318      	adds	r3, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd2b 	bl	8000328 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3304      	adds	r3, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fd26 	bl	8000328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fa78 	bl	8002dd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	2201      	movs	r2, #1
 80008ea:	409a      	lsls	r2, r3
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <xTaskResumeAll+0x128>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	4a2a      	ldr	r2, [pc, #168]	; (800099c <xTaskResumeAll+0x128>)
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <xTaskResumeAll+0x12c>)
 8000904:	441a      	add	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3304      	adds	r3, #4
 800090a:	4619      	mov	r1, r3
 800090c:	4610      	mov	r0, r2
 800090e:	f7ff fcae 	bl	800026e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <xTaskResumeAll+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091c:	429a      	cmp	r2, r3
 800091e:	d302      	bcc.n	8000926 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <xTaskResumeAll+0x134>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <xTaskResumeAll+0x124>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1c8      	bne.n	80008c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000934:	f000 f9fa 	bl	8000d2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <xTaskResumeAll+0x138>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d010      	beq.n	8000966 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000944:	f000 f836 	bl	80009b4 <xTaskIncrementTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <xTaskResumeAll+0x134>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1f1      	bne.n	8000944 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <xTaskResumeAll+0x138>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <xTaskResumeAll+0x134>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d009      	beq.n	8000982 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800096e:	2301      	movs	r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <xTaskResumeAll+0x13c>)
 8000974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000982:	f000 fdef 	bl	8001564 <vPortExitCritical>

    return xAlreadyYielded;
 8000986:	68bb      	ldr	r3, [r7, #8]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000138 	.word	0x20000138
 8000994:	20000110 	.word	0x20000110
 8000998:	200000d0 	.word	0x200000d0
 800099c:	20000118 	.word	0x20000118
 80009a0:	2000003c 	.word	0x2000003c
 80009a4:	20000038 	.word	0x20000038
 80009a8:	20000124 	.word	0x20000124
 80009ac:	20000120 	.word	0x20000120
 80009b0:	e000ed04 	.word	0xe000ed04

080009b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <xTaskIncrementTick+0x14c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 8092 	bne.w	8000aec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <xTaskIncrementTick+0x150>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <xTaskIncrementTick+0x150>)
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d120      	bne.n	8000a1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <xTaskIncrementTick+0x154>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00a      	beq.n	80009fc <xTaskIncrementTick+0x48>
        __asm volatile
 80009e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ea:	f383 8811 	msr	BASEPRI, r3
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	603b      	str	r3, [r7, #0]
    }
 80009f8:	bf00      	nop
 80009fa:	e7fe      	b.n	80009fa <xTaskIncrementTick+0x46>
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <xTaskIncrementTick+0x154>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <xTaskIncrementTick+0x158>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <xTaskIncrementTick+0x154>)
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <xTaskIncrementTick+0x158>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b3f      	ldr	r3, [pc, #252]	; (8000b10 <xTaskIncrementTick+0x15c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a3e      	ldr	r2, [pc, #248]	; (8000b10 <xTaskIncrementTick+0x15c>)
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	f000 f987 	bl	8000d2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <xTaskIncrementTick+0x160>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d34c      	bcc.n	8000ac2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <xTaskIncrementTick+0x154>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d104      	bne.n	8000a3c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <xTaskIncrementTick+0x160>)
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	601a      	str	r2, [r3, #0]
                    break;
 8000a3a:	e042      	b.n	8000ac2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a3c:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <xTaskIncrementTick+0x154>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d203      	bcs.n	8000a5c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000a54:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <xTaskIncrementTick+0x160>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000a5a:	e032      	b.n	8000ac2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fc61 	bl	8000328 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	3318      	adds	r3, #24
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fc58 	bl	8000328 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f9aa 	bl	8002dd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	2201      	movs	r2, #1
 8000a86:	409a      	lsls	r2, r3
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <xTaskIncrementTick+0x164>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <xTaskIncrementTick+0x164>)
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <xTaskIncrementTick+0x168>)
 8000aa0:	441a      	add	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	f7ff fbe0 	bl	800026e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <xTaskIncrementTick+0x16c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3b5      	bcc.n	8000a28 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ac0:	e7b2      	b.n	8000a28 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <xTaskIncrementTick+0x16c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac8:	4914      	ldr	r1, [pc, #80]	; (8000b1c <xTaskIncrementTick+0x168>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d901      	bls.n	8000ade <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <xTaskIncrementTick+0x170>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e004      	b.n	8000af6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <xTaskIncrementTick+0x174>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <xTaskIncrementTick+0x174>)
 8000af4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000af6:	697b      	ldr	r3, [r7, #20]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000138 	.word	0x20000138
 8000b04:	20000114 	.word	0x20000114
 8000b08:	200000c8 	.word	0x200000c8
 8000b0c:	200000cc 	.word	0x200000cc
 8000b10:	20000128 	.word	0x20000128
 8000b14:	20000130 	.word	0x20000130
 8000b18:	20000118 	.word	0x20000118
 8000b1c:	2000003c 	.word	0x2000003c
 8000b20:	20000038 	.word	0x20000038
 8000b24:	20000124 	.word	0x20000124
 8000b28:	20000120 	.word	0x20000120

08000b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <vTaskSwitchContext+0xbc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <vTaskSwitchContext+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000b40:	e04d      	b.n	8000bde <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <vTaskSwitchContext+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <vTaskSwitchContext+0xc4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000b56:	7afb      	ldrb	r3, [r7, #11]
 8000b58:	f1c3 031f 	rsb	r3, r3, #31
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4925      	ldr	r1, [pc, #148]	; (8000bf4 <vTaskSwitchContext+0xc8>)
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10a      	bne.n	8000b88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	607b      	str	r3, [r7, #4]
    }
 8000b84:	bf00      	nop
 8000b86:	e7fe      	b.n	8000b86 <vTaskSwitchContext+0x5a>
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <vTaskSwitchContext+0xc8>)
 8000b94:	4413      	add	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d104      	bne.n	8000bb8 <vTaskSwitchContext+0x8c>
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <vTaskSwitchContext+0xcc>)
 8000bc0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <vTaskSwitchContext+0xcc>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <vTaskSwitchContext+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d102      	bne.n	8000bd4 <vTaskSwitchContext+0xa8>
 8000bce:	f002 f861 	bl	8002c94 <SEGGER_SYSVIEW_OnIdle>
}
 8000bd2:	e004      	b.n	8000bde <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <vTaskSwitchContext+0xcc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f8b9 	bl	8002d50 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000138 	.word	0x20000138
 8000bec:	20000124 	.word	0x20000124
 8000bf0:	20000118 	.word	0x20000118
 8000bf4:	2000003c 	.word	0x2000003c
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	20000134 	.word	0x20000134

08000c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000c08:	f000 f852 	bl	8000cb0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <prvIdleTask+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d9f9      	bls.n	8000c08 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <prvIdleTask+0x2c>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000c24:	e7f0      	b.n	8000c08 <prvIdleTask+0x8>
 8000c26:	bf00      	nop
 8000c28:	2000003c 	.word	0x2000003c
 8000c2c:	e000ed04 	.word	0xe000ed04

08000c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e00c      	b.n	8000c56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <prvInitialiseTaskLists+0x60>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fae2 	bl	8000214 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3301      	adds	r3, #1
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d9ef      	bls.n	8000c3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <prvInitialiseTaskLists+0x64>)
 8000c5e:	f7ff fad9 	bl	8000214 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <prvInitialiseTaskLists+0x68>)
 8000c64:	f7ff fad6 	bl	8000214 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <prvInitialiseTaskLists+0x6c>)
 8000c6a:	f7ff fad3 	bl	8000214 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000c6e:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <prvInitialiseTaskLists+0x70>)
 8000c70:	f7ff fad0 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <prvInitialiseTaskLists+0x74>)
 8000c76:	f7ff facd 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <prvInitialiseTaskLists+0x78>)
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <prvInitialiseTaskLists+0x64>)
 8000c7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <prvInitialiseTaskLists+0x7c>)
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <prvInitialiseTaskLists+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000003c 	.word	0x2000003c
 8000c94:	200000a0 	.word	0x200000a0
 8000c98:	200000b4 	.word	0x200000b4
 8000c9c:	200000d0 	.word	0x200000d0
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	200000fc 	.word	0x200000fc
 8000ca8:	200000c8 	.word	0x200000c8
 8000cac:	200000cc 	.word	0x200000cc

08000cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cb6:	e019      	b.n	8000cec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000cb8:	f000 fc24 	bl	8001504 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <prvCheckTasksWaitingTermination+0x50>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb2d 	bl	8000328 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <prvCheckTasksWaitingTermination+0x54>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <prvCheckTasksWaitingTermination+0x54>)
 8000cd6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <prvCheckTasksWaitingTermination+0x58>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <prvCheckTasksWaitingTermination+0x58>)
 8000ce0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000ce2:	f000 fc3f 	bl	8001564 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f810 	bl	8000d0c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <prvCheckTasksWaitingTermination+0x58>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1e1      	bne.n	8000cb8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000e4 	.word	0x200000e4
 8000d04:	20000110 	.word	0x20000110
 8000d08:	200000f8 	.word	0x200000f8

08000d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fdff 	bl	800191c <vPortFree>
                vPortFree( pxTCB );
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 fdfc 	bl	800191c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <prvResetNextTaskUnblockTime+0x30>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <prvResetNextTaskUnblockTime+0x34>)
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d42:	e005      	b.n	8000d50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <prvResetNextTaskUnblockTime+0x30>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <prvResetNextTaskUnblockTime+0x34>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200000c8 	.word	0x200000c8
 8000d60:	20000130 	.word	0x20000130

08000d64 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00a      	beq.n	8000d8e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8000d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7c:	f383 8811 	msr	BASEPRI, r3
 8000d80:	f3bf 8f6f 	isb	sy
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	613b      	str	r3, [r7, #16]
    }
 8000d8a:	bf00      	nop
 8000d8c:	e7fe      	b.n	8000d8c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8000d8e:	f000 fbb9 	bl	8001504 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000d92:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	3358      	adds	r3, #88	; 0x58
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d024      	beq.n	8000dee <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3314      	adds	r3, #20
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	6859      	ldr	r1, [r3, #4]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4019      	ands	r1, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3314      	adds	r3, #20
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	3358      	adds	r3, #88	; 0x58
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	6a38      	ldr	r0, [r7, #32]
 8000dda:	f000 f96d 	bl	80010b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <xTaskGenericNotifyWait+0x118>)
 8000de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000dee:	f000 fbb9 	bl	8001564 <vPortExitCritical>

        taskENTER_CRITICAL();
 8000df2:	f000 fb87 	bl	8001504 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	2040      	movs	r0, #64	; 0x40
 8000e04:	f001 fae8 	bl	80023d8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <xTaskGenericNotifyWait+0xbc>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3314      	adds	r3, #20
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	3358      	adds	r3, #88	; 0x58
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d002      	beq.n	8000e38 <xTaskGenericNotifyWait+0xd4>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e010      	b.n	8000e5a <xTaskGenericNotifyWait+0xf6>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3314      	adds	r3, #20
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4019      	ands	r1, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3314      	adds	r3, #20
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <xTaskGenericNotifyWait+0x114>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	3358      	adds	r3, #88	; 0x58
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8000e68:	f000 fb7c 	bl	8001564 <vPortExitCritical>

        return xReturn;
 8000e6c:	697b      	ldr	r3, [r7, #20]
    }
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000038 	.word	0x20000038
 8000e7c:	e000ed04 	.word	0xe000ed04

08000e80 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b092      	sub	sp, #72	; 0x48
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10a      	bne.n	8000eae <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8000e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9c:	f383 8811 	msr	BASEPRI, r3
 8000ea0:	f3bf 8f6f 	isb	sy
 8000ea4:	f3bf 8f4f 	dsb	sy
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000eaa:	bf00      	nop
 8000eac:	e7fe      	b.n	8000eac <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00a      	beq.n	8000eca <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8000eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000ec6:	bf00      	nop
 8000ec8:	e7fe      	b.n	8000ec8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000eca:	f000 fc07 	bl	80016dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8000ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8000ee8:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8000eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d007      	beq.n	8000f04 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8000ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3314      	adds	r3, #20
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f02:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8000f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	3358      	adds	r3, #88	; 0x58
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8000f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	3358      	adds	r3, #88	; 0x58
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d841      	bhi.n	8000fa8 <xTaskGenericNotifyFromISR+0x128>
 8000f24:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <xTaskGenericNotifyFromISR+0xac>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000fc7 	.word	0x08000fc7
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f5f 	.word	0x08000f5f
 8000f38:	08000f7b 	.word	0x08000f7b
 8000f3c:	08000f8b 	.word	0x08000f8b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8000f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3314      	adds	r3, #20
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3314      	adds	r3, #20
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	605a      	str	r2, [r3, #4]
                    break;
 8000f5c:	e036      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8000f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3314      	adds	r3, #20
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3314      	adds	r3, #20
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	605a      	str	r2, [r3, #4]
                    break;
 8000f78:	e028      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8000f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	3314      	adds	r3, #20
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	605a      	str	r2, [r3, #4]
                    break;
 8000f88:	e020      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8000f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8000f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3314      	adds	r3, #20
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8000fa0:	e014      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8000fa6:	e011      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <xTaskGenericNotifyFromISR+0x21c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	61fb      	str	r3, [r7, #28]
    }
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8000fc6:	bf00      	nop
 8000fc8:	e000      	b.n	8000fcc <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8000fca:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8000fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 ffa2 	bl	8002f18 <SEGGER_SYSVIEW_ShrinkId>
 8000fd4:	78f9      	ldrb	r1, [r7, #3]
 8000fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	203f      	movs	r0, #63	; 0x3f
 8000fe6:	f001 fa89 	bl	80024fc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8000fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d149      	bne.n	8001086 <xTaskGenericNotifyFromISR+0x206>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8000ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00a      	beq.n	8001010 <xTaskGenericNotifyFromISR+0x190>
        __asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61bb      	str	r3, [r7, #24]
    }
 800100c:	bf00      	nop
 800100e:	e7fe      	b.n	800100e <xTaskGenericNotifyFromISR+0x18e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <xTaskGenericNotifyFromISR+0x220>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d120      	bne.n	800105a <xTaskGenericNotifyFromISR+0x1da>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101a:	3304      	adds	r3, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f983 	bl	8000328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fed5 	bl	8002dd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <xTaskGenericNotifyFromISR+0x224>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <xTaskGenericNotifyFromISR+0x224>)
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <xTaskGenericNotifyFromISR+0x228>)
 800104a:	441a      	add	r2, r3
 800104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104e:	3304      	adds	r3, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4610      	mov	r0, r2
 8001054:	f7ff f90b 	bl	800026e <vListInsertEnd>
 8001058:	e005      	b.n	8001066 <xTaskGenericNotifyFromISR+0x1e6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800105c:	3318      	adds	r3, #24
 800105e:	4619      	mov	r1, r3
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <xTaskGenericNotifyFromISR+0x22c>)
 8001062:	f7ff f904 	bl	800026e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <xTaskGenericNotifyFromISR+0x230>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	429a      	cmp	r2, r3
 8001072:	d908      	bls.n	8001086 <xTaskGenericNotifyFromISR+0x206>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8001074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <xTaskGenericNotifyFromISR+0x200>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800107a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <xTaskGenericNotifyFromISR+0x234>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001088:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001090:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8001094:	4618      	mov	r0, r3
 8001096:	3740      	adds	r7, #64	; 0x40
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000114 	.word	0x20000114
 80010a0:	20000138 	.word	0x20000138
 80010a4:	20000118 	.word	0x20000118
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	200000d0 	.word	0x200000d0
 80010b0:	20000038 	.word	0x20000038
 80010b4:	20000124 	.word	0x20000124

080010b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <prvAddCurrentTaskToDelayedList+0xd4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3304      	adds	r3, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f92a 	bl	8000328 <uxListRemove>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2201      	movs	r2, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4013      	ands	r3, r2
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d110      	bne.n	800111c <prvAddCurrentTaskToDelayedList+0x64>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00d      	beq.n	800111c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	211b      	movs	r1, #27
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fea6 	bl	8002e58 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001116:	f7ff f8aa 	bl	800026e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800111a:	e032      	b.n	8001182 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d20f      	bcs.n	8001154 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2104      	movs	r1, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fe8c 	bl	8002e58 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff f8b2 	bl	80002b6 <vListInsert>
}
 8001152:	e016      	b.n	8001182 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fe7c 	bl	8002e58 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3304      	adds	r3, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4610      	mov	r0, r2
 800116e:	f7ff f8a2 	bl	80002b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	429a      	cmp	r2, r3
 800117a:	d202      	bcs.n	8001182 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <prvAddCurrentTaskToDelayedList+0xec>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000114 	.word	0x20000114
 8001190:	20000038 	.word	0x20000038
 8001194:	20000118 	.word	0x20000118
 8001198:	200000fc 	.word	0x200000fc
 800119c:	200000cc 	.word	0x200000cc
 80011a0:	200000c8 	.word	0x200000c8
 80011a4:	20000130 	.word	0x20000130

080011a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3b04      	subs	r3, #4
 80011b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b04      	subs	r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f023 0201 	bic.w	r2, r3, #1
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b04      	subs	r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <pxPortInitialiseStack+0x64>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b14      	subs	r3, #20
 80011e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3b04      	subs	r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f06f 0202 	mvn.w	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3b20      	subs	r3, #32
 80011fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	08001211 	.word	0x08001211

08001210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <prvTaskExitError+0x54>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001222:	d00a      	beq.n	800123a <prvTaskExitError+0x2a>
        __asm volatile
 8001224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001228:	f383 8811 	msr	BASEPRI, r3
 800122c:	f3bf 8f6f 	isb	sy
 8001230:	f3bf 8f4f 	dsb	sy
 8001234:	60fb      	str	r3, [r7, #12]
    }
 8001236:	bf00      	nop
 8001238:	e7fe      	b.n	8001238 <prvTaskExitError+0x28>
        __asm volatile
 800123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123e:	f383 8811 	msr	BASEPRI, r3
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	f3bf 8f4f 	dsb	sy
 800124a:	60bb      	str	r3, [r7, #8]
    }
 800124c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800124e:	bf00      	nop
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0fc      	beq.n	8001250 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	2000000c 	.word	0x2000000c
	...

08001270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <pxCurrentTCBConst2>)
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	6808      	ldr	r0, [r1, #0]
 8001276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127a:	f380 8809 	msr	PSP, r0
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f380 8811 	msr	BASEPRI, r0
 800128a:	4770      	bx	lr
 800128c:	f3af 8000 	nop.w

08001290 <pxCurrentTCBConst2>:
 8001290:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop

08001298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <prvPortStartFirstTask+0x24>)
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f380 8808 	msr	MSP, r0
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f380 8814 	msr	CONTROL, r0
 80012aa:	b662      	cpsie	i
 80012ac:	b661      	cpsie	f
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	df00      	svc	0
 80012b8:	bf00      	nop
 80012ba:	0000      	.short	0x0000
 80012bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop

080012c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <xPortStartScheduler+0x120>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <xPortStartScheduler+0x124>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10a      	bne.n	80012ea <xPortStartScheduler+0x26>
        __asm volatile
 80012d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d8:	f383 8811 	msr	BASEPRI, r3
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f3bf 8f4f 	dsb	sy
 80012e4:	613b      	str	r3, [r7, #16]
    }
 80012e6:	bf00      	nop
 80012e8:	e7fe      	b.n	80012e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <xPortStartScheduler+0x120>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <xPortStartScheduler+0x128>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10a      	bne.n	800130a <xPortStartScheduler+0x46>
        __asm volatile
 80012f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	60fb      	str	r3, [r7, #12]
    }
 8001306:	bf00      	nop
 8001308:	e7fe      	b.n	8001308 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <xPortStartScheduler+0x12c>)
 800130c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <xPortStartScheduler+0x130>)
 8001330:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <xPortStartScheduler+0x134>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001338:	e009      	b.n	800134e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <xPortStartScheduler+0x134>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3b01      	subs	r3, #1
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <xPortStartScheduler+0x134>)
 8001342:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	2b80      	cmp	r3, #128	; 0x80
 8001358:	d0ef      	beq.n	800133a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <xPortStartScheduler+0x134>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00a      	beq.n	800137c <xPortStartScheduler+0xb8>
        __asm volatile
 8001366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136a:	f383 8811 	msr	BASEPRI, r3
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f3bf 8f4f 	dsb	sy
 8001376:	60bb      	str	r3, [r7, #8]
    }
 8001378:	bf00      	nop
 800137a:	e7fe      	b.n	800137a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <xPortStartScheduler+0x134>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <xPortStartScheduler+0x134>)
 8001384:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <xPortStartScheduler+0x134>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800138e:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <xPortStartScheduler+0x134>)
 8001390:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <xPortStartScheduler+0x138>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <xPortStartScheduler+0x138>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <xPortStartScheduler+0x138>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <xPortStartScheduler+0x138>)
 80013ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80013b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80013b2:	f000 f963 	bl	800167c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <xPortStartScheduler+0x13c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80013bc:	f000 f982 	bl	80016c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <xPortStartScheduler+0x140>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <xPortStartScheduler+0x140>)
 80013c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80013cc:	f7ff ff64 	bl	8001298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80013d0:	f7ff fbac 	bl	8000b2c <vTaskSwitchContext>
    prvTaskExitError();
 80013d4:	f7ff ff1c 	bl	8001210 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	410fc271 	.word	0x410fc271
 80013ec:	410fc270 	.word	0x410fc270
 80013f0:	e000e400 	.word	0xe000e400
 80013f4:	2000013c 	.word	0x2000013c
 80013f8:	20000140 	.word	0x20000140
 80013fc:	e000ed20 	.word	0xe000ed20
 8001400:	2000000c 	.word	0x2000000c
 8001404:	e000ef34 	.word	0xe000ef34

08001408 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <vInitPrioGroupValue+0xe4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a37      	ldr	r2, [pc, #220]	; (80014f0 <vInitPrioGroupValue+0xe8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d10a      	bne.n	800142e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141c:	f383 8811 	msr	BASEPRI, r3
 8001420:	f3bf 8f6f 	isb	sy
 8001424:	f3bf 8f4f 	dsb	sy
 8001428:	613b      	str	r3, [r7, #16]
    }
 800142a:	bf00      	nop
 800142c:	e7fe      	b.n	800142c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <vInitPrioGroupValue+0xe4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a30      	ldr	r2, [pc, #192]	; (80014f4 <vInitPrioGroupValue+0xec>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d10a      	bne.n	800144e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143c:	f383 8811 	msr	BASEPRI, r3
 8001440:	f3bf 8f6f 	isb	sy
 8001444:	f3bf 8f4f 	dsb	sy
 8001448:	60fb      	str	r3, [r7, #12]
    }
 800144a:	bf00      	nop
 800144c:	e7fe      	b.n	800144c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <vInitPrioGroupValue+0xf0>)
 8001450:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <vInitPrioGroupValue+0xf4>)
 8001474:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <vInitPrioGroupValue+0xf8>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800147c:	e009      	b.n	8001492 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <vInitPrioGroupValue+0xf8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3b01      	subs	r3, #1
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <vInitPrioGroupValue+0xf8>)
 8001486:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	2b80      	cmp	r3, #128	; 0x80
 800149c:	d0ef      	beq.n	800147e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <vInitPrioGroupValue+0xf8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00a      	beq.n	80014c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80014aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	60bb      	str	r3, [r7, #8]
    }
 80014bc:	bf00      	nop
 80014be:	e7fe      	b.n	80014be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <vInitPrioGroupValue+0xf8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <vInitPrioGroupValue+0xf8>)
 80014c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <vInitPrioGroupValue+0xf8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <vInitPrioGroupValue+0xf8>)
 80014d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	410fc271 	.word	0x410fc271
 80014f4:	410fc270 	.word	0x410fc270
 80014f8:	e000e400 	.word	0xe000e400
 80014fc:	2000013c 	.word	0x2000013c
 8001500:	20000140 	.word	0x20000140

08001504 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
        __asm volatile
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	607b      	str	r3, [r7, #4]
    }
 800151c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <vPortEnterCritical+0x58>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <vPortEnterCritical+0x58>)
 8001526:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <vPortEnterCritical+0x58>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10f      	bne.n	8001550 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <vPortEnterCritical+0x5c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <vPortEnterCritical+0x4c>
        __asm volatile
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	603b      	str	r3, [r7, #0]
    }
 800154c:	bf00      	nop
 800154e:	e7fe      	b.n	800154e <vPortEnterCritical+0x4a>
    }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000000c 	.word	0x2000000c
 8001560:	e000ed04 	.word	0xe000ed04

08001564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <vPortExitCritical+0x50>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <vPortExitCritical+0x24>
        __asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	607b      	str	r3, [r7, #4]
    }
 8001584:	bf00      	nop
 8001586:	e7fe      	b.n	8001586 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <vPortExitCritical+0x50>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <vPortExitCritical+0x50>)
 8001590:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <vPortExitCritical+0x50>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d105      	bne.n	80015a6 <vPortExitCritical+0x42>
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f383 8811 	msr	BASEPRI, r3
    }
 80015a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c
	...

080015c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80015c0:	f3ef 8009 	mrs	r0, PSP
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <pxCurrentTCBConst>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f01e 0f10 	tst.w	lr, #16
 80015d0:	bf08      	it	eq
 80015d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015da:	6010      	str	r0, [r2, #0]
 80015dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015e4:	f380 8811 	msr	BASEPRI, r0
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f7ff fa9c 	bl	8000b2c <vTaskSwitchContext>
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f380 8811 	msr	BASEPRI, r0
 80015fc:	bc09      	pop	{r0, r3}
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	6808      	ldr	r0, [r1, #0]
 8001602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001606:	f01e 0f10 	tst.w	lr, #16
 800160a:	bf08      	it	eq
 800160c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001610:	f380 8809 	msr	PSP, r0
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w

08001620 <pxCurrentTCBConst>:
 8001620:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop

08001628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
        __asm volatile
 800162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001632:	f383 8811 	msr	BASEPRI, r3
 8001636:	f3bf 8f6f 	isb	sy
 800163a:	f3bf 8f4f 	dsb	sy
 800163e:	607b      	str	r3, [r7, #4]
    }
 8001640:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001642:	f001 faad 	bl	8002ba0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001646:	f7ff f9b5 	bl	80009b4 <xTaskIncrementTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001650:	f001 fb04 	bl	8002c5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <SysTick_Handler+0x50>)
 8001656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e001      	b.n	8001662 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800165e:	f001 fae1 	bl	8002c24 <SEGGER_SYSVIEW_RecordExitISR>
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f383 8811 	msr	BASEPRI, r3
    }
 800166c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000ed04 	.word	0xe000ed04

0800167c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <vPortSetupTimerInterrupt+0x34>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <vPortSetupTimerInterrupt+0x38>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <vPortSetupTimerInterrupt+0x3c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <vPortSetupTimerInterrupt+0x40>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <vPortSetupTimerInterrupt+0x44>)
 800169a:	3b01      	subs	r3, #1
 800169c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <vPortSetupTimerInterrupt+0x34>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010
 80016b4:	e000e018 	.word	0xe000e018
 80016b8:	20000010 	.word	0x20000010
 80016bc:	10624dd3 	.word	0x10624dd3
 80016c0:	e000e014 	.word	0xe000e014

080016c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80016c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016d4 <vPortEnableVFP+0x10>
 80016c8:	6801      	ldr	r1, [r0, #0]
 80016ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016ce:	6001      	str	r1, [r0, #0]
 80016d0:	4770      	bx	lr
 80016d2:	0000      	.short	0x0000
 80016d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop

080016dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80016e2:	f3ef 8305 	mrs	r3, IPSR
 80016e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d914      	bls.n	8001718 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <vPortValidateInterruptPriority+0x70>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <vPortValidateInterruptPriority+0x74>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	7afa      	ldrb	r2, [r7, #11]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d20a      	bcs.n	8001718 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	607b      	str	r3, [r7, #4]
    }
 8001714:	bf00      	nop
 8001716:	e7fe      	b.n	8001716 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <vPortValidateInterruptPriority+0x78>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <vPortValidateInterruptPriority+0x7c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d90a      	bls.n	800173e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172c:	f383 8811 	msr	BASEPRI, r3
 8001730:	f3bf 8f6f 	isb	sy
 8001734:	f3bf 8f4f 	dsb	sy
 8001738:	603b      	str	r3, [r7, #0]
    }
 800173a:	bf00      	nop
 800173c:	e7fe      	b.n	800173c <vPortValidateInterruptPriority+0x60>
    }
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e3f0 	.word	0xe000e3f0
 8001750:	2000013c 	.word	0x2000013c
 8001754:	e000ed0c 	.word	0xe000ed0c
 8001758:	20000140 	.word	0x20000140

0800175c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001768:	f7ff f876 	bl	8000858 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <pvPortMalloc+0x1a8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001774:	f000 f934 	bl	80019e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001778:	4b63      	ldr	r3, [pc, #396]	; (8001908 <pvPortMalloc+0x1ac>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 80a7 	bne.w	80018d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02d      	beq.n	80017e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800178c:	2208      	movs	r2, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d227      	bcs.n	80017e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001798:	2208      	movs	r2, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d021      	beq.n	80017ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f023 0307 	bic.w	r3, r3, #7
 80017b0:	3308      	adds	r3, #8
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d214      	bcs.n	80017e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	3308      	adds	r3, #8
 80017c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d010      	beq.n	80017ee <pvPortMalloc+0x92>
        __asm volatile
 80017cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d0:	f383 8811 	msr	BASEPRI, r3
 80017d4:	f3bf 8f6f 	isb	sy
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	617b      	str	r3, [r7, #20]
    }
 80017de:	bf00      	nop
 80017e0:	e7fe      	b.n	80017e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017e6:	e002      	b.n	80017ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e000      	b.n	80017f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06e      	beq.n	80018d4 <pvPortMalloc+0x178>
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <pvPortMalloc+0x1b0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d869      	bhi.n	80018d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001800:	4b43      	ldr	r3, [pc, #268]	; (8001910 <pvPortMalloc+0x1b4>)
 8001802:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <pvPortMalloc+0x1b4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800180a:	e004      	b.n	8001816 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d903      	bls.n	8001828 <pvPortMalloc+0xcc>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f1      	bne.n	800180c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <pvPortMalloc+0x1a8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	429a      	cmp	r2, r3
 8001830:	d050      	beq.n	80018d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	2308      	movs	r3, #8
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	429a      	cmp	r2, r3
 8001852:	d91f      	bls.n	8001894 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <pvPortMalloc+0x120>
        __asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	f383 8811 	msr	BASEPRI, r3
 800186e:	f3bf 8f6f 	isb	sy
 8001872:	f3bf 8f4f 	dsb	sy
 8001876:	613b      	str	r3, [r7, #16]
    }
 8001878:	bf00      	nop
 800187a:	e7fe      	b.n	800187a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800188e:	69b8      	ldr	r0, [r7, #24]
 8001890:	f000 f908 	bl	8001aa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <pvPortMalloc+0x1b0>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <pvPortMalloc+0x1b0>)
 80018a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <pvPortMalloc+0x1b0>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <pvPortMalloc+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d203      	bcs.n	80018b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <pvPortMalloc+0x1b0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <pvPortMalloc+0x1b8>)
 80018b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <pvPortMalloc+0x1ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	431a      	orrs	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <pvPortMalloc+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <pvPortMalloc+0x1bc>)
 80018d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018d4:	f7fe ffce 	bl	8000874 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <pvPortMalloc+0x19c>
        __asm volatile
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60fb      	str	r3, [r7, #12]
    }
 80018f4:	bf00      	nop
 80018f6:	e7fe      	b.n	80018f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80018f8:	69fb      	ldr	r3, [r7, #28]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000154c 	.word	0x2000154c
 8001908:	20001560 	.word	0x20001560
 800190c:	20001550 	.word	0x20001550
 8001910:	20001544 	.word	0x20001544
 8001914:	20001554 	.word	0x20001554
 8001918:	20001558 	.word	0x20001558

0800191c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d04d      	beq.n	80019ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800192e:	2308      	movs	r3, #8
 8001930:	425b      	negs	r3, r3
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <vPortFree+0xb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <vPortFree+0x44>
        __asm volatile
 800194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	60fb      	str	r3, [r7, #12]
    }
 800195c:	bf00      	nop
 800195e:	e7fe      	b.n	800195e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <vPortFree+0x62>
        __asm volatile
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	60bb      	str	r3, [r7, #8]
    }
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <vPortFree+0xb8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01e      	beq.n	80019ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11a      	bne.n	80019ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <vPortFree+0xb8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80019a4:	f7fe ff58 	bl	8000858 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <vPortFree+0xbc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <vPortFree+0xbc>)
 80019b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019b6:	6938      	ldr	r0, [r7, #16]
 80019b8:	f000 f874 	bl	8001aa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <vPortFree+0xc0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <vPortFree+0xc0>)
 80019c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019c6:	f7fe ff55 	bl	8000874 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20001560 	.word	0x20001560
 80019d8:	20001550 	.word	0x20001550
 80019dc:	2000155c 	.word	0x2000155c

080019e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <prvHeapInit+0xac>)
 80019ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3307      	adds	r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <prvHeapInit+0xac>)
 8001a10:	4413      	add	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <prvHeapInit+0xb0>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <prvHeapInit+0xb0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0307 	bic.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <prvHeapInit+0xb4>)
 8001a40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <prvHeapInit+0xb4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <prvHeapInit+0xb4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <prvHeapInit+0xb4>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <prvHeapInit+0xb8>)
 8001a6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <prvHeapInit+0xbc>)
 8001a76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <prvHeapInit+0xc0>)
 8001a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20000144 	.word	0x20000144
 8001a90:	20001544 	.word	0x20001544
 8001a94:	2000154c 	.word	0x2000154c
 8001a98:	20001554 	.word	0x20001554
 8001a9c:	20001550 	.word	0x20001550
 8001aa0:	20001560 	.word	0x20001560

08001aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <prvInsertBlockIntoFreeList+0xac>)
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e002      	b.n	8001ab8 <prvInsertBlockIntoFreeList+0x14>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d8f7      	bhi.n	8001ab2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d108      	bne.n	8001ae6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	441a      	add	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	441a      	add	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d118      	bne.n	8001b2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <prvInsertBlockIntoFreeList+0xb0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d00d      	beq.n	8001b22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e008      	b.n	8001b34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <prvInsertBlockIntoFreeList+0xb0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e003      	b.n	8001b34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d002      	beq.n	8001b42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20001544 	.word	0x20001544
 8001b54:	2000154c 	.word	0x2000154c

08001b58 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001b66:	2205      	movs	r2, #5
 8001b68:	492b      	ldr	r1, [pc, #172]	; (8001c18 <SYSVIEW_AddTask+0xc0>)
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f003 ff7e 	bl	8005a6c <memcmp>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04b      	beq.n	8001c0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d903      	bls.n	8001b86 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001b7e:	4828      	ldr	r0, [pc, #160]	; (8001c20 <SYSVIEW_AddTask+0xc8>)
 8001b80:	f001 fab6 	bl	80030f0 <SEGGER_SYSVIEW_Warn>
    return;
 8001b84:	e044      	b.n	8001c10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4926      	ldr	r1, [pc, #152]	; (8001c24 <SYSVIEW_AddTask+0xcc>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4921      	ldr	r1, [pc, #132]	; (8001c24 <SYSVIEW_AddTask+0xcc>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3304      	adds	r3, #4
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <SYSVIEW_AddTask+0xcc>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4916      	ldr	r1, [pc, #88]	; (8001c24 <SYSVIEW_AddTask+0xcc>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4910      	ldr	r1, [pc, #64]	; (8001c24 <SYSVIEW_AddTask+0xcc>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3310      	adds	r3, #16
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <SYSVIEW_AddTask+0xc4>)
 8001bfa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f80e 	bl	8001c28 <SYSVIEW_SendTaskInfo>
 8001c0c:	e000      	b.n	8001c10 <SYSVIEW_AddTask+0xb8>
    return;
 8001c0e:	bf00      	nop

}
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08005ad8 	.word	0x08005ad8
 8001c1c:	20001604 	.word	0x20001604
 8001c20:	08005ae0 	.word	0x08005ae0
 8001c24:	20001564 	.word	0x20001564

08001c28 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2214      	movs	r2, #20
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 ff32 	bl	8005aa8 <memset>
  TaskInfo.TaskID     = TaskID;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fe75 	bl	800294c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <_DoInit+0x98>)
 8001c74:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <_DoInit+0x9c>)
 8001c86:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <_DoInit+0xa0>)
 8001c8c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c94:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <_DoInit+0x9c>)
 8001cac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <_DoInit+0xa4>)
 8001cb2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <_DoInit+0xa8>)
 8001cd2:	6810      	ldr	r0, [r2, #0]
 8001cd4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001cd6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <_DoInit+0xac>)
 8001cde:	6810      	ldr	r0, [r2, #0]
 8001ce0:	6018      	str	r0, [r3, #0]
 8001ce2:	8891      	ldrh	r1, [r2, #4]
 8001ce4:	7992      	ldrb	r2, [r2, #6]
 8001ce6:	8099      	strh	r1, [r3, #4]
 8001ce8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001cea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001cf4:	f3bf 8f5f 	dmb	sy
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20001608 	.word	0x20001608
 8001d08:	08005b30 	.word	0x08005b30
 8001d0c:	200016b0 	.word	0x200016b0
 8001d10:	20001ab0 	.word	0x20001ab0
 8001d14:	08005b3c 	.word	0x08005b3c
 8001d18:	08005b40 	.word	0x08005b40

08001d1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <SEGGER_RTT_ReadNoLock+0x1e>
 8001d36:	f7ff ff99 	bl	8001c6c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	3360      	adds	r3, #96	; 0x60
 8001d46:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d92b      	bls.n	8001dc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4293      	cmp	r3, r2
 8001d78:	bf28      	it	cs
 8001d7a:	4613      	movcs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	4413      	add	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6939      	ldr	r1, [r7, #16]
 8001d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d8e:	f003 fe7d 	bl	8005a8c <memcpy>
    NumBytesRead += NumBytesRem;
 8001d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4413      	add	r3, r2
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	4413      	add	r3, r2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d101      	bne.n	8001dc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bf28      	it	cs
 8001dd0:	4613      	movcs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	4413      	add	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dea:	f003 fe4f 	bl	8005a8c <memcpy>
    NumBytesRead += NumBytesRem;
 8001dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20001608 	.word	0x20001608

08001e28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001e38:	e002      	b.n	8001e40 <_EncodeStr+0x18>
    Len++;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f6      	bne.n	8001e3a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d901      	bls.n	8001e58 <_EncodeStr+0x30>
    Len = Limit;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8001e5c:	d806      	bhi.n	8001e6c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	60fa      	str	r2, [r7, #12]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e011      	b.n	8001e90 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60fa      	str	r2, [r7, #12]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60fa      	str	r2, [r7, #12]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	0a19      	lsrs	r1, r3, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	b2ca      	uxtb	r2, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001e94:	e00a      	b.n	8001eac <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	1c53      	adds	r3, r2, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	60f9      	str	r1, [r7, #12]
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]
    n++;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3f0      	bcc.n	8001e96 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <_HandleIncomingPacket+0xe0>)
 8001ee4:	7e1b      	ldrb	r3, [r3, #24]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7ff ff15 	bl	8001d1c <SEGGER_RTT_ReadNoLock>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	dd54      	ble.n	8001fa6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d032      	beq.n	8001f68 <_HandleIncomingPacket+0x8c>
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	dc42      	bgt.n	8001f8c <_HandleIncomingPacket+0xb0>
 8001f06:	2b07      	cmp	r3, #7
 8001f08:	dc16      	bgt.n	8001f38 <_HandleIncomingPacket+0x5c>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dd3e      	ble.n	8001f8c <_HandleIncomingPacket+0xb0>
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d83b      	bhi.n	8001f8c <_HandleIncomingPacket+0xb0>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <_HandleIncomingPacket+0x40>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f3f 	.word	0x08001f3f
 8001f20:	08001f45 	.word	0x08001f45
 8001f24:	08001f4b 	.word	0x08001f4b
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	08001f57 	.word	0x08001f57
 8001f30:	08001f5d 	.word	0x08001f5d
 8001f34:	08001f63 	.word	0x08001f63
 8001f38:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3a:	d036      	beq.n	8001faa <_HandleIncomingPacket+0xce>
 8001f3c:	e026      	b.n	8001f8c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001f3e:	f000 fb8b 	bl	8002658 <SEGGER_SYSVIEW_Start>
      break;
 8001f42:	e037      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001f44:	f000 fc42 	bl	80027cc <SEGGER_SYSVIEW_Stop>
      break;
 8001f48:	e034      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001f4a:	f000 fdf7 	bl	8002b3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001f4e:	e031      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001f50:	f000 fde0 	bl	8002b14 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001f54:	e02e      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001f56:	f000 fc5f 	bl	8002818 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001f5a:	e02b      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001f5c:	f001 f88a 	bl	8003074 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001f60:	e028      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001f62:	f001 f869 	bl	8003038 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001f66:	e025      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <_HandleIncomingPacket+0xe0>)
 8001f6a:	7e1b      	ldrb	r3, [r3, #24]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	1cfb      	adds	r3, r7, #3
 8001f70:	2201      	movs	r2, #1
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7ff fed2 	bl	8001d1c <SEGGER_RTT_ReadNoLock>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dd15      	ble.n	8001fae <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 ffd7 	bl	8002f38 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001f8a:	e010      	b.n	8001fae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0e      	bge.n	8001fb2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <_HandleIncomingPacket+0xe0>)
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	1cfb      	adds	r3, r7, #3
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7ff febc 	bl	8001d1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001fa4:	e005      	b.n	8001fb2 <_HandleIncomingPacket+0xd6>
    }
  }
 8001fa6:	bf00      	nop
 8001fa8:	e004      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e002      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <_HandleIncomingPacket+0xd8>
      break;
 8001fb2:	bf00      	nop
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20001ac0 	.word	0x20001ac0

08001fc0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd4:	4b31      	ldr	r3, [pc, #196]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fda:	e00b      	b.n	8001ff4 <_TrySendOverflowPacket+0x34>
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	09db      	lsrs	r3, r3, #7
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff8:	d8f0      	bhi.n	8001fdc <_TrySendOverflowPacket+0x1c>
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <_TrySendOverflowPacket+0xe0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	e00b      	b.n	800203c <_TrySendOverflowPacket+0x7c>
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	1c59      	adds	r1, r3, #1
 800202c:	6279      	str	r1, [r7, #36]	; 0x24
 800202e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	09db      	lsrs	r3, r3, #7
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	2b7f      	cmp	r3, #127	; 0x7f
 8002040:	d8f0      	bhi.n	8002024 <_TrySendOverflowPacket+0x64>
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	627a      	str	r2, [r7, #36]	; 0x24
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	4618      	mov	r0, r3
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	461a      	mov	r2, r3
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe f88c 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002068:	4603      	mov	r3, r0
 800206a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_TrySendOverflowPacket+0xdc>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	3b01      	subs	r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e004      	b.n	8002090 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <_TrySendOverflowPacket+0xdc>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <_TrySendOverflowPacket+0xdc>)
 800208e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002090:	693b      	ldr	r3, [r7, #16]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20001ac0 	.word	0x20001ac0
 80020a0:	e0001004 	.word	0xe0001004

080020a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80020b0:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <_SendPacket+0x1c0>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d010      	beq.n	80020da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <_SendPacket+0x1c0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a3 	beq.w	8002208 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <_SendPacket+0x1c0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d109      	bne.n	80020de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80020ca:	f7ff ff79 	bl	8001fc0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <_SendPacket+0x1c0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 809a 	bne.w	800220c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80020d8:	e001      	b.n	80020de <_SendPacket+0x3a>
    goto Send;
 80020da:	bf00      	nop
 80020dc:	e000      	b.n	80020e0 <_SendPacket+0x3c>
Send:
 80020de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b1f      	cmp	r3, #31
 80020e4:	d809      	bhi.n	80020fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <_SendPacket+0x1c0>)
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 808b 	bne.w	8002210 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b17      	cmp	r3, #23
 80020fe:	d807      	bhi.n	8002110 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3b01      	subs	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e03d      	b.n	800218c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b7f      	cmp	r3, #127	; 0x7f
 800211c:	d912      	bls.n	8002144 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	09da      	lsrs	r2, r3, #7
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	3a01      	subs	r2, #1
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e006      	b.n	8002152 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3b01      	subs	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b7f      	cmp	r3, #127	; 0x7f
 8002156:	d912      	bls.n	800217e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	09da      	lsrs	r2, r3, #7
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	3a01      	subs	r2, #1
 8002170:	60fa      	str	r2, [r7, #12]
 8002172:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e006      	b.n	800218c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3b01      	subs	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <_SendPacket+0x1c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <_SendPacket+0x1c0>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	e00b      	b.n	80021be <_SendPacket+0x11a>
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	1c59      	adds	r1, r3, #1
 80021ae:	6279      	str	r1, [r7, #36]	; 0x24
 80021b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	09db      	lsrs	r3, r3, #7
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	2b7f      	cmp	r3, #127	; 0x7f
 80021c2:	d8f0      	bhi.n	80021a6 <_SendPacket+0x102>
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	627a      	str	r2, [r7, #36]	; 0x24
 80021ca:	6a3a      	ldr	r2, [r7, #32]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <_SendPacket+0x1c0>)
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	4618      	mov	r0, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	f7fd ffcc 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80021e8:	4603      	mov	r3, r0
 80021ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <_SendPacket+0x1c0>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	60d3      	str	r3, [r2, #12]
 80021f8:	e00b      	b.n	8002212 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <_SendPacket+0x1c0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <_SendPacket+0x1c0>)
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e004      	b.n	8002212 <_SendPacket+0x16e>
    goto SendDone;
 8002208:	bf00      	nop
 800220a:	e002      	b.n	8002212 <_SendPacket+0x16e>
      goto SendDone;
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <_SendPacket+0x16e>
      goto SendDone;
 8002210:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <_SendPacket+0x1c0>)
 8002214:	7e1b      	ldrb	r3, [r3, #24]
 8002216:	4619      	mov	r1, r3
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_SendPacket+0x1c8>)
 800221a:	460b      	mov	r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	440b      	add	r3, r1
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	336c      	adds	r3, #108	; 0x6c
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <_SendPacket+0x1c0>)
 800222a:	7e1b      	ldrb	r3, [r3, #24]
 800222c:	4618      	mov	r0, r3
 800222e:	490f      	ldr	r1, [pc, #60]	; (800226c <_SendPacket+0x1c8>)
 8002230:	4603      	mov	r3, r0
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4403      	add	r3, r0
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3370      	adds	r3, #112	; 0x70
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d00b      	beq.n	800225a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_SendPacket+0x1c0>)
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <_SendPacket+0x1c0>)
 800224c:	2201      	movs	r2, #1
 800224e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002250:	f7ff fe44 	bl	8001edc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <_SendPacket+0x1c0>)
 8002256:	2200      	movs	r2, #0
 8002258:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20001ac0 	.word	0x20001ac0
 8002268:	e0001004 	.word	0xe0001004
 800226c:	20001608 	.word	0x20001608

08002270 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002278:	f3ef 8311 	mrs	r3, BASEPRI
 800227c:	f04f 0120 	mov.w	r1, #32
 8002280:	f381 8811 	msr	BASEPRI, r1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002288:	f7ff fe1b 	bl	8001ec2 <_PreparePacket>
 800228c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f7ff ff06 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f383 8811 	msr	BASEPRI, r3
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20001af0 	.word	0x20001af0

080022ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80022b6:	f3ef 8311 	mrs	r3, BASEPRI
 80022ba:	f04f 0120 	mov.w	r1, #32
 80022be:	f381 8811 	msr	BASEPRI, r1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80022c6:	f7ff fdfc 	bl	8001ec2 <_PreparePacket>
 80022ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e00b      	b.n	80022f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1c59      	adds	r1, r3, #1
 80022e2:	61f9      	str	r1, [r7, #28]
 80022e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	09db      	lsrs	r3, r3, #7
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b7f      	cmp	r3, #127	; 0x7f
 80022f6:	d8f0      	bhi.n	80022da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	6938      	ldr	r0, [r7, #16]
 800230e:	f7ff fec9 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f383 8811 	msr	BASEPRI, r3
}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20001af0 	.word	0x20001af0

08002324 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002330:	f3ef 8311 	mrs	r3, BASEPRI
 8002334:	f04f 0120 	mov.w	r1, #32
 8002338:	f381 8811 	msr	BASEPRI, r1
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	4825      	ldr	r0, [pc, #148]	; (80023d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002340:	f7ff fdbf 	bl	8001ec2 <_PreparePacket>
 8002344:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
 8002352:	e00b      	b.n	800236c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	b2da      	uxtb	r2, r3
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	1c59      	adds	r1, r3, #1
 800235c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800235e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	09db      	lsrs	r3, r3, #7
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	2b7f      	cmp	r3, #127	; 0x7f
 8002370:	d8f0      	bhi.n	8002354 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	e00b      	b.n	80023a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	6279      	str	r1, [r7, #36]	; 0x24
 8002396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	09db      	lsrs	r3, r3, #7
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b7f      	cmp	r3, #127	; 0x7f
 80023a8:	d8f0      	bhi.n	800238c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	627a      	str	r2, [r7, #36]	; 0x24
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	69b8      	ldr	r0, [r7, #24]
 80023c0:	f7ff fe70 	bl	80020a4 <_SendPacket>
  RECORD_END();
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f383 8811 	msr	BASEPRI, r3
}
 80023ca:	bf00      	nop
 80023cc:	3730      	adds	r7, #48	; 0x30
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20001af0 	.word	0x20001af0

080023d8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b090      	sub	sp, #64	; 0x40
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80023e6:	f3ef 8311 	mrs	r3, BASEPRI
 80023ea:	f04f 0120 	mov.w	r1, #32
 80023ee:	f381 8811 	msr	BASEPRI, r1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	4840      	ldr	r0, [pc, #256]	; (80024f8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80023f6:	f7ff fd64 	bl	8001ec2 <_PreparePacket>
 80023fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
 8002408:	e00b      	b.n	8002422 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	b2da      	uxtb	r2, r3
 800240e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002410:	1c59      	adds	r1, r3, #1
 8002412:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	09db      	lsrs	r3, r3, #7
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	2b7f      	cmp	r3, #127	; 0x7f
 8002426:	d8f0      	bhi.n	800240a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800242e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002436:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
 8002440:	e00b      	b.n	800245a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	b2da      	uxtb	r2, r3
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	1c59      	adds	r1, r3, #1
 800244a:	6379      	str	r1, [r7, #52]	; 0x34
 800244c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	09db      	lsrs	r3, r3, #7
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2b7f      	cmp	r3, #127	; 0x7f
 800245e:	d8f0      	bhi.n	8002442 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	637a      	str	r2, [r7, #52]	; 0x34
 8002466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
 8002478:	e00b      	b.n	8002492 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	09db      	lsrs	r3, r3, #7
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	2b7f      	cmp	r3, #127	; 0x7f
 8002496:	d8f0      	bhi.n	800247a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	e00b      	b.n	80024ca <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1c59      	adds	r1, r3, #1
 80024ba:	6279      	str	r1, [r7, #36]	; 0x24
 80024bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	09db      	lsrs	r3, r3, #7
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2b7f      	cmp	r3, #127	; 0x7f
 80024ce:	d8f0      	bhi.n	80024b2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	627a      	str	r2, [r7, #36]	; 0x24
 80024d6:	6a3a      	ldr	r2, [r7, #32]
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	6979      	ldr	r1, [r7, #20]
 80024e4:	69b8      	ldr	r0, [r7, #24]
 80024e6:	f7ff fddd 	bl	80020a4 <_SendPacket>
  RECORD_END();
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f383 8811 	msr	BASEPRI, r3
}
 80024f0:	bf00      	nop
 80024f2:	3740      	adds	r7, #64	; 0x40
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20001af0 	.word	0x20001af0

080024fc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b092      	sub	sp, #72	; 0x48
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800250a:	f3ef 8311 	mrs	r3, BASEPRI
 800250e:	f04f 0120 	mov.w	r1, #32
 8002512:	f381 8811 	msr	BASEPRI, r1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	484e      	ldr	r0, [pc, #312]	; (8002654 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800251a:	f7ff fcd2 	bl	8001ec2 <_PreparePacket>
 800251e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
 800252c:	e00b      	b.n	8002546 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002530:	b2da      	uxtb	r2, r3
 8002532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002534:	1c59      	adds	r1, r3, #1
 8002536:	6479      	str	r1, [r7, #68]	; 0x44
 8002538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	09db      	lsrs	r3, r3, #7
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
 8002546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002548:	2b7f      	cmp	r3, #127	; 0x7f
 800254a:	d8f0      	bhi.n	800252e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	647a      	str	r2, [r7, #68]	; 0x44
 8002552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
 8002564:	e00b      	b.n	800257e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	b2da      	uxtb	r2, r3
 800256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256c:	1c59      	adds	r1, r3, #1
 800256e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	09db      	lsrs	r3, r3, #7
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	2b7f      	cmp	r3, #127	; 0x7f
 8002582:	d8f0      	bhi.n	8002566 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8002584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800258a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002592:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
 800259c:	e00b      	b.n	80025b6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	1c59      	adds	r1, r3, #1
 80025a6:	6379      	str	r1, [r7, #52]	; 0x34
 80025a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	09db      	lsrs	r3, r3, #7
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ba:	d8f0      	bhi.n	800259e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	637a      	str	r2, [r7, #52]	; 0x34
 80025c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d4:	e00b      	b.n	80025ee <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	1c59      	adds	r1, r3, #1
 80025de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80025e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	09db      	lsrs	r3, r3, #7
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2b7f      	cmp	r3, #127	; 0x7f
 80025f2:	d8f0      	bhi.n	80025d6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	e00b      	b.n	8002626 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1c59      	adds	r1, r3, #1
 8002616:	6279      	str	r1, [r7, #36]	; 0x24
 8002618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	09db      	lsrs	r3, r3, #7
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b7f      	cmp	r3, #127	; 0x7f
 800262a:	d8f0      	bhi.n	800260e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	627a      	str	r2, [r7, #36]	; 0x24
 8002632:	6a3a      	ldr	r2, [r7, #32]
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	69b8      	ldr	r0, [r7, #24]
 8002642:	f7ff fd2f 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f383 8811 	msr	BASEPRI, r3
}
 800264c:	bf00      	nop
 800264e:	3748      	adds	r7, #72	; 0x48
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20001af0 	.word	0x20001af0

08002658 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800265e:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002664:	f3ef 8311 	mrs	r3, BASEPRI
 8002668:	f04f 0120 	mov.w	r1, #32
 800266c:	f381 8811 	msr	BASEPRI, r1
 8002670:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002672:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	220a      	movs	r2, #10
 8002678:	4952      	ldr	r1, [pc, #328]	; (80027c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd fd80 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002686:	200a      	movs	r0, #10
 8002688:	f7ff fdf2 	bl	8002270 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800268c:	f3ef 8311 	mrs	r3, BASEPRI
 8002690:	f04f 0120 	mov.w	r1, #32
 8002694:	f381 8811 	msr	BASEPRI, r1
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	484b      	ldr	r0, [pc, #300]	; (80027c8 <SEGGER_SYSVIEW_Start+0x170>)
 800269c:	f7ff fc11 	bl	8001ec2 <_PreparePacket>
 80026a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026aa:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b0:	e00b      	b.n	80026ca <SEGGER_SYSVIEW_Start+0x72>
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80026bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	09db      	lsrs	r3, r3, #7
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	2b7f      	cmp	r3, #127	; 0x7f
 80026ce:	d8f0      	bhi.n	80026b2 <SEGGER_SYSVIEW_Start+0x5a>
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	e00b      	b.n	8002704 <SEGGER_SYSVIEW_Start+0xac>
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	1c59      	adds	r1, r3, #1
 80026f4:	6279      	str	r1, [r7, #36]	; 0x24
 80026f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	09db      	lsrs	r3, r3, #7
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b7f      	cmp	r3, #127	; 0x7f
 8002708:	d8f0      	bhi.n	80026ec <SEGGER_SYSVIEW_Start+0x94>
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	627a      	str	r2, [r7, #36]	; 0x24
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	e00b      	b.n	800273e <SEGGER_SYSVIEW_Start+0xe6>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	1c59      	adds	r1, r3, #1
 800272e:	61f9      	str	r1, [r7, #28]
 8002730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	09db      	lsrs	r3, r3, #7
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b7f      	cmp	r3, #127	; 0x7f
 8002742:	d8f0      	bhi.n	8002726 <SEGGER_SYSVIEW_Start+0xce>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	61fa      	str	r2, [r7, #28]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e00b      	b.n	8002776 <SEGGER_SYSVIEW_Start+0x11e>
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	6179      	str	r1, [r7, #20]
 8002768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	09db      	lsrs	r3, r3, #7
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b7f      	cmp	r3, #127	; 0x7f
 800277a:	d8f0      	bhi.n	800275e <SEGGER_SYSVIEW_Start+0x106>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	617a      	str	r2, [r7, #20]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800278c:	2218      	movs	r2, #24
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fc87 	bl	80020a4 <_SendPacket>
      RECORD_END();
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <SEGGER_SYSVIEW_Start+0x168>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80027aa:	f000 f9c7 	bl	8002b3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80027ae:	f000 f9b1 	bl	8002b14 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80027b2:	f000 fc5f 	bl	8003074 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80027b6:	bf00      	nop
 80027b8:	3730      	adds	r7, #48	; 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20001ac0 	.word	0x20001ac0
 80027c4:	08005ba0 	.word	0x08005ba0
 80027c8:	20001af0 	.word	0x20001af0

080027cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80027d2:	f3ef 8311 	mrs	r3, BASEPRI
 80027d6:	f04f 0120 	mov.w	r1, #32
 80027da:	f381 8811 	msr	BASEPRI, r1
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <SEGGER_SYSVIEW_Stop+0x44>)
 80027e2:	f7ff fb6e 	bl	8001ec2 <_PreparePacket>
 80027e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <SEGGER_SYSVIEW_Stop+0x48>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80027f0:	220b      	movs	r2, #11
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f7ff fc55 	bl	80020a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SEGGER_SYSVIEW_Stop+0x48>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f383 8811 	msr	BASEPRI, r3
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20001af0 	.word	0x20001af0
 8002814:	20001ac0 	.word	0x20001ac0

08002818 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800281e:	f3ef 8311 	mrs	r3, BASEPRI
 8002822:	f04f 0120 	mov.w	r1, #32
 8002826:	f381 8811 	msr	BASEPRI, r1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4845      	ldr	r0, [pc, #276]	; (8002944 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800282e:	f7ff fb48 	bl	8001ec2 <_PreparePacket>
 8002832:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
 8002842:	e00b      	b.n	800285c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	b2da      	uxtb	r2, r3
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	1c59      	adds	r1, r3, #1
 800284c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800284e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	09db      	lsrs	r3, r3, #7
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b7f      	cmp	r3, #127	; 0x7f
 8002860:	d8f0      	bhi.n	8002844 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e00b      	b.n	8002896 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	6279      	str	r1, [r7, #36]	; 0x24
 8002888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	09db      	lsrs	r3, r3, #7
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2b7f      	cmp	r3, #127	; 0x7f
 800289a:	d8f0      	bhi.n	800287e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	627a      	str	r2, [r7, #36]	; 0x24
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e00b      	b.n	80028d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	61f9      	str	r1, [r7, #28]
 80028c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	09db      	lsrs	r3, r3, #7
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b7f      	cmp	r3, #127	; 0x7f
 80028d4:	d8f0      	bhi.n	80028b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	61fa      	str	r2, [r7, #28]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e00b      	b.n	8002908 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	6179      	str	r1, [r7, #20]
 80028fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	09db      	lsrs	r3, r3, #7
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b7f      	cmp	r3, #127	; 0x7f
 800290c:	d8f0      	bhi.n	80028f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	617a      	str	r2, [r7, #20]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800291e:	2218      	movs	r2, #24
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68b8      	ldr	r0, [r7, #8]
 8002924:	f7ff fbbe 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	4798      	blx	r3
  }
}
 800293c:	bf00      	nop
 800293e:	3730      	adds	r7, #48	; 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20001af0 	.word	0x20001af0
 8002948:	20001ac0 	.word	0x20001ac0

0800294c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002954:	f3ef 8311 	mrs	r3, BASEPRI
 8002958:	f04f 0120 	mov.w	r1, #32
 800295c:	f381 8811 	msr	BASEPRI, r1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	486a      	ldr	r0, [pc, #424]	; (8002b0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002964:	f7ff faad 	bl	8001ec2 <_PreparePacket>
 8002968:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b66      	ldr	r3, [pc, #408]	; (8002b10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
 800297e:	e00b      	b.n	8002998 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002982:	b2da      	uxtb	r2, r3
 8002984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	6479      	str	r1, [r7, #68]	; 0x44
 800298a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	643b      	str	r3, [r7, #64]	; 0x40
 8002998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299a:	2b7f      	cmp	r3, #127	; 0x7f
 800299c:	d8f0      	bhi.n	8002980 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800299e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	647a      	str	r2, [r7, #68]	; 0x44
 80029a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b8:	e00b      	b.n	80029d2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c0:	1c59      	adds	r1, r3, #1
 80029c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80029c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	09db      	lsrs	r3, r3, #7
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b7f      	cmp	r3, #127	; 0x7f
 80029d6:	d8f0      	bhi.n	80029ba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	4619      	mov	r1, r3
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fa19 	bl	8001e28 <_EncodeStr>
 80029f6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80029f8:	2209      	movs	r2, #9
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f7ff fb51 	bl	80020a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	e00b      	b.n	8002a30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	6379      	str	r1, [r7, #52]	; 0x34
 8002a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	09db      	lsrs	r3, r3, #7
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	2b7f      	cmp	r3, #127	; 0x7f
 8002a34:	d8f0      	bhi.n	8002a18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a50:	e00b      	b.n	8002a6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	09db      	lsrs	r3, r3, #7
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a6e:	d8f0      	bhi.n	8002a52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	e00b      	b.n	8002aa4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	6279      	str	r1, [r7, #36]	; 0x24
 8002a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	09db      	lsrs	r3, r3, #7
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa8:	d8f0      	bhi.n	8002a8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	627a      	str	r2, [r7, #36]	; 0x24
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e00b      	b.n	8002adc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	61f9      	str	r1, [r7, #28]
 8002ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	09db      	lsrs	r3, r3, #7
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae0:	d8f0      	bhi.n	8002ac4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	61fa      	str	r2, [r7, #28]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002af2:	2215      	movs	r2, #21
 8002af4:	68f9      	ldr	r1, [r7, #12]
 8002af6:	6938      	ldr	r0, [r7, #16]
 8002af8:	f7ff fad4 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f383 8811 	msr	BASEPRI, r3
}
 8002b02:	bf00      	nop
 8002b04:	3748      	adds	r7, #72	; 0x48
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20001af0 	.word	0x20001af0
 8002b10:	20001ac0 	.word	0x20001ac0

08002b14 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002b2a:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4798      	blx	r3
  }
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20001ac0 	.word	0x20001ac0

08002b3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4798      	blx	r3
 8002b5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002b60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	000a      	movs	r2, r1
 8002b70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002b72:	4613      	mov	r3, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4621      	mov	r1, r4
 8002b78:	200d      	movs	r0, #13
 8002b7a:	f7ff fbd3 	bl	8002324 <SEGGER_SYSVIEW_RecordU32x2>
 8002b7e:	e006      	b.n	8002b8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	200c      	movs	r0, #12
 8002b88:	f7ff fb90 	bl	80022ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20001ac0 	.word	0x20001ac0
 8002b9c:	e0001004 	.word	0xe0001004

08002ba0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8002baa:	f04f 0120 	mov.w	r1, #32
 8002bae:	f381 8811 	msr	BASEPRI, r1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	4819      	ldr	r0, [pc, #100]	; (8002c1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002bb6:	f7ff f984 	bl	8001ec2 <_PreparePacket>
 8002bba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e00b      	b.n	8002bec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1c59      	adds	r1, r3, #1
 8002bdc:	6179      	str	r1, [r7, #20]
 8002bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	09db      	lsrs	r3, r3, #7
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b7f      	cmp	r3, #127	; 0x7f
 8002bf0:	d8f0      	bhi.n	8002bd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	617a      	str	r2, [r7, #20]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002c02:	2202      	movs	r2, #2
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f7ff fa4c 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f383 8811 	msr	BASEPRI, r3
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20001af0 	.word	0x20001af0
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c2e:	f04f 0120 	mov.w	r1, #32
 8002c32:	f381 8811 	msr	BASEPRI, r1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	4807      	ldr	r0, [pc, #28]	; (8002c58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002c3a:	f7ff f942 	bl	8001ec2 <_PreparePacket>
 8002c3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002c40:	2203      	movs	r2, #3
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	6838      	ldr	r0, [r7, #0]
 8002c46:	f7ff fa2d 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f383 8811 	msr	BASEPRI, r3
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20001af0 	.word	0x20001af0

08002c5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c62:	f3ef 8311 	mrs	r3, BASEPRI
 8002c66:	f04f 0120 	mov.w	r1, #32
 8002c6a:	f381 8811 	msr	BASEPRI, r1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002c72:	f7ff f926 	bl	8001ec2 <_PreparePacket>
 8002c76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002c78:	2212      	movs	r2, #18
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f7ff fa11 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f383 8811 	msr	BASEPRI, r3
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20001af0 	.word	0x20001af0

08002c94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c9e:	f04f 0120 	mov.w	r1, #32
 8002ca2:	f381 8811 	msr	BASEPRI, r1
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002caa:	f7ff f90a 	bl	8001ec2 <_PreparePacket>
 8002cae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002cb0:	2211      	movs	r2, #17
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f7ff f9f5 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f383 8811 	msr	BASEPRI, r3
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20001af0 	.word	0x20001af0

08002ccc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8002cd8:	f04f 0120 	mov.w	r1, #32
 8002cdc:	f381 8811 	msr	BASEPRI, r1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	4819      	ldr	r0, [pc, #100]	; (8002d48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002ce4:	f7ff f8ed 	bl	8001ec2 <_PreparePacket>
 8002ce8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e00b      	b.n	8002d1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	61f9      	str	r1, [r7, #28]
 8002d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	09db      	lsrs	r3, r3, #7
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d1e:	d8f0      	bhi.n	8002d02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002d30:	2208      	movs	r2, #8
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	6938      	ldr	r0, [r7, #16]
 8002d36:	f7ff f9b5 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f383 8811 	msr	BASEPRI, r3
}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20001af0 	.word	0x20001af0
 8002d4c:	20001ac0 	.word	0x20001ac0

08002d50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002d58:	f3ef 8311 	mrs	r3, BASEPRI
 8002d5c:	f04f 0120 	mov.w	r1, #32
 8002d60:	f381 8811 	msr	BASEPRI, r1
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4819      	ldr	r0, [pc, #100]	; (8002dcc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8002d68:	f7ff f8ab 	bl	8001ec2 <_PreparePacket>
 8002d6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e00b      	b.n	8002d9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	61f9      	str	r1, [r7, #28]
 8002d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	09db      	lsrs	r3, r3, #7
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b7f      	cmp	r3, #127	; 0x7f
 8002da2:	d8f0      	bhi.n	8002d86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002db4:	2204      	movs	r2, #4
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	6938      	ldr	r0, [r7, #16]
 8002dba:	f7ff f973 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f383 8811 	msr	BASEPRI, r3
}
 8002dc4:	bf00      	nop
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20001af0 	.word	0x20001af0
 8002dd0:	20001ac0 	.word	0x20001ac0

08002dd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8002de0:	f04f 0120 	mov.w	r1, #32
 8002de4:	f381 8811 	msr	BASEPRI, r1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4819      	ldr	r0, [pc, #100]	; (8002e50 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002dec:	f7ff f869 	bl	8001ec2 <_PreparePacket>
 8002df0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e00b      	b.n	8002e22 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	1c59      	adds	r1, r3, #1
 8002e12:	61f9      	str	r1, [r7, #28]
 8002e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	09db      	lsrs	r3, r3, #7
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b7f      	cmp	r3, #127	; 0x7f
 8002e26:	d8f0      	bhi.n	8002e0a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	61fa      	str	r2, [r7, #28]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002e38:	2206      	movs	r2, #6
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	6938      	ldr	r0, [r7, #16]
 8002e3e:	f7ff f931 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f383 8811 	msr	BASEPRI, r3
}
 8002e48:	bf00      	nop
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20001af0 	.word	0x20001af0
 8002e54:	20001ac0 	.word	0x20001ac0

08002e58 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e62:	f3ef 8311 	mrs	r3, BASEPRI
 8002e66:	f04f 0120 	mov.w	r1, #32
 8002e6a:	f381 8811 	msr	BASEPRI, r1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	4827      	ldr	r0, [pc, #156]	; (8002f10 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8002e72:	f7ff f826 	bl	8001ec2 <_PreparePacket>
 8002e76:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	e00b      	b.n	8002ea8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	6279      	str	r1, [r7, #36]	; 0x24
 8002e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	09db      	lsrs	r3, r3, #7
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8002eac:	d8f0      	bhi.n	8002e90 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e00b      	b.n	8002ee0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	61f9      	str	r1, [r7, #28]
 8002ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	09db      	lsrs	r3, r3, #7
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee4:	d8f0      	bhi.n	8002ec8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	61fa      	str	r2, [r7, #28]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	6938      	ldr	r0, [r7, #16]
 8002efc:	f7ff f8d2 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f383 8811 	msr	BASEPRI, r3
}
 8002f06:	bf00      	nop
 8002f08:	3728      	adds	r7, #40	; 0x28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20001af0 	.word	0x20001af0
 8002f14:	20001ac0 	.word	0x20001ac0

08002f18 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	20001ac0 	.word	0x20001ac0

08002f38 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06d      	beq.n	8003026 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f54:	e008      	b.n	8002f68 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	3301      	adds	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3f2      	bcc.n	8002f56 <SEGGER_SYSVIEW_SendModule+0x1e>
 8002f70:	e000      	b.n	8002f74 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002f72:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d055      	beq.n	8003026 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f7e:	f04f 0120 	mov.w	r1, #32
 8002f82:	f381 8811 	msr	BASEPRI, r1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	482a      	ldr	r0, [pc, #168]	; (8003034 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002f8a:	f7fe ff9a 	bl	8001ec2 <_PreparePacket>
 8002f8e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	e00b      	b.n	8002fb6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	1c59      	adds	r1, r3, #1
 8002fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8002fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	09db      	lsrs	r3, r3, #7
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fba:	d8f0      	bhi.n	8002f9e <SEGGER_SYSVIEW_SendModule+0x66>
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e00b      	b.n	8002ff0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1c59      	adds	r1, r3, #1
 8002fe0:	61f9      	str	r1, [r7, #28]
 8002fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	09db      	lsrs	r3, r3, #7
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff4:	d8f0      	bhi.n	8002fd8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	61fa      	str	r2, [r7, #28]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7fe ff0a 	bl	8001e28 <_EncodeStr>
 8003014:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003016:	2216      	movs	r2, #22
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f7ff f842 	bl	80020a4 <_SendPacket>
      RECORD_END();
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003026:	bf00      	nop
 8003028:	3730      	adds	r7, #48	; 0x30
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20001ae8 	.word	0x20001ae8
 8003034:	20001af0 	.word	0x20001af0

08003038 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00f      	beq.n	8003066 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f2      	bne.n	800304c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20001ae8 	.word	0x20001ae8

08003074 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800307a:	f3ef 8311 	mrs	r3, BASEPRI
 800307e:	f04f 0120 	mov.w	r1, #32
 8003082:	f381 8811 	msr	BASEPRI, r1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	4817      	ldr	r0, [pc, #92]	; (80030e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800308a:	f7fe ff1a 	bl	8001ec2 <_PreparePacket>
 800308e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e00b      	b.n	80030b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	6179      	str	r1, [r7, #20]
 80030aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	09db      	lsrs	r3, r3, #7
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b7f      	cmp	r3, #127	; 0x7f
 80030bc:	d8f0      	bhi.n	80030a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	617a      	str	r2, [r7, #20]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80030ce:	221b      	movs	r2, #27
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68b8      	ldr	r0, [r7, #8]
 80030d4:	f7fe ffe6 	bl	80020a4 <_SendPacket>
  RECORD_END();
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f383 8811 	msr	BASEPRI, r3
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20001af0 	.word	0x20001af0
 80030ec:	20001aec 	.word	0x20001aec

080030f0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030f8:	f3ef 8311 	mrs	r3, BASEPRI
 80030fc:	f04f 0120 	mov.w	r1, #32
 8003100:	f381 8811 	msr	BASEPRI, r1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4827      	ldr	r0, [pc, #156]	; (80031a4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003108:	f7fe fedb 	bl	8001ec2 <_PreparePacket>
 800310c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	f7fe fe88 	bl	8001e28 <_EncodeStr>
 8003118:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	2301      	movs	r3, #1
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	e00b      	b.n	800313c <SEGGER_SYSVIEW_Warn+0x4c>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	6279      	str	r1, [r7, #36]	; 0x24
 800312e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	09db      	lsrs	r3, r3, #7
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2b7f      	cmp	r3, #127	; 0x7f
 8003140:	d8f0      	bhi.n	8003124 <SEGGER_SYSVIEW_Warn+0x34>
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	627a      	str	r2, [r7, #36]	; 0x24
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e00b      	b.n	8003174 <SEGGER_SYSVIEW_Warn+0x84>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1c59      	adds	r1, r3, #1
 8003164:	61f9      	str	r1, [r7, #28]
 8003166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	09db      	lsrs	r3, r3, #7
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b7f      	cmp	r3, #127	; 0x7f
 8003178:	d8f0      	bhi.n	800315c <SEGGER_SYSVIEW_Warn+0x6c>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	61fa      	str	r2, [r7, #28]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800318a:	221a      	movs	r2, #26
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	6938      	ldr	r0, [r7, #16]
 8003190:	f7fe ff88 	bl	80020a4 <_SendPacket>
  RECORD_END();
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f383 8811 	msr	BASEPRI, r3
}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20001af0 	.word	0x20001af0

080031a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f023 0218 	bic.w	r2, r3, #24
 80031bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800320e:	f000 fb3d 	bl	800388c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003212:	f000 f873 	bl	80032fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003216:	f000 f8c5 	bl	80033a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800321a:	f000 f8e1 	bl	80033e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <main+0xc8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <main+0xc8>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6013      	str	r3, [r2, #0]
 // SEGGER_SYSVIEW_Conf();
 // SEGGER_SYSVIEW_Start();

  BaseType_t status;

  status = xTaskCreate(GreenLedHandler,
 800322a:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <main+0xcc>)
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2301      	movs	r3, #1
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	22c8      	movs	r2, #200	; 0xc8
 8003236:	4928      	ldr	r1, [pc, #160]	; (80032d8 <main+0xd0>)
 8003238:	4828      	ldr	r0, [pc, #160]	; (80032dc <main+0xd4>)
 800323a:	f7fd f89f 	bl	800037c <xTaskCreate>
 800323e:	60f8      	str	r0, [r7, #12]
		  200,
		  NULL,
		  1,
		  &gLedHandle);

  configASSERT(status == pdPASS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d00a      	beq.n	800325c <main+0x54>
        __asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	60bb      	str	r3, [r7, #8]
    }
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <main+0x52>

  status = xTaskCreate(BlueLedHandler,
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <main+0xd8>)
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	2302      	movs	r3, #2
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	22c8      	movs	r2, #200	; 0xc8
 8003268:	491e      	ldr	r1, [pc, #120]	; (80032e4 <main+0xdc>)
 800326a:	481f      	ldr	r0, [pc, #124]	; (80032e8 <main+0xe0>)
 800326c:	f7fd f886 	bl	800037c <xTaskCreate>
 8003270:	60f8      	str	r0, [r7, #12]
		  200,
		  NULL,
		  2,
		  &bLedHandle);

  configASSERT(status == pdPASS);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00a      	beq.n	800328e <main+0x86>
        __asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	607b      	str	r3, [r7, #4]
    }
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <main+0x84>

  nextTaskHandle = bLedHandle;
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <main+0xd8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <main+0xe4>)
 8003294:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(RedLedHandler,
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <main+0xe8>)
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2303      	movs	r3, #3
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	22c8      	movs	r2, #200	; 0xc8
 80032a2:	4914      	ldr	r1, [pc, #80]	; (80032f4 <main+0xec>)
 80032a4:	4814      	ldr	r0, [pc, #80]	; (80032f8 <main+0xf0>)
 80032a6:	f7fd f869 	bl	800037c <xTaskCreate>
 80032aa:	60f8      	str	r0, [r7, #12]
		  200,
		  NULL,
		  3,
		  &rLedHandle);

  configASSERT(status == pdPASS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d00a      	beq.n	80032c8 <main+0xc0>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	603b      	str	r3, [r7, #0]
    }
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <main+0xbe>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 80032c8:	f7fd fa6a 	bl	80007a0 <vTaskStartScheduler>
  // -- END --
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <main+0xc4>
 80032ce:	bf00      	nop
 80032d0:	e0001000 	.word	0xe0001000
 80032d4:	20001bd4 	.word	0x20001bd4
 80032d8:	08005b48 	.word	0x08005b48
 80032dc:	08003519 	.word	0x08003519
 80032e0:	20001bd8 	.word	0x20001bd8
 80032e4:	08005b5c 	.word	0x08005b5c
 80032e8:	080034bd 	.word	0x080034bd
 80032ec:	20001be0 	.word	0x20001be0
 80032f0:	20001bdc 	.word	0x20001bdc
 80032f4:	08005b70 	.word	0x08005b70
 80032f8:	08003575 	.word	0x08003575

080032fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b098      	sub	sp, #96	; 0x60
 8003300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	2244      	movs	r2, #68	; 0x44
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f002 fbcc 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003310:	463b      	mov	r3, r7
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	615a      	str	r2, [r3, #20]
 8003320:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003322:	f000 fd9d 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003326:	2000      	movs	r0, #0
 8003328:	f7ff ff3e 	bl	80031a8 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800332c:	2327      	movs	r3, #39	; 0x27
 800332e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003334:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003336:	2301      	movs	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800333a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003340:	2301      	movs	r3, #1
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003344:	2340      	movs	r3, #64	; 0x40
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800334c:	2360      	movs	r3, #96	; 0x60
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4618      	mov	r0, r3
 800335a:	f001 f8df 	bl	800451c <HAL_RCC_OscConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003364:	f000 f970 	bl	8003648 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003368:	236f      	movs	r3, #111	; 0x6f
 800336a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fbfd 	bl	8004b88 <HAL_RCC_ClockConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003394:	f000 f958 	bl	8003648 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003398:	f002 f8d9 	bl	800554e <HAL_RCCEx_EnableMSIPLLMode>
}
 800339c:	bf00      	nop
 800339e:	3760      	adds	r7, #96	; 0x60
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033aa:	463b      	mov	r3, r7
 80033ac:	2230      	movs	r2, #48	; 0x30
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fb79 	bl	8005aa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80033b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80033bc:	2300      	movs	r3, #0
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80033c0:	2310      	movs	r3, #16
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c4:	463b      	mov	r3, r7
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 ffcb 	bl	8005362 <HAL_RCCEx_PeriphCLKConfig>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80033d2:	f000 f939 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80033d6:	bf00      	nop
 80033d8:	3730      	adds	r7, #48	; 0x30
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f4:	2004      	movs	r0, #4
 80033f6:	f7ff feed 	bl	80031d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2001      	movs	r0, #1
 80033fc:	f7ff feea 	bl	80031d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	2002      	movs	r0, #2
 8003402:	f7ff fee7 	bl	80031d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003406:	2010      	movs	r0, #16
 8003408:	f7ff fee4 	bl	80031d4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	2123      	movs	r1, #35	; 0x23
 8003410:	4828      	ldr	r0, [pc, #160]	; (80034b4 <MX_GPIO_Init+0xd4>)
 8003412:	f000 fccf 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003416:	2301      	movs	r3, #1
 8003418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800341a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800341e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003420:	2301      	movs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800342c:	f000 fb5a 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4619      	mov	r1, r3
 8003440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003444:	f000 fb4e 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003448:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800344c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800345a:	2307      	movs	r3, #7
 800345c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	4619      	mov	r1, r3
 8003462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003466:	f000 fb3d 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800346a:	2323      	movs	r3, #35	; 0x23
 800346c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	4619      	mov	r1, r3
 800347e:	480d      	ldr	r0, [pc, #52]	; (80034b4 <MX_GPIO_Init+0xd4>)
 8003480:	f000 fb30 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8003484:	2310      	movs	r3, #16
 8003486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348c:	2301      	movs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	4619      	mov	r1, r3
 8003494:	4808      	ldr	r0, [pc, #32]	; (80034b8 <MX_GPIO_Init+0xd8>)
 8003496:	f000 fb25 	bl	8003ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2106      	movs	r1, #6
 800349e:	2006      	movs	r0, #6
 80034a0:	f000 faf8 	bl	8003a94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034a4:	2006      	movs	r0, #6
 80034a6:	f000 fb0f 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	48000400 	.word	0x48000400
 80034b8:	48001000 	.word	0x48001000

080034bc <BlueLedHandler>:

/* USER CODE BEGIN 4 */

static void BlueLedHandler(void* param)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(1000);
 80034c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c8:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling blue led");
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 80034ca:	2120      	movs	r1, #32
 80034cc:	480f      	ldr	r0, [pc, #60]	; (800350c <BlueLedHandler+0x50>)
 80034ce:	f000 fc89 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	2000      	movs	r0, #0
 80034de:	f7fd fc41 	bl	8000d64 <xTaskGenericNotifyWait>
 80034e2:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d1ef      	bne.n	80034ca <BlueLedHandler+0xe>
		{
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 80034ea:	f7fe f80b 	bl	8001504 <vPortEnterCritical>
			nextTaskHandle = gLedHandle;
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <BlueLedHandler+0x54>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <BlueLedHandler+0x58>)
 80034f4:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			portEXIT_CRITICAL();
 80034f6:	f7fe f835 	bl	8001564 <vPortExitCritical>

			HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 80034fa:	2201      	movs	r2, #1
 80034fc:	2120      	movs	r1, #32
 80034fe:	4803      	ldr	r0, [pc, #12]	; (800350c <BlueLedHandler+0x50>)
 8003500:	f000 fc58 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd f89d 	bl	8000644 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 800350a:	e7de      	b.n	80034ca <BlueLedHandler+0xe>
 800350c:	48000400 	.word	0x48000400
 8003510:	20001bd4 	.word	0x20001bd4
 8003514:	20001be0 	.word	0x20001be0

08003518 <GreenLedHandler>:
	}
}


static void GreenLedHandler(void* param)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(800);
 8003520:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003524:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 8003526:	2101      	movs	r1, #1
 8003528:	480f      	ldr	r0, [pc, #60]	; (8003568 <GreenLedHandler+0x50>)
 800352a:	f000 fc5b 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	2200      	movs	r2, #0
 8003536:	2100      	movs	r1, #0
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd fc13 	bl	8000d64 <xTaskGenericNotifyWait>
 800353e:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d1ef      	bne.n	8003526 <GreenLedHandler+0xe>
		{
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8003546:	f7fd ffdd 	bl	8001504 <vPortEnterCritical>
			nextTaskHandle = rLedHandle;
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <GreenLedHandler+0x54>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <GreenLedHandler+0x58>)
 8003550:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			portEXIT_CRITICAL();
 8003552:	f7fe f807 	bl	8001564 <vPortExitCritical>

			HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 8003556:	2201      	movs	r2, #1
 8003558:	2101      	movs	r1, #1
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <GreenLedHandler+0x50>)
 800355c:	f000 fc2a 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8003560:	2000      	movs	r0, #0
 8003562:	f7fd f86f 	bl	8000644 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 8003566:	e7de      	b.n	8003526 <GreenLedHandler+0xe>
 8003568:	48000400 	.word	0x48000400
 800356c:	20001bdc 	.word	0x20001bdc
 8003570:	20001be0 	.word	0x20001be0

08003574 <RedLedHandler>:
	}
}


static void RedLedHandler(void* param)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(400);
 800357c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003580:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8003582:	2102      	movs	r1, #2
 8003584:	480f      	ldr	r0, [pc, #60]	; (80035c4 <RedLedHandler+0x50>)
 8003586:	f000 fc2d 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fbe5 	bl	8000d64 <xTaskGenericNotifyWait>
 800359a:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d1ef      	bne.n	8003582 <RedLedHandler+0xe>
		{
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 80035a2:	f7fd ffaf 	bl	8001504 <vPortEnterCritical>
			nextTaskHandle = NULL;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <RedLedHandler+0x54>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
			//xTaskResumeAll();
			portEXIT_CRITICAL();
 80035ac:	f7fd ffda 	bl	8001564 <vPortExitCritical>

			HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 80035b0:	2201      	movs	r2, #1
 80035b2:	2102      	movs	r1, #2
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <RedLedHandler+0x50>)
 80035b6:	f000 fbfd 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(btnHandle);
			//vTaskDelete(NULL);
			//vTaskSuspend(btnHandle);
			vTaskSuspend(NULL);
 80035ba:	2000      	movs	r0, #0
 80035bc:	f7fd f842 	bl	8000644 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 80035c0:	e7df      	b.n	8003582 <RedLedHandler+0xe>
 80035c2:	bf00      	nop
 80035c4:	48000400 	.word	0x48000400
 80035c8:	20001be0 	.word	0x20001be0

080035cc <ButtonInterruptHandler>:
}



void ButtonInterruptHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 80035d6:	f7ff fae3 	bl	8002ba0 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(nextTaskHandle,0,eNoAction,&pxHigherPriorityTaskWoken);
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <ButtonInterruptHandler+0x50>)
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	f7fd fc48 	bl	8000e80 <xTaskGenericNotifyFromISR>

	/* Once the ISR exits, the below macro makes higher priority task
	 *  which got unblocked to resume on the CPU.
	 *  We manually made the scheduler run again to so that scheduler can pick
	 *  higher priority task from the ready list.  */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <ButtonInterruptHandler+0x40>
 80035f6:	f7ff fb31 	bl	8002c5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <ButtonInterruptHandler+0x54>)
 80035fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	e001      	b.n	8003610 <ButtonInterruptHandler+0x44>
 800360c:	f7ff fb0a 	bl	8002c24 <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT();
 8003610:	f7ff fb08 	bl	8002c24 <SEGGER_SYSVIEW_RecordExitISR>

}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20001be0 	.word	0x20001be0
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003636:	f000 f949 	bl	80038cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00

08003648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
}
 800364e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003650:	e7fe      	b.n	8003650 <Error_Handler+0x8>

08003652 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8003656:	f7fd fed7 	bl	8001408 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}

0800365e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800366c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4313      	orrs	r3, r2
 8003674:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2019      	movs	r0, #25
 80036a6:	f000 f9f5 	bl	8003a94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80036aa:	2019      	movs	r0, #25
 80036ac:	f000 fa0c 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80036b4:	f7ff ffd3 	bl	800365e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036b8:	f107 0208 	add.w	r2, r7, #8
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fc36 	bl	8004f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036c8:	f001 fc1e 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 80036cc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_InitTick+0x8c>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0c9b      	lsrs	r3, r3, #18
 80036d8:	3b01      	subs	r3, #1
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_InitTick+0x90>)
 80036de:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_InitTick+0x94>)
 80036e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_InitTick+0x90>)
 80036e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_InitTick+0x90>)
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_InitTick+0x90>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_InitTick+0x90>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036fc:	4808      	ldr	r0, [pc, #32]	; (8003720 <HAL_InitTick+0x90>)
 80036fe:	f001 ff2c 	bl	800555a <HAL_TIM_Base_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003708:	4805      	ldr	r0, [pc, #20]	; (8003720 <HAL_InitTick+0x90>)
 800370a:	f001 ff87 	bl	800561c <HAL_TIM_Base_Start_IT>
 800370e:	4603      	mov	r3, r0
 8003710:	e000      	b.n	8003714 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	3730      	adds	r7, #48	; 0x30
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	431bde83 	.word	0x431bde83
 8003720:	20001be4 	.word	0x20001be4
 8003724:	40012c00 	.word	0x40012c00

08003728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800372c:	e7fe      	b.n	800372c <NMI_Handler+0x4>

0800372e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <HardFault_Handler+0x4>

08003734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <MemManage_Handler+0x4>

0800373a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800373e:	e7fe      	b.n	800373e <BusFault_Handler+0x4>

08003740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <UsageFault_Handler+0x4>

08003746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	ButtonInterruptHandler();
 8003758:	f7ff ff38 	bl	80035cc <ButtonInterruptHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800375c:	2001      	movs	r0, #1
 800375e:	f000 fb5b 	bl	8003e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <TIM1_UP_IRQHandler+0x10>)
 800376e:	f001 ffa3 	bl	80056b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20001be4 	.word	0x20001be4

0800377c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <SystemInit+0x90>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <SystemInit+0x90>)
 8003788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800378c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80037a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80037a8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <SystemInit+0x94>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c6:	f023 0305 	bic.w	r3, r3, #5
 80037ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <SystemInit+0x98>)
 80037e8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	2200      	movs	r2, #0
 8003800:	619a      	str	r2, [r3, #24]
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	faf6fefb 	.word	0xfaf6fefb
 8003814:	22041000 	.word	0x22041000

08003818 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003818:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800381a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800381c:	3304      	adds	r3, #4

0800381e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800381e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003820:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003822:	d3f9      	bcc.n	8003818 <CopyDataInit>
  bx lr
 8003824:	4770      	bx	lr

08003826 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003826:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003828:	3004      	adds	r0, #4

0800382a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800382a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800382c:	d3fb      	bcc.n	8003826 <FillZerobss>
  bx lr
 800382e:	4770      	bx	lr

08003830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003830:	480c      	ldr	r0, [pc, #48]	; (8003864 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003832:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003834:	f7ff ffa2 	bl	800377c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003838:	480b      	ldr	r0, [pc, #44]	; (8003868 <LoopForever+0x6>)
 800383a:	490c      	ldr	r1, [pc, #48]	; (800386c <LoopForever+0xa>)
 800383c:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <LoopForever+0xe>)
 800383e:	2300      	movs	r3, #0
 8003840:	f7ff ffed 	bl	800381e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003844:	480b      	ldr	r0, [pc, #44]	; (8003874 <LoopForever+0x12>)
 8003846:	490c      	ldr	r1, [pc, #48]	; (8003878 <LoopForever+0x16>)
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <LoopForever+0x1a>)
 800384a:	2300      	movs	r3, #0
 800384c:	f7ff ffe7 	bl	800381e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <LoopForever+0x1e>)
 8003852:	490c      	ldr	r1, [pc, #48]	; (8003884 <LoopForever+0x22>)
 8003854:	2300      	movs	r3, #0
 8003856:	f7ff ffe8 	bl	800382a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800385a:	f002 f8e3 	bl	8005a24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800385e:	f7ff fcd3 	bl	8003208 <main>

08003862 <LoopForever>:

LoopForever:
  b LoopForever
 8003862:	e7fe      	b.n	8003862 <LoopForever>
  ldr   r0, =_estack
 8003864:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8003868:	20000008 	.word	0x20000008
 800386c:	2000001c 	.word	0x2000001c
 8003870:	08005c54 	.word	0x08005c54
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003874:	20030000 	.word	0x20030000
 8003878:	20030000 	.word	0x20030000
 800387c:	08005c68 	.word	0x08005c68
  INIT_BSS _sbss, _ebss
 8003880:	2000001c 	.word	0x2000001c
 8003884:	20001c34 	.word	0x20001c34

08003888 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003888:	e7fe      	b.n	8003888 <ADC1_IRQHandler>
	...

0800388c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_Init+0x3c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <HAL_Init+0x3c>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a2:	2003      	movs	r0, #3
 80038a4:	f000 f8eb 	bl	8003a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038a8:	200f      	movs	r0, #15
 80038aa:	f7ff fef1 	bl	8003690 <HAL_InitTick>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	71fb      	strb	r3, [r7, #7]
 80038b8:	e001      	b.n	80038be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038ba:	f7ff feca 	bl	8003652 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038be:	79fb      	ldrb	r3, [r7, #7]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58004000 	.word	0x58004000

080038cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_IncTick+0x20>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_IncTick+0x24>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_IncTick+0x24>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000018 	.word	0x20000018
 80038f0:	20001c30 	.word	0x20001c30

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_GetTick+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20001c30 	.word	0x20001c30

0800390c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_GetTickPrio+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000014 	.word	0x20000014

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff4c 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa2:	f7ff ff63 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003aa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f7ff ffb3 	bl	8003a18 <NVIC_EncodePriority>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff82 	bl	80039c4 <__NVIC_SetPriority>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff56 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af2:	e146      	b.n	8003d82 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8138 	beq.w	8003d7c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d005      	beq.n	8003b24 <HAL_GPIO_Init+0x40>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d130      	bne.n	8003b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0201 	and.w	r2, r3, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d017      	beq.n	8003bc2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d123      	bne.n	8003c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	08da      	lsrs	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3208      	adds	r2, #8
 8003c10:	6939      	ldr	r1, [r7, #16]
 8003c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8092 	beq.w	8003d7c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c58:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_GPIO_Init+0x2bc>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c82:	d013      	beq.n	8003cac <HAL_GPIO_Init+0x1c8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a47      	ldr	r2, [pc, #284]	; (8003da4 <HAL_GPIO_Init+0x2c0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_GPIO_Init+0x1c4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a46      	ldr	r2, [pc, #280]	; (8003da8 <HAL_GPIO_Init+0x2c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <HAL_GPIO_Init+0x1c0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a45      	ldr	r2, [pc, #276]	; (8003dac <HAL_GPIO_Init+0x2c8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_GPIO_Init+0x1bc>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e006      	b.n	8003cae <HAL_GPIO_Init+0x1ca>
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	e004      	b.n	8003cae <HAL_GPIO_Init+0x1ca>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e002      	b.n	8003cae <HAL_GPIO_Init+0x1ca>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_GPIO_Init+0x1ca>
 8003cac:	2300      	movs	r3, #0
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	f002 0203 	and.w	r2, r2, #3
 8003cb4:	0092      	lsls	r2, r2, #2
 8003cb6:	4093      	lsls	r3, r2
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cbe:	4938      	ldr	r1, [pc, #224]	; (8003da0 <HAL_GPIO_Init+0x2bc>)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cf0:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d1a:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d46:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d4e:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_GPIO_Init+0x2cc>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f47f aeb1 	bne.w	8003af4 <HAL_GPIO_Init+0x10>
  }
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40010000 	.word	0x40010000
 8003da4:	48000400 	.word	0x48000400
 8003da8:	48000800 	.word	0x48000800
 8003dac:	48001000 	.word	0x48001000
 8003db0:	58000800 	.word	0x58000800

08003db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dd0:	e002      	b.n	8003dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43d9      	mvns	r1, r3
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	400b      	ands	r3, r1
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	619a      	str	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f806 	bl	8003e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58000800 	.word	0x58000800

08003e48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	58000400 	.word	0x58000400

08003e80 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e92:	d101      	bne.n	8003e98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_HSE_Enable>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_HSE_Disable>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_RCC_HSE_IsReady>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef2:	d101      	bne.n	8003ef8 <LL_RCC_HSE_IsReady+0x18>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <LL_RCC_HSE_IsReady+0x1a>
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_RCC_HSI_Enable>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_HSI_Disable>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_HSI_IsReady>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d101      	bne.n	8003f58 <LL_RCC_HSI_IsReady+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <LL_RCC_HSI_IsReady+0x1a>
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_LSE_Enable>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_LSE_Disable>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_LSE_EnableBypass>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_RCC_LSE_DisableBypass>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d101      	bne.n	800402e <LL_RCC_LSE_IsReady+0x18>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_RCC_LSE_IsReady+0x1a>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d101      	bne.n	8004096 <LL_RCC_LSI1_IsReady+0x18>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <LL_RCC_LSI1_IsReady+0x1a>
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d101      	bne.n	80040fe <LL_RCC_LSI2_IsReady+0x18>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <LL_RCC_LSI2_IsReady+0x1a>
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d101      	bne.n	800418a <LL_RCC_MSI_IsReady+0x16>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <LL_RCC_MSI_IsReady+0x18>
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2bb0      	cmp	r3, #176	; 0xb0
 80041d4:	d901      	bls.n	80041da <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80041d6:	23b0      	movs	r3, #176	; 0xb0
 80041d8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80041da:	687b      	ldr	r3, [r7, #4]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800428a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	608b      	str	r3, [r1, #8]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800430e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b4:	6013      	str	r3, [r2, #0]
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f0:	d101      	bne.n	80043f6 <LL_RCC_PLL_IsReady+0x18>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_RCC_PLL_IsReady+0x1a>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d101      	bne.n	800447c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004490:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449c:	d101      	bne.n	80044a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d101      	bne.n	80044c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80044d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d101      	bne.n	80044ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450a:	d101      	bne.n	8004510 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b08d      	sub	sp, #52	; 0x34
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e324      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 808d 	beq.w	8004656 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453c:	f7ff fe7d 	bl	800423a <LL_RCC_GetSysClkSource>
 8004540:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004542:	f7ff ff83 	bl	800444c <LL_RCC_PLL_GetMainSource>
 8004546:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x3e>
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d147      	bne.n	80045e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	2b01      	cmp	r3, #1
 8004558:	d144      	bne.n	80045e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e308      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800456a:	f7ff fe28 	bl	80041be <LL_RCC_MSI_GetRange>
 800456e:	4603      	mov	r3, r0
 8004570:	429c      	cmp	r4, r3
 8004572:	d914      	bls.n	800459e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd0d 	bl	8004f98 <RCC_SetFlashLatencyFromMSIRange>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e2f7      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fe02 	bl	8004196 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fe26 	bl	80041e8 <LL_RCC_MSI_SetCalibTrimming>
 800459c:	e013      	b.n	80045c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fdf7 	bl	8004196 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fe1b 	bl	80041e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fcee 	bl	8004f98 <RCC_SetFlashLatencyFromMSIRange>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e2d8      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045c6:	f000 fc8b 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4aa4      	ldr	r2, [pc, #656]	; (8004860 <HAL_RCC_OscConfig+0x344>)
 80045ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045d0:	4ba4      	ldr	r3, [pc, #656]	; (8004864 <HAL_RCC_OscConfig+0x348>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f85b 	bl	8003690 <HAL_InitTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d039      	beq.n	8004654 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e2c9      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01e      	beq.n	800462a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045ec:	f7ff fda4 	bl	8004138 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f0:	f7ff f980 	bl	80038f4 <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f8:	f7ff f97c 	bl	80038f4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e2b6      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800460a:	f7ff fdb3 	bl	8004174 <LL_RCC_MSI_IsReady>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f1      	beq.n	80045f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fdbc 	bl	8004196 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fde0 	bl	80041e8 <LL_RCC_MSI_SetCalibTrimming>
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800462a:	f7ff fd94 	bl	8004156 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800462e:	f7ff f961 	bl	80038f4 <HAL_GetTick>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004636:	f7ff f95d 	bl	80038f4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e297      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004648:	f7ff fd94 	bl	8004174 <LL_RCC_MSI_IsReady>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f1      	bne.n	8004636 <HAL_RCC_OscConfig+0x11a>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004654:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d047      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004662:	f7ff fdea 	bl	800423a <LL_RCC_GetSysClkSource>
 8004666:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004668:	f7ff fef0 	bl	800444c <LL_RCC_PLL_GetMainSource>
 800466c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d005      	beq.n	8004680 <HAL_RCC_OscConfig+0x164>
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d108      	bne.n	800468c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d134      	bne.n	80046f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e275      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d102      	bne.n	800469c <HAL_RCC_OscConfig+0x180>
 8004696:	f7ff fc05 	bl	8003ea4 <LL_RCC_HSE_Enable>
 800469a:	e001      	b.n	80046a0 <HAL_RCC_OscConfig+0x184>
 800469c:	f7ff fc11 	bl	8003ec2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d012      	beq.n	80046ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7ff f924 	bl	80038f4 <HAL_GetTick>
 80046ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7ff f920 	bl	80038f4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e25a      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046c2:	f7ff fc0d 	bl	8003ee0 <LL_RCC_HSE_IsReady>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f1      	beq.n	80046b0 <HAL_RCC_OscConfig+0x194>
 80046cc:	e011      	b.n	80046f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7ff f911 	bl	80038f4 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d6:	f7ff f90d 	bl	80038f4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	; 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e247      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046e8:	f7ff fbfa 	bl	8003ee0 <LL_RCC_HSE_IsReady>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f1      	bne.n	80046d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d04c      	beq.n	8004798 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	f7ff fd9c 	bl	800423a <LL_RCC_GetSysClkSource>
 8004702:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004704:	f7ff fea2 	bl	800444c <LL_RCC_PLL_GetMainSource>
 8004708:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x200>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d10e      	bne.n	8004734 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d10b      	bne.n	8004734 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e227      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fc19 	bl	8003f64 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004732:	e031      	b.n	8004798 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d019      	beq.n	8004770 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	f7ff fbe2 	bl	8003f04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7ff f8d8 	bl	80038f4 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004748:	f7ff f8d4 	bl	80038f4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e20e      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800475a:	f7ff fbf1 	bl	8003f40 <LL_RCC_HSI_IsReady>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f1      	beq.n	8004748 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fbfb 	bl	8003f64 <LL_RCC_HSI_SetCalibTrimming>
 800476e:	e013      	b.n	8004798 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004770:	f7ff fbd7 	bl	8003f22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7ff f8be 	bl	80038f4 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477c:	f7ff f8ba 	bl	80038f4 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1f4      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800478e:	f7ff fbd7 	bl	8003f40 <LL_RCC_HSI_IsReady>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f1      	bne.n	800477c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80a3 	beq.w	80048f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d076      	beq.n	80048a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d046      	beq.n	8004854 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80047c6:	f7ff fc5a 	bl	800407e <LL_RCC_LSI1_IsReady>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80047d0:	f7ff fc33 	bl	800403a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d4:	f7ff f88e 	bl	80038f4 <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047dc:	f7ff f88a 	bl	80038f4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1c4      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047ee:	f7ff fc46 	bl	800407e <LL_RCC_LSI1_IsReady>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f1      	beq.n	80047dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80047f8:	f7ff fc53 	bl	80040a2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7ff f87a 	bl	80038f4 <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004804:	f7ff f876 	bl	80038f4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b03      	cmp	r3, #3
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1b0      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004816:	f7ff fc66 	bl	80040e6 <LL_RCC_LSI2_IsReady>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f1      	beq.n	8004804 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fc70 	bl	800410a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800482a:	f7ff fc17 	bl	800405c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7ff f861 	bl	80038f4 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004836:	f7ff f85d 	bl	80038f4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e197      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004848:	f7ff fc19 	bl	800407e <LL_RCC_LSI1_IsReady>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f1      	bne.n	8004836 <HAL_RCC_OscConfig+0x31a>
 8004852:	e051      	b.n	80048f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004854:	f7ff fbf1 	bl	800403a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7ff f84c 	bl	80038f4 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800485e:	e00c      	b.n	800487a <HAL_RCC_OscConfig+0x35e>
 8004860:	20000010 	.word	0x20000010
 8004864:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004868:	f7ff f844 	bl	80038f4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e17e      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800487a:	f7ff fc00 	bl	800407e <LL_RCC_LSI1_IsReady>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f1      	beq.n	8004868 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004884:	f7ff fc1e 	bl	80040c4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800488a:	f7ff f833 	bl	80038f4 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e16d      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800489c:	f7ff fc23 	bl	80040e6 <LL_RCC_LSI2_IsReady>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f1      	bne.n	800488a <HAL_RCC_OscConfig+0x36e>
 80048a6:	e027      	b.n	80048f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80048a8:	f7ff fc0c 	bl	80040c4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7ff f822 	bl	80038f4 <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048b4:	f7ff f81e 	bl	80038f4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e158      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048c6:	f7ff fc0e 	bl	80040e6 <LL_RCC_LSI2_IsReady>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f1      	bne.n	80048b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80048d0:	f7ff fbc4 	bl	800405c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7ff f80e 	bl	80038f4 <HAL_GetTick>
 80048d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048dc:	f7ff f80a 	bl	80038f4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e144      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048ee:	f7ff fbc6 	bl	800407e <LL_RCC_LSI1_IsReady>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f1      	bne.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004904:	4b9e      	ldr	r3, [pc, #632]	; (8004b80 <HAL_RCC_OscConfig+0x664>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d114      	bne.n	800493a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004910:	f7ff faa6 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004914:	f7fe ffee 	bl	80038f4 <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7fe ffea 	bl	80038f4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e124      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492e:	4b94      	ldr	r3, [pc, #592]	; (8004b80 <HAL_RCC_OscConfig+0x664>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d102      	bne.n	8004948 <HAL_RCC_OscConfig+0x42c>
 8004942:	f7ff fb24 	bl	8003f8e <LL_RCC_LSE_Enable>
 8004946:	e00c      	b.n	8004962 <HAL_RCC_OscConfig+0x446>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d104      	bne.n	800495a <HAL_RCC_OscConfig+0x43e>
 8004950:	f7ff fb3f 	bl	8003fd2 <LL_RCC_LSE_EnableBypass>
 8004954:	f7ff fb1b 	bl	8003f8e <LL_RCC_LSE_Enable>
 8004958:	e003      	b.n	8004962 <HAL_RCC_OscConfig+0x446>
 800495a:	f7ff fb29 	bl	8003fb0 <LL_RCC_LSE_Disable>
 800495e:	f7ff fb49 	bl	8003ff4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496a:	f7fe ffc3 	bl	80038f4 <HAL_GetTick>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fe ffbf 	bl	80038f4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0f7      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004988:	f7ff fb45 	bl	8004016 <LL_RCC_LSE_IsReady>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ef      	beq.n	8004972 <HAL_RCC_OscConfig+0x456>
 8004992:	e013      	b.n	80049bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fe ffae 	bl	80038f4 <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fe ffaa 	bl	80038f4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0e2      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80049b2:	f7ff fb30 	bl	8004016 <LL_RCC_LSE_IsReady>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ef      	bne.n	800499c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80d8 	beq.w	8004b76 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c6:	f7ff fc38 	bl	800423a <LL_RCC_GetSysClkSource>
 80049ca:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	2b02      	cmp	r3, #2
 80049da:	f040 80a6 	bne.w	8004b2a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d123      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d114      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d054      	beq.n	8004ade <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d04f      	beq.n	8004ada <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a3a:	f7ff fcc1 	bl	80043c0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a3e:	f7fe ff59 	bl	80038f4 <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe ff55 	bl	80038f4 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e08f      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ef      	bne.n	8004a46 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b45      	ldr	r3, [pc, #276]	; (8004b84 <HAL_RCC_OscConfig+0x668>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a7e:	0212      	lsls	r2, r2, #8
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a92:	430a      	orrs	r2, r1
 8004a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a9c:	f7ff fc81 	bl	80043a2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab0:	f7fe ff20 	bl	80038f4 <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7fe ff1c 	bl	80038f4 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e056      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0ef      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad8:	e04d      	b.n	8004b76 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e04c      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d144      	bne.n	8004b76 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aec:	f7ff fc59 	bl	80043a2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b00:	f7fe fef8 	bl	80038f4 <HAL_GetTick>
 8004b04:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe fef4 	bl	80038f4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ef      	beq.n	8004b08 <HAL_RCC_OscConfig+0x5ec>
 8004b28:	e025      	b.n	8004b76 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b30:	f7ff fc46 	bl	80043c0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fe fede 	bl	80038f4 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fe feda 	bl	80038f4 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1ef      	bne.n	8004b3c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e001      	b.n	8004b76 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3734      	adds	r7, #52	; 0x34
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	58000400 	.word	0x58000400
 8004b84:	11c1808c 	.word	0x11c1808c

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e12d      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b98      	ldr	r3, [pc, #608]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d91b      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b95      	ldr	r3, [pc, #596]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 0207 	bic.w	r2, r3, #7
 8004bb2:	4993      	ldr	r1, [pc, #588]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fe fe9b 	bl	80038f4 <HAL_GetTick>
 8004bbe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bc2:	f7fe fe97 	bl	80038f4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e111      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd4:	4b8a      	ldr	r3, [pc, #552]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d1ef      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fb2d 	bl	8004252 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bf8:	f7fe fe7c 	bl	80038f4 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c00:	f7fe fe78 	bl	80038f4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0f2      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c12:	f7ff fc27 	bl	8004464 <LL_RCC_IsActiveFlag_HPRE>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f1      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fb24 	bl	800427a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c32:	f7fe fe5f 	bl	80038f4 <HAL_GetTick>
 8004c36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c3a:	f7fe fe5b 	bl	80038f4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0d5      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c4c:	f7ff fc1c 	bl	8004488 <LL_RCC_IsActiveFlag_C2HPRE>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f1      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fb1d 	bl	80042a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c6c:	f7fe fe42 	bl	80038f4 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c74:	f7fe fe3e 	bl	80038f4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0b8      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c86:	f7ff fc12 	bl	80044ae <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f1      	beq.n	8004c74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d016      	beq.n	8004cca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fb17 	bl	80042d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ca6:	f7fe fe25 	bl	80038f4 <HAL_GetTick>
 8004caa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cae:	f7fe fe21 	bl	80038f4 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e09b      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004cc0:	f7ff fc08 	bl	80044d4 <LL_RCC_IsActiveFlag_PPRE1>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f1      	beq.n	8004cae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fb0d 	bl	80042fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ce2:	f7fe fe07 	bl	80038f4 <HAL_GetTick>
 8004ce6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cea:	f7fe fe03 	bl	80038f4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e07d      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cfc:	f7ff fbfc 	bl	80044f8 <LL_RCC_IsActiveFlag_PPRE2>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f1      	beq.n	8004cea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d043      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d1a:	f7ff f8e1 	bl	8003ee0 <LL_RCC_HSE_IsReady>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11e      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e067      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d30:	f7ff fb55 	bl	80043de <LL_RCC_PLL_IsReady>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d113      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e05c      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004d46:	f7ff fa15 	bl	8004174 <LL_RCC_MSI_IsReady>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d108      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e051      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d54:	f7ff f8f4 	bl	8003f40 <LL_RCC_HSI_IsReady>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e04a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fa53 	bl	8004212 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fe fdc2 	bl	80038f4 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d74:	f7fe fdbe 	bl	80038f4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e036      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8a:	f7ff fa56 	bl	800423a <LL_RCC_GetSysClkSource>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d1ec      	bne.n	8004d74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d9a:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d21b      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 0207 	bic.w	r2, r3, #7
 8004db0:	4913      	ldr	r1, [pc, #76]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db8:	f7fe fd9c 	bl	80038f4 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004dc0:	f7fe fd98 	bl	80038f4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e012      	b.n	8004df8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_ClockConfig+0x278>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1ef      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004de0:	f000 f87e 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <HAL_RCC_ClockConfig+0x27c>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004dea:	f7fe fd8f 	bl	800390c <HAL_GetTickPrio>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe fc4d 	bl	8003690 <HAL_InitTick>
 8004df6:	4603      	mov	r3, r0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58004000 	.word	0x58004000
 8004e04:	20000010 	.word	0x20000010

08004e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	f7ff fa14 	bl	800423a <LL_RCC_GetSysClkSource>
 8004e12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e1a:	f7ff f9d0 	bl	80041be <LL_RCC_MSI_GetRange>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	4a2b      	ldr	r2, [pc, #172]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e04b      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d102      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e36:	4b28      	ldr	r3, [pc, #160]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e045      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d10a      	bne.n	8004e58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e42:	f7ff f81d 	bl	8003e80 <LL_RCC_HSE_IsEnabledDiv2>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d102      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e03a      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e037      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e58:	f7ff faf8 	bl	800444c <LL_RCC_PLL_GetMainSource>
 8004e5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d003      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x64>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x6a>
 8004e6a:	e00d      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e6e:	60bb      	str	r3, [r7, #8]
        break;
 8004e70:	e015      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e72:	f7ff f805 	bl	8003e80 <LL_RCC_HSE_IsEnabledDiv2>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004e7c:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004e80:	e00d      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e84:	60bb      	str	r3, [r7, #8]
        break;
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e88:	f7ff f999 	bl	80041be <LL_RCC_MSI_GetRange>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	60bb      	str	r3, [r7, #8]
        break;
 8004e9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004e9e:	f7ff fab0 	bl	8004402 <LL_RCC_PLL_GetN>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	fb03 f402 	mul.w	r4, r3, r2
 8004eaa:	f7ff fac3 	bl	8004434 <LL_RCC_PLL_GetDivider>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004eb8:	f7ff fab0 	bl	800441c <LL_RCC_PLL_GetR>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	0f5b      	lsrs	r3, r3, #29
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ec6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005c0c 	.word	0x08005c0c
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	01e84800 	.word	0x01e84800

08004ee0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee0:	b598      	push	{r3, r4, r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ee4:	f7ff ff90 	bl	8004e08 <HAL_RCC_GetSysClockFreq>
 8004ee8:	4604      	mov	r4, r0
 8004eea:	f7ff fa1b 	bl	8004324 <LL_RCC_GetAHBPrescaler>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <HAL_RCC_GetHCLKFreq+0x24>)
 8004ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd98      	pop	{r3, r4, r7, pc}
 8004f04:	08005bac 	.word	0x08005bac

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b598      	push	{r3, r4, r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f0c:	f7ff ffe8 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f10:	4604      	mov	r4, r0
 8004f12:	f7ff fa3a 	bl	800438a <LL_RCC_GetAPB2Prescaler>
 8004f16:	4603      	mov	r3, r0
 8004f18:	0adb      	lsrs	r3, r3, #11
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd98      	pop	{r3, r4, r7, pc}
 8004f30:	08005bec 	.word	0x08005bec

08004f34 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	226f      	movs	r2, #111	; 0x6f
 8004f42:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004f44:	f7ff f979 	bl	800423a <LL_RCC_GetSysClkSource>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004f4e:	f7ff f9e9 	bl	8004324 <LL_RCC_GetAHBPrescaler>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004f58:	f7ff fa0b 	bl	8004372 <LL_RCC_GetAPB1Prescaler>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004f62:	f7ff fa12 	bl	800438a <LL_RCC_GetAPB2Prescaler>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004f6c:	f7ff f9e6 	bl	800433c <LL_C2_RCC_GetAHBPrescaler>
 8004f70:	4602      	mov	r2, r0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004f76:	f7ff f9ee 	bl	8004356 <LL_RCC_GetAHB4Prescaler>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_RCC_GetClockConfig+0x60>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0207 	and.w	r2, r3, #7
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	58004000 	.word	0x58004000

08004f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2bb0      	cmp	r3, #176	; 0xb0
 8004fa4:	d903      	bls.n	8004fae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e007      	b.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004fbe:	f7ff f9ca 	bl	8004356 <LL_RCC_GetAHB4Prescaler>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	0c9b      	lsrs	r3, r3, #18
 8004fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f80c 	bl	8005004 <RCC_SetFlashLatency>
 8004fec:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	08005c0c 	.word	0x08005c0c
 8004ffc:	08005bac 	.word	0x08005bac
 8005000:	431bde83 	.word	0x431bde83

08005004 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b08f      	sub	sp, #60	; 0x3c
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <RCC_SetFlashLatency+0x9c>)
 8005010:	f107 041c 	add.w	r4, r7, #28
 8005014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <RCC_SetFlashLatency+0xa0>)
 800501c:	f107 040c 	add.w	r4, r7, #12
 8005020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800502a:	2300      	movs	r3, #0
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
 800502e:	e013      	b.n	8005058 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	3338      	adds	r3, #56	; 0x38
 8005036:	443b      	add	r3, r7
 8005038:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d807      	bhi.n	8005052 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	3338      	adds	r3, #56	; 0x38
 8005048:	443b      	add	r3, r7
 800504a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005050:	e005      	b.n	800505e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	3301      	adds	r3, #1
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2b03      	cmp	r3, #3
 800505c:	d9e8      	bls.n	8005030 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <RCC_SetFlashLatency+0xa4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4910      	ldr	r1, [pc, #64]	; (80050a8 <RCC_SetFlashLatency+0xa4>)
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800506e:	f7fe fc41 	bl	80038f4 <HAL_GetTick>
 8005072:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005074:	e008      	b.n	8005088 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005076:	f7fe fc3d 	bl	80038f4 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e007      	b.n	8005098 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <RCC_SetFlashLatency+0xa4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	429a      	cmp	r2, r3
 8005094:	d1ef      	bne.n	8005076 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	373c      	adds	r7, #60	; 0x3c
 800509c:	46bd      	mov	sp, r7
 800509e:	bd90      	pop	{r4, r7, pc}
 80050a0:	08005b80 	.word	0x08005b80
 80050a4:	08005b90 	.word	0x08005b90
 80050a8:	58004000 	.word	0x58004000

080050ac <LL_RCC_LSE_IsEnabled>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <LL_RCC_LSE_IsEnabled+0x18>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <LL_RCC_LSE_IsReady>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d101      	bne.n	80050e8 <LL_RCC_LSE_IsReady+0x18>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <LL_RCC_LSE_IsReady+0x1a>
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_MSI_EnablePLLMode>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <LL_RCC_SetRFWKPClockSource>:
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005122:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <LL_RCC_SetSMPSClockSource>:
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f023 0203 	bic.w	r2, r3, #3
 8005150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4313      	orrs	r3, r2
 8005158:	624b      	str	r3, [r1, #36]	; 0x24
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_SetSMPSPrescaler>:
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4313      	orrs	r3, r2
 8005180:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <LL_RCC_SetUSARTClockSource>:
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f023 0203 	bic.w	r2, r3, #3
 80051a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_SetLPUARTClockSource>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_RCC_SetI2CClockSource>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80051fe:	43db      	mvns	r3, r3
 8005200:	401a      	ands	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800520a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_RCC_SetLPTIMClockSource>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	43db      	mvns	r3, r3
 8005238:	401a      	ands	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_RCC_SetRNGClockSource>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_SetCLK48ClockSource>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_SetADCClockSource>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_SetRTCClockSource>:
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_RCC_GetRTCClockSource>:
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005314:	4618      	mov	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_RCC_ForceBackupDomainReset>:
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800532e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800536a:	2300      	movs	r3, #0
 800536c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800536e:	2300      	movs	r3, #0
 8005370:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537a:	2b00      	cmp	r3, #0
 800537c:	d046      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800537e:	f7ff ffc1 	bl	8005304 <LL_RCC_GetRTCClockSource>
 8005382:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	429a      	cmp	r2, r3
 800538c:	d03c      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800538e:	f7fe fd67 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff ff9b 	bl	80052d8 <LL_RCC_SetRTCClockSource>
 80053a2:	e02e      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80053ae:	f7ff ffb6 	bl	800531e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053b2:	f7ff ffc5 	bl	8005340 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053ce:	f7ff fe6d 	bl	80050ac <LL_RCC_LSE_IsEnabled>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d114      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053d8:	f7fe fa8c 	bl	80038f4 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80053de:	e00b      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fe fa88 	bl	80038f4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d902      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	77fb      	strb	r3, [r7, #31]
              break;
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80053f8:	f7ff fe6a 	bl	80050d0 <LL_RCC_LSE_IsReady>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d1ee      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005402:	7ffb      	ldrb	r3, [r7, #31]
 8005404:	77bb      	strb	r3, [r7, #30]
 8005406:	e001      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005408:	7ffb      	ldrb	r3, [r7, #31]
 800540a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff feb6 	bl	800518e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fec1 	bl	80051ba <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fee9 	bl	8005220 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fede 	bl	8005220 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff feb6 	bl	80051e6 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005482:	2b00      	cmp	r3, #0
 8005484:	d02b      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d008      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005498:	d003      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fed4 	bl	8005254 <LL_RCC_SetRNGClockSource>
 80054ac:	e00a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7ff fecb 	bl	8005254 <LL_RCC_SetRNGClockSource>
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff fede 	bl	8005280 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80054cc:	d107      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d011      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fedc 	bl	80052ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fc:	d107      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fdf7 	bl	8005112 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fe16 	bl	8005166 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fdfd 	bl	800513e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005544:	7fbb      	ldrb	r3, [r7, #30]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005552:	f7ff fdcf 	bl	80050f4 <LL_RCC_MSI_EnablePLLMode>
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e049      	b.n	8005600 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f841 	bl	8005608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f9d5 	bl	8005948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d001      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e036      	b.n	80056a2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <HAL_TIM_Base_Start_IT+0x94>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x44>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d115      	bne.n	800568c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_TIM_Base_Start_IT+0x98>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d015      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x82>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005678:	d011      	beq.n	800569e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e008      	b.n	800569e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e000      	b.n	80056a0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	00010007 	.word	0x00010007

080056b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0202 	mvn.w	r2, #2
 80056e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f905 	bl	800590a <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8f7 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f908 	bl	800591e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d122      	bne.n	8005768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d11b      	bne.n	8005768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0204 	mvn.w	r2, #4
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8db 	bl	800590a <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8cd 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f8de 	bl	800591e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b08      	cmp	r3, #8
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b08      	cmp	r3, #8
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0208 	mvn.w	r2, #8
 800578c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2204      	movs	r2, #4
 8005792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8b1 	bl	800590a <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f8a3 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8b4 	bl	800591e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2208      	movs	r2, #8
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f887 	bl	800590a <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f879 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f88a 	bl	800591e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d10e      	bne.n	800583c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d107      	bne.n	800583c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0201 	mvn.w	r2, #1
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fef4 	bl	8003624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	2b80      	cmp	r3, #128	; 0x80
 8005848:	d10e      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d107      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8ca 	bl	80059fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005876:	d10e      	bne.n	8005896 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d107      	bne.n	8005896 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800588e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f8bd 	bl	8005a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d10e      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d107      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f838 	bl	8005932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d10e      	bne.n	80058ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d107      	bne.n	80058ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0220 	mvn.w	r2, #32
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f87d 	bl	80059e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <TIM_Base_SetConfig+0x9c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0x20>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005966:	d108      	bne.n	800597a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <TIM_Base_SetConfig+0x9c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_Base_SetConfig+0x42>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d108      	bne.n	800599c <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <TIM_Base_SetConfig+0x9c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40012c00 	.word	0x40012c00

080059e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <__libc_init_array>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4d0d      	ldr	r5, [pc, #52]	; (8005a5c <__libc_init_array+0x38>)
 8005a28:	4c0d      	ldr	r4, [pc, #52]	; (8005a60 <__libc_init_array+0x3c>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	2600      	movs	r6, #0
 8005a30:	42a6      	cmp	r6, r4
 8005a32:	d109      	bne.n	8005a48 <__libc_init_array+0x24>
 8005a34:	4d0b      	ldr	r5, [pc, #44]	; (8005a64 <__libc_init_array+0x40>)
 8005a36:	4c0c      	ldr	r4, [pc, #48]	; (8005a68 <__libc_init_array+0x44>)
 8005a38:	f000 f83e 	bl	8005ab8 <_init>
 8005a3c:	1b64      	subs	r4, r4, r5
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	2600      	movs	r6, #0
 8005a42:	42a6      	cmp	r6, r4
 8005a44:	d105      	bne.n	8005a52 <__libc_init_array+0x2e>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4c:	4798      	blx	r3
 8005a4e:	3601      	adds	r6, #1
 8005a50:	e7ee      	b.n	8005a30 <__libc_init_array+0xc>
 8005a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a56:	4798      	blx	r3
 8005a58:	3601      	adds	r6, #1
 8005a5a:	e7f2      	b.n	8005a42 <__libc_init_array+0x1e>
 8005a5c:	08005c4c 	.word	0x08005c4c
 8005a60:	08005c4c 	.word	0x08005c4c
 8005a64:	08005c4c 	.word	0x08005c4c
 8005a68:	08005c50 	.word	0x08005c50

08005a6c <memcmp>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	3901      	subs	r1, #1
 8005a70:	4402      	add	r2, r0
 8005a72:	4290      	cmp	r0, r2
 8005a74:	d101      	bne.n	8005a7a <memcmp+0xe>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e005      	b.n	8005a86 <memcmp+0x1a>
 8005a7a:	7803      	ldrb	r3, [r0, #0]
 8005a7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d001      	beq.n	8005a88 <memcmp+0x1c>
 8005a84:	1b18      	subs	r0, r3, r4
 8005a86:	bd10      	pop	{r4, pc}
 8005a88:	3001      	adds	r0, #1
 8005a8a:	e7f2      	b.n	8005a72 <memcmp+0x6>

08005a8c <memcpy>:
 8005a8c:	440a      	add	r2, r1
 8005a8e:	4291      	cmp	r1, r2
 8005a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a94:	d100      	bne.n	8005a98 <memcpy+0xc>
 8005a96:	4770      	bx	lr
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	d1f9      	bne.n	8005a9a <memcpy+0xe>
 8005aa6:	bd10      	pop	{r4, pc}

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
