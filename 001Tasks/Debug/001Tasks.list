
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000008  08007204  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002424  20000080  0800727c  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200024a4  0800727c  000224a4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000165a4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000322a  00000000  00000000  00036654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001800  00000000  00000000  00039880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001668  00000000  00000000  0003b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001fa92  00000000  00000000  0003c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000169f9  00000000  00000000  0005c17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c50ad  00000000  00000000  00072b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00137c20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006c24  00000000  00000000  00137c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08006f50 	.word	0x08006f50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08006f50 	.word	0x08006f50

08000180 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000180:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000182:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000186:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000210 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800018a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800018e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000192:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000194:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000196:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000198:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800019a:	d332      	bcc.n	8000202 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800019c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800019e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001a0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001a2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001a4:	d314      	bcc.n	80001d0 <_CheckCase2>

080001a6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001a6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001a8:	19d0      	adds	r0, r2, r7
 80001aa:	bf00      	nop

080001ac <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001ac:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001b4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001b6:	d005      	beq.n	80001c4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001b8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001bc:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001c0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001c2:	d1f3      	bne.n	80001ac <_LoopCopyStraight>

080001c4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001c4:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001c8:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001ca:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001ce:	4770      	bx	lr

080001d0 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 80001d0:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 80001d2:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001d4:	d319      	bcc.n	800020a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001d6:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001d8:	1b12      	subs	r2, r2, r4

080001da <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001da:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001de:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001e2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001e4:	d1f9      	bne.n	80001da <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001e6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001e8:	d005      	beq.n	80001f6 <_No2ChunkNeeded>

080001ea <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001ea:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ee:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001f2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001f4:	d1f9      	bne.n	80001ea <_LoopCopyAfterWrapAround>

080001f6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001f6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001fa:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001fc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001fe:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000200:	4770      	bx	lr

08000202 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000202:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000204:	3801      	subs	r0, #1
        CMP      R0,R2
 8000206:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000208:	d2cd      	bcs.n	80001a6 <_Case4>

0800020a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800020a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800020c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800020e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000210:	200016bc 	.word	0x200016bc
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80002c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002d0:	f023 0218 	bic.w	r2, r3, #24
 80002d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4313      	orrs	r3, r2
 8000302:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4013      	ands	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000310:	68fb      	ldr	r3, [r7, #12]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fad5 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032a:	f000 f853 	bl	80003d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800032e:	f000 f8a5 	bl	800047c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000332:	f000 f8c1 	bl	80004b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <main+0x98>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a1f      	ldr	r2, [pc, #124]	; (80003b8 <main+0x98>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6013      	str	r3, [r2, #0]

  // Call Segger APIs to start tracing
  SEGGER_SYSVIEW_Conf();
 8000342:	f003 fcc7 	bl	8003cd4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000346:	f004 ffc7 	bl	80052d8 <SEGGER_SYSVIEW_Start>

  // Create tasks
  status = xTaskCreate(task1_handler,
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <main+0x9c>)
 8000356:	22c8      	movs	r2, #200	; 0xc8
 8000358:	4919      	ldr	r1, [pc, #100]	; (80003c0 <main+0xa0>)
 800035a:	481a      	ldr	r0, [pc, #104]	; (80003c4 <main+0xa4>)
 800035c:	f002 fbc3 	bl	8002ae6 <xTaskCreate>
 8000360:	6178      	str	r0, [r7, #20]
		  "Task-1",
		  200,
		  "Hello World from Task-1",
		  2, &task1_handle);

  configASSERT(status == pdPASS);
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d00a      	beq.n	800037e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800036c:	f383 8811 	msr	BASEPRI, r3
 8000370:	f3bf 8f6f 	isb	sy
 8000374:	f3bf 8f4f 	dsb	sy
 8000378:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800037a:	bf00      	nop
 800037c:	e7fe      	b.n	800037c <main+0x5c>

  status = xTaskCreate(task2_handler,
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2302      	movs	r3, #2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <main+0xa8>)
 8000388:	22c8      	movs	r2, #200	; 0xc8
 800038a:	4910      	ldr	r1, [pc, #64]	; (80003cc <main+0xac>)
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <main+0xb0>)
 800038e:	f002 fbaa 	bl	8002ae6 <xTaskCreate>
 8000392:	6178      	str	r0, [r7, #20]
		  "Task-2",
		  200,
		  "Hello World from Task-2",
		  2, &task2_handle);

  configASSERT(status == pdPASS);
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d00a      	beq.n	80003b0 <main+0x90>
        __asm volatile
 800039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800039e:	f383 8811 	msr	BASEPRI, r3
 80003a2:	f3bf 8f6f 	isb	sy
 80003a6:	f3bf 8f4f 	dsb	sy
 80003aa:	60fb      	str	r3, [r7, #12]
    }
 80003ac:	bf00      	nop
 80003ae:	e7fe      	b.n	80003ae <main+0x8e>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 80003b0:	f002 fcee 	bl	8002d90 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x94>
 80003b6:	bf00      	nop
 80003b8:	e0001000 	.word	0xe0001000
 80003bc:	08006f68 	.word	0x08006f68
 80003c0:	08006f80 	.word	0x08006f80
 80003c4:	08000569 	.word	0x08000569
 80003c8:	08006f88 	.word	0x08006f88
 80003cc:	08006fa0 	.word	0x08006fa0
 80003d0:	080005a5 	.word	0x080005a5

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b098      	sub	sp, #96	; 0x60
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 031c 	add.w	r3, r7, #28
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f005 fd3c 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	463b      	mov	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003fa:	f000 fd17 	bl	8000e2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff5e 	bl	80002c0 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000404:	2327      	movs	r3, #39	; 0x27
 8000406:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800040e:	2301      	movs	r3, #1
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000420:	2300      	movs	r3, #0
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000424:	2360      	movs	r3, #96	; 0x60
 8000426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000428:	2300      	movs	r3, #0
 800042a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042c:	f107 031c 	add.w	r3, r7, #28
 8000430:	4618      	mov	r0, r3
 8000432:	f001 f859 	bl	80014e8 <HAL_RCC_OscConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800043c:	f000 f8e1 	bl	8000602 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000440:	236f      	movs	r3, #111	; 0x6f
 8000442:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fb77 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800046c:	f000 f8c9 	bl	8000602 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000470:	f002 f853 	bl	800251a <HAL_RCCEx_EnableMSIPLLMode>
}
 8000474:	bf00      	nop
 8000476:	3760      	adds	r7, #96	; 0x60
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	; 0x30
 8000480:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000482:	463b      	mov	r3, r7
 8000484:	2230      	movs	r2, #48	; 0x30
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f005 fce9 	bl	8005e60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000494:	2300      	movs	r3, #0
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000498:	2310      	movs	r3, #16
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 ff45 	bl	800232e <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80004aa:	f000 f8aa 	bl	8000602 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80004ae:	bf00      	nop
 80004b0:	3730      	adds	r7, #48	; 0x30
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	2004      	movs	r0, #4
 80004ce:	f7ff ff0d 	bl	80002ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff ff0a 	bl	80002ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	2002      	movs	r0, #2
 80004da:	f7ff ff07 	bl	80002ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2010      	movs	r0, #16
 80004e0:	f7ff ff04 	bl	80002ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2123      	movs	r1, #35	; 0x23
 80004e8:	481d      	ldr	r0, [pc, #116]	; (8000560 <MX_GPIO_Init+0xa8>)
 80004ea:	f000 fc87 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80004ee:	2340      	movs	r3, #64	; 0x40
 80004f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fb13 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800050a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000518:	2307      	movs	r3, #7
 800051a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f000 fb02 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000528:	2323      	movs	r3, #35	; 0x23
 800052a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <MX_GPIO_Init+0xa8>)
 800053e:	f000 faf5 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000542:	2310      	movs	r3, #16
 8000544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_GPIO_Init+0xac>)
 8000554:	f000 faea 	bl	8000b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	48000400 	.word	0x48000400
 8000564:	48001000 	.word	0x48001000

08000568 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09c      	sub	sp, #112	; 0x70
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	char buf[100];
	while(1)
	{
		taskYIELD();
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <task1_handler+0x34>)
 8000572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	f3bf 8f4f 	dsb	sy
 800057c:	f3bf 8f6f 	isb	sy
		snprintf(buf, sizeof(buf), "%s\n",(char*)parameters);
 8000580:	f107 000c 	add.w	r0, r7, #12
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <task1_handler+0x38>)
 8000588:	2164      	movs	r1, #100	; 0x64
 800058a:	f005 fce7 	bl	8005f5c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(buf);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fba0 	bl	8005cd8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000598:	e7ea      	b.n	8000570 <task1_handler+0x8>
 800059a:	bf00      	nop
 800059c:	e000ed04 	.word	0xe000ed04
 80005a0:	08006fa8 	.word	0x08006fa8

080005a4 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b09c      	sub	sp, #112	; 0x70
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	char buf[100];
	while(1)
	{
		printf("%s\n",(char*)parameters);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f005 fccd 	bl	8005f4c <puts>
		taskYIELD();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <task2_handler+0x38>)
 80005b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	f3bf 8f6f 	isb	sy
		snprintf(buf, sizeof(buf), "%s\n",(char*)parameters);
 80005c2:	f107 000c 	add.w	r0, r7, #12
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <task2_handler+0x3c>)
 80005ca:	2164      	movs	r1, #100	; 0x64
 80005cc:	f005 fcc6 	bl	8005f5c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(buf);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 fb7f 	bl	8005cd8 <SEGGER_SYSVIEW_PrintfTarget>
		printf("%s\n",(char*)parameters);
 80005da:	e7e7      	b.n	80005ac <task2_handler+0x8>
 80005dc:	e000ed04 	.word	0xe000ed04
 80005e0:	08006fa8 	.word	0x08006fa8

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 f98d 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000606:	b672      	cpsid	i
}
 8000608:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <Error_Handler+0x8>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8000610:	f002 ffaa 	bl	8003568 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000634:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063c:	68fb      	ldr	r3, [r7, #12]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	201c      	movs	r0, #28
 8000662:	f000 fa3b 	bl	8000adc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000666:	201c      	movs	r0, #28
 8000668:	f000 fa52 	bl	8000b10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ffd3 	bl	8000618 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000672:	f107 0208 	add.w	r2, r7, #8
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fc3f 	bl	8001f00 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000682:	f001 fc27 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8000686:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <HAL_InitTick+0x8c>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	0c9b      	lsrs	r3, r3, #18
 8000692:	3b01      	subs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_InitTick+0x90>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_InitTick+0x90>)
 80006a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_InitTick+0x90>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_InitTick+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_InitTick+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <HAL_InitTick+0x90>)
 80006ba:	f001 ff34 	bl	8002526 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d104      	bne.n	80006ce <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_InitTick+0x90>)
 80006c6:	f001 ff8f 	bl	80025e8 <HAL_TIM_Base_Start_IT>
 80006ca:	4603      	mov	r3, r0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3730      	adds	r7, #48	; 0x30
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	431bde83 	.word	0x431bde83
 80006dc:	2000009c 	.word	0x2000009c

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM2_IRQHandler+0x10>)
 8000712:	f001 ffb7 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000009c 	.word	0x2000009c

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_close>:
	}
	return len;
}

int _close(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000782:	605a      	str	r2, [r3, #4]
  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <_isatty>:

int _isatty(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemInit+0x90>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemInit+0x90>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <SystemInit+0x94>)
 80007fe:	4013      	ands	r3, r2
 8000800:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800080a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800080e:	f023 0305 	bic.w	r3, r3, #5
 8000812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800081e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000822:	f023 0301 	bic.w	r3, r3, #1
 8000826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <SystemInit+0x98>)
 8000830:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800083c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000840:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	faf6fefb 	.word	0xfaf6fefb
 800085c:	22041000 	.word	0x22041000

08000860 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000860:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000862:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000864:	3304      	adds	r3, #4

08000866 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000866:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000868:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800086a:	d3f9      	bcc.n	8000860 <CopyDataInit>
  bx lr
 800086c:	4770      	bx	lr

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800086e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000870:	3004      	adds	r0, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000872:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>
  bx lr
 8000876:	4770      	bx	lr

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff ffa2 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <LoopForever+0x6>)
 8000882:	490c      	ldr	r1, [pc, #48]	; (80008b4 <LoopForever+0xa>)
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <LoopForever+0xe>)
 8000886:	2300      	movs	r3, #0
 8000888:	f7ff ffed 	bl	8000866 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <LoopForever+0x12>)
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <LoopForever+0x16>)
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <LoopForever+0x1a>)
 8000892:	2300      	movs	r3, #0
 8000894:	f7ff ffe7 	bl	8000866 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <LoopForever+0x1e>)
 800089a:	490c      	ldr	r1, [pc, #48]	; (80008cc <LoopForever+0x22>)
 800089c:	2300      	movs	r3, #0
 800089e:	f7ff ffe8 	bl	8000872 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f005 fa9b 	bl	8005ddc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008a6:	f7ff fd3b 	bl	8000320 <main>

080008aa <LoopForever>:

LoopForever:
  b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000080 	.word	0x20000080
 80008b8:	08007204 	.word	0x08007204
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80008bc:	20030000 	.word	0x20030000
 80008c0:	20030000 	.word	0x20030000
 80008c4:	0800727c 	.word	0x0800727c
  INIT_BSS _sbss, _ebss
 80008c8:	20000080 	.word	0x20000080
 80008cc:	200024a4 	.word	0x200024a4

080008d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_Init+0x3c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_Init+0x3c>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ea:	2003      	movs	r0, #3
 80008ec:	f000 f8eb 	bl	8000ac6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f0:	200f      	movs	r0, #15
 80008f2:	f7ff feab 	bl	800064c <HAL_InitTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	e001      	b.n	8000906 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000902:	f7ff fe83 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000906:	79fb      	ldrb	r3, [r7, #7]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58004000 	.word	0x58004000

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000010 	.word	0x20000010
 8000938:	200000e8 	.word	0x200000e8

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200000e8 	.word	0x200000e8

08000954 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTickPrio+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000000c 	.word	0x2000000c

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff4c 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aea:	f7ff ff63 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	6978      	ldr	r0, [r7, #20]
 8000af6:	f7ff ffb3 	bl	8000a60 <NVIC_EncodePriority>
 8000afa:	4602      	mov	r2, r0
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff82 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff56 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e146      	b.n	8000dca <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8138 	beq.w	8000dc4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_Init+0x40>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	f003 0201 	and.w	r2, r3, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d017      	beq.n	8000c0a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d123      	bne.n	8000c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	08da      	lsrs	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3208      	adds	r2, #8
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	6939      	ldr	r1, [r7, #16]
 8000c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0203 	and.w	r2, r3, #3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 8092 	beq.w	8000dc4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ca0:	4a51      	ldr	r2, [pc, #324]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cca:	d013      	beq.n	8000cf4 <HAL_GPIO_Init+0x1c8>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a47      	ldr	r2, [pc, #284]	; (8000dec <HAL_GPIO_Init+0x2c0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00d      	beq.n	8000cf0 <HAL_GPIO_Init+0x1c4>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d007      	beq.n	8000cec <HAL_GPIO_Init+0x1c0>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_GPIO_Init+0x2c8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_GPIO_Init+0x1bc>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1ca>
 8000ce8:	2307      	movs	r3, #7
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1ca>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1ca>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1ca>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d06:	4938      	ldr	r1, [pc, #224]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f aeb1 	bne.w	8000b3c <HAL_GPIO_Init+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40010000 	.word	0x40010000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48001000 	.word	0x48001000
 8000df8:	58000800 	.word	0x58000800

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	58000400 	.word	0x58000400

08000e4c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e5e:	d101      	bne.n	8000e64 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_HSE_Enable>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_RCC_HSE_Disable>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_RCC_HSE_IsReady>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ebe:	d101      	bne.n	8000ec4 <LL_RCC_HSE_IsReady+0x18>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_RCC_HSE_IsReady+0x1a>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_RCC_HSI_Enable>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_RCC_HSI_Disable>:
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_RCC_HSI_IsReady>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d101      	bne.n	8000f24 <LL_RCC_HSI_IsReady+0x18>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <LL_RCC_HSI_IsReady+0x1a>
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	061b      	lsls	r3, r3, #24
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_RCC_LSE_Enable>:
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_RCC_LSE_Disable>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_RCC_LSE_EnableBypass>:
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_RCC_LSE_DisableBypass>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d101      	bne.n	8000ffa <LL_RCC_LSE_IsReady+0x18>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_RCC_LSE_IsReady+0x1a>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800104e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b02      	cmp	r3, #2
 800105c:	d101      	bne.n	8001062 <LL_RCC_LSI1_IsReady+0x18>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <LL_RCC_LSI1_IsReady+0x1a>
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d101      	bne.n	80010ca <LL_RCC_LSI2_IsReady+0x18>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_RCC_LSI2_IsReady+0x1a>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	4313      	orrs	r3, r2
 80010f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d101      	bne.n	8001156 <LL_RCC_MSI_IsReady+0x16>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_RCC_MSI_IsReady+0x18>
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2bb0      	cmp	r3, #176	; 0xb0
 80011a0:	d901      	bls.n	80011a6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80011a2:	23b0      	movs	r3, #176	; 0xb0
 80011a4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 0203 	bic.w	r2, r3, #3
 80011f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4313      	orrs	r3, r2
 8001262:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001282:	f023 020f 	bic.w	r2, r3, #15
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800128e:	4313      	orrs	r3, r2
 8001290:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800135a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001380:	6013      	str	r3, [r2, #0]
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013bc:	d101      	bne.n	80013c2 <LL_RCC_PLL_IsReady+0x18>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_RCC_PLL_IsReady+0x1a>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0303 	and.w	r3, r3, #3
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d101      	bne.n	8001448 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001468:	d101      	bne.n	800146e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d101      	bne.n	8001494 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014b2:	d101      	bne.n	80014b8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014d6:	d101      	bne.n	80014dc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08d      	sub	sp, #52	; 0x34
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e324      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 808d 	beq.w	8001622 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001508:	f7ff fe7d 	bl	8001206 <LL_RCC_GetSysClkSource>
 800150c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150e:	f7ff ff83 	bl	8001418 <LL_RCC_PLL_GetMainSource>
 8001512:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x3e>
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d147      	bne.n	80015b0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	2b01      	cmp	r3, #1
 8001524:	d144      	bne.n	80015b0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e308      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001536:	f7ff fe28 	bl	800118a <LL_RCC_MSI_GetRange>
 800153a:	4603      	mov	r3, r0
 800153c:	429c      	cmp	r4, r3
 800153e:	d914      	bls.n	800156a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fd0d 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e2f7      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe02 	bl	8001162 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fe26 	bl	80011b4 <LL_RCC_MSI_SetCalibTrimming>
 8001568:	e013      	b.n	8001592 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fdf7 	bl	8001162 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe1b 	bl	80011b4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fcee 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e2d8      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001592:	f000 fc8b 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001596:	4603      	mov	r3, r0
 8001598:	4aa4      	ldr	r2, [pc, #656]	; (800182c <HAL_RCC_OscConfig+0x344>)
 800159a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800159c:	4ba4      	ldr	r3, [pc, #656]	; (8001830 <HAL_RCC_OscConfig+0x348>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f853 	bl	800064c <HAL_InitTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d039      	beq.n	8001620 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2c9      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01e      	beq.n	80015f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b8:	f7ff fda4 	bl	8001104 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f9be 	bl	800093c <HAL_GetTick>
 80015c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c4:	f7ff f9ba 	bl	800093c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2b6      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80015d6:	f7ff fdb3 	bl	8001140 <LL_RCC_MSI_IsReady>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f1      	beq.n	80015c4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fdbc 	bl	8001162 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fde0 	bl	80011b4 <LL_RCC_MSI_SetCalibTrimming>
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f6:	f7ff fd94 	bl	8001122 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f99f 	bl	800093c <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff f99b 	bl	800093c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e297      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001614:	f7ff fd94 	bl	8001140 <LL_RCC_MSI_IsReady>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x11a>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001620:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d047      	beq.n	80016be <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	f7ff fdea 	bl	8001206 <LL_RCC_GetSysClkSource>
 8001632:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	f7ff fef0 	bl	8001418 <LL_RCC_PLL_GetMainSource>
 8001638:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x164>
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d134      	bne.n	80016be <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e275      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x180>
 8001662:	f7ff fc05 	bl	8000e70 <LL_RCC_HSE_Enable>
 8001666:	e001      	b.n	800166c <HAL_RCC_OscConfig+0x184>
 8001668:	f7ff fc11 	bl	8000e8e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f962 	bl	800093c <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff f95e 	bl	800093c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e25a      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800168e:	f7ff fc0d 	bl	8000eac <LL_RCC_HSE_IsReady>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f1      	beq.n	800167c <HAL_RCC_OscConfig+0x194>
 8001698:	e011      	b.n	80016be <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f94f 	bl	800093c <HAL_GetTick>
 800169e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff f94b 	bl	800093c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e247      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80016b4:	f7ff fbfa 	bl	8000eac <LL_RCC_HSE_IsReady>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f1      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d04c      	beq.n	8001764 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	f7ff fd9c 	bl	8001206 <LL_RCC_GetSysClkSource>
 80016ce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d0:	f7ff fea2 	bl	8001418 <LL_RCC_PLL_GetMainSource>
 80016d4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x200>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e227      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc19 	bl	8000f30 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016fe:	e031      	b.n	8001764 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d019      	beq.n	800173c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	f7ff fbe2 	bl	8000ed0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f916 	bl	800093c <HAL_GetTick>
 8001710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff f912 	bl	800093c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e20e      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001726:	f7ff fbf1 	bl	8000f0c <LL_RCC_HSI_IsReady>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f1      	beq.n	8001714 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fbfb 	bl	8000f30 <LL_RCC_HSI_SetCalibTrimming>
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173c:	f7ff fbd7 	bl	8000eee <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f8fc 	bl	800093c <HAL_GetTick>
 8001744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff f8f8 	bl	800093c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f4      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800175a:	f7ff fbd7 	bl	8000f0c <LL_RCC_HSI_IsReady>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f1      	bne.n	8001748 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a3 	beq.w	80018c4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d076      	beq.n	8001874 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	d046      	beq.n	8001820 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001792:	f7ff fc5a 	bl	800104a <LL_RCC_LSI1_IsReady>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800179c:	f7ff fc33 	bl	8001006 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a0:	f7ff f8cc 	bl	800093c <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017a8:	f7ff f8c8 	bl	800093c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1c4      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80017ba:	f7ff fc46 	bl	800104a <LL_RCC_LSI1_IsReady>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f1      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80017c4:	f7ff fc53 	bl	800106e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8b8 	bl	800093c <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017d0:	f7ff f8b4 	bl	800093c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1b0      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80017e2:	f7ff fc66 	bl	80010b2 <LL_RCC_LSI2_IsReady>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f1      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc70 	bl	80010d6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80017f6:	f7ff fc17 	bl	8001028 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff f89f 	bl	800093c <HAL_GetTick>
 80017fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001802:	f7ff f89b 	bl	800093c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e197      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001814:	f7ff fc19 	bl	800104a <LL_RCC_LSI1_IsReady>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f1      	bne.n	8001802 <HAL_RCC_OscConfig+0x31a>
 800181e:	e051      	b.n	80018c4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001820:	f7ff fbf1 	bl	8001006 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f88a 	bl	800093c <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800182a:	e00c      	b.n	8001846 <HAL_RCC_OscConfig+0x35e>
 800182c:	20000008 	.word	0x20000008
 8001830:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001834:	f7ff f882 	bl	800093c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e17e      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001846:	f7ff fc00 	bl	800104a <LL_RCC_LSI1_IsReady>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f1      	beq.n	8001834 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001850:	f7ff fc1e 	bl	8001090 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001856:	f7ff f871 	bl	800093c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b03      	cmp	r3, #3
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e16d      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001868:	f7ff fc23 	bl	80010b2 <LL_RCC_LSI2_IsReady>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f1      	bne.n	8001856 <HAL_RCC_OscConfig+0x36e>
 8001872:	e027      	b.n	80018c4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001874:	f7ff fc0c 	bl	8001090 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f860 	bl	800093c <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001880:	f7ff f85c 	bl	800093c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e158      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001892:	f7ff fc0e 	bl	80010b2 <LL_RCC_LSI2_IsReady>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f1      	bne.n	8001880 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800189c:	f7ff fbc4 	bl	8001028 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f84c 	bl	800093c <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018a8:	f7ff f848 	bl	800093c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e144      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80018ba:	f7ff fbc6 	bl	800104a <LL_RCC_LSI1_IsReady>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f1      	bne.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	4b9e      	ldr	r3, [pc, #632]	; (8001b4c <HAL_RCC_OscConfig+0x664>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d114      	bne.n	8001906 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80018dc:	f7ff faa6 	bl	8000e2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e0:	f7ff f82c 	bl	800093c <HAL_GetTick>
 80018e4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e8:	f7ff f828 	bl	800093c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e124      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fa:	4b94      	ldr	r3, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x664>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x42c>
 800190e:	f7ff fb24 	bl	8000f5a <LL_RCC_LSE_Enable>
 8001912:	e00c      	b.n	800192e <HAL_RCC_OscConfig+0x446>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d104      	bne.n	8001926 <HAL_RCC_OscConfig+0x43e>
 800191c:	f7ff fb3f 	bl	8000f9e <LL_RCC_LSE_EnableBypass>
 8001920:	f7ff fb1b 	bl	8000f5a <LL_RCC_LSE_Enable>
 8001924:	e003      	b.n	800192e <HAL_RCC_OscConfig+0x446>
 8001926:	f7ff fb29 	bl	8000f7c <LL_RCC_LSE_Disable>
 800192a:	f7ff fb49 	bl	8000fc0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d014      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff f801 	bl	800093c <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7fe fffd 	bl	800093c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0f7      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001954:	f7ff fb45 	bl	8000fe2 <LL_RCC_LSE_IsReady>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ef      	beq.n	800193e <HAL_RCC_OscConfig+0x456>
 800195e:	e013      	b.n	8001988 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7fe ffec 	bl	800093c <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7fe ffe8 	bl	800093c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0e2      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800197e:	f7ff fb30 	bl	8000fe2 <LL_RCC_LSE_IsReady>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ef      	bne.n	8001968 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80d8 	beq.w	8001b42 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	f7ff fc38 	bl	8001206 <LL_RCC_GetSysClkSource>
 8001996:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	f040 80a6 	bne.w	8001af6 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d123      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d114      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d054      	beq.n	8001aaa <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d04f      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a06:	f7ff fcc1 	bl	800138c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0a:	f7fe ff97 	bl	800093c <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7fe ff93 	bl	800093c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e08f      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ef      	bne.n	8001a12 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_RCC_OscConfig+0x668>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a68:	f7ff fc81 	bl	800136e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7c:	f7fe ff5e 	bl	800093c <HAL_GetTick>
 8001a80:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7fe ff5a 	bl	800093c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e056      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ef      	beq.n	8001a84 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	e04d      	b.n	8001b42 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04c      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d144      	bne.n	8001b42 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab8:	f7ff fc59 	bl	800136e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001acc:	f7fe ff36 	bl	800093c <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe ff32 	bl	800093c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ef      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x5ec>
 8001af4:	e025      	b.n	8001b42 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	f7ff fc46 	bl	800138c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff1c 	bl	800093c <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7fe ff18 	bl	800093c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ef      	bne.n	8001b08 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	60d3      	str	r3, [r2, #12]
 8001b3c:	e001      	b.n	8001b42 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3734      	adds	r7, #52	; 0x34
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	58000400 	.word	0x58000400
 8001b50:	11c1808c 	.word	0x11c1808c

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e12d      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b98      	ldr	r3, [pc, #608]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d91b      	bls.n	8001bae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b95      	ldr	r3, [pc, #596]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4993      	ldr	r1, [pc, #588]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b86:	f7fe fed9 	bl	800093c <HAL_GetTick>
 8001b8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b8e:	f7fe fed5 	bl	800093c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e111      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba0:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d1ef      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fb2d 	bl	800121e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bc4:	f7fe feba 	bl	800093c <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bcc:	f7fe feb6 	bl	800093c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0f2      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bde:	f7ff fc27 	bl	8001430 <LL_RCC_IsActiveFlag_HPRE>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f1      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb24 	bl	8001246 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe fe9d 	bl	800093c <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c06:	f7fe fe99 	bl	800093c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0d5      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c18:	f7ff fc1c 	bl	8001454 <LL_RCC_IsActiveFlag_C2HPRE>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f1      	beq.n	8001c06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb1d 	bl	8001272 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c38:	f7fe fe80 	bl	800093c <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c40:	f7fe fe7c 	bl	800093c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0b8      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c52:	f7ff fc12 	bl	800147a <LL_RCC_IsActiveFlag_SHDHPRE>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f1      	beq.n	8001c40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb17 	bl	80012a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c72:	f7fe fe63 	bl	800093c <HAL_GetTick>
 8001c76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c7a:	f7fe fe5f 	bl	800093c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e09b      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c8c:	f7ff fc08 	bl	80014a0 <LL_RCC_IsActiveFlag_PPRE1>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f1      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb0d 	bl	80012c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cae:	f7fe fe45 	bl	800093c <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cb6:	f7fe fe41 	bl	800093c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e07d      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cc8:	f7ff fbfc 	bl	80014c4 <LL_RCC_IsActiveFlag_PPRE2>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f1      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d043      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ce6:	f7ff f8e1 	bl	8000eac <LL_RCC_HSE_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11e      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e067      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001cfc:	f7ff fb55 	bl	80013aa <LL_RCC_PLL_IsReady>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d113      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e05c      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d12:	f7ff fa15 	bl	8001140 <LL_RCC_MSI_IsReady>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d108      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e051      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d20:	f7ff f8f4 	bl	8000f0c <LL_RCC_HSI_IsReady>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e04a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa53 	bl	80011de <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d38:	f7fe fe00 	bl	800093c <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe fdfc 	bl	800093c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e036      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	f7ff fa56 	bl	8001206 <LL_RCC_GetSysClkSource>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d1ec      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d21b      	bcs.n	8001dac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	4913      	ldr	r1, [pc, #76]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d84:	f7fe fdda 	bl	800093c <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d8c:	f7fe fdd6 	bl	800093c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e012      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ef      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dac:	f000 f87e 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_RCC_ClockConfig+0x27c>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001db6:	f7fe fdcd 	bl	8000954 <HAL_GetTickPrio>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fc45 	bl	800064c <HAL_InitTick>
 8001dc2:	4603      	mov	r3, r0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	58004000 	.word	0x58004000
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	f7ff fa14 	bl	8001206 <LL_RCC_GetSysClkSource>
 8001dde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001de6:	f7ff f9d0 	bl	800118a <LL_RCC_MSI_GetRange>
 8001dea:	4603      	mov	r3, r0
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e04b      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e045      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d10a      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e0e:	f7ff f81d 	bl	8000e4c <LL_RCC_HSE_IsEnabledDiv2>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e03a      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e037      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e24:	f7ff faf8 	bl	8001418 <LL_RCC_PLL_GetMainSource>
 8001e28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d003      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x64>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x6a>
 8001e36:	e00d      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e3a:	60bb      	str	r3, [r7, #8]
        break;
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e3e:	f7ff f805 	bl	8000e4c <LL_RCC_HSE_IsEnabledDiv2>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e4a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001e4c:	e00d      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e50:	60bb      	str	r3, [r7, #8]
        break;
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e54:	f7ff f999 	bl	800118a <LL_RCC_MSI_GetRange>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	60bb      	str	r3, [r7, #8]
        break;
 8001e68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001e6a:	f7ff fab0 	bl	80013ce <LL_RCC_PLL_GetN>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	fb03 f402 	mul.w	r4, r3, r2
 8001e76:	f7ff fac3 	bl	8001400 <LL_RCC_PLL_GetDivider>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	3301      	adds	r3, #1
 8001e80:	fbb4 f4f3 	udiv	r4, r4, r3
 8001e84:	f7ff fab0 	bl	80013e8 <LL_RCC_PLL_GetR>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	0f5b      	lsrs	r3, r3, #29
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e92:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08007100 	.word	0x08007100
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	01e84800 	.word	0x01e84800

08001eac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b598      	push	{r3, r4, r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001eb0:	f7ff ff90 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	f7ff fa1b 	bl	80012f0 <LL_RCC_GetAHBPrescaler>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd98      	pop	{r3, r4, r7, pc}
 8001ed0:	080070a0 	.word	0x080070a0

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b598      	push	{r3, r4, r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ed8:	f7ff ffe8 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001edc:	4604      	mov	r4, r0
 8001ede:	f7ff fa2e 	bl	800133e <LL_RCC_GetAPB1Prescaler>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd98      	pop	{r3, r4, r7, pc}
 8001efc:	080070e0 	.word	0x080070e0

08001f00 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	226f      	movs	r2, #111	; 0x6f
 8001f0e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8001f10:	f7ff f979 	bl	8001206 <LL_RCC_GetSysClkSource>
 8001f14:	4602      	mov	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8001f1a:	f7ff f9e9 	bl	80012f0 <LL_RCC_GetAHBPrescaler>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8001f24:	f7ff fa0b 	bl	800133e <LL_RCC_GetAPB1Prescaler>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8001f2e:	f7ff fa12 	bl	8001356 <LL_RCC_GetAPB2Prescaler>
 8001f32:	4602      	mov	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8001f38:	f7ff f9e6 	bl	8001308 <LL_C2_RCC_GetAHBPrescaler>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8001f42:	f7ff f9ee 	bl	8001322 <LL_RCC_GetAHB4Prescaler>
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_RCC_GetClockConfig+0x60>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0207 	and.w	r2, r3, #7
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58004000 	.word	0x58004000

08001f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f70:	d903      	bls.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e007      	b.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001f8a:	f7ff f9ca 	bl	8001322 <LL_RCC_GetAHB4Prescaler>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f80c 	bl	8001fd0 <RCC_SetFlashLatency>
 8001fb8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08007100 	.word	0x08007100
 8001fc8:	080070a0 	.word	0x080070a0
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b08f      	sub	sp, #60	; 0x3c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <RCC_SetFlashLatency+0x9c>)
 8001fdc:	f107 041c 	add.w	r4, r7, #28
 8001fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <RCC_SetFlashLatency+0xa0>)
 8001fe8:	f107 040c 	add.w	r4, r7, #12
 8001fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffa:	e013      	b.n	8002024 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	443b      	add	r3, r7
 8002004:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d807      	bhi.n	800201e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	3338      	adds	r3, #56	; 0x38
 8002014:	443b      	add	r3, r7
 8002016:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800201c:	e005      	b.n	800202a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	3301      	adds	r3, #1
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	2b03      	cmp	r3, #3
 8002028:	d9e8      	bls.n	8001ffc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <RCC_SetFlashLatency+0xa4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4910      	ldr	r1, [pc, #64]	; (8002074 <RCC_SetFlashLatency+0xa4>)
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800203a:	f7fe fc7f 	bl	800093c <HAL_GetTick>
 800203e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002040:	e008      	b.n	8002054 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002042:	f7fe fc7b 	bl	800093c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e007      	b.n	8002064 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <RCC_SetFlashLatency+0xa4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800205e:	429a      	cmp	r2, r3
 8002060:	d1ef      	bne.n	8002042 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	373c      	adds	r7, #60	; 0x3c
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	08006fac 	.word	0x08006fac
 8002070:	08006fbc 	.word	0x08006fbc
 8002074:	58004000 	.word	0x58004000

08002078 <LL_RCC_LSE_IsEnabled>:
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <LL_RCC_LSE_IsEnabled+0x18>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <LL_RCC_LSE_IsEnabled+0x1a>
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_RCC_LSE_IsReady>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d101      	bne.n	80020b4 <LL_RCC_LSE_IsReady+0x18>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <LL_RCC_LSE_IsReady+0x1a>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_MSI_EnablePLLMode>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_RCC_SetRFWKPClockSource>:
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_RCC_SetSMPSClockSource>:
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f023 0203 	bic.w	r2, r3, #3
 800211c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4313      	orrs	r3, r2
 8002124:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_RCC_SetSMPSPrescaler>:
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4313      	orrs	r3, r2
 800214c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_RCC_SetUSARTClockSource>:
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_SetLPUARTClockSource>:
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800219a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_SetI2CClockSource>:
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021ca:	43db      	mvns	r3, r3
 80021cc:	401a      	ands	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_RCC_SetLPTIMClockSource>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_SetRNGClockSource>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_RCC_SetCLK48ClockSource>:
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_SetADCClockSource>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_SetRTCClockSource>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_GetRTCClockSource>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_ForceBackupDomainReset>:
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_RCC_ReleaseBackupDomainReset>:
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b088      	sub	sp, #32
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002336:	2300      	movs	r3, #0
 8002338:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800233a:	2300      	movs	r3, #0
 800233c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002346:	2b00      	cmp	r3, #0
 8002348:	d046      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800234a:	f7ff ffc1 	bl	80022d0 <LL_RCC_GetRTCClockSource>
 800234e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	429a      	cmp	r2, r3
 8002358:	d03c      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800235a:	f7fe fd67 	bl	8000e2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff9b 	bl	80022a4 <LL_RCC_SetRTCClockSource>
 800236e:	e02e      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800237a:	f7ff ffb6 	bl	80022ea <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800237e:	f7ff ffc5 	bl	800230c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800239a:	f7ff fe6d 	bl	8002078 <LL_RCC_LSE_IsEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d114      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023a4:	f7fe faca 	bl	800093c <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80023aa:	e00b      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fac6 	bl	800093c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d902      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	77fb      	strb	r3, [r7, #31]
              break;
 80023c2:	e004      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80023c4:	f7ff fe6a 	bl	800209c <LL_RCC_LSE_IsReady>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d1ee      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	77bb      	strb	r3, [r7, #30]
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff feb6 	bl	800215a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fec1 	bl	8002186 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fee9 	bl	80021ec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fede 	bl	80021ec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff feb6 	bl	80021b2 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02b      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x140>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002464:	d003      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fed4 	bl	8002220 <LL_RCC_SetRNGClockSource>
 8002478:	e00a      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fecb 	bl	8002220 <LL_RCC_SetRNGClockSource>
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fede 	bl	800224c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002498:	d107      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fedc 	bl	8002278 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c8:	d107      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fdf7 	bl	80020de <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe16 	bl	8002132 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fdfd 	bl	800210a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002510:	7fbb      	ldrb	r3, [r7, #30]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800251e:	f7ff fdcf 	bl	80020c0 <LL_RCC_MSI_EnablePLLMode>
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e049      	b.n	80025cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f841 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f000 f9d5 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e036      	b.n	800266e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_TIM_Base_Start_IT+0x94>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x44>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d115      	bne.n	8002658 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_TIM_Base_Start_IT+0x98>)
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d015      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x82>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d011      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002656:	e008      	b.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e000      	b.n	800266c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00
 8002680:	00010007 	.word	0x00010007

08002684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0202 	mvn.w	r2, #2
 80026b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f905 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8f7 	bl	80028c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f908 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0204 	mvn.w	r2, #4
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8db 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8cd 	bl	80028c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8de 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b08      	cmp	r3, #8
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0208 	mvn.w	r2, #8
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8b1 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8a3 	bl	80028c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8b4 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b10      	cmp	r3, #16
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2208      	movs	r2, #8
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f887 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f879 	bl	80028c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f88a 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0201 	mvn.w	r2, #1
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd feee 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8ca 	bl	80029c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d10e      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d107      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8bd 	bl	80029dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f838 	bl	80028fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d10e      	bne.n	80028ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d107      	bne.n	80028ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0220 	mvn.w	r2, #32
 80028b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f87d 	bl	80029b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <TIM_Base_SetConfig+0x9c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0x20>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d108      	bne.n	8002946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <TIM_Base_SetConfig+0x9c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0x42>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d108      	bne.n	8002968 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <TIM_Base_SetConfig+0x9c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	615a      	str	r2, [r3, #20]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f103 0208 	add.w	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0208 	add.w	r2, r3, #8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 0208 	add.w	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6852      	ldr	r2, [r2, #4]
 8002ab2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d103      	bne.n	8002ac6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1e5a      	subs	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08c      	sub	sp, #48	; 0x30
 8002aea:	af04      	add	r7, sp, #16
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fede 	bl	80038bc <pvPortMalloc>
 8002b00:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00e      	beq.n	8002b26 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b08:	205c      	movs	r0, #92	; 0x5c
 8002b0a:	f000 fed7 	bl	80038bc <pvPortMalloc>
 8002b0e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1c:	e005      	b.n	8002b2a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f000 ffac 	bl	8003a7c <vPortFree>
 8002b24:	e001      	b.n	8002b2a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f80e 	bl	8002b68 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b4c:	69f8      	ldr	r0, [r7, #28]
 8002b4e:	f000 f8a1 	bl	8002c94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e002      	b.n	8002b5e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
    }
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	21a5      	movs	r1, #165	; 0xa5
 8002b82:	f003 f96d 	bl	8005e60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b90:	3b01      	subs	r3, #1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	617b      	str	r3, [r7, #20]
    }
 8002bbc:	bf00      	nop
 8002bbe:	e7fe      	b.n	8002bbe <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01f      	beq.n	8002c06 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e012      	b.n	8002bf2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	7819      	ldrb	r1, [r3, #0]
 8002bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3334      	adds	r3, #52	; 0x34
 8002bdc:	460a      	mov	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d9e9      	bls.n	8002bcc <prvInitialiseNewTask+0x64>
 8002bf8:	e000      	b.n	8002bfc <prvInitialiseNewTask+0x94>
            {
                break;
 8002bfa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c04:	e003      	b.n	8002c0e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d901      	bls.n	8002c18 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c14:	2304      	movs	r3, #4
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c22:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	2200      	movs	r2, #0
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fefe 	bl	8002a30 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	3318      	adds	r3, #24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fef9 	bl	8002a30 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c42:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	f1c3 0205 	rsb	r2, r3, #5
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	3354      	adds	r3, #84	; 0x54
 8002c58:	2204      	movs	r2, #4
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 f8ff 	bl	8005e60 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	3358      	adds	r3, #88	; 0x58
 8002c66:	2201      	movs	r2, #1
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 f8f8 	bl	8005e60 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	69b8      	ldr	r0, [r7, #24]
 8002c76:	f000 fb49 	bl	800330c <pxPortInitialiseStack>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c9c:	f000 fce2 	bl	8003664 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <prvAddNewTaskToReadyList+0xe4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a34      	ldr	r2, [pc, #208]	; (8002d78 <prvAddNewTaskToReadyList+0xe4>)
 8002ca8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <prvAddNewTaskToReadyList+0xe8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cb2:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <prvAddNewTaskToReadyList+0xe8>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <prvAddNewTaskToReadyList+0xe4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d110      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002cc0:	f000 fa8a 	bl	80031d8 <prvInitialiseTaskLists>
 8002cc4:	e00d      	b.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <prvAddNewTaskToReadyList+0xec>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <prvAddNewTaskToReadyList+0xe8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d802      	bhi.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002cdc:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <prvAddNewTaskToReadyList+0xe8>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <prvAddNewTaskToReadyList+0xf0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <prvAddNewTaskToReadyList+0xf0>)
 8002cea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <prvAddNewTaskToReadyList+0xf0>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <prvAddNewTaskToReadyList+0x94>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fe49 	bl	8005994 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	461d      	mov	r5, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461c      	mov	r4, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	1ae3      	subs	r3, r4, r3
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	462b      	mov	r3, r5
 8002d24:	f001 f878 	bl	8003e18 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 feb6 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <prvAddNewTaskToReadyList+0xf4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <prvAddNewTaskToReadyList+0xf4>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <prvAddNewTaskToReadyList+0xf8>)
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f7ff fe76 	bl	8002a4a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d5e:	f000 fcb1 	bl	80036c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <prvAddNewTaskToReadyList+0xec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <prvAddNewTaskToReadyList+0xe8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bdb0      	pop	{r4, r5, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200001c4 	.word	0x200001c4
 8002d7c:	200000ec 	.word	0x200000ec
 8002d80:	200001d0 	.word	0x200001d0
 8002d84:	200001e0 	.word	0x200001e0
 8002d88:	200001cc 	.word	0x200001cc
 8002d8c:	200000f0 	.word	0x200000f0

08002d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <vTaskStartScheduler+0x98>)
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	4922      	ldr	r1, [pc, #136]	; (8002e2c <vTaskStartScheduler+0x9c>)
 8002da4:	4822      	ldr	r0, [pc, #136]	; (8002e30 <vTaskStartScheduler+0xa0>)
 8002da6:	f7ff fe9e 	bl	8002ae6 <xTaskCreate>
 8002daa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d124      	bne.n	8002dfc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	60bb      	str	r3, [r7, #8]
    }
 8002dc4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <vTaskStartScheduler+0xa4>)
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <vTaskStartScheduler+0xa8>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <vTaskStartScheduler+0xac>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <vTaskStartScheduler+0xb0>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <vTaskStartScheduler+0x98>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d102      	bne.n	8002dec <vTaskStartScheduler+0x5c>
 8002de6:	f002 fdb9 	bl	800595c <SEGGER_SYSVIEW_OnIdle>
 8002dea:	e004      	b.n	8002df6 <vTaskStartScheduler+0x66>
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <vTaskStartScheduler+0xb0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fe11 	bl	8005a18 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002df6:	f000 fb15 	bl	8003424 <xPortStartScheduler>
 8002dfa:	e00e      	b.n	8002e1a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d10a      	bne.n	8002e1a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	607b      	str	r3, [r7, #4]
    }
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <vTaskStartScheduler+0xb4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200001e8 	.word	0x200001e8
 8002e2c:	08006fcc 	.word	0x08006fcc
 8002e30:	080031b5 	.word	0x080031b5
 8002e34:	200001e4 	.word	0x200001e4
 8002e38:	200001d0 	.word	0x200001d0
 8002e3c:	200001c8 	.word	0x200001c8
 8002e40:	200000ec 	.word	0x200000ec
 8002e44:	20000014 	.word	0x20000014

08002e48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <vTaskSuspendAll+0x18>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <vTaskSuspendAll+0x18>)
 8002e54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	200001ec 	.word	0x200001ec

08002e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <xTaskResumeAll+0x104>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	603b      	str	r3, [r7, #0]
    }
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e90:	f000 fbe8 	bl	8003664 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <xTaskResumeAll+0x104>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	4a33      	ldr	r2, [pc, #204]	; (8002f68 <xTaskResumeAll+0x104>)
 8002e9c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <xTaskResumeAll+0x104>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d159      	bne.n	8002f5a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <xTaskResumeAll+0x108>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d055      	beq.n	8002f5a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eae:	e032      	b.n	8002f16 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <xTaskResumeAll+0x10c>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fde8 	bl	8002a92 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fde3 	bl	8002a92 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fde4 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <xTaskResumeAll+0x110>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <xTaskResumeAll+0x110>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <xTaskResumeAll+0x114>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7ff fda4 	bl	8002a4a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <xTaskResumeAll+0x118>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <xTaskResumeAll+0x11c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <xTaskResumeAll+0x10c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1c8      	bne.n	8002eb0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f24:	f000 f9d6 	bl	80032d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <xTaskResumeAll+0x120>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f34:	f000 f83a 	bl	8002fac <xTaskIncrementTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <xTaskResumeAll+0x11c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f1      	bne.n	8002f34 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <xTaskResumeAll+0x120>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <xTaskResumeAll+0x11c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f5a:	f000 fbb3 	bl	80036c4 <vPortExitCritical>

    return xAlreadyYielded;
 8002f5e:	687b      	ldr	r3, [r7, #4]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200001ec 	.word	0x200001ec
 8002f6c:	200001c4 	.word	0x200001c4
 8002f70:	20000184 	.word	0x20000184
 8002f74:	200001cc 	.word	0x200001cc
 8002f78:	200000f0 	.word	0x200000f0
 8002f7c:	200000ec 	.word	0x200000ec
 8002f80:	200001d8 	.word	0x200001d8
 8002f84:	200001d4 	.word	0x200001d4

08002f88 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f8e:	f000 fc55 	bl	800383c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <xTaskGetTickCountFromISR+0x20>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f9c:	683b      	ldr	r3, [r7, #0]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200001c8 	.word	0x200001c8

08002fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <xTaskIncrementTick+0x110>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d173      	bne.n	80030a6 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <xTaskIncrementTick+0x114>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fc6:	4a3e      	ldr	r2, [pc, #248]	; (80030c0 <xTaskIncrementTick+0x114>)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d120      	bne.n	8003014 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <xTaskIncrementTick+0x118>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <xTaskIncrementTick+0x46>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	603b      	str	r3, [r7, #0]
    }
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xTaskIncrementTick+0x44>
 8002ff2:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <xTaskIncrementTick+0x118>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	4b33      	ldr	r3, [pc, #204]	; (80030c8 <xTaskIncrementTick+0x11c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <xTaskIncrementTick+0x118>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <xTaskIncrementTick+0x11c>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b31      	ldr	r3, [pc, #196]	; (80030cc <xTaskIncrementTick+0x120>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <xTaskIncrementTick+0x120>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	f000 f960 	bl	80032d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <xTaskIncrementTick+0x124>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	429a      	cmp	r2, r3
 800301c:	d348      	bcc.n	80030b0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <xTaskIncrementTick+0x118>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <xTaskIncrementTick+0x124>)
 800302a:	f04f 32ff 	mov.w	r2, #4294967295
 800302e:	601a      	str	r2, [r3, #0]
                    break;
 8003030:	e03e      	b.n	80030b0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <xTaskIncrementTick+0x118>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	d203      	bcs.n	8003052 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <xTaskIncrementTick+0x124>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003050:	e02e      	b.n	80030b0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3304      	adds	r3, #4
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fd1b 	bl	8002a92 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3318      	adds	r3, #24
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fd12 	bl	8002a92 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fd13 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <xTaskIncrementTick+0x128>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <xTaskIncrementTick+0x128>)
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <xTaskIncrementTick+0x12c>)
 8003096:	441a      	add	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7ff fcd3 	bl	8002a4a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030a4:	e7bb      	b.n	800301e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <xTaskIncrementTick+0x130>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <xTaskIncrementTick+0x130>)
 80030ae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80030b0:	697b      	ldr	r3, [r7, #20]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200001ec 	.word	0x200001ec
 80030c0:	200001c8 	.word	0x200001c8
 80030c4:	2000017c 	.word	0x2000017c
 80030c8:	20000180 	.word	0x20000180
 80030cc:	200001dc 	.word	0x200001dc
 80030d0:	200001e4 	.word	0x200001e4
 80030d4:	200001cc 	.word	0x200001cc
 80030d8:	200000f0 	.word	0x200000f0
 80030dc:	200001d4 	.word	0x200001d4

080030e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030e6:	4b2d      	ldr	r3, [pc, #180]	; (800319c <vTaskSwitchContext+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <vTaskSwitchContext+0xc0>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030f4:	e04d      	b.n	8003192 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <vTaskSwitchContext+0xc0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <vTaskSwitchContext+0xc4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	f1c3 031f 	rsb	r3, r3, #31
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <vTaskSwitchContext+0xc8>)
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
    }
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <vTaskSwitchContext+0x5a>
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <vTaskSwitchContext+0xc8>)
 8003148:	4413      	add	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3308      	adds	r3, #8
 800315e:	429a      	cmp	r2, r3
 8003160:	d104      	bne.n	800316c <vTaskSwitchContext+0x8c>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <vTaskSwitchContext+0xcc>)
 8003174:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <vTaskSwitchContext+0xcc>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <vTaskSwitchContext+0xd0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d102      	bne.n	8003188 <vTaskSwitchContext+0xa8>
 8003182:	f002 fbeb 	bl	800595c <SEGGER_SYSVIEW_OnIdle>
}
 8003186:	e004      	b.n	8003192 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <vTaskSwitchContext+0xcc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f002 fc43 	bl	8005a18 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200001ec 	.word	0x200001ec
 80031a0:	200001d8 	.word	0x200001d8
 80031a4:	200001cc 	.word	0x200001cc
 80031a8:	200000f0 	.word	0x200000f0
 80031ac:	200000ec 	.word	0x200000ec
 80031b0:	200001e8 	.word	0x200001e8

080031b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031bc:	f000 f84c 	bl	8003258 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <prvIdleTask+0x20>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031d0:	e7f4      	b.n	80031bc <prvIdleTask+0x8>
 80031d2:	bf00      	nop
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <prvInitialiseTaskLists+0x60>)
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fbfc 	bl	80029f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d9ef      	bls.n	80031e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003206:	f7ff fbf3 	bl	80029f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800320c:	f7ff fbf0 	bl	80029f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <prvInitialiseTaskLists+0x6c>)
 8003212:	f7ff fbed 	bl	80029f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x70>)
 8003218:	f7ff fbea 	bl	80029f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <prvInitialiseTaskLists+0x74>)
 800321e:	f7ff fbe7 	bl	80029f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x78>)
 8003224:	4a05      	ldr	r2, [pc, #20]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvInitialiseTaskLists+0x7c>)
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200000f0 	.word	0x200000f0
 800323c:	20000154 	.word	0x20000154
 8003240:	20000168 	.word	0x20000168
 8003244:	20000184 	.word	0x20000184
 8003248:	20000198 	.word	0x20000198
 800324c:	200001b0 	.word	0x200001b0
 8003250:	2000017c 	.word	0x2000017c
 8003254:	20000180 	.word	0x20000180

08003258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325e:	e019      	b.n	8003294 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003260:	f000 fa00 	bl	8003664 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fc0e 	bl	8002a92 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 800327e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003288:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800328a:	f000 fa1b 	bl	80036c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f810 	bl	80032b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <prvCheckTasksWaitingTermination+0x58>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e1      	bne.n	8003260 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000198 	.word	0x20000198
 80032ac:	200001c4 	.word	0x200001c4
 80032b0:	200001ac 	.word	0x200001ac

080032b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fbdb 	bl	8003a7c <vPortFree>
                vPortFree( pxTCB );
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fbd8 	bl	8003a7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <prvResetNextTaskUnblockTime+0x30>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <prvResetNextTaskUnblockTime+0x34>)
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032ea:	e005      	b.n	80032f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <prvResetNextTaskUnblockTime+0x30>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <prvResetNextTaskUnblockTime+0x34>)
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000017c 	.word	0x2000017c
 8003308:	200001e4 	.word	0x200001e4

0800330c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3b04      	subs	r3, #4
 800331c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003324:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b04      	subs	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3b04      	subs	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <pxPortInitialiseStack+0x64>)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3b14      	subs	r3, #20
 8003346:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3b04      	subs	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f06f 0202 	mvn.w	r2, #2
 800335a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3b20      	subs	r3, #32
 8003360:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	08003375 	.word	0x08003375

08003374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <prvTaskExitError+0x54>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d00a      	beq.n	800339e <prvTaskExitError+0x2a>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60fb      	str	r3, [r7, #12]
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <prvTaskExitError+0x28>
        __asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	60bb      	str	r3, [r7, #8]
    }
 80033b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80033b2:	bf00      	nop
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0fc      	beq.n	80033b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000018 	.word	0x20000018
 80033cc:	00000000 	.word	0x00000000

080033d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <pxCurrentTCBConst2>)
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	6808      	ldr	r0, [r1, #0]
 80033d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033da:	f380 8809 	msr	PSP, r0
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8811 	msr	BASEPRI, r0
 80033ea:	4770      	bx	lr
 80033ec:	f3af 8000 	nop.w

080033f0 <pxCurrentTCBConst2>:
 80033f0:	200000ec 	.word	0x200000ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop

080033f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <prvPortStartFirstTask+0x24>)
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	6800      	ldr	r0, [r0, #0]
 80033fe:	f380 8808 	msr	MSP, r0
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f380 8814 	msr	CONTROL, r0
 800340a:	b662      	cpsie	i
 800340c:	b661      	cpsie	f
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	df00      	svc	0
 8003418:	bf00      	nop
 800341a:	0000      	.short	0x0000
 800341c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop

08003424 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <xPortStartScheduler+0x120>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a46      	ldr	r2, [pc, #280]	; (8003548 <xPortStartScheduler+0x124>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10a      	bne.n	800344a <xPortStartScheduler+0x26>
        __asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	613b      	str	r3, [r7, #16]
    }
 8003446:	bf00      	nop
 8003448:	e7fe      	b.n	8003448 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <xPortStartScheduler+0x120>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <xPortStartScheduler+0x128>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10a      	bne.n	800346a <xPortStartScheduler+0x46>
        __asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	60fb      	str	r3, [r7, #12]
    }
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <xPortStartScheduler+0x12c>)
 800346c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <xPortStartScheduler+0x130>)
 8003490:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <xPortStartScheduler+0x134>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003498:	e009      	b.n	80034ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <xPortStartScheduler+0x134>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <xPortStartScheduler+0x134>)
 80034a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d0ef      	beq.n	800349a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <xPortStartScheduler+0x134>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00a      	beq.n	80034dc <xPortStartScheduler+0xb8>
        __asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	60bb      	str	r3, [r7, #8]
    }
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <xPortStartScheduler+0x134>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <xPortStartScheduler+0x134>)
 80034e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <xPortStartScheduler+0x134>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <xPortStartScheduler+0x134>)
 80034f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <xPortStartScheduler+0x138>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <xPortStartScheduler+0x138>)
 8003500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003504:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <xPortStartScheduler+0x138>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <xPortStartScheduler+0x138>)
 800350c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003510:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003512:	f000 f963 	bl	80037dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <xPortStartScheduler+0x13c>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800351c:	f000 f982 	bl	8003824 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <xPortStartScheduler+0x140>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <xPortStartScheduler+0x140>)
 8003526:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800352a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800352c:	f7ff ff64 	bl	80033f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003530:	f7ff fdd6 	bl	80030e0 <vTaskSwitchContext>
    prvTaskExitError();
 8003534:	f7ff ff1e 	bl	8003374 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00
 8003548:	410fc271 	.word	0x410fc271
 800354c:	410fc270 	.word	0x410fc270
 8003550:	e000e400 	.word	0xe000e400
 8003554:	200001f0 	.word	0x200001f0
 8003558:	200001f4 	.word	0x200001f4
 800355c:	e000ed20 	.word	0xe000ed20
 8003560:	20000018 	.word	0x20000018
 8003564:	e000ef34 	.word	0xe000ef34

08003568 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <vInitPrioGroupValue+0xe4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <vInitPrioGroupValue+0xe8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10a      	bne.n	800358e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	613b      	str	r3, [r7, #16]
    }
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800358e:	4b2f      	ldr	r3, [pc, #188]	; (800364c <vInitPrioGroupValue+0xe4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a30      	ldr	r2, [pc, #192]	; (8003654 <vInitPrioGroupValue+0xec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10a      	bne.n	80035ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60fb      	str	r3, [r7, #12]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <vInitPrioGroupValue+0xf0>)
 80035b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	22ff      	movs	r2, #255	; 0xff
 80035be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <vInitPrioGroupValue+0xf4>)
 80035d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <vInitPrioGroupValue+0xf8>)
 80035d8:	2207      	movs	r2, #7
 80035da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035dc:	e009      	b.n	80035f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <vInitPrioGroupValue+0xf8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <vInitPrioGroupValue+0xf8>)
 80035e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d0ef      	beq.n	80035de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <vInitPrioGroupValue+0xf8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00a      	beq.n	8003620 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60bb      	str	r3, [r7, #8]
    }
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <vInitPrioGroupValue+0xf8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <vInitPrioGroupValue+0xf8>)
 8003628:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <vInitPrioGroupValue+0xf8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <vInitPrioGroupValue+0xf8>)
 8003634:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000ed00 	.word	0xe000ed00
 8003650:	410fc271 	.word	0x410fc271
 8003654:	410fc270 	.word	0x410fc270
 8003658:	e000e400 	.word	0xe000e400
 800365c:	200001f0 	.word	0x200001f0
 8003660:	200001f4 	.word	0x200001f4

08003664 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
        __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	607b      	str	r3, [r7, #4]
    }
 800367c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <vPortEnterCritical+0x58>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <vPortEnterCritical+0x58>)
 8003686:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <vPortEnterCritical+0x58>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10f      	bne.n	80036b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <vPortEnterCritical+0x5c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
    }
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vPortEnterCritical+0x4a>
    }
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	20000018 	.word	0x20000018
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <vPortExitCritical+0x50>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <vPortExitCritical+0x24>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <vPortExitCritical+0x50>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <vPortExitCritical+0x50>)
 80036f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <vPortExitCritical+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <vPortExitCritical+0x42>
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003704:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000018 	.word	0x20000018
	...

08003720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003720:	f3ef 8009 	mrs	r0, PSP
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <pxCurrentTCBConst>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f01e 0f10 	tst.w	lr, #16
 8003730:	bf08      	it	eq
 8003732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373a:	6010      	str	r0, [r2, #0]
 800373c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003744:	f380 8811 	msr	BASEPRI, r0
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f7ff fcc6 	bl	80030e0 <vTaskSwitchContext>
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f380 8811 	msr	BASEPRI, r0
 800375c:	bc09      	pop	{r0, r3}
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6808      	ldr	r0, [r1, #0]
 8003762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003766:	f01e 0f10 	tst.w	lr, #16
 800376a:	bf08      	it	eq
 800376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003770:	f380 8809 	msr	PSP, r0
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w

08003780 <pxCurrentTCBConst>:
 8003780:	200000ec 	.word	0x200000ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop

08003788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
        __asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
    }
 80037a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80037a2:	f002 f861 	bl	8005868 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80037a6:	f7ff fc01 	bl	8002fac <xTaskIncrementTick>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80037b0:	f002 f8b8 	bl	8005924 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <SysTick_Handler+0x50>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e001      	b.n	80037c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80037be:	f002 f895 	bl	80058ec <SEGGER_SYSVIEW_RecordExitISR>
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f383 8811 	msr	BASEPRI, r3
    }
 80037cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <vPortSetupTimerInterrupt+0x34>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <vPortSetupTimerInterrupt+0x38>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <vPortSetupTimerInterrupt+0x3c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <vPortSetupTimerInterrupt+0x40>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	4a09      	ldr	r2, [pc, #36]	; (8003820 <vPortSetupTimerInterrupt+0x44>)
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <vPortSetupTimerInterrupt+0x34>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010
 8003814:	e000e018 	.word	0xe000e018
 8003818:	20000008 	.word	0x20000008
 800381c:	10624dd3 	.word	0x10624dd3
 8003820:	e000e014 	.word	0xe000e014

08003824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003834 <vPortEnableVFP+0x10>
 8003828:	6801      	ldr	r1, [r0, #0]
 800382a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800382e:	6001      	str	r1, [r0, #0]
 8003830:	4770      	bx	lr
 8003832:	0000      	.short	0x0000
 8003834:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003838:	bf00      	nop
 800383a:	bf00      	nop

0800383c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003842:	f3ef 8305 	mrs	r3, IPSR
 8003846:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	d914      	bls.n	8003878 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <vPortValidateInterruptPriority+0x70>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <vPortValidateInterruptPriority+0x74>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	7afa      	ldrb	r2, [r7, #11]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20a      	bcs.n	8003878 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	607b      	str	r3, [r7, #4]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <vPortValidateInterruptPriority+0x78>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <vPortValidateInterruptPriority+0x7c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d90a      	bls.n	800389e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	603b      	str	r3, [r7, #0]
    }
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <vPortValidateInterruptPriority+0x60>
    }
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e3f0 	.word	0xe000e3f0
 80038b0:	200001f0 	.word	0x200001f0
 80038b4:	e000ed0c 	.word	0xe000ed0c
 80038b8:	200001f4 	.word	0x200001f4

080038bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80038c8:	f7ff fabe 	bl	8002e48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80038cc:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <pvPortMalloc+0x1a8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80038d4:	f000 f934 	bl	8003b40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038d8:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <pvPortMalloc+0x1ac>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 80a7 	bne.w	8003a34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02d      	beq.n	8003948 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80038ec:	2208      	movs	r2, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d227      	bcs.n	8003948 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80038f8:	2208      	movs	r2, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	2b00      	cmp	r3, #0
 8003908:	d021      	beq.n	800394e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f023 0307 	bic.w	r3, r3, #7
 8003910:	3308      	adds	r3, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	d214      	bcs.n	8003942 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f023 0307 	bic.w	r3, r3, #7
 800391e:	3308      	adds	r3, #8
 8003920:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <pvPortMalloc+0x92>
        __asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	617b      	str	r3, [r7, #20]
    }
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003946:	e002      	b.n	800394e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	e000      	b.n	8003950 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800394e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06e      	beq.n	8003a34 <pvPortMalloc+0x178>
 8003956:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <pvPortMalloc+0x1b0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d869      	bhi.n	8003a34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <pvPortMalloc+0x1b4>)
 8003962:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003964:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <pvPortMalloc+0x1b4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800396a:	e004      	b.n	8003976 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	d903      	bls.n	8003988 <pvPortMalloc+0xcc>
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f1      	bne.n	800396c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <pvPortMalloc+0x1a8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	429a      	cmp	r2, r3
 8003990:	d050      	beq.n	8003a34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2208      	movs	r2, #8
 8003998:	4413      	add	r3, r2
 800399a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	2308      	movs	r3, #8
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d91f      	bls.n	80039f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <pvPortMalloc+0x120>
        __asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	613b      	str	r3, [r7, #16]
    }
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039ee:	69b8      	ldr	r0, [r7, #24]
 80039f0:	f000 f908 	bl	8003c04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <pvPortMalloc+0x1b0>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <pvPortMalloc+0x1b0>)
 8003a00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <pvPortMalloc+0x1b0>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <pvPortMalloc+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d203      	bcs.n	8003a16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <pvPortMalloc+0x1b0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <pvPortMalloc+0x1b8>)
 8003a14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <pvPortMalloc+0x1ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <pvPortMalloc+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <pvPortMalloc+0x1bc>)
 8003a32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a34:	f7ff fa16 	bl	8002e64 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <pvPortMalloc+0x19c>
        __asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	60fb      	str	r3, [r7, #12]
    }
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <pvPortMalloc+0x19a>
    return pvReturn;
 8003a58:	69fb      	ldr	r3, [r7, #28]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	; 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20001600 	.word	0x20001600
 8003a68:	20001614 	.word	0x20001614
 8003a6c:	20001604 	.word	0x20001604
 8003a70:	200015f8 	.word	0x200015f8
 8003a74:	20001608 	.word	0x20001608
 8003a78:	2000160c 	.word	0x2000160c

08003a7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04d      	beq.n	8003b2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a8e:	2308      	movs	r3, #8
 8003a90:	425b      	negs	r3, r3
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4413      	add	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <vPortFree+0xb8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <vPortFree+0x44>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60fb      	str	r3, [r7, #12]
    }
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <vPortFree+0x62>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	60bb      	str	r3, [r7, #8]
    }
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <vPortFree+0xb8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01e      	beq.n	8003b2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11a      	bne.n	8003b2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <vPortFree+0xb8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003b04:	f7ff f9a0 	bl	8002e48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <vPortFree+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <vPortFree+0xbc>)
 8003b14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b16:	6938      	ldr	r0, [r7, #16]
 8003b18:	f000 f874 	bl	8003c04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <vPortFree+0xc0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <vPortFree+0xc0>)
 8003b24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003b26:	f7ff f99d 	bl	8002e64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20001614 	.word	0x20001614
 8003b38:	20001604 	.word	0x20001604
 8003b3c:	20001610 	.word	0x20001610

08003b40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <prvHeapInit+0xac>)
 8003b4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3307      	adds	r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <prvHeapInit+0xac>)
 8003b70:	4413      	add	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <prvHeapInit+0xb0>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <prvHeapInit+0xb0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <prvHeapInit+0xb4>)
 8003ba0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <prvHeapInit+0xb4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <prvHeapInit+0xb4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	1ad2      	subs	r2, r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <prvHeapInit+0xb4>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <prvHeapInit+0xb8>)
 8003bce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <prvHeapInit+0xbc>)
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <prvHeapInit+0xc0>)
 8003bda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	200001f8 	.word	0x200001f8
 8003bf0:	200015f8 	.word	0x200015f8
 8003bf4:	20001600 	.word	0x20001600
 8003bf8:	20001608 	.word	0x20001608
 8003bfc:	20001604 	.word	0x20001604
 8003c00:	20001614 	.word	0x20001614

08003c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <prvInsertBlockIntoFreeList+0xac>)
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e002      	b.n	8003c18 <prvInsertBlockIntoFreeList+0x14>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d8f7      	bhi.n	8003c12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d108      	bne.n	8003c46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	441a      	add	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d118      	bne.n	8003c8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d00d      	beq.n	8003c82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e008      	b.n	8003c94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e003      	b.n	8003c94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d002      	beq.n	8003ca2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	200015f8 	.word	0x200015f8
 8003cb4:	20001600 	.word	0x20001600

08003cb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003cbc:	4803      	ldr	r0, [pc, #12]	; (8003ccc <_cbSendSystemDesc+0x14>)
 8003cbe:	f001 fd7d 	bl	80057bc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003cc2:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <_cbSendSystemDesc+0x18>)
 8003cc4:	f001 fd7a 	bl	80057bc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	08006fd4 	.word	0x08006fd4
 8003cd0:	08007018 	.word	0x08007018

08003cd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003ce2:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <SEGGER_SYSVIEW_Conf+0x28>)
 8003ce4:	f001 f9f0 	bl	80050c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ce8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003cec:	f001 fa30 	bl	8005150 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000008 	.word	0x20000008
 8003cf8:	08003cb9 	.word	0x08003cb9
 8003cfc:	08007140 	.word	0x08007140

08003d00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	e033      	b.n	8003d74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003d0c:	491e      	ldr	r1, [pc, #120]	; (8003d88 <_cbSendTaskList+0x88>)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	491a      	ldr	r1, [pc, #104]	; (8003d88 <_cbSendTaskList+0x88>)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	4c16      	ldr	r4, [pc, #88]	; (8003d88 <_cbSendTaskList+0x88>)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4423      	add	r3, r4
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	4d11      	ldr	r5, [pc, #68]	; (8003d88 <_cbSendTaskList+0x88>)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	442b      	add	r3, r5
 8003d4e:	330c      	adds	r3, #12
 8003d50:	681d      	ldr	r5, [r3, #0]
 8003d52:	4e0d      	ldr	r6, [pc, #52]	; (8003d88 <_cbSendTaskList+0x88>)
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4433      	add	r3, r6
 8003d60:	3310      	adds	r3, #16
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	462b      	mov	r3, r5
 8003d68:	4622      	mov	r2, r4
 8003d6a:	f000 f8bd 	bl	8003ee8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3301      	adds	r3, #1
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <_cbSendTaskList+0x8c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3c6      	bcc.n	8003d0c <_cbSendTaskList+0xc>
  }
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d88:	20001618 	.word	0x20001618
 8003d8c:	200016b8 	.word	0x200016b8

08003d90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003d98:	f7ff f8f6 	bl	8002f88 <xTaskGetTickCountFromISR>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2200      	movs	r2, #0
 8003da0:	469a      	mov	sl, r3
 8003da2:	4693      	mov	fp, r2
 8003da4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	f04f 0a00 	mov.w	sl, #0
 8003db4:	f04f 0b00 	mov.w	fp, #0
 8003db8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003dbc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003dc0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	465b      	mov	r3, fp
 8003dc8:	1a14      	subs	r4, r2, r0
 8003dca:	eb63 0501 	sbc.w	r5, r3, r1
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	00ab      	lsls	r3, r5, #2
 8003dd8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003ddc:	00a2      	lsls	r2, r4, #2
 8003dde:	4614      	mov	r4, r2
 8003de0:	461d      	mov	r5, r3
 8003de2:	eb14 0800 	adds.w	r8, r4, r0
 8003de6:	eb45 0901 	adc.w	r9, r5, r1
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfe:	4690      	mov	r8, r2
 8003e00:	4699      	mov	r9, r3
 8003e02:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003e06:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003e18 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e26:	2205      	movs	r2, #5
 8003e28:	492b      	ldr	r1, [pc, #172]	; (8003ed8 <SYSVIEW_AddTask+0xc0>)
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f001 fffa 	bl	8005e24 <memcmp>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04b      	beq.n	8003ece <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	d903      	bls.n	8003e46 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e3e:	4828      	ldr	r0, [pc, #160]	; (8003ee0 <SYSVIEW_AddTask+0xc8>)
 8003e40:	f001 ff5e 	bl	8005d00 <SEGGER_SYSVIEW_Warn>
    return;
 8003e44:	e044      	b.n	8003ed0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4926      	ldr	r1, [pc, #152]	; (8003ee4 <SYSVIEW_AddTask+0xcc>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4921      	ldr	r1, [pc, #132]	; (8003ee4 <SYSVIEW_AddTask+0xcc>)
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	491b      	ldr	r1, [pc, #108]	; (8003ee4 <SYSVIEW_AddTask+0xcc>)
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3308      	adds	r3, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <SYSVIEW_AddTask+0xcc>)
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	330c      	adds	r3, #12
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4910      	ldr	r1, [pc, #64]	; (8003ee4 <SYSVIEW_AddTask+0xcc>)
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3310      	adds	r3, #16
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <SYSVIEW_AddTask+0xc4>)
 8003eba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f80e 	bl	8003ee8 <SYSVIEW_SendTaskInfo>
 8003ecc:	e000      	b.n	8003ed0 <SYSVIEW_AddTask+0xb8>
    return;
 8003ece:	bf00      	nop

}
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08007028 	.word	0x08007028
 8003edc:	200016b8 	.word	0x200016b8
 8003ee0:	08007030 	.word	0x08007030
 8003ee4:	20001618 	.word	0x20001618

08003ee8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	2214      	movs	r2, #20
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 ffae 	bl	8005e60 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fb55 	bl	80055cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f22:	bf00      	nop
 8003f24:	3728      	adds	r7, #40	; 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <_DoInit+0x98>)
 8003f34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <_DoInit+0x9c>)
 8003f46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <_DoInit+0xa0>)
 8003f4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <_DoInit+0x9c>)
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <_DoInit+0xa4>)
 8003f72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2210      	movs	r2, #16
 8003f78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3307      	adds	r3, #7
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <_DoInit+0xa8>)
 8003f92:	6810      	ldr	r0, [r2, #0]
 8003f94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <_DoInit+0xac>)
 8003f9e:	6810      	ldr	r0, [r2, #0]
 8003fa0:	6018      	str	r0, [r3, #0]
 8003fa2:	8891      	ldrh	r1, [r2, #4]
 8003fa4:	7992      	ldrb	r2, [r2, #6]
 8003fa6:	8099      	strh	r1, [r3, #4]
 8003fa8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003faa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003fb4:	f3bf 8f5f 	dmb	sy
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	200016bc 	.word	0x200016bc
 8003fc8:	08007080 	.word	0x08007080
 8003fcc:	20001764 	.word	0x20001764
 8003fd0:	20001b64 	.word	0x20001b64
 8003fd4:	0800708c 	.word	0x0800708c
 8003fd8:	08007090 	.word	0x08007090

08003fdc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d905      	bls.n	800400c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	e007      	b.n	800401c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	1acb      	subs	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3b01      	subs	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	4293      	cmp	r3, r2
 8004028:	bf28      	it	cs
 800402a:	4613      	movcs	r3, r2
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4293      	cmp	r3, r2
 8004034:	bf28      	it	cs
 8004036:	4613      	movcs	r3, r2
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	f001 fefb 	bl	8005e44 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	4413      	add	r3, r2
 8004054:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	4413      	add	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	4413      	add	r3, r2
 800406c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	429a      	cmp	r2, r3
 8004076:	d101      	bne.n	800407c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800407c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1b2      	bne.n	8003ff2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800408c:	6a3b      	ldr	r3, [r7, #32]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3728      	adds	r7, #40	; 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d911      	bls.n	80040de <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	6938      	ldr	r0, [r7, #16]
 80040ca:	f001 febb 	bl	8005e44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040ce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80040dc:	e01f      	b.n	800411e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	6938      	ldr	r0, [r7, #16]
 80040f2:	f001 fea7 	bl	8005e44 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4619      	mov	r1, r3
 800410e:	6938      	ldr	r0, [r7, #16]
 8004110:	f001 fe98 	bl	8005e44 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004114:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	60da      	str	r2, [r3, #12]
}
 800411e:	bf00      	nop
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	429a      	cmp	r2, r3
 8004140:	d808      	bhi.n	8004154 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad2      	subs	r2, r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e004      	b.n	800415e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800415e:	697b      	ldr	r3, [r7, #20]
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	; 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004178:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <SEGGER_RTT_ReadNoLock+0x108>)
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <SEGGER_RTT_ReadNoLock+0x1e>
 8004186:	f7ff fed1 	bl	8003f2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3360      	adds	r3, #96	; 0x60
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <SEGGER_RTT_ReadNoLock+0x108>)
 8004198:	4413      	add	r3, r2
 800419a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d92b      	bls.n	8004210 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4293      	cmp	r3, r2
 80041c8:	bf28      	it	cs
 80041ca:	4613      	movcs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	4413      	add	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f001 fe31 	bl	8005e44 <memcpy>
    NumBytesRead += NumBytesRem;
 80041e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4413      	add	r3, r2
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4413      	add	r3, r2
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004208:	429a      	cmp	r2, r3
 800420a:	d101      	bne.n	8004210 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4293      	cmp	r3, r2
 800421e:	bf28      	it	cs
 8004220:	4613      	movcs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	4413      	add	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800423a:	f001 fe03 	bl	8005e44 <memcpy>
    NumBytesRead += NumBytesRem;
 800423e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800426c:	4618      	mov	r0, r3
 800426e:	3730      	adds	r7, #48	; 0x30
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200016bc 	.word	0x200016bc

08004278 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004296:	4413      	add	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d029      	beq.n	80042f6 <SEGGER_RTT_WriteNoLock+0x7e>
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d82e      	bhi.n	8004304 <SEGGER_RTT_WriteNoLock+0x8c>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <SEGGER_RTT_WriteNoLock+0x38>
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d013      	beq.n	80042d6 <SEGGER_RTT_WriteNoLock+0x5e>
 80042ae:	e029      	b.n	8004304 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f7ff ff38 	bl	8004126 <_GetAvailWriteSpace>
 80042b6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d202      	bcs.n	80042c6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042c4:	e021      	b.n	800430a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff fee1 	bl	8004096 <_WriteNoCheck>
    break;
 80042d4:	e019      	b.n	800430a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff ff25 	bl	8004126 <_GetAvailWriteSpace>
 80042dc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4293      	cmp	r3, r2
 80042e4:	bf28      	it	cs
 80042e6:	4613      	movcs	r3, r2
 80042e8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff fed1 	bl	8004096 <_WriteNoCheck>
    break;
 80042f4:	e009      	b.n	800430a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	69b9      	ldr	r1, [r7, #24]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff fe6e 	bl	8003fdc <_WriteBlocking>
 8004300:	61f8      	str	r0, [r7, #28]
    break;
 8004302:	e002      	b.n	800430a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
    break;
 8004308:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800430a:	69fb      	ldr	r3, [r7, #28]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200016bc 	.word	0x200016bc

08004318 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <SEGGER_RTT_Write+0x48>)
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <SEGGER_RTT_Write+0x1e>
 8004332:	f7ff fdfb 	bl	8003f2c <_DoInit>
  SEGGER_RTT_LOCK();
 8004336:	f3ef 8311 	mrs	r3, BASEPRI
 800433a:	f04f 0120 	mov.w	r1, #32
 800433e:	f381 8811 	msr	BASEPRI, r1
 8004342:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff95 	bl	8004278 <SEGGER_RTT_WriteNoLock>
 800434e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004356:	697b      	ldr	r3, [r7, #20]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200016bc 	.word	0x200016bc

08004364 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004372:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004380:	f7ff fdd4 	bl	8003f2c <_DoInit>
  SEGGER_RTT_LOCK();
 8004384:	f3ef 8311 	mrs	r3, BASEPRI
 8004388:	f04f 0120 	mov.w	r1, #32
 800438c:	f381 8811 	msr	BASEPRI, r1
 8004390:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004392:	4b35      	ldr	r3, [pc, #212]	; (8004468 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004394:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800439a:	6939      	ldr	r1, [r7, #16]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	3304      	adds	r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	dbeb      	blt.n	800439a <SEGGER_RTT_AllocUpBuffer+0x36>
 80043c2:	e000      	b.n	80043c6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043c4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	da3f      	bge.n	8004450 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80043d0:	6939      	ldr	r1, [r7, #16]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	440b      	add	r3, r1
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80043e4:	6939      	ldr	r1, [r7, #16]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	3304      	adds	r3, #4
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80043fa:	6939      	ldr	r1, [r7, #16]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	3320      	adds	r3, #32
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800440e:	6939      	ldr	r1, [r7, #16]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	3328      	adds	r3, #40	; 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	3324      	adds	r3, #36	; 0x24
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004436:	6939      	ldr	r1, [r7, #16]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	440b      	add	r3, r1
 8004444:	332c      	adds	r3, #44	; 0x2c
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800444a:	f3bf 8f5f 	dmb	sy
 800444e:	e002      	b.n	8004456 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800445c:	69fb      	ldr	r3, [r7, #28]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200016bc 	.word	0x200016bc

0800446c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004488:	f7ff fd50 	bl	8003f2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800448e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	461a      	mov	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4293      	cmp	r3, r2
 800449a:	d24d      	bcs.n	8004538 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800449c:	f3ef 8311 	mrs	r3, BASEPRI
 80044a0:	f04f 0120 	mov.w	r1, #32
 80044a4:	f381 8811 	msr	BASEPRI, r1
 80044a8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d031      	beq.n	8004514 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	3360      	adds	r3, #96	; 0x60
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	3364      	adds	r3, #100	; 0x64
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80044d8:	6979      	ldr	r1, [r7, #20]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3368      	adds	r3, #104	; 0x68
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3370      	adds	r3, #112	; 0x70
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	336c      	adds	r3, #108	; 0x6c
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	3374      	adds	r3, #116	; 0x74
 8004524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004526:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004528:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e002      	b.n	800453e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800453e:	69fb      	ldr	r3, [r7, #28]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	200016bc 	.word	0x200016bc

0800454c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800455c:	e002      	b.n	8004564 <_EncodeStr+0x18>
    Len++;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f6      	bne.n	800455e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d901      	bls.n	800457c <_EncodeStr+0x30>
    Len = Limit;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2bfe      	cmp	r3, #254	; 0xfe
 8004580:	d806      	bhi.n	8004590 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e011      	b.n	80045b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	60fa      	str	r2, [r7, #12]
 8004596:	22ff      	movs	r2, #255	; 0xff
 8004598:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	60fa      	str	r2, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	0a19      	lsrs	r1, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	60fa      	str	r2, [r7, #12]
 80045b0:	b2ca      	uxtb	r2, r1
 80045b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045b8:	e00a      	b.n	80045d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	1c53      	adds	r3, r2, #1
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	60f9      	str	r1, [r7, #12]
 80045c6:	7812      	ldrb	r2, [r2, #0]
 80045c8:	701a      	strb	r2, [r3, #0]
    n++;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	3301      	adds	r3, #1
 80045ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d3f0      	bcc.n	80045ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <_HandleIncomingPacket+0xe0>)
 8004608:	7e1b      	ldrb	r3, [r3, #24]
 800460a:	4618      	mov	r0, r3
 800460c:	1cfb      	adds	r3, r7, #3
 800460e:	2201      	movs	r2, #1
 8004610:	4619      	mov	r1, r3
 8004612:	f7ff fdab 	bl	800416c <SEGGER_RTT_ReadNoLock>
 8004616:	4603      	mov	r3, r0
 8004618:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	dd54      	ble.n	80046ca <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d032      	beq.n	800468c <_HandleIncomingPacket+0x8c>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	dc42      	bgt.n	80046b0 <_HandleIncomingPacket+0xb0>
 800462a:	2b07      	cmp	r3, #7
 800462c:	dc16      	bgt.n	800465c <_HandleIncomingPacket+0x5c>
 800462e:	2b00      	cmp	r3, #0
 8004630:	dd3e      	ble.n	80046b0 <_HandleIncomingPacket+0xb0>
 8004632:	3b01      	subs	r3, #1
 8004634:	2b06      	cmp	r3, #6
 8004636:	d83b      	bhi.n	80046b0 <_HandleIncomingPacket+0xb0>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <_HandleIncomingPacket+0x40>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004663 	.word	0x08004663
 8004644:	08004669 	.word	0x08004669
 8004648:	0800466f 	.word	0x0800466f
 800464c:	08004675 	.word	0x08004675
 8004650:	0800467b 	.word	0x0800467b
 8004654:	08004681 	.word	0x08004681
 8004658:	08004687 	.word	0x08004687
 800465c:	2b7f      	cmp	r3, #127	; 0x7f
 800465e:	d036      	beq.n	80046ce <_HandleIncomingPacket+0xce>
 8004660:	e026      	b.n	80046b0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004662:	f000 fe39 	bl	80052d8 <SEGGER_SYSVIEW_Start>
      break;
 8004666:	e037      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004668:	f000 fef0 	bl	800544c <SEGGER_SYSVIEW_Stop>
      break;
 800466c:	e034      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800466e:	f001 f8c9 	bl	8005804 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004672:	e031      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004674:	f001 f88e 	bl	8005794 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004678:	e02e      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800467a:	f000 ff0d 	bl	8005498 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800467e:	e02b      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004680:	f001 faec 	bl	8005c5c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004684:	e028      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004686:	f001 facb 	bl	8005c20 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800468a:	e025      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <_HandleIncomingPacket+0xe0>)
 800468e:	7e1b      	ldrb	r3, [r3, #24]
 8004690:	4618      	mov	r0, r3
 8004692:	1cfb      	adds	r3, r7, #3
 8004694:	2201      	movs	r2, #1
 8004696:	4619      	mov	r1, r3
 8004698:	f7ff fd68 	bl	800416c <SEGGER_RTT_ReadNoLock>
 800469c:	4603      	mov	r3, r0
 800469e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dd15      	ble.n	80046d2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fa39 	bl	8005b20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80046ae:	e010      	b.n	80046d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	b25b      	sxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da0e      	bge.n	80046d6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <_HandleIncomingPacket+0xe0>)
 80046ba:	7e1b      	ldrb	r3, [r3, #24]
 80046bc:	4618      	mov	r0, r3
 80046be:	1cfb      	adds	r3, r7, #3
 80046c0:	2201      	movs	r2, #1
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7ff fd52 	bl	800416c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80046c8:	e005      	b.n	80046d6 <_HandleIncomingPacket+0xd6>
    }
  }
 80046ca:	bf00      	nop
 80046cc:	e004      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
      break;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
      break;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <_HandleIncomingPacket+0xd8>
      break;
 80046d6:	bf00      	nop
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2000237c 	.word	0x2000237c

080046e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	; 0x30
 80046e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80046ea:	2301      	movs	r3, #1
 80046ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	3301      	adds	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fe:	e00b      	b.n	8004718 <_TrySendOverflowPacket+0x34>
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	b2da      	uxtb	r2, r3
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	62f9      	str	r1, [r7, #44]	; 0x2c
 800470a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	09db      	lsrs	r3, r3, #7
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	2b7f      	cmp	r3, #127	; 0x7f
 800471c:	d8f0      	bhi.n	8004700 <_TrySendOverflowPacket+0x1c>
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <_TrySendOverflowPacket+0xe0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004734:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	e00b      	b.n	8004760 <_TrySendOverflowPacket+0x7c>
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	6279      	str	r1, [r7, #36]	; 0x24
 8004752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	09db      	lsrs	r3, r3, #7
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b7f      	cmp	r3, #127	; 0x7f
 8004764:	d8f0      	bhi.n	8004748 <_TrySendOverflowPacket+0x64>
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	627a      	str	r2, [r7, #36]	; 0x24
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	4618      	mov	r0, r3
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	461a      	mov	r2, r3
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	4619      	mov	r1, r3
 8004788:	f7fb fcfa 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800478c:	4603      	mov	r3, r0
 800478e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e004      	b.n	80047b4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	3301      	adds	r3, #1
 80047b0:	4a03      	ldr	r2, [pc, #12]	; (80047c0 <_TrySendOverflowPacket+0xdc>)
 80047b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80047b4:	693b      	ldr	r3, [r7, #16]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3730      	adds	r7, #48	; 0x30
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	2000237c 	.word	0x2000237c
 80047c4:	e0001004 	.word	0xe0001004

080047c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80047d4:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <_SendPacket+0x1c0>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d010      	beq.n	80047fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <_SendPacket+0x1c0>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a3 	beq.w	800492c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80047e6:	4b68      	ldr	r3, [pc, #416]	; (8004988 <_SendPacket+0x1c0>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d109      	bne.n	8004802 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80047ee:	f7ff ff79 	bl	80046e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <_SendPacket+0x1c0>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	f040 809a 	bne.w	8004930 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80047fc:	e001      	b.n	8004802 <_SendPacket+0x3a>
    goto Send;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <_SendPacket+0x3c>
Send:
 8004802:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b1f      	cmp	r3, #31
 8004808:	d809      	bhi.n	800481e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <_SendPacket+0x1c0>)
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 808b 	bne.w	8004934 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b17      	cmp	r3, #23
 8004822:	d807      	bhi.n	8004834 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b01      	subs	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e03d      	b.n	80048b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b7f      	cmp	r3, #127	; 0x7f
 8004840:	d912      	bls.n	8004868 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	09da      	lsrs	r2, r3, #7
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b01      	subs	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	3a01      	subs	r2, #1
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e006      	b.n	8004876 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b01      	subs	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d912      	bls.n	80048a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	09da      	lsrs	r2, r3, #7
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	3a01      	subs	r2, #1
 8004894:	60fa      	str	r2, [r7, #12]
 8004896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e006      	b.n	80048b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048b0:	4b36      	ldr	r3, [pc, #216]	; (800498c <_SendPacket+0x1c4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <_SendPacket+0x1c0>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	e00b      	b.n	80048e2 <_SendPacket+0x11a>
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1c59      	adds	r1, r3, #1
 80048d2:	6279      	str	r1, [r7, #36]	; 0x24
 80048d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	09db      	lsrs	r3, r3, #7
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2b7f      	cmp	r3, #127	; 0x7f
 80048e6:	d8f0      	bhi.n	80048ca <_SendPacket+0x102>
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	627a      	str	r2, [r7, #36]	; 0x24
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80048f8:	4b23      	ldr	r3, [pc, #140]	; (8004988 <_SendPacket+0x1c0>)
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	4618      	mov	r0, r3
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	461a      	mov	r2, r3
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	f7fb fc3a 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800490c:	4603      	mov	r3, r0
 800490e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004916:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <_SendPacket+0x1c0>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	60d3      	str	r3, [r2, #12]
 800491c:	e00b      	b.n	8004936 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <_SendPacket+0x1c0>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <_SendPacket+0x1c0>)
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e004      	b.n	8004936 <_SendPacket+0x16e>
    goto SendDone;
 800492c:	bf00      	nop
 800492e:	e002      	b.n	8004936 <_SendPacket+0x16e>
      goto SendDone;
 8004930:	bf00      	nop
 8004932:	e000      	b.n	8004936 <_SendPacket+0x16e>
      goto SendDone;
 8004934:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <_SendPacket+0x1c0>)
 8004938:	7e1b      	ldrb	r3, [r3, #24]
 800493a:	4619      	mov	r1, r3
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <_SendPacket+0x1c8>)
 800493e:	460b      	mov	r3, r1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	440b      	add	r3, r1
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	336c      	adds	r3, #108	; 0x6c
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <_SendPacket+0x1c0>)
 800494e:	7e1b      	ldrb	r3, [r3, #24]
 8004950:	4618      	mov	r0, r3
 8004952:	490f      	ldr	r1, [pc, #60]	; (8004990 <_SendPacket+0x1c8>)
 8004954:	4603      	mov	r3, r0
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4403      	add	r3, r0
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	3370      	adds	r3, #112	; 0x70
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d00b      	beq.n	800497e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <_SendPacket+0x1c0>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <_SendPacket+0x1c0>)
 8004970:	2201      	movs	r2, #1
 8004972:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004974:	f7ff fe44 	bl	8004600 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <_SendPacket+0x1c0>)
 800497a:	2200      	movs	r2, #0
 800497c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800497e:	bf00      	nop
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	2000237c 	.word	0x2000237c
 800498c:	e0001004 	.word	0xe0001004
 8004990:	200016bc 	.word	0x200016bc

08004994 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d80a      	bhi.n	80049c4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6051      	str	r1, [r2, #4]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d15a      	bne.n	8004a82 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	e00b      	b.n	8004a06 <_StoreChar+0x72>
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	6279      	str	r1, [r7, #36]	; 0x24
 80049f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0a:	d8f0      	bhi.n	80049ee <_StoreChar+0x5a>
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	627a      	str	r2, [r7, #36]	; 0x24
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e00b      	b.n	8004a3e <_StoreChar+0xaa>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	61f9      	str	r1, [r7, #28]
 8004a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b7f      	cmp	r3, #127	; 0x7f
 8004a42:	d8f0      	bhi.n	8004a26 <_StoreChar+0x92>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	61fa      	str	r2, [r7, #28]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	221a      	movs	r2, #26
 8004a5a:	6939      	ldr	r1, [r7, #16]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff feb3 	bl	80047c8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fdbd 	bl	80045e6 <_PreparePacket>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
  }
}
 8004a82:	bf00      	nop
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004aa6:	e007      	b.n	8004ab8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	623b      	str	r3, [r7, #32]
    Width++;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004ab8:	6a3a      	ldr	r2, [r7, #32]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d2f3      	bcs.n	8004aa8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d901      	bls.n	8004acc <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11f      	bne.n	8004b16 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <_PrintUnsigned+0x66>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <_PrintUnsigned+0x66>
        c = '0';
 8004aec:	2330      	movs	r3, #48	; 0x30
 8004aee:	76fb      	strb	r3, [r7, #27]
 8004af0:	e001      	b.n	8004af6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004af2:	2320      	movs	r3, #32
 8004af4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004af6:	e007      	b.n	8004b08 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	3b01      	subs	r3, #1
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004afe:	7efb      	ldrb	r3, [r7, #27]
 8004b00:	4619      	mov	r1, r3
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff ff46 	bl	8004994 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <_PrintUnsigned+0x8a>
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3f0      	bcc.n	8004af8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d903      	bls.n	8004b24 <_PrintUnsigned+0x98>
      NumDigits--;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	e009      	b.n	8004b38 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d200      	bcs.n	8004b38 <_PrintUnsigned+0xac>
        break;
 8004b36:	e005      	b.n	8004b44 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b42:	e7e8      	b.n	8004b16 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <_PrintUnsigned+0x128>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	4619      	mov	r1, r3
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff14 	bl	8004994 <_StoreChar>
    Digit /= Base;
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e3      	bne.n	8004b44 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b8c:	e006      	b.n	8004b9c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3b01      	subs	r3, #1
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004b94:	2120      	movs	r1, #32
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fefc 	bl	8004994 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <_PrintUnsigned+0x11e>
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3f1      	bcc.n	8004b8e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004baa:	bf00      	nop
 8004bac:	3728      	adds	r7, #40	; 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08007154 	.word	0x08007154

08004bb8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfb8      	it	lt
 8004bcc:	425b      	neglt	r3, r3
 8004bce:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004bd4:	e007      	b.n	8004be6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bde:	613b      	str	r3, [r7, #16]
    Width++;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3301      	adds	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	daf3      	bge.n	8004bd6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d901      	bls.n	8004bfa <_PrintInt+0x42>
    Width = NumDigits;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <_PrintInt+0x5e>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db04      	blt.n	8004c10 <_PrintInt+0x58>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <_PrintInt+0x5e>
    FieldWidth--;
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <_PrintInt+0x6e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <_PrintInt+0x9c>
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d111      	bne.n	8004c54 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c36:	e006      	b.n	8004c46 <_PrintInt+0x8e>
        FieldWidth--;
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004c3e:	2120      	movs	r1, #32
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fea7 	bl	8004994 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <_PrintInt+0x9c>
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3f1      	bcc.n	8004c38 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da07      	bge.n	8004c6a <_PrintInt+0xb2>
    v = -v;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	425b      	negs	r3, r3
 8004c5e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004c60:	212d      	movs	r1, #45	; 0x2d
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fe96 	bl	8004994 <_StoreChar>
 8004c68:	e008      	b.n	8004c7c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004c74:	212b      	movs	r1, #43	; 0x2b
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fe8c 	bl	8004994 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d019      	beq.n	8004cba <_PrintInt+0x102>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d114      	bne.n	8004cba <_PrintInt+0x102>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d111      	bne.n	8004cba <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c9c:	e006      	b.n	8004cac <_PrintInt+0xf4>
        FieldWidth--;
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004ca4:	2130      	movs	r1, #48	; 0x30
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fe74 	bl	8004994 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <_PrintInt+0x102>
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3f1      	bcc.n	8004c9e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fedf 	bl	8004a8c <_PrintUnsigned>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b098      	sub	sp, #96	; 0x60
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce8:	f04f 0120 	mov.w	r1, #32
 8004cec:	f381 8811 	msr	BASEPRI, r1
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf2:	48b7      	ldr	r0, [pc, #732]	; (8004fd0 <_VPrintTarget+0x2f8>)
 8004cf4:	f7ff fc77 	bl	80045e6 <_PreparePacket>
 8004cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004cfa:	4bb5      	ldr	r3, [pc, #724]	; (8004fd0 <_VPrintTarget+0x2f8>)
 8004cfc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8183 	beq.w	800502e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d2c:	2b25      	cmp	r3, #37	; 0x25
 8004d2e:	f040 8170 	bne.w	8005012 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004d32:	2300      	movs	r3, #0
 8004d34:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004d42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d46:	3b23      	subs	r3, #35	; 0x23
 8004d48:	2b0d      	cmp	r3, #13
 8004d4a:	d83f      	bhi.n	8004dcc <_VPrintTarget+0xf4>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <_VPrintTarget+0x7c>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004dcd 	.word	0x08004dcd
 8004d5c:	08004dcd 	.word	0x08004dcd
 8004d60:	08004dcd 	.word	0x08004dcd
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004dcd 	.word	0x08004dcd
 8004d70:	08004dcd 	.word	0x08004dcd
 8004d74:	08004dad 	.word	0x08004dad
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004dcd 	.word	0x08004dcd
 8004d88:	08004d9d 	.word	0x08004d9d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e01a      	b.n	8004dd2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e012      	b.n	8004dd2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e00a      	b.n	8004dd2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	f043 0308 	orr.w	r3, r3, #8
 8004dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e002      	b.n	8004dd2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	bf00      	nop
        }
      } while (v);
 8004dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1b0      	bne.n	8004d3a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004de8:	2b2f      	cmp	r3, #47	; 0x2f
 8004dea:	d912      	bls.n	8004e12 <_VPrintTarget+0x13a>
 8004dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004df0:	2b39      	cmp	r3, #57	; 0x39
 8004df2:	d80e      	bhi.n	8004e12 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	461a      	mov	r2, r3
 8004e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3b30      	subs	r3, #48	; 0x30
 8004e0e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004e10:	e7e4      	b.n	8004ddc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004e12:	2300      	movs	r3, #0
 8004e14:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e22:	2b2e      	cmp	r3, #46	; 0x2e
 8004e24:	d11d      	bne.n	8004e62 <_VPrintTarget+0x18a>
        sFormat++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e38:	2b2f      	cmp	r3, #47	; 0x2f
 8004e3a:	d912      	bls.n	8004e62 <_VPrintTarget+0x18a>
 8004e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e40:	2b39      	cmp	r3, #57	; 0x39
 8004e42:	d80e      	bhi.n	8004e62 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	461a      	mov	r2, r3
 8004e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b30      	subs	r3, #48	; 0x30
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004e60:	e7e4      	b.n	8004e2c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e6e:	2b6c      	cmp	r3, #108	; 0x6c
 8004e70:	d003      	beq.n	8004e7a <_VPrintTarget+0x1a2>
 8004e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e76:	2b68      	cmp	r3, #104	; 0x68
 8004e78:	d107      	bne.n	8004e8a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004e88:	e7ef      	b.n	8004e6a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e8e:	2b25      	cmp	r3, #37	; 0x25
 8004e90:	f000 80b3 	beq.w	8004ffa <_VPrintTarget+0x322>
 8004e94:	2b25      	cmp	r3, #37	; 0x25
 8004e96:	f2c0 80b7 	blt.w	8005008 <_VPrintTarget+0x330>
 8004e9a:	2b78      	cmp	r3, #120	; 0x78
 8004e9c:	f300 80b4 	bgt.w	8005008 <_VPrintTarget+0x330>
 8004ea0:	2b58      	cmp	r3, #88	; 0x58
 8004ea2:	f2c0 80b1 	blt.w	8005008 <_VPrintTarget+0x330>
 8004ea6:	3b58      	subs	r3, #88	; 0x58
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	f200 80ad 	bhi.w	8005008 <_VPrintTarget+0x330>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <_VPrintTarget+0x1dc>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004fab 	.word	0x08004fab
 8004eb8:	08005009 	.word	0x08005009
 8004ebc:	08005009 	.word	0x08005009
 8004ec0:	08005009 	.word	0x08005009
 8004ec4:	08005009 	.word	0x08005009
 8004ec8:	08005009 	.word	0x08005009
 8004ecc:	08005009 	.word	0x08005009
 8004ed0:	08005009 	.word	0x08005009
 8004ed4:	08005009 	.word	0x08005009
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f5f 	.word	0x08004f5f
 8004ee8:	08005009 	.word	0x08005009
 8004eec:	08005009 	.word	0x08005009
 8004ef0:	08005009 	.word	0x08005009
 8004ef4:	08005009 	.word	0x08005009
 8004ef8:	08005009 	.word	0x08005009
 8004efc:	08005009 	.word	0x08005009
 8004f00:	08005009 	.word	0x08005009
 8004f04:	08005009 	.word	0x08005009
 8004f08:	08005009 	.word	0x08005009
 8004f0c:	08005009 	.word	0x08005009
 8004f10:	08005009 	.word	0x08005009
 8004f14:	08004fd5 	.word	0x08004fd5
 8004f18:	08005009 	.word	0x08005009
 8004f1c:	08005009 	.word	0x08005009
 8004f20:	08005009 	.word	0x08005009
 8004f24:	08005009 	.word	0x08005009
 8004f28:	08004f85 	.word	0x08004f85
 8004f2c:	08005009 	.word	0x08005009
 8004f30:	08005009 	.word	0x08005009
 8004f34:	08004fab 	.word	0x08004fab
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1d19      	adds	r1, r3, #4
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6011      	str	r1, [r2, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004f4c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fd1c 	bl	8004994 <_StoreChar>
        break;
 8004f5c:	e055      	b.n	800500a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	1d19      	adds	r1, r3, #4
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6011      	str	r1, [r2, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f6c:	f107 0014 	add.w	r0, r7, #20
 8004f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	220a      	movs	r2, #10
 8004f7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f7e:	f7ff fe1b 	bl	8004bb8 <_PrintInt>
        break;
 8004f82:	e042      	b.n	800500a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1d19      	adds	r1, r3, #4
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6011      	str	r1, [r2, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f94:	f107 0014 	add.w	r0, r7, #20
 8004f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa2:	220a      	movs	r2, #10
 8004fa4:	f7ff fd72 	bl	8004a8c <_PrintUnsigned>
        break;
 8004fa8:	e02f      	b.n	800500a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	1d19      	adds	r1, r3, #4
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6011      	str	r1, [r2, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004fb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fba:	f107 0014 	add.w	r0, r7, #20
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc8:	2210      	movs	r2, #16
 8004fca:	f7ff fd5f 	bl	8004a8c <_PrintUnsigned>
        break;
 8004fce:	e01c      	b.n	800500a <_VPrintTarget+0x332>
 8004fd0:	200023ac 	.word	0x200023ac
      case 'p':
        v = va_arg(*pParamList, int);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004fe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fe4:	f107 0014 	add.w	r0, r7, #20
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	2308      	movs	r3, #8
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	f7ff fd4a 	bl	8004a8c <_PrintUnsigned>
        break;
 8004ff8:	e007      	b.n	800500a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004ffa:	f107 0314 	add.w	r3, r7, #20
 8004ffe:	2125      	movs	r1, #37	; 0x25
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fcc7 	bl	8004994 <_StoreChar>
        break;
 8005006:	e000      	b.n	800500a <_VPrintTarget+0x332>
      default:
        break;
 8005008:	bf00      	nop
      }
      sFormat++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e007      	b.n	8005022 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005012:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fcb9 	bl	8004994 <_StoreChar>
    }
  } while (*sFormat);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f47f ae72 	bne.w	8004d10 <_VPrintTarget+0x38>
 800502c:	e000      	b.n	8005030 <_VPrintTarget+0x358>
      break;
 800502e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d041      	beq.n	80050ba <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	643b      	str	r3, [r7, #64]	; 0x40
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005046:	e00b      	b.n	8005060 <_VPrintTarget+0x388>
 8005048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504a:	b2da      	uxtb	r2, r3
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	6439      	str	r1, [r7, #64]	; 0x40
 8005052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	09db      	lsrs	r3, r3, #7
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	2b7f      	cmp	r3, #127	; 0x7f
 8005064:	d8f0      	bhi.n	8005048 <_VPrintTarget+0x370>
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	643a      	str	r2, [r7, #64]	; 0x40
 800506c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005074:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	e00b      	b.n	8005098 <_VPrintTarget+0x3c0>
 8005080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	63b9      	str	r1, [r7, #56]	; 0x38
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <_VPrintTarget+0x3a8>
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80050a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	221a      	movs	r2, #26
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fb87 	bl	80047c8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80050c0:	bf00      	nop
 80050c2:	3758      	adds	r7, #88	; 0x58
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80050d6:	2300      	movs	r3, #0
 80050d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050dc:	4917      	ldr	r1, [pc, #92]	; (800513c <SEGGER_SYSVIEW_Init+0x74>)
 80050de:	4818      	ldr	r0, [pc, #96]	; (8005140 <SEGGER_SYSVIEW_Init+0x78>)
 80050e0:	f7ff f940 	bl	8004364 <SEGGER_RTT_AllocUpBuffer>
 80050e4:	4603      	mov	r3, r0
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 80050ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80050ec:	4b15      	ldr	r3, [pc, #84]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 80050ee:	785a      	ldrb	r2, [r3, #1]
 80050f0:	4b14      	ldr	r3, [pc, #80]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 80050f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 80050f6:	7e1b      	ldrb	r3, [r3, #24]
 80050f8:	4618      	mov	r0, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2308      	movs	r3, #8
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <SEGGER_SYSVIEW_Init+0x80>)
 8005102:	490f      	ldr	r1, [pc, #60]	; (8005140 <SEGGER_SYSVIEW_Init+0x78>)
 8005104:	f7ff f9b2 	bl	800446c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <SEGGER_SYSVIEW_Init+0x84>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 8005114:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800511c:	4a09      	ldr	r2, [pc, #36]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005122:	4a08      	ldr	r2, [pc, #32]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005128:	4a06      	ldr	r2, [pc, #24]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SEGGER_SYSVIEW_Init+0x7c>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20001b74 	.word	0x20001b74
 8005140:	08007098 	.word	0x08007098
 8005144:	2000237c 	.word	0x2000237c
 8005148:	20002374 	.word	0x20002374
 800514c:	e0001004 	.word	0xe0001004

08005150 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6113      	str	r3, [r2, #16]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	2000237c 	.word	0x2000237c

08005170 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005178:	f3ef 8311 	mrs	r3, BASEPRI
 800517c:	f04f 0120 	mov.w	r1, #32
 8005180:	f381 8811 	msr	BASEPRI, r1
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	4808      	ldr	r0, [pc, #32]	; (80051a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005188:	f7ff fa2d 	bl	80045e6 <_PreparePacket>
 800518c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f7ff fb18 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200023ac 	.word	0x200023ac

080051ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051b6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ba:	f04f 0120 	mov.w	r1, #32
 80051be:	f381 8811 	msr	BASEPRI, r1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	4816      	ldr	r0, [pc, #88]	; (8005220 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80051c6:	f7ff fa0e 	bl	80045e6 <_PreparePacket>
 80051ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e00b      	b.n	80051f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1c59      	adds	r1, r3, #1
 80051e2:	61f9      	str	r1, [r7, #28]
 80051e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b7f      	cmp	r3, #127	; 0x7f
 80051f6:	d8f0      	bhi.n	80051da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	61fa      	str	r2, [r7, #28]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f7ff fadb 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f383 8811 	msr	BASEPRI, r3
}
 8005218:	bf00      	nop
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	200023ac 	.word	0x200023ac

08005224 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005230:	f3ef 8311 	mrs	r3, BASEPRI
 8005234:	f04f 0120 	mov.w	r1, #32
 8005238:	f381 8811 	msr	BASEPRI, r1
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	4825      	ldr	r0, [pc, #148]	; (80052d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005240:	f7ff f9d1 	bl	80045e6 <_PreparePacket>
 8005244:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	e00b      	b.n	800526c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	b2da      	uxtb	r2, r3
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800525e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d8f0      	bhi.n	8005254 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	e00b      	b.n	80052a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	1c59      	adds	r1, r3, #1
 8005294:	6279      	str	r1, [r7, #36]	; 0x24
 8005296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	09db      	lsrs	r3, r3, #7
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d8f0      	bhi.n	800528c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	627a      	str	r2, [r7, #36]	; 0x24
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	69b8      	ldr	r0, [r7, #24]
 80052c0:	f7ff fa82 	bl	80047c8 <_SendPacket>
  RECORD_END();
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f383 8811 	msr	BASEPRI, r3
}
 80052ca:	bf00      	nop
 80052cc:	3730      	adds	r7, #48	; 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200023ac 	.word	0x200023ac

080052d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052de:	4b58      	ldr	r3, [pc, #352]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80052e4:	f3ef 8311 	mrs	r3, BASEPRI
 80052e8:	f04f 0120 	mov.w	r1, #32
 80052ec:	f381 8811 	msr	BASEPRI, r1
 80052f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80052f2:	4b53      	ldr	r3, [pc, #332]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	220a      	movs	r2, #10
 80052f8:	4952      	ldr	r1, [pc, #328]	; (8005444 <SEGGER_SYSVIEW_Start+0x16c>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fa ff40 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005306:	200a      	movs	r0, #10
 8005308:	f7ff ff32 	bl	8005170 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800530c:	f3ef 8311 	mrs	r3, BASEPRI
 8005310:	f04f 0120 	mov.w	r1, #32
 8005314:	f381 8811 	msr	BASEPRI, r1
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	484b      	ldr	r0, [pc, #300]	; (8005448 <SEGGER_SYSVIEW_Start+0x170>)
 800531c:	f7ff f963 	bl	80045e6 <_PreparePacket>
 8005320:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532a:	4b45      	ldr	r3, [pc, #276]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005330:	e00b      	b.n	800534a <SEGGER_SYSVIEW_Start+0x72>
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800533c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2b7f      	cmp	r3, #127	; 0x7f
 800534e:	d8f0      	bhi.n	8005332 <SEGGER_SYSVIEW_Start+0x5a>
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_Start+0xac>
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	6279      	str	r1, [r7, #36]	; 0x24
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	623b      	str	r3, [r7, #32]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_Start+0x94>
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	627a      	str	r2, [r7, #36]	; 0x24
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	e00b      	b.n	80053be <SEGGER_SYSVIEW_Start+0xe6>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	61f9      	str	r1, [r7, #28]
 80053b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b7f      	cmp	r3, #127	; 0x7f
 80053c2:	d8f0      	bhi.n	80053a6 <SEGGER_SYSVIEW_Start+0xce>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	e00b      	b.n	80053f6 <SEGGER_SYSVIEW_Start+0x11e>
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	1c59      	adds	r1, r3, #1
 80053e6:	6179      	str	r1, [r7, #20]
 80053e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	09db      	lsrs	r3, r3, #7
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b7f      	cmp	r3, #127	; 0x7f
 80053fa:	d8f0      	bhi.n	80053de <SEGGER_SYSVIEW_Start+0x106>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	617a      	str	r2, [r7, #20]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800540c:	2218      	movs	r2, #24
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff f9d9 	bl	80047c8 <_SendPacket>
      RECORD_END();
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <SEGGER_SYSVIEW_Start+0x168>)
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800542a:	f000 f9eb 	bl	8005804 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800542e:	f000 f9b1 	bl	8005794 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005432:	f000 fc13 	bl	8005c5c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005436:	bf00      	nop
 8005438:	3730      	adds	r7, #48	; 0x30
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	2000237c 	.word	0x2000237c
 8005444:	08007148 	.word	0x08007148
 8005448:	200023ac 	.word	0x200023ac

0800544c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005452:	f3ef 8311 	mrs	r3, BASEPRI
 8005456:	f04f 0120 	mov.w	r1, #32
 800545a:	f381 8811 	msr	BASEPRI, r1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	480b      	ldr	r0, [pc, #44]	; (8005490 <SEGGER_SYSVIEW_Stop+0x44>)
 8005462:	f7ff f8c0 	bl	80045e6 <_PreparePacket>
 8005466:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <SEGGER_SYSVIEW_Stop+0x48>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005470:	220b      	movs	r2, #11
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	6838      	ldr	r0, [r7, #0]
 8005476:	f7ff f9a7 	bl	80047c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <SEGGER_SYSVIEW_Stop+0x48>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f383 8811 	msr	BASEPRI, r3
}
 8005486:	bf00      	nop
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200023ac 	.word	0x200023ac
 8005494:	2000237c 	.word	0x2000237c

08005498 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	; 0x30
 800549c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800549e:	f3ef 8311 	mrs	r3, BASEPRI
 80054a2:	f04f 0120 	mov.w	r1, #32
 80054a6:	f381 8811 	msr	BASEPRI, r1
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	4845      	ldr	r0, [pc, #276]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054ae:	f7ff f89a 	bl	80045e6 <_PreparePacket>
 80054b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054bc:	4b42      	ldr	r3, [pc, #264]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	e00b      	b.n	80054dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	09db      	lsrs	r3, r3, #7
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	2b7f      	cmp	r3, #127	; 0x7f
 80054e0:	d8f0      	bhi.n	80054c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	e00b      	b.n	8005516 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	6279      	str	r1, [r7, #36]	; 0x24
 8005508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	09db      	lsrs	r3, r3, #7
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	2b7f      	cmp	r3, #127	; 0x7f
 800551a:	d8f0      	bhi.n	80054fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	627a      	str	r2, [r7, #36]	; 0x24
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e00b      	b.n	8005550 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	61f9      	str	r1, [r7, #28]
 8005542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	09db      	lsrs	r3, r3, #7
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b7f      	cmp	r3, #127	; 0x7f
 8005554:	d8f0      	bhi.n	8005538 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	61fa      	str	r2, [r7, #28]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e00b      	b.n	8005588 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1c59      	adds	r1, r3, #1
 8005578:	6179      	str	r1, [r7, #20]
 800557a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	09db      	lsrs	r3, r3, #7
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b7f      	cmp	r3, #127	; 0x7f
 800558c:	d8f0      	bhi.n	8005570 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	617a      	str	r2, [r7, #20]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800559e:	2218      	movs	r2, #24
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	68b8      	ldr	r0, [r7, #8]
 80055a4:	f7ff f910 	bl	80047c8 <_SendPacket>
  RECORD_END();
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	4798      	blx	r3
  }
}
 80055bc:	bf00      	nop
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200023ac 	.word	0x200023ac
 80055c8:	2000237c 	.word	0x2000237c

080055cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	; 0x48
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055d4:	f3ef 8311 	mrs	r3, BASEPRI
 80055d8:	f04f 0120 	mov.w	r1, #32
 80055dc:	f381 8811 	msr	BASEPRI, r1
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	486a      	ldr	r0, [pc, #424]	; (800578c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80055e4:	f7fe ffff 	bl	80045e6 <_PreparePacket>
 80055e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b66      	ldr	r3, [pc, #408]	; (8005790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
 80055fe:	e00b      	b.n	8005618 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	6479      	str	r1, [r7, #68]	; 0x44
 800560a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	2b7f      	cmp	r3, #127	; 0x7f
 800561c:	d8f0      	bhi.n	8005600 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800561e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	647a      	str	r2, [r7, #68]	; 0x44
 8005624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	63bb      	str	r3, [r7, #56]	; 0x38
 8005638:	e00b      	b.n	8005652 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	b2da      	uxtb	r2, r3
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	2b7f      	cmp	r3, #127	; 0x7f
 8005656:	d8f0      	bhi.n	800563a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	4619      	mov	r1, r3
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fe ff6b 	bl	800454c <_EncodeStr>
 8005676:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005678:	2209      	movs	r2, #9
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	6938      	ldr	r0, [r7, #16]
 800567e:	f7ff f8a3 	bl	80047c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	633b      	str	r3, [r7, #48]	; 0x30
 8005696:	e00b      	b.n	80056b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	6379      	str	r1, [r7, #52]	; 0x34
 80056a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2b7f      	cmp	r3, #127	; 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	637a      	str	r2, [r7, #52]	; 0x34
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d0:	e00b      	b.n	80056ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	1c59      	adds	r1, r3, #1
 80056da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2b7f      	cmp	r3, #127	; 0x7f
 80056ee:	d8f0      	bhi.n	80056d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	e00b      	b.n	8005724 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	6279      	str	r1, [r7, #36]	; 0x24
 8005716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b7f      	cmp	r3, #127	; 0x7f
 8005728:	d8f0      	bhi.n	800570c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	627a      	str	r2, [r7, #36]	; 0x24
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	61f9      	str	r1, [r7, #28]
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	61fa      	str	r2, [r7, #28]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005772:	2215      	movs	r2, #21
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	6938      	ldr	r0, [r7, #16]
 8005778:	f7ff f826 	bl	80047c8 <_SendPacket>
  RECORD_END();
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f383 8811 	msr	BASEPRI, r3
}
 8005782:	bf00      	nop
 8005784:	3748      	adds	r7, #72	; 0x48
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200023ac 	.word	0x200023ac
 8005790:	2000237c 	.word	0x2000237c

08005794 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057aa:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4798      	blx	r3
  }
}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	2000237c 	.word	0x2000237c

080057bc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057c4:	f3ef 8311 	mrs	r3, BASEPRI
 80057c8:	f04f 0120 	mov.w	r1, #32
 80057cc:	f381 8811 	msr	BASEPRI, r1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	480b      	ldr	r0, [pc, #44]	; (8005800 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057d4:	f7fe ff07 	bl	80045e6 <_PreparePacket>
 80057d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6938      	ldr	r0, [r7, #16]
 80057e0:	f7fe feb4 	bl	800454c <_EncodeStr>
 80057e4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80057e6:	220e      	movs	r2, #14
 80057e8:	68f9      	ldr	r1, [r7, #12]
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f7fe ffec 	bl	80047c8 <_SendPacket>
  RECORD_END();
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f383 8811 	msr	BASEPRI, r3
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200023ac 	.word	0x200023ac

08005804 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01a      	beq.n	8005848 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005812:	4b13      	ldr	r3, [pc, #76]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4798      	blx	r3
 8005824:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005828:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800582a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	000a      	movs	r2, r1
 8005838:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800583a:	4613      	mov	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4621      	mov	r1, r4
 8005840:	200d      	movs	r0, #13
 8005842:	f7ff fcef 	bl	8005224 <SEGGER_SYSVIEW_RecordU32x2>
 8005846:	e006      	b.n	8005856 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	200c      	movs	r0, #12
 8005850:	f7ff fcac 	bl	80051ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}
 800585e:	bf00      	nop
 8005860:	2000237c 	.word	0x2000237c
 8005864:	e0001004 	.word	0xe0001004

08005868 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800586e:	f3ef 8311 	mrs	r3, BASEPRI
 8005872:	f04f 0120 	mov.w	r1, #32
 8005876:	f381 8811 	msr	BASEPRI, r1
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	4819      	ldr	r0, [pc, #100]	; (80058e4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800587e:	f7fe feb2 	bl	80045e6 <_PreparePacket>
 8005882:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005888:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005890:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e00b      	b.n	80058b4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	6179      	str	r1, [r7, #20]
 80058a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	09db      	lsrs	r3, r3, #7
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b7f      	cmp	r3, #127	; 0x7f
 80058b8:	d8f0      	bhi.n	800589c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	617a      	str	r2, [r7, #20]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058ca:	2202      	movs	r2, #2
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	68b8      	ldr	r0, [r7, #8]
 80058d0:	f7fe ff7a 	bl	80047c8 <_SendPacket>
  RECORD_END();
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f383 8811 	msr	BASEPRI, r3
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200023ac 	.word	0x200023ac
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058f2:	f3ef 8311 	mrs	r3, BASEPRI
 80058f6:	f04f 0120 	mov.w	r1, #32
 80058fa:	f381 8811 	msr	BASEPRI, r1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	4807      	ldr	r0, [pc, #28]	; (8005920 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005902:	f7fe fe70 	bl	80045e6 <_PreparePacket>
 8005906:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005908:	2203      	movs	r2, #3
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f7fe ff5b 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	200023ac 	.word	0x200023ac

08005924 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	f04f 0120 	mov.w	r1, #32
 8005932:	f381 8811 	msr	BASEPRI, r1
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	4807      	ldr	r0, [pc, #28]	; (8005958 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800593a:	f7fe fe54 	bl	80045e6 <_PreparePacket>
 800593e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005940:	2212      	movs	r2, #18
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6838      	ldr	r0, [r7, #0]
 8005946:	f7fe ff3f 	bl	80047c8 <_SendPacket>
  RECORD_END();
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f383 8811 	msr	BASEPRI, r3
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	200023ac 	.word	0x200023ac

0800595c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005962:	f3ef 8311 	mrs	r3, BASEPRI
 8005966:	f04f 0120 	mov.w	r1, #32
 800596a:	f381 8811 	msr	BASEPRI, r1
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	4807      	ldr	r0, [pc, #28]	; (8005990 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005972:	f7fe fe38 	bl	80045e6 <_PreparePacket>
 8005976:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005978:	2211      	movs	r2, #17
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6838      	ldr	r0, [r7, #0]
 800597e:	f7fe ff23 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f383 8811 	msr	BASEPRI, r3
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	200023ac 	.word	0x200023ac

08005994 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800599c:	f3ef 8311 	mrs	r3, BASEPRI
 80059a0:	f04f 0120 	mov.w	r1, #32
 80059a4:	f381 8811 	msr	BASEPRI, r1
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	4819      	ldr	r0, [pc, #100]	; (8005a10 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059ac:	f7fe fe1b 	bl	80045e6 <_PreparePacket>
 80059b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059b6:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e00b      	b.n	80059e2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	61f9      	str	r1, [r7, #28]
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80059f8:	2208      	movs	r2, #8
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6938      	ldr	r0, [r7, #16]
 80059fe:	f7fe fee3 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f383 8811 	msr	BASEPRI, r3
}
 8005a08:	bf00      	nop
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	200023ac 	.word	0x200023ac
 8005a14:	2000237c 	.word	0x2000237c

08005a18 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a20:	f3ef 8311 	mrs	r3, BASEPRI
 8005a24:	f04f 0120 	mov.w	r1, #32
 8005a28:	f381 8811 	msr	BASEPRI, r1
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	4819      	ldr	r0, [pc, #100]	; (8005a94 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a30:	f7fe fdd9 	bl	80045e6 <_PreparePacket>
 8005a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e00b      	b.n	8005a66 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	61f9      	str	r1, [r7, #28]
 8005a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6a:	d8f0      	bhi.n	8005a4e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6938      	ldr	r0, [r7, #16]
 8005a82:	f7fe fea1 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f383 8811 	msr	BASEPRI, r3
}
 8005a8c:	bf00      	nop
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200023ac 	.word	0x200023ac
 8005a98:	2000237c 	.word	0x2000237c

08005a9c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa8:	f04f 0120 	mov.w	r1, #32
 8005aac:	f381 8811 	msr	BASEPRI, r1
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	4819      	ldr	r0, [pc, #100]	; (8005b18 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ab4:	f7fe fd97 	bl	80045e6 <_PreparePacket>
 8005ab8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e00b      	b.n	8005aea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	61f9      	str	r1, [r7, #28]
 8005adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	09db      	lsrs	r3, r3, #7
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d8f0      	bhi.n	8005ad2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	61fa      	str	r2, [r7, #28]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b00:	2206      	movs	r2, #6
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	6938      	ldr	r0, [r7, #16]
 8005b06:	f7fe fe5f 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
}
 8005b10:	bf00      	nop
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200023ac 	.word	0x200023ac
 8005b1c:	2000237c 	.word	0x2000237c

08005b20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	; 0x30
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d06d      	beq.n	8005c0e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005b32:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3c:	e008      	b.n	8005b50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d3f2      	bcc.n	8005b3e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b58:	e000      	b.n	8005b5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d055      	beq.n	8005c0e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b62:	f3ef 8311 	mrs	r3, BASEPRI
 8005b66:	f04f 0120 	mov.w	r1, #32
 8005b6a:	f381 8811 	msr	BASEPRI, r1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	482a      	ldr	r0, [pc, #168]	; (8005c1c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005b72:	f7fe fd38 	bl	80045e6 <_PreparePacket>
 8005b76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	e00b      	b.n	8005b9e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	6279      	str	r1, [r7, #36]	; 0x24
 8005b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	09db      	lsrs	r3, r3, #7
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba2:	d8f0      	bhi.n	8005b86 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	e00b      	b.n	8005bd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	61f9      	str	r1, [r7, #28]
 8005bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b7f      	cmp	r3, #127	; 0x7f
 8005bdc:	d8f0      	bhi.n	8005bc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	61fa      	str	r2, [r7, #28]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2280      	movs	r2, #128	; 0x80
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7fe fca8 	bl	800454c <_EncodeStr>
 8005bfc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005bfe:	2216      	movs	r2, #22
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f7fe fde0 	bl	80047c8 <_SendPacket>
      RECORD_END();
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200023a4 	.word	0x200023a4
 8005c1c:	200023ac 	.word	0x200023ac

08005c20 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f2      	bne.n	8005c34 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200023a4 	.word	0x200023a4

08005c5c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c62:	f3ef 8311 	mrs	r3, BASEPRI
 8005c66:	f04f 0120 	mov.w	r1, #32
 8005c6a:	f381 8811 	msr	BASEPRI, r1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	4817      	ldr	r0, [pc, #92]	; (8005cd0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005c72:	f7fe fcb8 	bl	80045e6 <_PreparePacket>
 8005c76:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	6179      	str	r1, [r7, #20]
 8005c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	617a      	str	r2, [r7, #20]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005cb6:	221b      	movs	r2, #27
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f7fe fd84 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200023ac 	.word	0x200023ac
 8005cd4:	200023a8 	.word	0x200023a8

08005cd8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005cd8:	b40f      	push	{r0, r1, r2, r3}
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2100      	movs	r1, #0
 8005cec:	6938      	ldr	r0, [r7, #16]
 8005cee:	f7fe fff3 	bl	8004cd8 <_VPrintTarget>
  va_end(ParamList);
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cfc:	b004      	add	sp, #16
 8005cfe:	4770      	bx	lr

08005d00 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d08:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0c:	f04f 0120 	mov.w	r1, #32
 8005d10:	f381 8811 	msr	BASEPRI, r1
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	4827      	ldr	r0, [pc, #156]	; (8005db4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d18:	f7fe fc65 	bl	80045e6 <_PreparePacket>
 8005d1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d1e:	2280      	movs	r2, #128	; 0x80
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	6938      	ldr	r0, [r7, #16]
 8005d24:	f7fe fc12 	bl	800454c <_EncodeStr>
 8005d28:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2e:	2301      	movs	r3, #1
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	e00b      	b.n	8005d4c <SEGGER_SYSVIEW_Warn+0x4c>
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	09db      	lsrs	r3, r3, #7
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d50:	d8f0      	bhi.n	8005d34 <SEGGER_SYSVIEW_Warn+0x34>
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	627a      	str	r2, [r7, #36]	; 0x24
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e00b      	b.n	8005d84 <SEGGER_SYSVIEW_Warn+0x84>
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	1c59      	adds	r1, r3, #1
 8005d74:	61f9      	str	r1, [r7, #28]
 8005d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	09db      	lsrs	r3, r3, #7
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b7f      	cmp	r3, #127	; 0x7f
 8005d88:	d8f0      	bhi.n	8005d6c <SEGGER_SYSVIEW_Warn+0x6c>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	61fa      	str	r2, [r7, #28]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d9a:	221a      	movs	r2, #26
 8005d9c:	68f9      	ldr	r1, [r7, #12]
 8005d9e:	6938      	ldr	r0, [r7, #16]
 8005da0:	f7fe fd12 	bl	80047c8 <_SendPacket>
  RECORD_END();
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f383 8811 	msr	BASEPRI, r3
}
 8005daa:	bf00      	nop
 8005dac:	3728      	adds	r7, #40	; 0x28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	200023ac 	.word	0x200023ac

08005db8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f7fe faa4 	bl	8004318 <SEGGER_RTT_Write>
  return len;
 8005dd0:	683b      	ldr	r3, [r7, #0]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <__libc_init_array>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	4d0d      	ldr	r5, [pc, #52]	; (8005e14 <__libc_init_array+0x38>)
 8005de0:	4c0d      	ldr	r4, [pc, #52]	; (8005e18 <__libc_init_array+0x3c>)
 8005de2:	1b64      	subs	r4, r4, r5
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	2600      	movs	r6, #0
 8005de8:	42a6      	cmp	r6, r4
 8005dea:	d109      	bne.n	8005e00 <__libc_init_array+0x24>
 8005dec:	4d0b      	ldr	r5, [pc, #44]	; (8005e1c <__libc_init_array+0x40>)
 8005dee:	4c0c      	ldr	r4, [pc, #48]	; (8005e20 <__libc_init_array+0x44>)
 8005df0:	f001 f8ae 	bl	8006f50 <_init>
 8005df4:	1b64      	subs	r4, r4, r5
 8005df6:	10a4      	asrs	r4, r4, #2
 8005df8:	2600      	movs	r6, #0
 8005dfa:	42a6      	cmp	r6, r4
 8005dfc:	d105      	bne.n	8005e0a <__libc_init_array+0x2e>
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e04:	4798      	blx	r3
 8005e06:	3601      	adds	r6, #1
 8005e08:	e7ee      	b.n	8005de8 <__libc_init_array+0xc>
 8005e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0e:	4798      	blx	r3
 8005e10:	3601      	adds	r6, #1
 8005e12:	e7f2      	b.n	8005dfa <__libc_init_array+0x1e>
 8005e14:	080071fc 	.word	0x080071fc
 8005e18:	080071fc 	.word	0x080071fc
 8005e1c:	080071fc 	.word	0x080071fc
 8005e20:	08007200 	.word	0x08007200

08005e24 <memcmp>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	3901      	subs	r1, #1
 8005e28:	4402      	add	r2, r0
 8005e2a:	4290      	cmp	r0, r2
 8005e2c:	d101      	bne.n	8005e32 <memcmp+0xe>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e005      	b.n	8005e3e <memcmp+0x1a>
 8005e32:	7803      	ldrb	r3, [r0, #0]
 8005e34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d001      	beq.n	8005e40 <memcmp+0x1c>
 8005e3c:	1b18      	subs	r0, r3, r4
 8005e3e:	bd10      	pop	{r4, pc}
 8005e40:	3001      	adds	r0, #1
 8005e42:	e7f2      	b.n	8005e2a <memcmp+0x6>

08005e44 <memcpy>:
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e4c:	d100      	bne.n	8005e50 <memcpy+0xc>
 8005e4e:	4770      	bx	lr
 8005e50:	b510      	push	{r4, lr}
 8005e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d1f9      	bne.n	8005e52 <memcpy+0xe>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <memset>:
 8005e60:	4402      	add	r2, r0
 8005e62:	4603      	mov	r3, r0
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <_puts_r>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	460e      	mov	r6, r1
 8005e74:	4605      	mov	r5, r0
 8005e76:	b118      	cbz	r0, 8005e80 <_puts_r+0x10>
 8005e78:	6983      	ldr	r3, [r0, #24]
 8005e7a:	b90b      	cbnz	r3, 8005e80 <_puts_r+0x10>
 8005e7c:	f000 fa7c 	bl	8006378 <__sinit>
 8005e80:	69ab      	ldr	r3, [r5, #24]
 8005e82:	68ac      	ldr	r4, [r5, #8]
 8005e84:	b913      	cbnz	r3, 8005e8c <_puts_r+0x1c>
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fa76 	bl	8006378 <__sinit>
 8005e8c:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <_puts_r+0xd0>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	d120      	bne.n	8005ed4 <_puts_r+0x64>
 8005e92:	686c      	ldr	r4, [r5, #4]
 8005e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e96:	07db      	lsls	r3, r3, #31
 8005e98:	d405      	bmi.n	8005ea6 <_puts_r+0x36>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	0598      	lsls	r0, r3, #22
 8005e9e:	d402      	bmi.n	8005ea6 <_puts_r+0x36>
 8005ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea2:	f000 fb07 	bl	80064b4 <__retarget_lock_acquire_recursive>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	0719      	lsls	r1, r3, #28
 8005eaa:	d51d      	bpl.n	8005ee8 <_puts_r+0x78>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	b1db      	cbz	r3, 8005ee8 <_puts_r+0x78>
 8005eb0:	3e01      	subs	r6, #1
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	bb39      	cbnz	r1, 8005f0e <_puts_r+0x9e>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da38      	bge.n	8005f34 <_puts_r+0xc4>
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	210a      	movs	r1, #10
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f87c 	bl	8005fc4 <__swbuf_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d011      	beq.n	8005ef4 <_puts_r+0x84>
 8005ed0:	250a      	movs	r5, #10
 8005ed2:	e011      	b.n	8005ef8 <_puts_r+0x88>
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <_puts_r+0xd4>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d101      	bne.n	8005ede <_puts_r+0x6e>
 8005eda:	68ac      	ldr	r4, [r5, #8]
 8005edc:	e7da      	b.n	8005e94 <_puts_r+0x24>
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <_puts_r+0xd8>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	bf08      	it	eq
 8005ee4:	68ec      	ldreq	r4, [r5, #12]
 8005ee6:	e7d5      	b.n	8005e94 <_puts_r+0x24>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f8bc 	bl	8006068 <__swsetup_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d0dd      	beq.n	8005eb0 <_puts_r+0x40>
 8005ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005efa:	07da      	lsls	r2, r3, #31
 8005efc:	d405      	bmi.n	8005f0a <_puts_r+0x9a>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_puts_r+0x9a>
 8005f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f06:	f000 fad6 	bl	80064b6 <__retarget_lock_release_recursive>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da04      	bge.n	8005f1c <_puts_r+0xac>
 8005f12:	69a2      	ldr	r2, [r4, #24]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	dc06      	bgt.n	8005f26 <_puts_r+0xb6>
 8005f18:	290a      	cmp	r1, #10
 8005f1a:	d004      	beq.n	8005f26 <_puts_r+0xb6>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	7019      	strb	r1, [r3, #0]
 8005f24:	e7c5      	b.n	8005eb2 <_puts_r+0x42>
 8005f26:	4622      	mov	r2, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 f84b 	bl	8005fc4 <__swbuf_r>
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1bf      	bne.n	8005eb2 <_puts_r+0x42>
 8005f32:	e7df      	b.n	8005ef4 <_puts_r+0x84>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	250a      	movs	r5, #10
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	701d      	strb	r5, [r3, #0]
 8005f3e:	e7db      	b.n	8005ef8 <_puts_r+0x88>
 8005f40:	08007188 	.word	0x08007188
 8005f44:	080071a8 	.word	0x080071a8
 8005f48:	08007168 	.word	0x08007168

08005f4c <puts>:
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <puts+0xc>)
 8005f4e:	4601      	mov	r1, r0
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	f7ff bf8d 	b.w	8005e70 <_puts_r>
 8005f56:	bf00      	nop
 8005f58:	2000001c 	.word	0x2000001c

08005f5c <sniprintf>:
 8005f5c:	b40c      	push	{r2, r3}
 8005f5e:	b530      	push	{r4, r5, lr}
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <sniprintf+0x64>)
 8005f62:	1e0c      	subs	r4, r1, #0
 8005f64:	681d      	ldr	r5, [r3, #0]
 8005f66:	b09d      	sub	sp, #116	; 0x74
 8005f68:	da08      	bge.n	8005f7c <sniprintf+0x20>
 8005f6a:	238b      	movs	r3, #139	; 0x8b
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	b01d      	add	sp, #116	; 0x74
 8005f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f78:	b002      	add	sp, #8
 8005f7a:	4770      	bx	lr
 8005f7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f84:	bf14      	ite	ne
 8005f86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f8a:	4623      	moveq	r3, r4
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f94:	9002      	str	r0, [sp, #8]
 8005f96:	9006      	str	r0, [sp, #24]
 8005f98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f9e:	ab21      	add	r3, sp, #132	; 0x84
 8005fa0:	a902      	add	r1, sp, #8
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	f000 fc29 	bl	80067fc <_svfiprintf_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	bfbc      	itt	lt
 8005fae:	238b      	movlt	r3, #139	; 0x8b
 8005fb0:	602b      	strlt	r3, [r5, #0]
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d0dd      	beq.n	8005f72 <sniprintf+0x16>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e7d9      	b.n	8005f72 <sniprintf+0x16>
 8005fbe:	bf00      	nop
 8005fc0:	2000001c 	.word	0x2000001c

08005fc4 <__swbuf_r>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	460e      	mov	r6, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	4605      	mov	r5, r0
 8005fcc:	b118      	cbz	r0, 8005fd6 <__swbuf_r+0x12>
 8005fce:	6983      	ldr	r3, [r0, #24]
 8005fd0:	b90b      	cbnz	r3, 8005fd6 <__swbuf_r+0x12>
 8005fd2:	f000 f9d1 	bl	8006378 <__sinit>
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <__swbuf_r+0x98>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d12b      	bne.n	8006034 <__swbuf_r+0x70>
 8005fdc:	686c      	ldr	r4, [r5, #4]
 8005fde:	69a3      	ldr	r3, [r4, #24]
 8005fe0:	60a3      	str	r3, [r4, #8]
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	071a      	lsls	r2, r3, #28
 8005fe6:	d52f      	bpl.n	8006048 <__swbuf_r+0x84>
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	b36b      	cbz	r3, 8006048 <__swbuf_r+0x84>
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	6820      	ldr	r0, [r4, #0]
 8005ff0:	1ac0      	subs	r0, r0, r3
 8005ff2:	6963      	ldr	r3, [r4, #20]
 8005ff4:	b2f6      	uxtb	r6, r6
 8005ff6:	4283      	cmp	r3, r0
 8005ff8:	4637      	mov	r7, r6
 8005ffa:	dc04      	bgt.n	8006006 <__swbuf_r+0x42>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 f926 	bl	8006250 <_fflush_r>
 8006004:	bb30      	cbnz	r0, 8006054 <__swbuf_r+0x90>
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	3b01      	subs	r3, #1
 800600a:	60a3      	str	r3, [r4, #8]
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	6022      	str	r2, [r4, #0]
 8006012:	701e      	strb	r6, [r3, #0]
 8006014:	6963      	ldr	r3, [r4, #20]
 8006016:	3001      	adds	r0, #1
 8006018:	4283      	cmp	r3, r0
 800601a:	d004      	beq.n	8006026 <__swbuf_r+0x62>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	07db      	lsls	r3, r3, #31
 8006020:	d506      	bpl.n	8006030 <__swbuf_r+0x6c>
 8006022:	2e0a      	cmp	r6, #10
 8006024:	d104      	bne.n	8006030 <__swbuf_r+0x6c>
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f911 	bl	8006250 <_fflush_r>
 800602e:	b988      	cbnz	r0, 8006054 <__swbuf_r+0x90>
 8006030:	4638      	mov	r0, r7
 8006032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006034:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <__swbuf_r+0x9c>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d101      	bne.n	800603e <__swbuf_r+0x7a>
 800603a:	68ac      	ldr	r4, [r5, #8]
 800603c:	e7cf      	b.n	8005fde <__swbuf_r+0x1a>
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <__swbuf_r+0xa0>)
 8006040:	429c      	cmp	r4, r3
 8006042:	bf08      	it	eq
 8006044:	68ec      	ldreq	r4, [r5, #12]
 8006046:	e7ca      	b.n	8005fde <__swbuf_r+0x1a>
 8006048:	4621      	mov	r1, r4
 800604a:	4628      	mov	r0, r5
 800604c:	f000 f80c 	bl	8006068 <__swsetup_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	d0cb      	beq.n	8005fec <__swbuf_r+0x28>
 8006054:	f04f 37ff 	mov.w	r7, #4294967295
 8006058:	e7ea      	b.n	8006030 <__swbuf_r+0x6c>
 800605a:	bf00      	nop
 800605c:	08007188 	.word	0x08007188
 8006060:	080071a8 	.word	0x080071a8
 8006064:	08007168 	.word	0x08007168

08006068 <__swsetup_r>:
 8006068:	4b32      	ldr	r3, [pc, #200]	; (8006134 <__swsetup_r+0xcc>)
 800606a:	b570      	push	{r4, r5, r6, lr}
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	4606      	mov	r6, r0
 8006070:	460c      	mov	r4, r1
 8006072:	b125      	cbz	r5, 800607e <__swsetup_r+0x16>
 8006074:	69ab      	ldr	r3, [r5, #24]
 8006076:	b913      	cbnz	r3, 800607e <__swsetup_r+0x16>
 8006078:	4628      	mov	r0, r5
 800607a:	f000 f97d 	bl	8006378 <__sinit>
 800607e:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <__swsetup_r+0xd0>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d10f      	bne.n	80060a4 <__swsetup_r+0x3c>
 8006084:	686c      	ldr	r4, [r5, #4]
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800608c:	0719      	lsls	r1, r3, #28
 800608e:	d42c      	bmi.n	80060ea <__swsetup_r+0x82>
 8006090:	06dd      	lsls	r5, r3, #27
 8006092:	d411      	bmi.n	80060b8 <__swsetup_r+0x50>
 8006094:	2309      	movs	r3, #9
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	f04f 30ff 	mov.w	r0, #4294967295
 80060a2:	e03e      	b.n	8006122 <__swsetup_r+0xba>
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <__swsetup_r+0xd4>)
 80060a6:	429c      	cmp	r4, r3
 80060a8:	d101      	bne.n	80060ae <__swsetup_r+0x46>
 80060aa:	68ac      	ldr	r4, [r5, #8]
 80060ac:	e7eb      	b.n	8006086 <__swsetup_r+0x1e>
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <__swsetup_r+0xd8>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	bf08      	it	eq
 80060b4:	68ec      	ldreq	r4, [r5, #12]
 80060b6:	e7e6      	b.n	8006086 <__swsetup_r+0x1e>
 80060b8:	0758      	lsls	r0, r3, #29
 80060ba:	d512      	bpl.n	80060e2 <__swsetup_r+0x7a>
 80060bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060be:	b141      	cbz	r1, 80060d2 <__swsetup_r+0x6a>
 80060c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d002      	beq.n	80060ce <__swsetup_r+0x66>
 80060c8:	4630      	mov	r0, r6
 80060ca:	f000 fa5b 	bl	8006584 <_free_r>
 80060ce:	2300      	movs	r3, #0
 80060d0:	6363      	str	r3, [r4, #52]	; 0x34
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	2300      	movs	r3, #0
 80060dc:	6063      	str	r3, [r4, #4]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f043 0308 	orr.w	r3, r3, #8
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	b94b      	cbnz	r3, 8006102 <__swsetup_r+0x9a>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d003      	beq.n	8006102 <__swsetup_r+0x9a>
 80060fa:	4621      	mov	r1, r4
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 fa01 	bl	8006504 <__smakebuf_r>
 8006102:	89a0      	ldrh	r0, [r4, #12]
 8006104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006108:	f010 0301 	ands.w	r3, r0, #1
 800610c:	d00a      	beq.n	8006124 <__swsetup_r+0xbc>
 800610e:	2300      	movs	r3, #0
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	6963      	ldr	r3, [r4, #20]
 8006114:	425b      	negs	r3, r3
 8006116:	61a3      	str	r3, [r4, #24]
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	b943      	cbnz	r3, 800612e <__swsetup_r+0xc6>
 800611c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006120:	d1ba      	bne.n	8006098 <__swsetup_r+0x30>
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	0781      	lsls	r1, r0, #30
 8006126:	bf58      	it	pl
 8006128:	6963      	ldrpl	r3, [r4, #20]
 800612a:	60a3      	str	r3, [r4, #8]
 800612c:	e7f4      	b.n	8006118 <__swsetup_r+0xb0>
 800612e:	2000      	movs	r0, #0
 8006130:	e7f7      	b.n	8006122 <__swsetup_r+0xba>
 8006132:	bf00      	nop
 8006134:	2000001c 	.word	0x2000001c
 8006138:	08007188 	.word	0x08007188
 800613c:	080071a8 	.word	0x080071a8
 8006140:	08007168 	.word	0x08007168

08006144 <__sflush_r>:
 8006144:	898a      	ldrh	r2, [r1, #12]
 8006146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	4605      	mov	r5, r0
 800614c:	0710      	lsls	r0, r2, #28
 800614e:	460c      	mov	r4, r1
 8006150:	d458      	bmi.n	8006204 <__sflush_r+0xc0>
 8006152:	684b      	ldr	r3, [r1, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	dc05      	bgt.n	8006164 <__sflush_r+0x20>
 8006158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	dc02      	bgt.n	8006164 <__sflush_r+0x20>
 800615e:	2000      	movs	r0, #0
 8006160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006166:	2e00      	cmp	r6, #0
 8006168:	d0f9      	beq.n	800615e <__sflush_r+0x1a>
 800616a:	2300      	movs	r3, #0
 800616c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006170:	682f      	ldr	r7, [r5, #0]
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	d032      	beq.n	80061dc <__sflush_r+0x98>
 8006176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	075a      	lsls	r2, r3, #29
 800617c:	d505      	bpl.n	800618a <__sflush_r+0x46>
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	1ac0      	subs	r0, r0, r3
 8006182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006184:	b10b      	cbz	r3, 800618a <__sflush_r+0x46>
 8006186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006188:	1ac0      	subs	r0, r0, r3
 800618a:	2300      	movs	r3, #0
 800618c:	4602      	mov	r2, r0
 800618e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006190:	6a21      	ldr	r1, [r4, #32]
 8006192:	4628      	mov	r0, r5
 8006194:	47b0      	blx	r6
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	d106      	bne.n	80061aa <__sflush_r+0x66>
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	291d      	cmp	r1, #29
 80061a0:	d82c      	bhi.n	80061fc <__sflush_r+0xb8>
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <__sflush_r+0x108>)
 80061a4:	40ca      	lsrs	r2, r1
 80061a6:	07d6      	lsls	r6, r2, #31
 80061a8:	d528      	bpl.n	80061fc <__sflush_r+0xb8>
 80061aa:	2200      	movs	r2, #0
 80061ac:	6062      	str	r2, [r4, #4]
 80061ae:	04d9      	lsls	r1, r3, #19
 80061b0:	6922      	ldr	r2, [r4, #16]
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	d504      	bpl.n	80061c0 <__sflush_r+0x7c>
 80061b6:	1c42      	adds	r2, r0, #1
 80061b8:	d101      	bne.n	80061be <__sflush_r+0x7a>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	b903      	cbnz	r3, 80061c0 <__sflush_r+0x7c>
 80061be:	6560      	str	r0, [r4, #84]	; 0x54
 80061c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061c2:	602f      	str	r7, [r5, #0]
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d0ca      	beq.n	800615e <__sflush_r+0x1a>
 80061c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <__sflush_r+0x92>
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 f9d7 	bl	8006584 <_free_r>
 80061d6:	2000      	movs	r0, #0
 80061d8:	6360      	str	r0, [r4, #52]	; 0x34
 80061da:	e7c1      	b.n	8006160 <__sflush_r+0x1c>
 80061dc:	6a21      	ldr	r1, [r4, #32]
 80061de:	2301      	movs	r3, #1
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b0      	blx	r6
 80061e4:	1c41      	adds	r1, r0, #1
 80061e6:	d1c7      	bne.n	8006178 <__sflush_r+0x34>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0c4      	beq.n	8006178 <__sflush_r+0x34>
 80061ee:	2b1d      	cmp	r3, #29
 80061f0:	d001      	beq.n	80061f6 <__sflush_r+0xb2>
 80061f2:	2b16      	cmp	r3, #22
 80061f4:	d101      	bne.n	80061fa <__sflush_r+0xb6>
 80061f6:	602f      	str	r7, [r5, #0]
 80061f8:	e7b1      	b.n	800615e <__sflush_r+0x1a>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	e7ad      	b.n	8006160 <__sflush_r+0x1c>
 8006204:	690f      	ldr	r7, [r1, #16]
 8006206:	2f00      	cmp	r7, #0
 8006208:	d0a9      	beq.n	800615e <__sflush_r+0x1a>
 800620a:	0793      	lsls	r3, r2, #30
 800620c:	680e      	ldr	r6, [r1, #0]
 800620e:	bf08      	it	eq
 8006210:	694b      	ldreq	r3, [r1, #20]
 8006212:	600f      	str	r7, [r1, #0]
 8006214:	bf18      	it	ne
 8006216:	2300      	movne	r3, #0
 8006218:	eba6 0807 	sub.w	r8, r6, r7
 800621c:	608b      	str	r3, [r1, #8]
 800621e:	f1b8 0f00 	cmp.w	r8, #0
 8006222:	dd9c      	ble.n	800615e <__sflush_r+0x1a>
 8006224:	6a21      	ldr	r1, [r4, #32]
 8006226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006228:	4643      	mov	r3, r8
 800622a:	463a      	mov	r2, r7
 800622c:	4628      	mov	r0, r5
 800622e:	47b0      	blx	r6
 8006230:	2800      	cmp	r0, #0
 8006232:	dc06      	bgt.n	8006242 <__sflush_r+0xfe>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	e78e      	b.n	8006160 <__sflush_r+0x1c>
 8006242:	4407      	add	r7, r0
 8006244:	eba8 0800 	sub.w	r8, r8, r0
 8006248:	e7e9      	b.n	800621e <__sflush_r+0xda>
 800624a:	bf00      	nop
 800624c:	20400001 	.word	0x20400001

08006250 <_fflush_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b913      	cbnz	r3, 8006260 <_fflush_r+0x10>
 800625a:	2500      	movs	r5, #0
 800625c:	4628      	mov	r0, r5
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	b118      	cbz	r0, 800626a <_fflush_r+0x1a>
 8006262:	6983      	ldr	r3, [r0, #24]
 8006264:	b90b      	cbnz	r3, 800626a <_fflush_r+0x1a>
 8006266:	f000 f887 	bl	8006378 <__sinit>
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <_fflush_r+0x6c>)
 800626c:	429c      	cmp	r4, r3
 800626e:	d11b      	bne.n	80062a8 <_fflush_r+0x58>
 8006270:	686c      	ldr	r4, [r5, #4]
 8006272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0ef      	beq.n	800625a <_fflush_r+0xa>
 800627a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800627c:	07d0      	lsls	r0, r2, #31
 800627e:	d404      	bmi.n	800628a <_fflush_r+0x3a>
 8006280:	0599      	lsls	r1, r3, #22
 8006282:	d402      	bmi.n	800628a <_fflush_r+0x3a>
 8006284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006286:	f000 f915 	bl	80064b4 <__retarget_lock_acquire_recursive>
 800628a:	4628      	mov	r0, r5
 800628c:	4621      	mov	r1, r4
 800628e:	f7ff ff59 	bl	8006144 <__sflush_r>
 8006292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006294:	07da      	lsls	r2, r3, #31
 8006296:	4605      	mov	r5, r0
 8006298:	d4e0      	bmi.n	800625c <_fflush_r+0xc>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	059b      	lsls	r3, r3, #22
 800629e:	d4dd      	bmi.n	800625c <_fflush_r+0xc>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f000 f908 	bl	80064b6 <__retarget_lock_release_recursive>
 80062a6:	e7d9      	b.n	800625c <_fflush_r+0xc>
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <_fflush_r+0x70>)
 80062aa:	429c      	cmp	r4, r3
 80062ac:	d101      	bne.n	80062b2 <_fflush_r+0x62>
 80062ae:	68ac      	ldr	r4, [r5, #8]
 80062b0:	e7df      	b.n	8006272 <_fflush_r+0x22>
 80062b2:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <_fflush_r+0x74>)
 80062b4:	429c      	cmp	r4, r3
 80062b6:	bf08      	it	eq
 80062b8:	68ec      	ldreq	r4, [r5, #12]
 80062ba:	e7da      	b.n	8006272 <_fflush_r+0x22>
 80062bc:	08007188 	.word	0x08007188
 80062c0:	080071a8 	.word	0x080071a8
 80062c4:	08007168 	.word	0x08007168

080062c8 <std>:
 80062c8:	2300      	movs	r3, #0
 80062ca:	b510      	push	{r4, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	e9c0 3300 	strd	r3, r3, [r0]
 80062d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062d6:	6083      	str	r3, [r0, #8]
 80062d8:	8181      	strh	r1, [r0, #12]
 80062da:	6643      	str	r3, [r0, #100]	; 0x64
 80062dc:	81c2      	strh	r2, [r0, #14]
 80062de:	6183      	str	r3, [r0, #24]
 80062e0:	4619      	mov	r1, r3
 80062e2:	2208      	movs	r2, #8
 80062e4:	305c      	adds	r0, #92	; 0x5c
 80062e6:	f7ff fdbb 	bl	8005e60 <memset>
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <std+0x38>)
 80062ec:	6263      	str	r3, [r4, #36]	; 0x24
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <std+0x3c>)
 80062f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062f2:	4b05      	ldr	r3, [pc, #20]	; (8006308 <std+0x40>)
 80062f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <std+0x44>)
 80062f8:	6224      	str	r4, [r4, #32]
 80062fa:	6323      	str	r3, [r4, #48]	; 0x30
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	08006d45 	.word	0x08006d45
 8006304:	08006d67 	.word	0x08006d67
 8006308:	08006d9f 	.word	0x08006d9f
 800630c:	08006dc3 	.word	0x08006dc3

08006310 <_cleanup_r>:
 8006310:	4901      	ldr	r1, [pc, #4]	; (8006318 <_cleanup_r+0x8>)
 8006312:	f000 b8af 	b.w	8006474 <_fwalk_reent>
 8006316:	bf00      	nop
 8006318:	08006251 	.word	0x08006251

0800631c <__sfmoreglue>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	2268      	movs	r2, #104	; 0x68
 8006320:	1e4d      	subs	r5, r1, #1
 8006322:	4355      	muls	r5, r2
 8006324:	460e      	mov	r6, r1
 8006326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800632a:	f000 f997 	bl	800665c <_malloc_r>
 800632e:	4604      	mov	r4, r0
 8006330:	b140      	cbz	r0, 8006344 <__sfmoreglue+0x28>
 8006332:	2100      	movs	r1, #0
 8006334:	e9c0 1600 	strd	r1, r6, [r0]
 8006338:	300c      	adds	r0, #12
 800633a:	60a0      	str	r0, [r4, #8]
 800633c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006340:	f7ff fd8e 	bl	8005e60 <memset>
 8006344:	4620      	mov	r0, r4
 8006346:	bd70      	pop	{r4, r5, r6, pc}

08006348 <__sfp_lock_acquire>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__sfp_lock_acquire+0x8>)
 800634a:	f000 b8b3 	b.w	80064b4 <__retarget_lock_acquire_recursive>
 800634e:	bf00      	nop
 8006350:	20002490 	.word	0x20002490

08006354 <__sfp_lock_release>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__sfp_lock_release+0x8>)
 8006356:	f000 b8ae 	b.w	80064b6 <__retarget_lock_release_recursive>
 800635a:	bf00      	nop
 800635c:	20002490 	.word	0x20002490

08006360 <__sinit_lock_acquire>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__sinit_lock_acquire+0x8>)
 8006362:	f000 b8a7 	b.w	80064b4 <__retarget_lock_acquire_recursive>
 8006366:	bf00      	nop
 8006368:	20002491 	.word	0x20002491

0800636c <__sinit_lock_release>:
 800636c:	4801      	ldr	r0, [pc, #4]	; (8006374 <__sinit_lock_release+0x8>)
 800636e:	f000 b8a2 	b.w	80064b6 <__retarget_lock_release_recursive>
 8006372:	bf00      	nop
 8006374:	20002491 	.word	0x20002491

08006378 <__sinit>:
 8006378:	b510      	push	{r4, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	f7ff fff0 	bl	8006360 <__sinit_lock_acquire>
 8006380:	69a3      	ldr	r3, [r4, #24]
 8006382:	b11b      	cbz	r3, 800638c <__sinit+0x14>
 8006384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006388:	f7ff bff0 	b.w	800636c <__sinit_lock_release>
 800638c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006390:	6523      	str	r3, [r4, #80]	; 0x50
 8006392:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <__sinit+0x68>)
 8006394:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <__sinit+0x6c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	62a2      	str	r2, [r4, #40]	; 0x28
 800639a:	42a3      	cmp	r3, r4
 800639c:	bf04      	itt	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	61a3      	streq	r3, [r4, #24]
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f820 	bl	80063e8 <__sfp>
 80063a8:	6060      	str	r0, [r4, #4]
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f81c 	bl	80063e8 <__sfp>
 80063b0:	60a0      	str	r0, [r4, #8]
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f818 	bl	80063e8 <__sfp>
 80063b8:	2200      	movs	r2, #0
 80063ba:	60e0      	str	r0, [r4, #12]
 80063bc:	2104      	movs	r1, #4
 80063be:	6860      	ldr	r0, [r4, #4]
 80063c0:	f7ff ff82 	bl	80062c8 <std>
 80063c4:	68a0      	ldr	r0, [r4, #8]
 80063c6:	2201      	movs	r2, #1
 80063c8:	2109      	movs	r1, #9
 80063ca:	f7ff ff7d 	bl	80062c8 <std>
 80063ce:	68e0      	ldr	r0, [r4, #12]
 80063d0:	2202      	movs	r2, #2
 80063d2:	2112      	movs	r1, #18
 80063d4:	f7ff ff78 	bl	80062c8 <std>
 80063d8:	2301      	movs	r3, #1
 80063da:	61a3      	str	r3, [r4, #24]
 80063dc:	e7d2      	b.n	8006384 <__sinit+0xc>
 80063de:	bf00      	nop
 80063e0:	08007164 	.word	0x08007164
 80063e4:	08006311 	.word	0x08006311

080063e8 <__sfp>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	4607      	mov	r7, r0
 80063ec:	f7ff ffac 	bl	8006348 <__sfp_lock_acquire>
 80063f0:	4b1e      	ldr	r3, [pc, #120]	; (800646c <__sfp+0x84>)
 80063f2:	681e      	ldr	r6, [r3, #0]
 80063f4:	69b3      	ldr	r3, [r6, #24]
 80063f6:	b913      	cbnz	r3, 80063fe <__sfp+0x16>
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ffbd 	bl	8006378 <__sinit>
 80063fe:	3648      	adds	r6, #72	; 0x48
 8006400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006404:	3b01      	subs	r3, #1
 8006406:	d503      	bpl.n	8006410 <__sfp+0x28>
 8006408:	6833      	ldr	r3, [r6, #0]
 800640a:	b30b      	cbz	r3, 8006450 <__sfp+0x68>
 800640c:	6836      	ldr	r6, [r6, #0]
 800640e:	e7f7      	b.n	8006400 <__sfp+0x18>
 8006410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006414:	b9d5      	cbnz	r5, 800644c <__sfp+0x64>
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <__sfp+0x88>)
 8006418:	60e3      	str	r3, [r4, #12]
 800641a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800641e:	6665      	str	r5, [r4, #100]	; 0x64
 8006420:	f000 f847 	bl	80064b2 <__retarget_lock_init_recursive>
 8006424:	f7ff ff96 	bl	8006354 <__sfp_lock_release>
 8006428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800642c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006430:	6025      	str	r5, [r4, #0]
 8006432:	61a5      	str	r5, [r4, #24]
 8006434:	2208      	movs	r2, #8
 8006436:	4629      	mov	r1, r5
 8006438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800643c:	f7ff fd10 	bl	8005e60 <memset>
 8006440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006448:	4620      	mov	r0, r4
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644c:	3468      	adds	r4, #104	; 0x68
 800644e:	e7d9      	b.n	8006404 <__sfp+0x1c>
 8006450:	2104      	movs	r1, #4
 8006452:	4638      	mov	r0, r7
 8006454:	f7ff ff62 	bl	800631c <__sfmoreglue>
 8006458:	4604      	mov	r4, r0
 800645a:	6030      	str	r0, [r6, #0]
 800645c:	2800      	cmp	r0, #0
 800645e:	d1d5      	bne.n	800640c <__sfp+0x24>
 8006460:	f7ff ff78 	bl	8006354 <__sfp_lock_release>
 8006464:	230c      	movs	r3, #12
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	e7ee      	b.n	8006448 <__sfp+0x60>
 800646a:	bf00      	nop
 800646c:	08007164 	.word	0x08007164
 8006470:	ffff0001 	.word	0xffff0001

08006474 <_fwalk_reent>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	4606      	mov	r6, r0
 800647a:	4688      	mov	r8, r1
 800647c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006480:	2700      	movs	r7, #0
 8006482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006486:	f1b9 0901 	subs.w	r9, r9, #1
 800648a:	d505      	bpl.n	8006498 <_fwalk_reent+0x24>
 800648c:	6824      	ldr	r4, [r4, #0]
 800648e:	2c00      	cmp	r4, #0
 8006490:	d1f7      	bne.n	8006482 <_fwalk_reent+0xe>
 8006492:	4638      	mov	r0, r7
 8006494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d907      	bls.n	80064ae <_fwalk_reent+0x3a>
 800649e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064a2:	3301      	adds	r3, #1
 80064a4:	d003      	beq.n	80064ae <_fwalk_reent+0x3a>
 80064a6:	4629      	mov	r1, r5
 80064a8:	4630      	mov	r0, r6
 80064aa:	47c0      	blx	r8
 80064ac:	4307      	orrs	r7, r0
 80064ae:	3568      	adds	r5, #104	; 0x68
 80064b0:	e7e9      	b.n	8006486 <_fwalk_reent+0x12>

080064b2 <__retarget_lock_init_recursive>:
 80064b2:	4770      	bx	lr

080064b4 <__retarget_lock_acquire_recursive>:
 80064b4:	4770      	bx	lr

080064b6 <__retarget_lock_release_recursive>:
 80064b6:	4770      	bx	lr

080064b8 <__swhatbuf_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460e      	mov	r6, r1
 80064bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	b096      	sub	sp, #88	; 0x58
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	da08      	bge.n	80064dc <__swhatbuf_r+0x24>
 80064ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	061a      	lsls	r2, r3, #24
 80064d4:	d410      	bmi.n	80064f8 <__swhatbuf_r+0x40>
 80064d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064da:	e00e      	b.n	80064fa <__swhatbuf_r+0x42>
 80064dc:	466a      	mov	r2, sp
 80064de:	f000 fc85 	bl	8006dec <_fstat_r>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	dbf1      	blt.n	80064ca <__swhatbuf_r+0x12>
 80064e6:	9a01      	ldr	r2, [sp, #4]
 80064e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064f0:	425a      	negs	r2, r3
 80064f2:	415a      	adcs	r2, r3
 80064f4:	602a      	str	r2, [r5, #0]
 80064f6:	e7ee      	b.n	80064d6 <__swhatbuf_r+0x1e>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	2000      	movs	r0, #0
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	b016      	add	sp, #88	; 0x58
 8006500:	bd70      	pop	{r4, r5, r6, pc}
	...

08006504 <__smakebuf_r>:
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006508:	079d      	lsls	r5, r3, #30
 800650a:	4606      	mov	r6, r0
 800650c:	460c      	mov	r4, r1
 800650e:	d507      	bpl.n	8006520 <__smakebuf_r+0x1c>
 8006510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	2301      	movs	r3, #1
 800651a:	6163      	str	r3, [r4, #20]
 800651c:	b002      	add	sp, #8
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	ab01      	add	r3, sp, #4
 8006522:	466a      	mov	r2, sp
 8006524:	f7ff ffc8 	bl	80064b8 <__swhatbuf_r>
 8006528:	9900      	ldr	r1, [sp, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	4630      	mov	r0, r6
 800652e:	f000 f895 	bl	800665c <_malloc_r>
 8006532:	b948      	cbnz	r0, 8006548 <__smakebuf_r+0x44>
 8006534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006538:	059a      	lsls	r2, r3, #22
 800653a:	d4ef      	bmi.n	800651c <__smakebuf_r+0x18>
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e7e3      	b.n	8006510 <__smakebuf_r+0xc>
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <__smakebuf_r+0x7c>)
 800654a:	62b3      	str	r3, [r6, #40]	; 0x28
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	6020      	str	r0, [r4, #0]
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	9b00      	ldr	r3, [sp, #0]
 8006558:	6163      	str	r3, [r4, #20]
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	6120      	str	r0, [r4, #16]
 800655e:	b15b      	cbz	r3, 8006578 <__smakebuf_r+0x74>
 8006560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006564:	4630      	mov	r0, r6
 8006566:	f000 fc53 	bl	8006e10 <_isatty_r>
 800656a:	b128      	cbz	r0, 8006578 <__smakebuf_r+0x74>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	89a0      	ldrh	r0, [r4, #12]
 800657a:	4305      	orrs	r5, r0
 800657c:	81a5      	strh	r5, [r4, #12]
 800657e:	e7cd      	b.n	800651c <__smakebuf_r+0x18>
 8006580:	08006311 	.word	0x08006311

08006584 <_free_r>:
 8006584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006586:	2900      	cmp	r1, #0
 8006588:	d044      	beq.n	8006614 <_free_r+0x90>
 800658a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658e:	9001      	str	r0, [sp, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f1a1 0404 	sub.w	r4, r1, #4
 8006596:	bfb8      	it	lt
 8006598:	18e4      	addlt	r4, r4, r3
 800659a:	f000 fc75 	bl	8006e88 <__malloc_lock>
 800659e:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <_free_r+0x94>)
 80065a0:	9801      	ldr	r0, [sp, #4]
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	b933      	cbnz	r3, 80065b4 <_free_r+0x30>
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	6014      	str	r4, [r2, #0]
 80065aa:	b003      	add	sp, #12
 80065ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b0:	f000 bc70 	b.w	8006e94 <__malloc_unlock>
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	d908      	bls.n	80065ca <_free_r+0x46>
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf01      	itttt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	1949      	addeq	r1, r1, r5
 80065c6:	6021      	streq	r1, [r4, #0]
 80065c8:	e7ed      	b.n	80065a6 <_free_r+0x22>
 80065ca:	461a      	mov	r2, r3
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	b10b      	cbz	r3, 80065d4 <_free_r+0x50>
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	d9fa      	bls.n	80065ca <_free_r+0x46>
 80065d4:	6811      	ldr	r1, [r2, #0]
 80065d6:	1855      	adds	r5, r2, r1
 80065d8:	42a5      	cmp	r5, r4
 80065da:	d10b      	bne.n	80065f4 <_free_r+0x70>
 80065dc:	6824      	ldr	r4, [r4, #0]
 80065de:	4421      	add	r1, r4
 80065e0:	1854      	adds	r4, r2, r1
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	6011      	str	r1, [r2, #0]
 80065e6:	d1e0      	bne.n	80065aa <_free_r+0x26>
 80065e8:	681c      	ldr	r4, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	6053      	str	r3, [r2, #4]
 80065ee:	4421      	add	r1, r4
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	e7da      	b.n	80065aa <_free_r+0x26>
 80065f4:	d902      	bls.n	80065fc <_free_r+0x78>
 80065f6:	230c      	movs	r3, #12
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	e7d6      	b.n	80065aa <_free_r+0x26>
 80065fc:	6825      	ldr	r5, [r4, #0]
 80065fe:	1961      	adds	r1, r4, r5
 8006600:	428b      	cmp	r3, r1
 8006602:	bf04      	itt	eq
 8006604:	6819      	ldreq	r1, [r3, #0]
 8006606:	685b      	ldreq	r3, [r3, #4]
 8006608:	6063      	str	r3, [r4, #4]
 800660a:	bf04      	itt	eq
 800660c:	1949      	addeq	r1, r1, r5
 800660e:	6021      	streq	r1, [r4, #0]
 8006610:	6054      	str	r4, [r2, #4]
 8006612:	e7ca      	b.n	80065aa <_free_r+0x26>
 8006614:	b003      	add	sp, #12
 8006616:	bd30      	pop	{r4, r5, pc}
 8006618:	20002494 	.word	0x20002494

0800661c <sbrk_aligned>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4e0e      	ldr	r6, [pc, #56]	; (8006658 <sbrk_aligned+0x3c>)
 8006620:	460c      	mov	r4, r1
 8006622:	6831      	ldr	r1, [r6, #0]
 8006624:	4605      	mov	r5, r0
 8006626:	b911      	cbnz	r1, 800662e <sbrk_aligned+0x12>
 8006628:	f000 fb7c 	bl	8006d24 <_sbrk_r>
 800662c:	6030      	str	r0, [r6, #0]
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 fb77 	bl	8006d24 <_sbrk_r>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d00a      	beq.n	8006650 <sbrk_aligned+0x34>
 800663a:	1cc4      	adds	r4, r0, #3
 800663c:	f024 0403 	bic.w	r4, r4, #3
 8006640:	42a0      	cmp	r0, r4
 8006642:	d007      	beq.n	8006654 <sbrk_aligned+0x38>
 8006644:	1a21      	subs	r1, r4, r0
 8006646:	4628      	mov	r0, r5
 8006648:	f000 fb6c 	bl	8006d24 <_sbrk_r>
 800664c:	3001      	adds	r0, #1
 800664e:	d101      	bne.n	8006654 <sbrk_aligned+0x38>
 8006650:	f04f 34ff 	mov.w	r4, #4294967295
 8006654:	4620      	mov	r0, r4
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	20002498 	.word	0x20002498

0800665c <_malloc_r>:
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	1ccd      	adds	r5, r1, #3
 8006662:	f025 0503 	bic.w	r5, r5, #3
 8006666:	3508      	adds	r5, #8
 8006668:	2d0c      	cmp	r5, #12
 800666a:	bf38      	it	cc
 800666c:	250c      	movcc	r5, #12
 800666e:	2d00      	cmp	r5, #0
 8006670:	4607      	mov	r7, r0
 8006672:	db01      	blt.n	8006678 <_malloc_r+0x1c>
 8006674:	42a9      	cmp	r1, r5
 8006676:	d905      	bls.n	8006684 <_malloc_r+0x28>
 8006678:	230c      	movs	r3, #12
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	2600      	movs	r6, #0
 800667e:	4630      	mov	r0, r6
 8006680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006684:	4e2e      	ldr	r6, [pc, #184]	; (8006740 <_malloc_r+0xe4>)
 8006686:	f000 fbff 	bl	8006e88 <__malloc_lock>
 800668a:	6833      	ldr	r3, [r6, #0]
 800668c:	461c      	mov	r4, r3
 800668e:	bb34      	cbnz	r4, 80066de <_malloc_r+0x82>
 8006690:	4629      	mov	r1, r5
 8006692:	4638      	mov	r0, r7
 8006694:	f7ff ffc2 	bl	800661c <sbrk_aligned>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	4604      	mov	r4, r0
 800669c:	d14d      	bne.n	800673a <_malloc_r+0xde>
 800669e:	6834      	ldr	r4, [r6, #0]
 80066a0:	4626      	mov	r6, r4
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	d140      	bne.n	8006728 <_malloc_r+0xcc>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	4631      	mov	r1, r6
 80066aa:	4638      	mov	r0, r7
 80066ac:	eb04 0803 	add.w	r8, r4, r3
 80066b0:	f000 fb38 	bl	8006d24 <_sbrk_r>
 80066b4:	4580      	cmp	r8, r0
 80066b6:	d13a      	bne.n	800672e <_malloc_r+0xd2>
 80066b8:	6821      	ldr	r1, [r4, #0]
 80066ba:	3503      	adds	r5, #3
 80066bc:	1a6d      	subs	r5, r5, r1
 80066be:	f025 0503 	bic.w	r5, r5, #3
 80066c2:	3508      	adds	r5, #8
 80066c4:	2d0c      	cmp	r5, #12
 80066c6:	bf38      	it	cc
 80066c8:	250c      	movcc	r5, #12
 80066ca:	4629      	mov	r1, r5
 80066cc:	4638      	mov	r0, r7
 80066ce:	f7ff ffa5 	bl	800661c <sbrk_aligned>
 80066d2:	3001      	adds	r0, #1
 80066d4:	d02b      	beq.n	800672e <_malloc_r+0xd2>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	442b      	add	r3, r5
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	e00e      	b.n	80066fc <_malloc_r+0xa0>
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	1b52      	subs	r2, r2, r5
 80066e2:	d41e      	bmi.n	8006722 <_malloc_r+0xc6>
 80066e4:	2a0b      	cmp	r2, #11
 80066e6:	d916      	bls.n	8006716 <_malloc_r+0xba>
 80066e8:	1961      	adds	r1, r4, r5
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	6025      	str	r5, [r4, #0]
 80066ee:	bf18      	it	ne
 80066f0:	6059      	strne	r1, [r3, #4]
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	bf08      	it	eq
 80066f6:	6031      	streq	r1, [r6, #0]
 80066f8:	5162      	str	r2, [r4, r5]
 80066fa:	604b      	str	r3, [r1, #4]
 80066fc:	4638      	mov	r0, r7
 80066fe:	f104 060b 	add.w	r6, r4, #11
 8006702:	f000 fbc7 	bl	8006e94 <__malloc_unlock>
 8006706:	f026 0607 	bic.w	r6, r6, #7
 800670a:	1d23      	adds	r3, r4, #4
 800670c:	1af2      	subs	r2, r6, r3
 800670e:	d0b6      	beq.n	800667e <_malloc_r+0x22>
 8006710:	1b9b      	subs	r3, r3, r6
 8006712:	50a3      	str	r3, [r4, r2]
 8006714:	e7b3      	b.n	800667e <_malloc_r+0x22>
 8006716:	6862      	ldr	r2, [r4, #4]
 8006718:	42a3      	cmp	r3, r4
 800671a:	bf0c      	ite	eq
 800671c:	6032      	streq	r2, [r6, #0]
 800671e:	605a      	strne	r2, [r3, #4]
 8006720:	e7ec      	b.n	80066fc <_malloc_r+0xa0>
 8006722:	4623      	mov	r3, r4
 8006724:	6864      	ldr	r4, [r4, #4]
 8006726:	e7b2      	b.n	800668e <_malloc_r+0x32>
 8006728:	4634      	mov	r4, r6
 800672a:	6876      	ldr	r6, [r6, #4]
 800672c:	e7b9      	b.n	80066a2 <_malloc_r+0x46>
 800672e:	230c      	movs	r3, #12
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	4638      	mov	r0, r7
 8006734:	f000 fbae 	bl	8006e94 <__malloc_unlock>
 8006738:	e7a1      	b.n	800667e <_malloc_r+0x22>
 800673a:	6025      	str	r5, [r4, #0]
 800673c:	e7de      	b.n	80066fc <_malloc_r+0xa0>
 800673e:	bf00      	nop
 8006740:	20002494 	.word	0x20002494

08006744 <__ssputs_r>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	688e      	ldr	r6, [r1, #8]
 800674a:	429e      	cmp	r6, r3
 800674c:	4682      	mov	sl, r0
 800674e:	460c      	mov	r4, r1
 8006750:	4690      	mov	r8, r2
 8006752:	461f      	mov	r7, r3
 8006754:	d838      	bhi.n	80067c8 <__ssputs_r+0x84>
 8006756:	898a      	ldrh	r2, [r1, #12]
 8006758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800675c:	d032      	beq.n	80067c4 <__ssputs_r+0x80>
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	6909      	ldr	r1, [r1, #16]
 8006762:	eba5 0901 	sub.w	r9, r5, r1
 8006766:	6965      	ldr	r5, [r4, #20]
 8006768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800676c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006770:	3301      	adds	r3, #1
 8006772:	444b      	add	r3, r9
 8006774:	106d      	asrs	r5, r5, #1
 8006776:	429d      	cmp	r5, r3
 8006778:	bf38      	it	cc
 800677a:	461d      	movcc	r5, r3
 800677c:	0553      	lsls	r3, r2, #21
 800677e:	d531      	bpl.n	80067e4 <__ssputs_r+0xa0>
 8006780:	4629      	mov	r1, r5
 8006782:	f7ff ff6b 	bl	800665c <_malloc_r>
 8006786:	4606      	mov	r6, r0
 8006788:	b950      	cbnz	r0, 80067a0 <__ssputs_r+0x5c>
 800678a:	230c      	movs	r3, #12
 800678c:	f8ca 3000 	str.w	r3, [sl]
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a0:	6921      	ldr	r1, [r4, #16]
 80067a2:	464a      	mov	r2, r9
 80067a4:	f7ff fb4e 	bl	8005e44 <memcpy>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	6126      	str	r6, [r4, #16]
 80067b6:	6165      	str	r5, [r4, #20]
 80067b8:	444e      	add	r6, r9
 80067ba:	eba5 0509 	sub.w	r5, r5, r9
 80067be:	6026      	str	r6, [r4, #0]
 80067c0:	60a5      	str	r5, [r4, #8]
 80067c2:	463e      	mov	r6, r7
 80067c4:	42be      	cmp	r6, r7
 80067c6:	d900      	bls.n	80067ca <__ssputs_r+0x86>
 80067c8:	463e      	mov	r6, r7
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	4632      	mov	r2, r6
 80067ce:	4641      	mov	r1, r8
 80067d0:	f000 fb40 	bl	8006e54 <memmove>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	1b9b      	subs	r3, r3, r6
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4433      	add	r3, r6
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	2000      	movs	r0, #0
 80067e2:	e7db      	b.n	800679c <__ssputs_r+0x58>
 80067e4:	462a      	mov	r2, r5
 80067e6:	f000 fb5b 	bl	8006ea0 <_realloc_r>
 80067ea:	4606      	mov	r6, r0
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d1e1      	bne.n	80067b4 <__ssputs_r+0x70>
 80067f0:	6921      	ldr	r1, [r4, #16]
 80067f2:	4650      	mov	r0, sl
 80067f4:	f7ff fec6 	bl	8006584 <_free_r>
 80067f8:	e7c7      	b.n	800678a <__ssputs_r+0x46>
	...

080067fc <_svfiprintf_r>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4698      	mov	r8, r3
 8006802:	898b      	ldrh	r3, [r1, #12]
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	b09d      	sub	sp, #116	; 0x74
 8006808:	4607      	mov	r7, r0
 800680a:	460d      	mov	r5, r1
 800680c:	4614      	mov	r4, r2
 800680e:	d50e      	bpl.n	800682e <_svfiprintf_r+0x32>
 8006810:	690b      	ldr	r3, [r1, #16]
 8006812:	b963      	cbnz	r3, 800682e <_svfiprintf_r+0x32>
 8006814:	2140      	movs	r1, #64	; 0x40
 8006816:	f7ff ff21 	bl	800665c <_malloc_r>
 800681a:	6028      	str	r0, [r5, #0]
 800681c:	6128      	str	r0, [r5, #16]
 800681e:	b920      	cbnz	r0, 800682a <_svfiprintf_r+0x2e>
 8006820:	230c      	movs	r3, #12
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e0d1      	b.n	80069ce <_svfiprintf_r+0x1d2>
 800682a:	2340      	movs	r3, #64	; 0x40
 800682c:	616b      	str	r3, [r5, #20]
 800682e:	2300      	movs	r3, #0
 8006830:	9309      	str	r3, [sp, #36]	; 0x24
 8006832:	2320      	movs	r3, #32
 8006834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006838:	f8cd 800c 	str.w	r8, [sp, #12]
 800683c:	2330      	movs	r3, #48	; 0x30
 800683e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069e8 <_svfiprintf_r+0x1ec>
 8006842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006846:	f04f 0901 	mov.w	r9, #1
 800684a:	4623      	mov	r3, r4
 800684c:	469a      	mov	sl, r3
 800684e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006852:	b10a      	cbz	r2, 8006858 <_svfiprintf_r+0x5c>
 8006854:	2a25      	cmp	r2, #37	; 0x25
 8006856:	d1f9      	bne.n	800684c <_svfiprintf_r+0x50>
 8006858:	ebba 0b04 	subs.w	fp, sl, r4
 800685c:	d00b      	beq.n	8006876 <_svfiprintf_r+0x7a>
 800685e:	465b      	mov	r3, fp
 8006860:	4622      	mov	r2, r4
 8006862:	4629      	mov	r1, r5
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ff6d 	bl	8006744 <__ssputs_r>
 800686a:	3001      	adds	r0, #1
 800686c:	f000 80aa 	beq.w	80069c4 <_svfiprintf_r+0x1c8>
 8006870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006872:	445a      	add	r2, fp
 8006874:	9209      	str	r2, [sp, #36]	; 0x24
 8006876:	f89a 3000 	ldrb.w	r3, [sl]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a2 	beq.w	80069c4 <_svfiprintf_r+0x1c8>
 8006880:	2300      	movs	r3, #0
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800688a:	f10a 0a01 	add.w	sl, sl, #1
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	9307      	str	r3, [sp, #28]
 8006892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006896:	931a      	str	r3, [sp, #104]	; 0x68
 8006898:	4654      	mov	r4, sl
 800689a:	2205      	movs	r2, #5
 800689c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a0:	4851      	ldr	r0, [pc, #324]	; (80069e8 <_svfiprintf_r+0x1ec>)
 80068a2:	f7f9 fcbd 	bl	8000220 <memchr>
 80068a6:	9a04      	ldr	r2, [sp, #16]
 80068a8:	b9d8      	cbnz	r0, 80068e2 <_svfiprintf_r+0xe6>
 80068aa:	06d0      	lsls	r0, r2, #27
 80068ac:	bf44      	itt	mi
 80068ae:	2320      	movmi	r3, #32
 80068b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068b4:	0711      	lsls	r1, r2, #28
 80068b6:	bf44      	itt	mi
 80068b8:	232b      	movmi	r3, #43	; 0x2b
 80068ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068be:	f89a 3000 	ldrb.w	r3, [sl]
 80068c2:	2b2a      	cmp	r3, #42	; 0x2a
 80068c4:	d015      	beq.n	80068f2 <_svfiprintf_r+0xf6>
 80068c6:	9a07      	ldr	r2, [sp, #28]
 80068c8:	4654      	mov	r4, sl
 80068ca:	2000      	movs	r0, #0
 80068cc:	f04f 0c0a 	mov.w	ip, #10
 80068d0:	4621      	mov	r1, r4
 80068d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068d6:	3b30      	subs	r3, #48	; 0x30
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d94e      	bls.n	800697a <_svfiprintf_r+0x17e>
 80068dc:	b1b0      	cbz	r0, 800690c <_svfiprintf_r+0x110>
 80068de:	9207      	str	r2, [sp, #28]
 80068e0:	e014      	b.n	800690c <_svfiprintf_r+0x110>
 80068e2:	eba0 0308 	sub.w	r3, r0, r8
 80068e6:	fa09 f303 	lsl.w	r3, r9, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	46a2      	mov	sl, r4
 80068f0:	e7d2      	b.n	8006898 <_svfiprintf_r+0x9c>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	9103      	str	r1, [sp, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfbb      	ittet	lt
 80068fe:	425b      	neglt	r3, r3
 8006900:	f042 0202 	orrlt.w	r2, r2, #2
 8006904:	9307      	strge	r3, [sp, #28]
 8006906:	9307      	strlt	r3, [sp, #28]
 8006908:	bfb8      	it	lt
 800690a:	9204      	strlt	r2, [sp, #16]
 800690c:	7823      	ldrb	r3, [r4, #0]
 800690e:	2b2e      	cmp	r3, #46	; 0x2e
 8006910:	d10c      	bne.n	800692c <_svfiprintf_r+0x130>
 8006912:	7863      	ldrb	r3, [r4, #1]
 8006914:	2b2a      	cmp	r3, #42	; 0x2a
 8006916:	d135      	bne.n	8006984 <_svfiprintf_r+0x188>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	1d1a      	adds	r2, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	9203      	str	r2, [sp, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfb8      	it	lt
 8006924:	f04f 33ff 	movlt.w	r3, #4294967295
 8006928:	3402      	adds	r4, #2
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069f8 <_svfiprintf_r+0x1fc>
 8006930:	7821      	ldrb	r1, [r4, #0]
 8006932:	2203      	movs	r2, #3
 8006934:	4650      	mov	r0, sl
 8006936:	f7f9 fc73 	bl	8000220 <memchr>
 800693a:	b140      	cbz	r0, 800694e <_svfiprintf_r+0x152>
 800693c:	2340      	movs	r3, #64	; 0x40
 800693e:	eba0 000a 	sub.w	r0, r0, sl
 8006942:	fa03 f000 	lsl.w	r0, r3, r0
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	4303      	orrs	r3, r0
 800694a:	3401      	adds	r4, #1
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006952:	4826      	ldr	r0, [pc, #152]	; (80069ec <_svfiprintf_r+0x1f0>)
 8006954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006958:	2206      	movs	r2, #6
 800695a:	f7f9 fc61 	bl	8000220 <memchr>
 800695e:	2800      	cmp	r0, #0
 8006960:	d038      	beq.n	80069d4 <_svfiprintf_r+0x1d8>
 8006962:	4b23      	ldr	r3, [pc, #140]	; (80069f0 <_svfiprintf_r+0x1f4>)
 8006964:	bb1b      	cbnz	r3, 80069ae <_svfiprintf_r+0x1b2>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	3307      	adds	r3, #7
 800696a:	f023 0307 	bic.w	r3, r3, #7
 800696e:	3308      	adds	r3, #8
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006974:	4433      	add	r3, r6
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	e767      	b.n	800684a <_svfiprintf_r+0x4e>
 800697a:	fb0c 3202 	mla	r2, ip, r2, r3
 800697e:	460c      	mov	r4, r1
 8006980:	2001      	movs	r0, #1
 8006982:	e7a5      	b.n	80068d0 <_svfiprintf_r+0xd4>
 8006984:	2300      	movs	r3, #0
 8006986:	3401      	adds	r4, #1
 8006988:	9305      	str	r3, [sp, #20]
 800698a:	4619      	mov	r1, r3
 800698c:	f04f 0c0a 	mov.w	ip, #10
 8006990:	4620      	mov	r0, r4
 8006992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006996:	3a30      	subs	r2, #48	; 0x30
 8006998:	2a09      	cmp	r2, #9
 800699a:	d903      	bls.n	80069a4 <_svfiprintf_r+0x1a8>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0c5      	beq.n	800692c <_svfiprintf_r+0x130>
 80069a0:	9105      	str	r1, [sp, #20]
 80069a2:	e7c3      	b.n	800692c <_svfiprintf_r+0x130>
 80069a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069a8:	4604      	mov	r4, r0
 80069aa:	2301      	movs	r3, #1
 80069ac:	e7f0      	b.n	8006990 <_svfiprintf_r+0x194>
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	462a      	mov	r2, r5
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069b6:	a904      	add	r1, sp, #16
 80069b8:	4638      	mov	r0, r7
 80069ba:	f3af 8000 	nop.w
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	4606      	mov	r6, r0
 80069c2:	d1d6      	bne.n	8006972 <_svfiprintf_r+0x176>
 80069c4:	89ab      	ldrh	r3, [r5, #12]
 80069c6:	065b      	lsls	r3, r3, #25
 80069c8:	f53f af2c 	bmi.w	8006824 <_svfiprintf_r+0x28>
 80069cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ce:	b01d      	add	sp, #116	; 0x74
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	ab03      	add	r3, sp, #12
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	462a      	mov	r2, r5
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069dc:	a904      	add	r1, sp, #16
 80069de:	4638      	mov	r0, r7
 80069e0:	f000 f87a 	bl	8006ad8 <_printf_i>
 80069e4:	e7eb      	b.n	80069be <_svfiprintf_r+0x1c2>
 80069e6:	bf00      	nop
 80069e8:	080071c8 	.word	0x080071c8
 80069ec:	080071d2 	.word	0x080071d2
 80069f0:	00000000 	.word	0x00000000
 80069f4:	08006745 	.word	0x08006745
 80069f8:	080071ce 	.word	0x080071ce

080069fc <_printf_common>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	4616      	mov	r6, r2
 8006a02:	4699      	mov	r9, r3
 8006a04:	688a      	ldr	r2, [r1, #8]
 8006a06:	690b      	ldr	r3, [r1, #16]
 8006a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	bfb8      	it	lt
 8006a10:	4613      	movlt	r3, r2
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a18:	4607      	mov	r7, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b10a      	cbz	r2, 8006a22 <_printf_common+0x26>
 8006a1e:	3301      	adds	r3, #1
 8006a20:	6033      	str	r3, [r6, #0]
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	0699      	lsls	r1, r3, #26
 8006a26:	bf42      	ittt	mi
 8006a28:	6833      	ldrmi	r3, [r6, #0]
 8006a2a:	3302      	addmi	r3, #2
 8006a2c:	6033      	strmi	r3, [r6, #0]
 8006a2e:	6825      	ldr	r5, [r4, #0]
 8006a30:	f015 0506 	ands.w	r5, r5, #6
 8006a34:	d106      	bne.n	8006a44 <_printf_common+0x48>
 8006a36:	f104 0a19 	add.w	sl, r4, #25
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	6832      	ldr	r2, [r6, #0]
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	42ab      	cmp	r3, r5
 8006a42:	dc26      	bgt.n	8006a92 <_printf_common+0x96>
 8006a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a48:	1e13      	subs	r3, r2, #0
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	bf18      	it	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	0692      	lsls	r2, r2, #26
 8006a52:	d42b      	bmi.n	8006aac <_printf_common+0xb0>
 8006a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d01e      	beq.n	8006aa0 <_printf_common+0xa4>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	68e5      	ldr	r5, [r4, #12]
 8006a66:	6832      	ldr	r2, [r6, #0]
 8006a68:	f003 0306 	and.w	r3, r3, #6
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	bf08      	it	eq
 8006a70:	1aad      	subeq	r5, r5, r2
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	6922      	ldr	r2, [r4, #16]
 8006a76:	bf0c      	ite	eq
 8006a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a7c:	2500      	movne	r5, #0
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	bfc4      	itt	gt
 8006a82:	1a9b      	subgt	r3, r3, r2
 8006a84:	18ed      	addgt	r5, r5, r3
 8006a86:	2600      	movs	r6, #0
 8006a88:	341a      	adds	r4, #26
 8006a8a:	42b5      	cmp	r5, r6
 8006a8c:	d11a      	bne.n	8006ac4 <_printf_common+0xc8>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e008      	b.n	8006aa4 <_printf_common+0xa8>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4652      	mov	r2, sl
 8006a96:	4649      	mov	r1, r9
 8006a98:	4638      	mov	r0, r7
 8006a9a:	47c0      	blx	r8
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d103      	bne.n	8006aa8 <_printf_common+0xac>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	e7c6      	b.n	8006a3a <_printf_common+0x3e>
 8006aac:	18e1      	adds	r1, r4, r3
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	2030      	movs	r0, #48	; 0x30
 8006ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ab6:	4422      	add	r2, r4
 8006ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	e7c7      	b.n	8006a54 <_printf_common+0x58>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4638      	mov	r0, r7
 8006acc:	47c0      	blx	r8
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d0e6      	beq.n	8006aa0 <_printf_common+0xa4>
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7d9      	b.n	8006a8a <_printf_common+0x8e>
	...

08006ad8 <_printf_i>:
 8006ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	7e0f      	ldrb	r7, [r1, #24]
 8006ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ae0:	2f78      	cmp	r7, #120	; 0x78
 8006ae2:	4691      	mov	r9, r2
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	469a      	mov	sl, r3
 8006aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aee:	d807      	bhi.n	8006b00 <_printf_i+0x28>
 8006af0:	2f62      	cmp	r7, #98	; 0x62
 8006af2:	d80a      	bhi.n	8006b0a <_printf_i+0x32>
 8006af4:	2f00      	cmp	r7, #0
 8006af6:	f000 80d8 	beq.w	8006caa <_printf_i+0x1d2>
 8006afa:	2f58      	cmp	r7, #88	; 0x58
 8006afc:	f000 80a3 	beq.w	8006c46 <_printf_i+0x16e>
 8006b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b08:	e03a      	b.n	8006b80 <_printf_i+0xa8>
 8006b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b0e:	2b15      	cmp	r3, #21
 8006b10:	d8f6      	bhi.n	8006b00 <_printf_i+0x28>
 8006b12:	a101      	add	r1, pc, #4	; (adr r1, 8006b18 <_printf_i+0x40>)
 8006b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b18:	08006b71 	.word	0x08006b71
 8006b1c:	08006b85 	.word	0x08006b85
 8006b20:	08006b01 	.word	0x08006b01
 8006b24:	08006b01 	.word	0x08006b01
 8006b28:	08006b01 	.word	0x08006b01
 8006b2c:	08006b01 	.word	0x08006b01
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006b01 	.word	0x08006b01
 8006b38:	08006b01 	.word	0x08006b01
 8006b3c:	08006b01 	.word	0x08006b01
 8006b40:	08006b01 	.word	0x08006b01
 8006b44:	08006c91 	.word	0x08006c91
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006c73 	.word	0x08006c73
 8006b50:	08006b01 	.word	0x08006b01
 8006b54:	08006b01 	.word	0x08006b01
 8006b58:	08006cb3 	.word	0x08006cb3
 8006b5c:	08006b01 	.word	0x08006b01
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006b01 	.word	0x08006b01
 8006b68:	08006b01 	.word	0x08006b01
 8006b6c:	08006c7b 	.word	0x08006c7b
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	1d1a      	adds	r2, r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	602a      	str	r2, [r5, #0]
 8006b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0a3      	b.n	8006ccc <_printf_i+0x1f4>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	6829      	ldr	r1, [r5, #0]
 8006b88:	0606      	lsls	r6, r0, #24
 8006b8a:	f101 0304 	add.w	r3, r1, #4
 8006b8e:	d50a      	bpl.n	8006ba6 <_printf_i+0xce>
 8006b90:	680e      	ldr	r6, [r1, #0]
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	da03      	bge.n	8006ba0 <_printf_i+0xc8>
 8006b98:	232d      	movs	r3, #45	; 0x2d
 8006b9a:	4276      	negs	r6, r6
 8006b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba0:	485e      	ldr	r0, [pc, #376]	; (8006d1c <_printf_i+0x244>)
 8006ba2:	230a      	movs	r3, #10
 8006ba4:	e019      	b.n	8006bda <_printf_i+0x102>
 8006ba6:	680e      	ldr	r6, [r1, #0]
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bae:	bf18      	it	ne
 8006bb0:	b236      	sxthne	r6, r6
 8006bb2:	e7ef      	b.n	8006b94 <_printf_i+0xbc>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	1d19      	adds	r1, r3, #4
 8006bba:	6029      	str	r1, [r5, #0]
 8006bbc:	0601      	lsls	r1, r0, #24
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_i+0xec>
 8006bc0:	681e      	ldr	r6, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <_printf_i+0xf2>
 8006bc4:	0646      	lsls	r6, r0, #25
 8006bc6:	d5fb      	bpl.n	8006bc0 <_printf_i+0xe8>
 8006bc8:	881e      	ldrh	r6, [r3, #0]
 8006bca:	4854      	ldr	r0, [pc, #336]	; (8006d1c <_printf_i+0x244>)
 8006bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bce:	bf0c      	ite	eq
 8006bd0:	2308      	moveq	r3, #8
 8006bd2:	230a      	movne	r3, #10
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bda:	6865      	ldr	r5, [r4, #4]
 8006bdc:	60a5      	str	r5, [r4, #8]
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	bfa2      	ittt	ge
 8006be2:	6821      	ldrge	r1, [r4, #0]
 8006be4:	f021 0104 	bicge.w	r1, r1, #4
 8006be8:	6021      	strge	r1, [r4, #0]
 8006bea:	b90e      	cbnz	r6, 8006bf0 <_printf_i+0x118>
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	d04d      	beq.n	8006c8c <_printf_i+0x1b4>
 8006bf0:	4615      	mov	r5, r2
 8006bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8006bfa:	5dc7      	ldrb	r7, [r0, r7]
 8006bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c00:	4637      	mov	r7, r6
 8006c02:	42bb      	cmp	r3, r7
 8006c04:	460e      	mov	r6, r1
 8006c06:	d9f4      	bls.n	8006bf2 <_printf_i+0x11a>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d10b      	bne.n	8006c24 <_printf_i+0x14c>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07de      	lsls	r6, r3, #31
 8006c10:	d508      	bpl.n	8006c24 <_printf_i+0x14c>
 8006c12:	6923      	ldr	r3, [r4, #16]
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	4299      	cmp	r1, r3
 8006c18:	bfde      	ittt	le
 8006c1a:	2330      	movle	r3, #48	; 0x30
 8006c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c24:	1b52      	subs	r2, r2, r5
 8006c26:	6122      	str	r2, [r4, #16]
 8006c28:	f8cd a000 	str.w	sl, [sp]
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	aa03      	add	r2, sp, #12
 8006c30:	4621      	mov	r1, r4
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7ff fee2 	bl	80069fc <_printf_common>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d14c      	bne.n	8006cd6 <_printf_i+0x1fe>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b004      	add	sp, #16
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	4835      	ldr	r0, [pc, #212]	; (8006d1c <_printf_i+0x244>)
 8006c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c4c:	6829      	ldr	r1, [r5, #0]
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c54:	6029      	str	r1, [r5, #0]
 8006c56:	061d      	lsls	r5, r3, #24
 8006c58:	d514      	bpl.n	8006c84 <_printf_i+0x1ac>
 8006c5a:	07df      	lsls	r7, r3, #31
 8006c5c:	bf44      	itt	mi
 8006c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c62:	6023      	strmi	r3, [r4, #0]
 8006c64:	b91e      	cbnz	r6, 8006c6e <_printf_i+0x196>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f023 0320 	bic.w	r3, r3, #32
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	2310      	movs	r3, #16
 8006c70:	e7b0      	b.n	8006bd4 <_printf_i+0xfc>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	2378      	movs	r3, #120	; 0x78
 8006c7c:	4828      	ldr	r0, [pc, #160]	; (8006d20 <_printf_i+0x248>)
 8006c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c82:	e7e3      	b.n	8006c4c <_printf_i+0x174>
 8006c84:	0659      	lsls	r1, r3, #25
 8006c86:	bf48      	it	mi
 8006c88:	b2b6      	uxthmi	r6, r6
 8006c8a:	e7e6      	b.n	8006c5a <_printf_i+0x182>
 8006c8c:	4615      	mov	r5, r2
 8006c8e:	e7bb      	b.n	8006c08 <_printf_i+0x130>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	6826      	ldr	r6, [r4, #0]
 8006c94:	6961      	ldr	r1, [r4, #20]
 8006c96:	1d18      	adds	r0, r3, #4
 8006c98:	6028      	str	r0, [r5, #0]
 8006c9a:	0635      	lsls	r5, r6, #24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	d501      	bpl.n	8006ca4 <_printf_i+0x1cc>
 8006ca0:	6019      	str	r1, [r3, #0]
 8006ca2:	e002      	b.n	8006caa <_printf_i+0x1d2>
 8006ca4:	0670      	lsls	r0, r6, #25
 8006ca6:	d5fb      	bpl.n	8006ca0 <_printf_i+0x1c8>
 8006ca8:	8019      	strh	r1, [r3, #0]
 8006caa:	2300      	movs	r3, #0
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	4615      	mov	r5, r2
 8006cb0:	e7ba      	b.n	8006c28 <_printf_i+0x150>
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	1d1a      	adds	r2, r3, #4
 8006cb6:	602a      	str	r2, [r5, #0]
 8006cb8:	681d      	ldr	r5, [r3, #0]
 8006cba:	6862      	ldr	r2, [r4, #4]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f7f9 faae 	bl	8000220 <memchr>
 8006cc4:	b108      	cbz	r0, 8006cca <_printf_i+0x1f2>
 8006cc6:	1b40      	subs	r0, r0, r5
 8006cc8:	6060      	str	r0, [r4, #4]
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd4:	e7a8      	b.n	8006c28 <_printf_i+0x150>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d0ab      	beq.n	8006c3c <_printf_i+0x164>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	079b      	lsls	r3, r3, #30
 8006ce8:	d413      	bmi.n	8006d12 <_printf_i+0x23a>
 8006cea:	68e0      	ldr	r0, [r4, #12]
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	bfb8      	it	lt
 8006cf2:	4618      	movlt	r0, r3
 8006cf4:	e7a4      	b.n	8006c40 <_printf_i+0x168>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	47d0      	blx	sl
 8006d00:	3001      	adds	r0, #1
 8006d02:	d09b      	beq.n	8006c3c <_printf_i+0x164>
 8006d04:	3501      	adds	r5, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9903      	ldr	r1, [sp, #12]
 8006d0a:	1a5b      	subs	r3, r3, r1
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dcf2      	bgt.n	8006cf6 <_printf_i+0x21e>
 8006d10:	e7eb      	b.n	8006cea <_printf_i+0x212>
 8006d12:	2500      	movs	r5, #0
 8006d14:	f104 0619 	add.w	r6, r4, #25
 8006d18:	e7f5      	b.n	8006d06 <_printf_i+0x22e>
 8006d1a:	bf00      	nop
 8006d1c:	080071d9 	.word	0x080071d9
 8006d20:	080071ea 	.word	0x080071ea

08006d24 <_sbrk_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d06      	ldr	r5, [pc, #24]	; (8006d40 <_sbrk_r+0x1c>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f000 f900 	bl	8006f34 <_sbrk>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_sbrk_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_sbrk_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	2000249c 	.word	0x2000249c

08006d44 <__sread>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4c:	f000 f8d8 	bl	8006f00 <_read_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	bfab      	itete	ge
 8006d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d56:	89a3      	ldrhlt	r3, [r4, #12]
 8006d58:	181b      	addge	r3, r3, r0
 8006d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d5e:	bfac      	ite	ge
 8006d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d62:	81a3      	strhlt	r3, [r4, #12]
 8006d64:	bd10      	pop	{r4, pc}

08006d66 <__swrite>:
 8006d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	898b      	ldrh	r3, [r1, #12]
 8006d6e:	05db      	lsls	r3, r3, #23
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4616      	mov	r6, r2
 8006d76:	d505      	bpl.n	8006d84 <__swrite+0x1e>
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f000 f856 	bl	8006e30 <_lseek_r>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	4628      	mov	r0, r5
 8006d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9a:	f7ff b80d 	b.w	8005db8 <_write_r>

08006d9e <__sseek>:
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	460c      	mov	r4, r1
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 f843 	bl	8006e30 <_lseek_r>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	bf15      	itete	ne
 8006db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dba:	81a3      	strheq	r3, [r4, #12]
 8006dbc:	bf18      	it	ne
 8006dbe:	81a3      	strhne	r3, [r4, #12]
 8006dc0:	bd10      	pop	{r4, pc}

08006dc2 <__sclose>:
 8006dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc6:	f000 b801 	b.w	8006dcc <_close_r>
	...

08006dcc <_close_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d06      	ldr	r5, [pc, #24]	; (8006de8 <_close_r+0x1c>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7f9 fcbf 	bl	800075a <_close>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_close_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_close_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	2000249c 	.word	0x2000249c

08006dec <_fstat_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	; (8006e0c <_fstat_r+0x20>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f7f9 fcba 	bl	8000772 <_fstat>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d102      	bne.n	8006e08 <_fstat_r+0x1c>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	b103      	cbz	r3, 8006e08 <_fstat_r+0x1c>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000249c 	.word	0x2000249c

08006e10 <_isatty_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d06      	ldr	r5, [pc, #24]	; (8006e2c <_isatty_r+0x1c>)
 8006e14:	2300      	movs	r3, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f7f9 fcb9 	bl	8000792 <_isatty>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_isatty_r+0x1a>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_isatty_r+0x1a>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	2000249c 	.word	0x2000249c

08006e30 <_lseek_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	; (8006e50 <_lseek_r+0x20>)
 8006e34:	4604      	mov	r4, r0
 8006e36:	4608      	mov	r0, r1
 8006e38:	4611      	mov	r1, r2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	602a      	str	r2, [r5, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f7f9 fcb2 	bl	80007a8 <_lseek>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_lseek_r+0x1e>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_lseek_r+0x1e>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	2000249c 	.word	0x2000249c

08006e54 <memmove>:
 8006e54:	4288      	cmp	r0, r1
 8006e56:	b510      	push	{r4, lr}
 8006e58:	eb01 0402 	add.w	r4, r1, r2
 8006e5c:	d902      	bls.n	8006e64 <memmove+0x10>
 8006e5e:	4284      	cmp	r4, r0
 8006e60:	4623      	mov	r3, r4
 8006e62:	d807      	bhi.n	8006e74 <memmove+0x20>
 8006e64:	1e43      	subs	r3, r0, #1
 8006e66:	42a1      	cmp	r1, r4
 8006e68:	d008      	beq.n	8006e7c <memmove+0x28>
 8006e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e72:	e7f8      	b.n	8006e66 <memmove+0x12>
 8006e74:	4402      	add	r2, r0
 8006e76:	4601      	mov	r1, r0
 8006e78:	428a      	cmp	r2, r1
 8006e7a:	d100      	bne.n	8006e7e <memmove+0x2a>
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e86:	e7f7      	b.n	8006e78 <memmove+0x24>

08006e88 <__malloc_lock>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__malloc_lock+0x8>)
 8006e8a:	f7ff bb13 	b.w	80064b4 <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	2000248f 	.word	0x2000248f

08006e94 <__malloc_unlock>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__malloc_unlock+0x8>)
 8006e96:	f7ff bb0e 	b.w	80064b6 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	2000248f 	.word	0x2000248f

08006ea0 <_realloc_r>:
 8006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	b921      	cbnz	r1, 8006eb6 <_realloc_r+0x16>
 8006eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	f7ff bbd3 	b.w	800665c <_malloc_r>
 8006eb6:	b92a      	cbnz	r2, 8006ec4 <_realloc_r+0x24>
 8006eb8:	f7ff fb64 	bl	8006584 <_free_r>
 8006ebc:	4625      	mov	r5, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	f000 f82e 	bl	8006f24 <_malloc_usable_size_r>
 8006ec8:	4284      	cmp	r4, r0
 8006eca:	4607      	mov	r7, r0
 8006ecc:	d802      	bhi.n	8006ed4 <_realloc_r+0x34>
 8006ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ed2:	d812      	bhi.n	8006efa <_realloc_r+0x5a>
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fbc0 	bl	800665c <_malloc_r>
 8006edc:	4605      	mov	r5, r0
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0ed      	beq.n	8006ebe <_realloc_r+0x1e>
 8006ee2:	42bc      	cmp	r4, r7
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	bf28      	it	cs
 8006eea:	463a      	movcs	r2, r7
 8006eec:	f7fe ffaa 	bl	8005e44 <memcpy>
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7ff fb46 	bl	8006584 <_free_r>
 8006ef8:	e7e1      	b.n	8006ebe <_realloc_r+0x1e>
 8006efa:	4635      	mov	r5, r6
 8006efc:	e7df      	b.n	8006ebe <_realloc_r+0x1e>
	...

08006f00 <_read_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_read_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7f9 fc06 	bl	8000720 <_read>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_read_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_read_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	2000249c 	.word	0x2000249c

08006f24 <_malloc_usable_size_r>:
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f18      	subs	r0, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfbc      	itt	lt
 8006f2e:	580b      	ldrlt	r3, [r1, r0]
 8006f30:	18c0      	addlt	r0, r0, r3
 8006f32:	4770      	bx	lr

08006f34 <_sbrk>:
 8006f34:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <_sbrk+0x14>)
 8006f36:	6811      	ldr	r1, [r2, #0]
 8006f38:	4603      	mov	r3, r0
 8006f3a:	b909      	cbnz	r1, 8006f40 <_sbrk+0xc>
 8006f3c:	4903      	ldr	r1, [pc, #12]	; (8006f4c <_sbrk+0x18>)
 8006f3e:	6011      	str	r1, [r2, #0]
 8006f40:	6810      	ldr	r0, [r2, #0]
 8006f42:	4403      	add	r3, r0
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4770      	bx	lr
 8006f48:	200024a0 	.word	0x200024a0
 8006f4c:	200024a8 	.word	0x200024a8

08006f50 <_init>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr

08006f5c <_fini>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr
