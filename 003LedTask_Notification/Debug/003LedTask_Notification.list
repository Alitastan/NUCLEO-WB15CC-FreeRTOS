
003LedTask_Notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000008  08005d14  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c1c  2000001c  08005d28  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001c38  08005d28  00021c38  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016679  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030ae  00000000  00000000  000366c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001918  00000000  00000000  00039778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000017a0  00000000  00000000  0003b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c7fc  00000000  00000000  0003c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001645d  00000000  00000000  0005902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c4041  00000000  00000000  0006f489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001334ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006944  00000000  00000000  0013351c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b68 	.word	0x08005b68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	08005b68 	.word	0x08005b68

08000180 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000180:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000182:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000186:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000210 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800018a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800018e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000192:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000194:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000196:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000198:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800019a:	d332      	bcc.n	8000202 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800019c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800019e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001a0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001a2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001a4:	d314      	bcc.n	80001d0 <_CheckCase2>

080001a6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001a6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001a8:	19d0      	adds	r0, r2, r7
 80001aa:	bf00      	nop

080001ac <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001ac:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001b4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001b6:	d005      	beq.n	80001c4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001b8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001bc:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001c0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001c2:	d1f3      	bne.n	80001ac <_LoopCopyStraight>

080001c4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001c4:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001c8:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001ca:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001ce:	4770      	bx	lr

080001d0 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 80001d0:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 80001d2:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001d4:	d319      	bcc.n	800020a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001d6:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001d8:	1b12      	subs	r2, r2, r4

080001da <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001da:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001de:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001e2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001e4:	d1f9      	bne.n	80001da <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001e6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001e8:	d005      	beq.n	80001f6 <_No2ChunkNeeded>

080001ea <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001ea:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ee:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001f2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001f4:	d1f9      	bne.n	80001ea <_LoopCopyAfterWrapAround>

080001f6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001f6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001fa:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001fc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001fe:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000200:	4770      	bx	lr

08000202 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000202:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000204:	3801      	subs	r0, #1
        CMP      R0,R2
 8000206:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000208:	d2cd      	bcs.n	80001a6 <_Case4>

0800020a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800020a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800020c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800020e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000210:	20001608 	.word	0x20001608

08000214 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f103 0208 	add.w	r2, r3, #8
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f103 0208 	add.w	r2, r3, #8
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f103 0208 	add.w	r2, r3, #8
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002cc:	d103      	bne.n	80002d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e00c      	b.n	80002f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3308      	adds	r3, #8
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e002      	b.n	80002e4 <vListInsert+0x2e>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d2f6      	bcs.n	80002de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	683a      	ldr	r2, [r7, #0]
 80002fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6892      	ldr	r2, [r2, #8]
 800033e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6852      	ldr	r2, [r2, #4]
 8000348:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d103      	bne.n	800035c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af04      	add	r7, sp, #16
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	4613      	mov	r3, r2
 800038a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fa53 	bl	800183c <pvPortMalloc>
 8000396:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00e      	beq.n	80003bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800039e:	205c      	movs	r0, #92	; 0x5c
 80003a0:	f001 fa4c 	bl	800183c <pvPortMalloc>
 80003a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	631a      	str	r2, [r3, #48]	; 0x30
 80003b2:	e005      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80003b4:	6978      	ldr	r0, [r7, #20]
 80003b6:	f001 fb21 	bl	80019fc <vPortFree>
 80003ba:	e001      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d013      	beq.n	80003ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	2300      	movs	r3, #0
 80003ca:	9303      	str	r3, [sp, #12]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f000 f80e 	bl	80003fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80003e2:	69f8      	ldr	r0, [r7, #28]
 80003e4:	f000 f8a2 	bl	800052c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80003e8:	2301      	movs	r3, #1
 80003ea:	61bb      	str	r3, [r7, #24]
 80003ec:	e002      	b.n	80003f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80003f4:	69bb      	ldr	r3, [r7, #24]
    }
 80003f6:	4618      	mov	r0, r3
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b088      	sub	sp, #32
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	461a      	mov	r2, r3
 8000416:	21a5      	movs	r1, #165	; 0xa5
 8000418:	f005 fb9e 	bl	8005b58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000426:	3b01      	subs	r3, #1
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	f023 0307 	bic.w	r3, r3, #7
 8000434:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00a      	beq.n	8000456 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000444:	f383 8811 	msr	BASEPRI, r3
 8000448:	f3bf 8f6f 	isb	sy
 800044c:	f3bf 8f4f 	dsb	sy
 8000450:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000452:	bf00      	nop
 8000454:	e7fe      	b.n	8000454 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d01f      	beq.n	800049c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	e012      	b.n	8000488 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	4413      	add	r3, r2
 8000468:	7819      	ldrb	r1, [r3, #0]
 800046a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	4413      	add	r3, r2
 8000470:	3334      	adds	r3, #52	; 0x34
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d006      	beq.n	8000490 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3301      	adds	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d9e9      	bls.n	8000462 <prvInitialiseNewTask+0x64>
 800048e:	e000      	b.n	8000492 <prvInitialiseNewTask+0x94>
            {
                break;
 8000490:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800049a:	e003      	b.n	80004a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d901      	bls.n	80004ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004aa:	2304      	movs	r3, #4
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80004ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80004b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b8:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80004ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004bc:	2200      	movs	r2, #0
 80004be:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80004c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c2:	3304      	adds	r3, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fec5 	bl	8000254 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80004ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004cc:	3318      	adds	r3, #24
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fec0 	bl	8000254 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80004d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004dc:	f1c3 0205 	rsb	r2, r3, #5
 80004e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80004e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80004ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ec:	3354      	adds	r3, #84	; 0x54
 80004ee:	2204      	movs	r2, #4
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f005 fb30 	bl	8005b58 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	3358      	adds	r3, #88	; 0x58
 80004fc:	2201      	movs	r2, #1
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f005 fb29 	bl	8005b58 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	68f9      	ldr	r1, [r7, #12]
 800050a:	69b8      	ldr	r0, [r7, #24]
 800050c:	f000 fefe 	bl	800130c <pxPortInitialiseStack>
 8000510:	4602      	mov	r2, r0
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000534:	f001 f896 	bl	8001664 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a3a      	ldr	r2, [pc, #232]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000540:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000542:	4b3a      	ldr	r3, [pc, #232]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d109      	bne.n	800055e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d110      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000558:	f000 fc40 	bl	8000ddc <prvInitialiseTaskLists>
 800055c:	e00d      	b.n	800057a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000570:	429a      	cmp	r2, r3
 8000572:	d802      	bhi.n	800057a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000582:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <prvAddNewTaskToReadyList+0x94>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb5b 	bl	8002c50 <SEGGER_SYSVIEW_OnTaskCreate>
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	461d      	mov	r5, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	1ae3      	subs	r3, r4, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	462b      	mov	r3, r5
 80005bc:	f001 fb3c 	bl	8001c38 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fbc8 	bl	8002d58 <SEGGER_SYSVIEW_OnTaskStartReady>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <prvAddNewTaskToReadyList+0x110>)
 80005e8:	441a      	add	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3304      	adds	r3, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f7ff fe3c 	bl	800026e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80005f6:	f001 f865 	bl	80016c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <prvAddNewTaskToReadyList+0x114>)
 8000612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	20000110 	.word	0x20000110
 800062c:	20000038 	.word	0x20000038
 8000630:	2000011c 	.word	0x2000011c
 8000634:	2000012c 	.word	0x2000012c
 8000638:	20000118 	.word	0x20000118
 800063c:	2000003c 	.word	0x2000003c
 8000640:	e000ed04 	.word	0xe000ed04

08000644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01b      	beq.n	800068e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <vTaskDelay+0x68>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00a      	beq.n	8000674 <vTaskDelay+0x30>
        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	60bb      	str	r3, [r7, #8]
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000674:	f000 f9c4 	bl	8000a00 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	2023      	movs	r0, #35	; 0x23
 800067c:	f001 fe86 	bl	800238c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000680:	2100      	movs	r1, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fdca 	bl	800121c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000688:	f000 f9c8 	bl	8000a1c <xTaskResumeAll>
 800068c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d107      	bne.n	80006a4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <vTaskDelay+0x6c>)
 8000696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000138 	.word	0x20000138
 80006b0:	e000ed04 	.word	0xe000ed04

080006b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80006bc:	f000 ffd2 	bl	8001664 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <vTaskSuspend+0x18>
 80006c6:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <vTaskSuspend+0x13c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	e000      	b.n	80006ce <vTaskSuspend+0x1a>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fbe2 	bl	8002e9c <SEGGER_SYSVIEW_ShrinkId>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	2029      	movs	r0, #41	; 0x29
 80006de:	f001 fe55 	bl	800238c <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	3304      	adds	r3, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe1e 	bl	8000328 <uxListRemove>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d115      	bne.n	800071e <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f6:	493f      	ldr	r1, [pc, #252]	; (80007f4 <vTaskSuspend+0x140>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10a      	bne.n	800071e <vTaskSuspend+0x6a>
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070c:	2201      	movs	r2, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <vTaskSuspend+0x144>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4013      	ands	r3, r2
 800071a:	4a37      	ldr	r2, [pc, #220]	; (80007f8 <vTaskSuspend+0x144>)
 800071c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	3318      	adds	r3, #24
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fdfc 	bl	8000328 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	211b      	movs	r1, #27
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fb51 	bl	8002ddc <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3304      	adds	r3, #4
 800073e:	4619      	mov	r1, r3
 8000740:	482e      	ldr	r0, [pc, #184]	; (80007fc <vTaskSuspend+0x148>)
 8000742:	f7ff fd94 	bl	800026e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	e010      	b.n	800076e <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	3358      	adds	r3, #88	; 0x58
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b01      	cmp	r3, #1
 800075a:	d105      	bne.n	8000768 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	4413      	add	r3, r2
 8000762:	3358      	adds	r3, #88	; 0x58
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	ddeb      	ble.n	800074c <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000774:	f000 ffa6 	bl	80016c4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <vTaskSuspend+0x14c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000780:	f000 ff70 	bl	8001664 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000784:	f000 fba8 	bl	8000ed8 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000788:	f000 ff9c 	bl	80016c4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <vTaskSuspend+0x13c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	429a      	cmp	r2, r3
 8000794:	d127      	bne.n	80007e6 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <vTaskSuspend+0x14c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d017      	beq.n	80007ce <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <vTaskSuspend+0x150>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00a      	beq.n	80007bc <vTaskSuspend+0x108>
        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	60fb      	str	r3, [r7, #12]
    }
 80007b8:	bf00      	nop
 80007ba:	e7fe      	b.n	80007ba <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <vTaskSuspend+0x154>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80007cc:	e00b      	b.n	80007e6 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <vTaskSuspend+0x148>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <vTaskSuspend+0x158>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d103      	bne.n	80007e2 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <vTaskSuspend+0x13c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
    }
 80007e0:	e001      	b.n	80007e6 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80007e2:	f000 fa77 	bl	8000cd4 <vTaskSwitchContext>
    }
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000038 	.word	0x20000038
 80007f4:	2000003c 	.word	0x2000003c
 80007f8:	20000118 	.word	0x20000118
 80007fc:	200000fc 	.word	0x200000fc
 8000800:	2000011c 	.word	0x2000011c
 8000804:	20000138 	.word	0x20000138
 8000808:	e000ed04 	.word	0xe000ed04
 800080c:	20000110 	.word	0x20000110

08000810 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10a      	bne.n	800083c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8000826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082a:	f383 8811 	msr	BASEPRI, r3
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	60fb      	str	r3, [r7, #12]
    }
 8000838:	bf00      	nop
 800083a:	e7fe      	b.n	800083a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <prvTaskIsTaskSuspended+0x5c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d10a      	bne.n	800085c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <prvTaskIsTaskSuspended+0x60>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d005      	beq.n	800085c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8000858:	2301      	movs	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800085c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800085e:	4618      	mov	r0, r3
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200000fc 	.word	0x200000fc
 8000870:	200000d0 	.word	0x200000d0

08000874 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <vTaskResume+0x28>
        __asm volatile
 8000886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088a:	f383 8811 	msr	BASEPRI, r3
 800088e:	f3bf 8f6f 	isb	sy
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	60bb      	str	r3, [r7, #8]
    }
 8000898:	bf00      	nop
 800089a:	e7fe      	b.n	800089a <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <vTaskResume+0xc4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d044      	beq.n	8000930 <vTaskResume+0xbc>
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d041      	beq.n	8000930 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80008ac:	f000 feda 	bl	8001664 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff ffad 	bl	8000810 <prvTaskIsTaskSuspended>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d037      	beq.n	800092c <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 faec 	bl	8002e9c <SEGGER_SYSVIEW_ShrinkId>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4619      	mov	r1, r3
 80008c8:	202a      	movs	r0, #42	; 0x2a
 80008ca:	f001 fd5f 	bl	800238c <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fd28 	bl	8000328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fa3c 	bl	8002d58 <SEGGER_SYSVIEW_OnTaskStartReady>
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	2201      	movs	r2, #1
 80008e6:	409a      	lsls	r2, r3
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <vTaskResume+0xc8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <vTaskResume+0xc8>)
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <vTaskResume+0xcc>)
 8000900:	441a      	add	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3304      	adds	r3, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4610      	mov	r0, r2
 800090a:	f7ff fcb0 	bl	800026e <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <vTaskResume+0xc4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	429a      	cmp	r2, r3
 800091a:	d307      	bcc.n	800092c <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <vTaskResume+0xd0>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	f3bf 8f4f 	dsb	sy
 8000928:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800092c:	f000 feca 	bl	80016c4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000038 	.word	0x20000038
 800093c:	20000118 	.word	0x20000118
 8000940:	2000003c 	.word	0x2000003c
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <vTaskStartScheduler+0x98>)
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	4922      	ldr	r1, [pc, #136]	; (80009e4 <vTaskStartScheduler+0x9c>)
 800095c:	4822      	ldr	r0, [pc, #136]	; (80009e8 <vTaskStartScheduler+0xa0>)
 800095e:	f7ff fd0d 	bl	800037c <xTaskCreate>
 8000962:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d124      	bne.n	80009b4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	60bb      	str	r3, [r7, #8]
    }
 800097c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <vTaskStartScheduler+0xa4>)
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <vTaskStartScheduler+0xa8>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <vTaskStartScheduler+0xac>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <vTaskStartScheduler+0xb0>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <vTaskStartScheduler+0x98>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	d102      	bne.n	80009a4 <vTaskStartScheduler+0x5c>
 800099e:	f002 f93b 	bl	8002c18 <SEGGER_SYSVIEW_OnIdle>
 80009a2:	e004      	b.n	80009ae <vTaskStartScheduler+0x66>
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <vTaskStartScheduler+0xb0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f993 	bl	8002cd4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80009ae:	f000 fd39 	bl	8001424 <xPortStartScheduler>
 80009b2:	e00e      	b.n	80009d2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ba:	d10a      	bne.n	80009d2 <vTaskStartScheduler+0x8a>
        __asm volatile
 80009bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c0:	f383 8811 	msr	BASEPRI, r3
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	607b      	str	r3, [r7, #4]
    }
 80009ce:	bf00      	nop
 80009d0:	e7fe      	b.n	80009d0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <vTaskStartScheduler+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000134 	.word	0x20000134
 80009e4:	08005b80 	.word	0x08005b80
 80009e8:	08000da9 	.word	0x08000da9
 80009ec:	20000130 	.word	0x20000130
 80009f0:	2000011c 	.word	0x2000011c
 80009f4:	20000114 	.word	0x20000114
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000008 	.word	0x20000008

08000a00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <vTaskSuspendAll+0x18>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <vTaskSuspendAll+0x18>)
 8000a0c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000138 	.word	0x20000138

08000a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <xTaskResumeAll+0x11c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10a      	bne.n	8000a48 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a36:	f383 8811 	msr	BASEPRI, r3
 8000a3a:	f3bf 8f6f 	isb	sy
 8000a3e:	f3bf 8f4f 	dsb	sy
 8000a42:	603b      	str	r3, [r7, #0]
    }
 8000a44:	bf00      	nop
 8000a46:	e7fe      	b.n	8000a46 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a48:	f000 fe0c 	bl	8001664 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a4c:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <xTaskResumeAll+0x11c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a39      	ldr	r2, [pc, #228]	; (8000b38 <xTaskResumeAll+0x11c>)
 8000a54:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <xTaskResumeAll+0x11c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d165      	bne.n	8000b2a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <xTaskResumeAll+0x120>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d061      	beq.n	8000b2a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a66:	e032      	b.n	8000ace <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a68:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <xTaskResumeAll+0x124>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3318      	adds	r3, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fc57 	bl	8000328 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fc52 	bl	8000328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f966 	bl	8002d58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	2201      	movs	r2, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <xTaskResumeAll+0x128>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <xTaskResumeAll+0x128>)
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <xTaskResumeAll+0x12c>)
 8000aac:	441a      	add	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	f7ff fbda 	bl	800026e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <xTaskResumeAll+0x130>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d302      	bcc.n	8000ace <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <xTaskResumeAll+0x134>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <xTaskResumeAll+0x124>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1c8      	bne.n	8000a68 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000adc:	f000 f9fc 	bl	8000ed8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <xTaskResumeAll+0x138>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d010      	beq.n	8000b0e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000aec:	f000 f836 	bl	8000b5c <xTaskIncrementTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <xTaskResumeAll+0x134>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f1      	bne.n	8000aec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <xTaskResumeAll+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <xTaskResumeAll+0x134>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d009      	beq.n	8000b2a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <xTaskResumeAll+0x13c>)
 8000b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000b2a:	f000 fdcb 	bl	80016c4 <vPortExitCritical>

    return xAlreadyYielded;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000138 	.word	0x20000138
 8000b3c:	20000110 	.word	0x20000110
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	20000118 	.word	0x20000118
 8000b48:	2000003c 	.word	0x2000003c
 8000b4c:	20000038 	.word	0x20000038
 8000b50:	20000124 	.word	0x20000124
 8000b54:	20000120 	.word	0x20000120
 8000b58:	e000ed04 	.word	0xe000ed04

08000b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b66:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <xTaskIncrementTick+0x14c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8092 	bne.w	8000c94 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <xTaskIncrementTick+0x150>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b78:	4a4c      	ldr	r2, [pc, #304]	; (8000cac <xTaskIncrementTick+0x150>)
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d120      	bne.n	8000bc6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <xTaskIncrementTick+0x154>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00a      	beq.n	8000ba4 <xTaskIncrementTick+0x48>
        __asm volatile
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	603b      	str	r3, [r7, #0]
    }
 8000ba0:	bf00      	nop
 8000ba2:	e7fe      	b.n	8000ba2 <xTaskIncrementTick+0x46>
 8000ba4:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <xTaskIncrementTick+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <xTaskIncrementTick+0x158>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <xTaskIncrementTick+0x154>)
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4a40      	ldr	r2, [pc, #256]	; (8000cb4 <xTaskIncrementTick+0x158>)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <xTaskIncrementTick+0x15c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <xTaskIncrementTick+0x15c>)
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	f000 f989 	bl	8000ed8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <xTaskIncrementTick+0x160>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d34c      	bcc.n	8000c6a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <xTaskIncrementTick+0x154>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bda:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <xTaskIncrementTick+0x160>)
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	601a      	str	r2, [r3, #0]
                    break;
 8000be2:	e042      	b.n	8000c6a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <xTaskIncrementTick+0x154>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d203      	bcs.n	8000c04 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <xTaskIncrementTick+0x160>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000c02:	e032      	b.n	8000c6a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3304      	adds	r3, #4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb8d 	bl	8000328 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3318      	adds	r3, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb84 	bl	8000328 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 f898 	bl	8002d58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <xTaskIncrementTick+0x164>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <xTaskIncrementTick+0x164>)
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <xTaskIncrementTick+0x168>)
 8000c48:	441a      	add	r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4610      	mov	r0, r2
 8000c52:	f7ff fb0c 	bl	800026e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <xTaskIncrementTick+0x16c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3b5      	bcc.n	8000bd0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c68:	e7b2      	b.n	8000bd0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <xTaskIncrementTick+0x16c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c70:	4914      	ldr	r1, [pc, #80]	; (8000cc4 <xTaskIncrementTick+0x168>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d901      	bls.n	8000c86 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <xTaskIncrementTick+0x170>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e004      	b.n	8000c9e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <xTaskIncrementTick+0x174>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <xTaskIncrementTick+0x174>)
 8000c9c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c9e:	697b      	ldr	r3, [r7, #20]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000138 	.word	0x20000138
 8000cac:	20000114 	.word	0x20000114
 8000cb0:	200000c8 	.word	0x200000c8
 8000cb4:	200000cc 	.word	0x200000cc
 8000cb8:	20000128 	.word	0x20000128
 8000cbc:	20000130 	.word	0x20000130
 8000cc0:	20000118 	.word	0x20000118
 8000cc4:	2000003c 	.word	0x2000003c
 8000cc8:	20000038 	.word	0x20000038
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	20000120 	.word	0x20000120

08000cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <vTaskSwitchContext+0xbc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <vTaskSwitchContext+0xc0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000ce8:	e04d      	b.n	8000d86 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <vTaskSwitchContext+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <vTaskSwitchContext+0xc4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	f1c3 031f 	rsb	r3, r3, #31
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	4925      	ldr	r1, [pc, #148]	; (8000d9c <vTaskSwitchContext+0xc8>)
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	607b      	str	r3, [r7, #4]
    }
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <vTaskSwitchContext+0x5a>
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <vTaskSwitchContext+0xc8>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	3308      	adds	r3, #8
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d104      	bne.n	8000d60 <vTaskSwitchContext+0x8c>
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <vTaskSwitchContext+0xcc>)
 8000d68:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <vTaskSwitchContext+0xcc>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <vTaskSwitchContext+0xd0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d102      	bne.n	8000d7c <vTaskSwitchContext+0xa8>
 8000d76:	f001 ff4f 	bl	8002c18 <SEGGER_SYSVIEW_OnIdle>
}
 8000d7a:	e004      	b.n	8000d86 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <vTaskSwitchContext+0xcc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 ffa7 	bl	8002cd4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000138 	.word	0x20000138
 8000d94:	20000124 	.word	0x20000124
 8000d98:	20000118 	.word	0x20000118
 8000d9c:	2000003c 	.word	0x2000003c
 8000da0:	20000038 	.word	0x20000038
 8000da4:	20000134 	.word	0x20000134

08000da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000db0:	f000 f854 	bl	8000e5c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <prvIdleTask+0x2c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d907      	bls.n	8000dcc <prvIdleTask+0x24>
                {
                    taskYIELD();
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <prvIdleTask+0x30>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8000dcc:	f002 fc14 	bl	80035f8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8000dd0:	e7ee      	b.n	8000db0 <prvIdleTask+0x8>
 8000dd2:	bf00      	nop
 8000dd4:	2000003c 	.word	0x2000003c
 8000dd8:	e000ed04 	.word	0xe000ed04

08000ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e00c      	b.n	8000e02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <prvInitialiseTaskLists+0x60>)
 8000df4:	4413      	add	r3, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fa0c 	bl	8000214 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d9ef      	bls.n	8000de8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <prvInitialiseTaskLists+0x64>)
 8000e0a:	f7ff fa03 	bl	8000214 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <prvInitialiseTaskLists+0x68>)
 8000e10:	f7ff fa00 	bl	8000214 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <prvInitialiseTaskLists+0x6c>)
 8000e16:	f7ff f9fd 	bl	8000214 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <prvInitialiseTaskLists+0x70>)
 8000e1c:	f7ff f9fa 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <prvInitialiseTaskLists+0x74>)
 8000e22:	f7ff f9f7 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <prvInitialiseTaskLists+0x78>)
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <prvInitialiseTaskLists+0x64>)
 8000e2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <prvInitialiseTaskLists+0x7c>)
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <prvInitialiseTaskLists+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000003c 	.word	0x2000003c
 8000e40:	200000a0 	.word	0x200000a0
 8000e44:	200000b4 	.word	0x200000b4
 8000e48:	200000d0 	.word	0x200000d0
 8000e4c:	200000e4 	.word	0x200000e4
 8000e50:	200000fc 	.word	0x200000fc
 8000e54:	200000c8 	.word	0x200000c8
 8000e58:	200000cc 	.word	0x200000cc

08000e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e62:	e019      	b.n	8000e98 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000e64:	f000 fbfe 	bl	8001664 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <prvCheckTasksWaitingTermination+0x50>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3304      	adds	r3, #4
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fa57 	bl	8000328 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <prvCheckTasksWaitingTermination+0x54>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <prvCheckTasksWaitingTermination+0x54>)
 8000e82:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <prvCheckTasksWaitingTermination+0x58>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <prvCheckTasksWaitingTermination+0x58>)
 8000e8c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000e8e:	f000 fc19 	bl	80016c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f810 	bl	8000eb8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <prvCheckTasksWaitingTermination+0x58>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e1      	bne.n	8000e64 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000e4 	.word	0x200000e4
 8000eb0:	20000110 	.word	0x20000110
 8000eb4:	200000f8 	.word	0x200000f8

08000eb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fd99 	bl	80019fc <vPortFree>
                vPortFree( pxTCB );
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fd96 	bl	80019fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <prvResetNextTaskUnblockTime+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d104      	bne.n	8000ef0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <prvResetNextTaskUnblockTime+0x34>)
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000eee:	e005      	b.n	8000efc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <prvResetNextTaskUnblockTime+0x30>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <prvResetNextTaskUnblockTime+0x34>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000c8 	.word	0x200000c8
 8000f0c:	20000130 	.word	0x20000130

08000f10 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	613b      	str	r3, [r7, #16]
    }
 8000f36:	bf00      	nop
 8000f38:	e7fe      	b.n	8000f38 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8000f3a:	f000 fb93 	bl	8001664 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000f3e:	4b39      	ldr	r3, [pc, #228]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4413      	add	r3, r2
 8000f46:	3358      	adds	r3, #88	; 0x58
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d024      	beq.n	8000f9a <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8000f50:	4b34      	ldr	r3, [pc, #208]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3314      	adds	r3, #20
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4019      	ands	r1, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3314      	adds	r3, #20
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	3358      	adds	r3, #88	; 0x58
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f82:	2101      	movs	r1, #1
 8000f84:	6a38      	ldr	r0, [r7, #32]
 8000f86:	f000 f949 	bl	800121c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <xTaskGenericNotifyWait+0x118>)
 8000f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000f9a:	f000 fb93 	bl	80016c4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8000f9e:	f000 fb61 	bl	8001664 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	2040      	movs	r0, #64	; 0x40
 8000fb0:	f001 fa82 	bl	80024b8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <xTaskGenericNotifyWait+0xbc>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3314      	adds	r3, #20
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3358      	adds	r3, #88	; 0x58
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d002      	beq.n	8000fe4 <xTaskGenericNotifyWait+0xd4>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e010      	b.n	8001006 <xTaskGenericNotifyWait+0xf6>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3314      	adds	r3, #20
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3314      	adds	r3, #20
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8001002:	2301      	movs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <xTaskGenericNotifyWait+0x114>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	3358      	adds	r3, #88	; 0x58
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001014:	f000 fb56 	bl	80016c4 <vPortExitCritical>

        return xReturn;
 8001018:	697b      	ldr	r3, [r7, #20]
    }
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000038 	.word	0x20000038
 8001028:	e000ed04 	.word	0xe000ed04

0800102c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af02      	add	r7, sp, #8
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800103a:	2301      	movs	r3, #1
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <xTaskGenericNotify+0x2e>
        __asm volatile
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	623b      	str	r3, [r7, #32]
    }
 8001056:	bf00      	nop
 8001058:	e7fe      	b.n	8001058 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10a      	bne.n	8001076 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	61fb      	str	r3, [r7, #28]
    }
 8001072:	bf00      	nop
 8001074:	e7fe      	b.n	8001074 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800107a:	f000 faf3 	bl	8001664 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3314      	adds	r3, #20
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001092:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	3358      	adds	r3, #88	; 0x58
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	3358      	adds	r3, #88	; 0x58
 80010aa:	2202      	movs	r2, #2
 80010ac:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d841      	bhi.n	8001138 <xTaskGenericNotify+0x10c>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <xTaskGenericNotify+0x90>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	08001157 	.word	0x08001157
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010ef 	.word	0x080010ef
 80010c8:	0800110b 	.word	0x0800110b
 80010cc:	0800111b 	.word	0x0800111b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80010d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3314      	adds	r3, #20
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	431a      	orrs	r2, r3
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3314      	adds	r3, #20
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	605a      	str	r2, [r3, #4]
                    break;
 80010ec:	e036      	b.n	800115c <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80010ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3314      	adds	r3, #20
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3314      	adds	r3, #20
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	605a      	str	r2, [r3, #4]
                    break;
 8001108:	e028      	b.n	800115c <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800110a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3314      	adds	r3, #20
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]
                    break;
 8001118:	e020      	b.n	800115c <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800111a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800111e:	2b02      	cmp	r3, #2
 8001120:	d007      	beq.n	8001132 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3314      	adds	r3, #20
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001130:	e014      	b.n	800115c <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001136:	e011      	b.n	800115c <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <xTaskGenericNotify+0x1dc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00c      	beq.n	800115a <xTaskGenericNotify+0x12e>
        __asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	61bb      	str	r3, [r7, #24]
    }
 8001152:	bf00      	nop
 8001154:	e7fe      	b.n	8001154 <xTaskGenericNotify+0x128>
                    break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <xTaskGenericNotify+0x130>

                    break;
 800115a:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fe9c 	bl	8002e9c <SEGGER_SYSVIEW_ShrinkId>
 8001164:	4601      	mov	r1, r0
 8001166:	78fa      	ldrb	r2, [r7, #3]
 8001168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	203e      	movs	r0, #62	; 0x3e
 8001172:	f001 f9a1 	bl	80024b8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117a:	2b01      	cmp	r3, #1
 800117c:	d13d      	bne.n	80011fa <xTaskGenericNotify+0x1ce>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	3304      	adds	r3, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f8d0 	bl	8000328 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fde4 	bl	8002d58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2201      	movs	r2, #1
 8001196:	409a      	lsls	r2, r3
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <xTaskGenericNotify+0x1e0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <xTaskGenericNotify+0x1e0>)
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <xTaskGenericNotify+0x1e4>)
 80011b0:	441a      	add	r2, r3
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	3304      	adds	r3, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f7ff f858 	bl	800026e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00a      	beq.n	80011dc <xTaskGenericNotify+0x1b0>
        __asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	617b      	str	r3, [r7, #20]
    }
 80011d8:	bf00      	nop
 80011da:	e7fe      	b.n	80011da <xTaskGenericNotify+0x1ae>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <xTaskGenericNotify+0x1e8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d907      	bls.n	80011fa <xTaskGenericNotify+0x1ce>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <xTaskGenericNotify+0x1ec>)
 80011ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80011fa:	f000 fa63 	bl	80016c4 <vPortExitCritical>

        return xReturn;
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000114 	.word	0x20000114
 800120c:	20000118 	.word	0x20000118
 8001210:	2000003c 	.word	0x2000003c
 8001214:	20000038 	.word	0x20000038
 8001218:	e000ed04 	.word	0xe000ed04

0800121c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3304      	adds	r3, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f878 	bl	8000328 <uxListRemove>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2201      	movs	r2, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4013      	ands	r3, r2
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001254:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d110      	bne.n	8001280 <prvAddCurrentTaskToDelayedList+0x64>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00d      	beq.n	8001280 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	211b      	movs	r1, #27
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fdb6 	bl	8002ddc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4820      	ldr	r0, [pc, #128]	; (80012fc <prvAddCurrentTaskToDelayedList+0xe0>)
 800127a:	f7fe fff8 	bl	800026e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800127e:	e032      	b.n	80012e6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d20f      	bcs.n	80012b8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fd9c 	bl	8002ddc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <prvAddCurrentTaskToDelayedList+0xe4>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3304      	adds	r3, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4610      	mov	r0, r2
 80012b2:	f7ff f800 	bl	80002b6 <vListInsert>
}
 80012b6:	e016      	b.n	80012e6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2104      	movs	r1, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fd8c 	bl	8002ddc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <prvAddCurrentTaskToDelayedList+0xe8>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3304      	adds	r3, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7fe fff0 	bl	80002b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <prvAddCurrentTaskToDelayedList+0xec>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d202      	bcs.n	80012e6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <prvAddCurrentTaskToDelayedList+0xec>)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000114 	.word	0x20000114
 80012f4:	20000038 	.word	0x20000038
 80012f8:	20000118 	.word	0x20000118
 80012fc:	200000fc 	.word	0x200000fc
 8001300:	200000cc 	.word	0x200000cc
 8001304:	200000c8 	.word	0x200000c8
 8001308:	20000130 	.word	0x20000130

0800130c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b04      	subs	r3, #4
 800131c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001324:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b04      	subs	r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f023 0201 	bic.w	r2, r3, #1
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b04      	subs	r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800133c:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <pxPortInitialiseStack+0x64>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b14      	subs	r3, #20
 8001346:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3b04      	subs	r3, #4
 8001352:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f06f 0202 	mvn.w	r2, #2
 800135a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3b20      	subs	r3, #32
 8001360:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	08001375 	.word	0x08001375

08001374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <prvTaskExitError+0x54>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001386:	d00a      	beq.n	800139e <prvTaskExitError+0x2a>
        __asm volatile
 8001388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138c:	f383 8811 	msr	BASEPRI, r3
 8001390:	f3bf 8f6f 	isb	sy
 8001394:	f3bf 8f4f 	dsb	sy
 8001398:	60fb      	str	r3, [r7, #12]
    }
 800139a:	bf00      	nop
 800139c:	e7fe      	b.n	800139c <prvTaskExitError+0x28>
        __asm volatile
 800139e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a2:	f383 8811 	msr	BASEPRI, r3
 80013a6:	f3bf 8f6f 	isb	sy
 80013aa:	f3bf 8f4f 	dsb	sy
 80013ae:	60bb      	str	r3, [r7, #8]
    }
 80013b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80013b2:	bf00      	nop
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0fc      	beq.n	80013b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	2000000c 	.word	0x2000000c
 80013cc:	00000000 	.word	0x00000000

080013d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <pxCurrentTCBConst2>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	6808      	ldr	r0, [r1, #0]
 80013d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013da:	f380 8809 	msr	PSP, r0
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f380 8811 	msr	BASEPRI, r0
 80013ea:	4770      	bx	lr
 80013ec:	f3af 8000 	nop.w

080013f0 <pxCurrentTCBConst2>:
 80013f0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop

080013f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <prvPortStartFirstTask+0x24>)
 80013fa:	6800      	ldr	r0, [r0, #0]
 80013fc:	6800      	ldr	r0, [r0, #0]
 80013fe:	f380 8808 	msr	MSP, r0
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f380 8814 	msr	CONTROL, r0
 800140a:	b662      	cpsie	i
 800140c:	b661      	cpsie	f
 800140e:	f3bf 8f4f 	dsb	sy
 8001412:	f3bf 8f6f 	isb	sy
 8001416:	df00      	svc	0
 8001418:	bf00      	nop
 800141a:	0000      	.short	0x0000
 800141c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop

08001424 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <xPortStartScheduler+0x120>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a46      	ldr	r2, [pc, #280]	; (8001548 <xPortStartScheduler+0x124>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10a      	bne.n	800144a <xPortStartScheduler+0x26>
        __asm volatile
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	f383 8811 	msr	BASEPRI, r3
 800143c:	f3bf 8f6f 	isb	sy
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	613b      	str	r3, [r7, #16]
    }
 8001446:	bf00      	nop
 8001448:	e7fe      	b.n	8001448 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <xPortStartScheduler+0x120>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <xPortStartScheduler+0x128>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d10a      	bne.n	800146a <xPortStartScheduler+0x46>
        __asm volatile
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	f383 8811 	msr	BASEPRI, r3
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	60fb      	str	r3, [r7, #12]
    }
 8001466:	bf00      	nop
 8001468:	e7fe      	b.n	8001468 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <xPortStartScheduler+0x12c>)
 800146c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	22ff      	movs	r2, #255	; 0xff
 800147a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <xPortStartScheduler+0x130>)
 8001490:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <xPortStartScheduler+0x134>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001498:	e009      	b.n	80014ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <xPortStartScheduler+0x134>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <xPortStartScheduler+0x134>)
 80014a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d0ef      	beq.n	800149a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <xPortStartScheduler+0x134>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00a      	beq.n	80014dc <xPortStartScheduler+0xb8>
        __asm volatile
 80014c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	60bb      	str	r3, [r7, #8]
    }
 80014d8:	bf00      	nop
 80014da:	e7fe      	b.n	80014da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <xPortStartScheduler+0x134>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <xPortStartScheduler+0x134>)
 80014e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <xPortStartScheduler+0x134>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <xPortStartScheduler+0x134>)
 80014f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <xPortStartScheduler+0x138>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <xPortStartScheduler+0x138>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <xPortStartScheduler+0x138>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <xPortStartScheduler+0x138>)
 800150c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001510:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001512:	f000 f963 	bl	80017dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <xPortStartScheduler+0x13c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800151c:	f000 f982 	bl	8001824 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <xPortStartScheduler+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <xPortStartScheduler+0x140>)
 8001526:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800152a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800152c:	f7ff ff64 	bl	80013f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001530:	f7ff fbd0 	bl	8000cd4 <vTaskSwitchContext>
    prvTaskExitError();
 8001534:	f7ff ff1e 	bl	8001374 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	410fc271 	.word	0x410fc271
 800154c:	410fc270 	.word	0x410fc270
 8001550:	e000e400 	.word	0xe000e400
 8001554:	2000013c 	.word	0x2000013c
 8001558:	20000140 	.word	0x20000140
 800155c:	e000ed20 	.word	0xe000ed20
 8001560:	2000000c 	.word	0x2000000c
 8001564:	e000ef34 	.word	0xe000ef34

08001568 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <vInitPrioGroupValue+0xe4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a37      	ldr	r2, [pc, #220]	; (8001650 <vInitPrioGroupValue+0xe8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d10a      	bne.n	800158e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	613b      	str	r3, [r7, #16]
    }
 800158a:	bf00      	nop
 800158c:	e7fe      	b.n	800158c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <vInitPrioGroupValue+0xe4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <vInitPrioGroupValue+0xec>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d10a      	bne.n	80015ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8001598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159c:	f383 8811 	msr	BASEPRI, r3
 80015a0:	f3bf 8f6f 	isb	sy
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	60fb      	str	r3, [r7, #12]
    }
 80015aa:	bf00      	nop
 80015ac:	e7fe      	b.n	80015ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <vInitPrioGroupValue+0xf0>)
 80015b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <vInitPrioGroupValue+0xf4>)
 80015d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <vInitPrioGroupValue+0xf8>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015dc:	e009      	b.n	80015f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <vInitPrioGroupValue+0xf8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <vInitPrioGroupValue+0xf8>)
 80015e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	d0ef      	beq.n	80015de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <vInitPrioGroupValue+0xf8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00a      	beq.n	8001620 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	60bb      	str	r3, [r7, #8]
    }
 800161c:	bf00      	nop
 800161e:	e7fe      	b.n	800161e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <vInitPrioGroupValue+0xf8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <vInitPrioGroupValue+0xf8>)
 8001628:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <vInitPrioGroupValue+0xf8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <vInitPrioGroupValue+0xf8>)
 8001634:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	410fc271 	.word	0x410fc271
 8001654:	410fc270 	.word	0x410fc270
 8001658:	e000e400 	.word	0xe000e400
 800165c:	2000013c 	.word	0x2000013c
 8001660:	20000140 	.word	0x20000140

08001664 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
        __asm volatile
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	607b      	str	r3, [r7, #4]
    }
 800167c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <vPortEnterCritical+0x58>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <vPortEnterCritical+0x58>)
 8001686:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <vPortEnterCritical+0x58>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10f      	bne.n	80016b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <vPortEnterCritical+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	603b      	str	r3, [r7, #0]
    }
 80016ac:	bf00      	nop
 80016ae:	e7fe      	b.n	80016ae <vPortEnterCritical+0x4a>
    }
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	e000ed04 	.word	0xe000ed04

080016c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <vPortExitCritical+0x50>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10a      	bne.n	80016e8 <vPortExitCritical+0x24>
        __asm volatile
 80016d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	607b      	str	r3, [r7, #4]
    }
 80016e4:	bf00      	nop
 80016e6:	e7fe      	b.n	80016e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <vPortExitCritical+0x50>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <vPortExitCritical+0x50>)
 80016f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <vPortExitCritical+0x50>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <vPortExitCritical+0x42>
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001704:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
	...

08001720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001720:	f3ef 8009 	mrs	r0, PSP
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <pxCurrentTCBConst>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	f01e 0f10 	tst.w	lr, #16
 8001730:	bf08      	it	eq
 8001732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173a:	6010      	str	r0, [r2, #0]
 800173c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001744:	f380 8811 	msr	BASEPRI, r0
 8001748:	f3bf 8f4f 	dsb	sy
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f7ff fac0 	bl	8000cd4 <vTaskSwitchContext>
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	f380 8811 	msr	BASEPRI, r0
 800175c:	bc09      	pop	{r0, r3}
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	6808      	ldr	r0, [r1, #0]
 8001762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001766:	f01e 0f10 	tst.w	lr, #16
 800176a:	bf08      	it	eq
 800176c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001770:	f380 8809 	msr	PSP, r0
 8001774:	f3bf 8f6f 	isb	sy
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w

08001780 <pxCurrentTCBConst>:
 8001780:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop

08001788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
        __asm volatile
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
 800179e:	607b      	str	r3, [r7, #4]
    }
 80017a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80017a2:	f001 f9bf 	bl	8002b24 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80017a6:	f7ff f9d9 	bl	8000b5c <xTaskIncrementTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80017b0:	f001 fa16 	bl	8002be0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SysTick_Handler+0x50>)
 80017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e001      	b.n	80017c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80017be:	f001 f9f3 	bl	8002ba8 <SEGGER_SYSVIEW_RecordExitISR>
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f383 8811 	msr	BASEPRI, r3
    }
 80017cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <vPortSetupTimerInterrupt+0x34>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <vPortSetupTimerInterrupt+0x38>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <vPortSetupTimerInterrupt+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <vPortSetupTimerInterrupt+0x40>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <vPortSetupTimerInterrupt+0x44>)
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <vPortSetupTimerInterrupt+0x34>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010
 8001814:	e000e018 	.word	0xe000e018
 8001818:	20000010 	.word	0x20000010
 800181c:	10624dd3 	.word	0x10624dd3
 8001820:	e000e014 	.word	0xe000e014

08001824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001834 <vPortEnableVFP+0x10>
 8001828:	6801      	ldr	r1, [r0, #0]
 800182a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800182e:	6001      	str	r1, [r0, #0]
 8001830:	4770      	bx	lr
 8001832:	0000      	.short	0x0000
 8001834:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop

0800183c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001848:	f7ff f8da 	bl	8000a00 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800184c:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <pvPortMalloc+0x1a8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001854:	f000 f934 	bl	8001ac0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <pvPortMalloc+0x1ac>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80a7 	bne.w	80019b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02d      	beq.n	80018c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800186c:	2208      	movs	r2, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d227      	bcs.n	80018c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001878:	2208      	movs	r2, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	2b00      	cmp	r3, #0
 8001888:	d021      	beq.n	80018ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f023 0307 	bic.w	r3, r3, #7
 8001890:	3308      	adds	r3, #8
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d214      	bcs.n	80018c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f023 0307 	bic.w	r3, r3, #7
 800189e:	3308      	adds	r3, #8
 80018a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <pvPortMalloc+0x92>
        __asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	617b      	str	r3, [r7, #20]
    }
 80018be:	bf00      	nop
 80018c0:	e7fe      	b.n	80018c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018c6:	e002      	b.n	80018ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	e000      	b.n	80018d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06e      	beq.n	80019b4 <pvPortMalloc+0x178>
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <pvPortMalloc+0x1b0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d869      	bhi.n	80019b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <pvPortMalloc+0x1b4>)
 80018e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <pvPortMalloc+0x1b4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018ea:	e004      	b.n	80018f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d903      	bls.n	8001908 <pvPortMalloc+0xcc>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f1      	bne.n	80018ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <pvPortMalloc+0x1a8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	429a      	cmp	r2, r3
 8001910:	d050      	beq.n	80019b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2208      	movs	r2, #8
 8001918:	4413      	add	r3, r2
 800191a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad2      	subs	r2, r2, r3
 800192c:	2308      	movs	r3, #8
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	429a      	cmp	r2, r3
 8001932:	d91f      	bls.n	8001974 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <pvPortMalloc+0x120>
        __asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	613b      	str	r3, [r7, #16]
    }
 8001958:	bf00      	nop
 800195a:	e7fe      	b.n	800195a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800196e:	69b8      	ldr	r0, [r7, #24]
 8001970:	f000 f908 	bl	8001b84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <pvPortMalloc+0x1b0>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <pvPortMalloc+0x1b0>)
 8001980:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <pvPortMalloc+0x1b0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <pvPortMalloc+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d203      	bcs.n	8001996 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <pvPortMalloc+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <pvPortMalloc+0x1b8>)
 8001994:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <pvPortMalloc+0x1ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <pvPortMalloc+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <pvPortMalloc+0x1bc>)
 80019b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019b4:	f7ff f832 	bl	8000a1c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <pvPortMalloc+0x19c>
        __asm volatile
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	60fb      	str	r3, [r7, #12]
    }
 80019d4:	bf00      	nop
 80019d6:	e7fe      	b.n	80019d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80019d8:	69fb      	ldr	r3, [r7, #28]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000154c 	.word	0x2000154c
 80019e8:	20001560 	.word	0x20001560
 80019ec:	20001550 	.word	0x20001550
 80019f0:	20001544 	.word	0x20001544
 80019f4:	20001554 	.word	0x20001554
 80019f8:	20001558 	.word	0x20001558

080019fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04d      	beq.n	8001aaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	425b      	negs	r3, r3
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <vPortFree+0xb8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <vPortFree+0x44>
        __asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	60fb      	str	r3, [r7, #12]
    }
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <vPortFree+0x62>
        __asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	60bb      	str	r3, [r7, #8]
    }
 8001a5a:	bf00      	nop
 8001a5c:	e7fe      	b.n	8001a5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <vPortFree+0xb8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01e      	beq.n	8001aaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <vPortFree+0xb8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001a84:	f7fe ffbc 	bl	8000a00 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <vPortFree+0xbc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <vPortFree+0xbc>)
 8001a94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a96:	6938      	ldr	r0, [r7, #16]
 8001a98:	f000 f874 	bl	8001b84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <vPortFree+0xc0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <vPortFree+0xc0>)
 8001aa4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001aa6:	f7fe ffb9 	bl	8000a1c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20001560 	.word	0x20001560
 8001ab8:	20001550 	.word	0x20001550
 8001abc:	2000155c 	.word	0x2000155c

08001ac0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ac6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <prvHeapInit+0xac>)
 8001ace:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00c      	beq.n	8001af4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3307      	adds	r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <prvHeapInit+0xac>)
 8001af0:	4413      	add	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <prvHeapInit+0xb0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <prvHeapInit+0xb0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <prvHeapInit+0xb4>)
 8001b20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <prvHeapInit+0xb4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <prvHeapInit+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	1ad2      	subs	r2, r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <prvHeapInit+0xb4>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <prvHeapInit+0xb8>)
 8001b4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <prvHeapInit+0xbc>)
 8001b56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <prvHeapInit+0xc0>)
 8001b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000144 	.word	0x20000144
 8001b70:	20001544 	.word	0x20001544
 8001b74:	2000154c 	.word	0x2000154c
 8001b78:	20001554 	.word	0x20001554
 8001b7c:	20001550 	.word	0x20001550
 8001b80:	20001560 	.word	0x20001560

08001b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <prvInsertBlockIntoFreeList+0xac>)
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e002      	b.n	8001b98 <prvInsertBlockIntoFreeList+0x14>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d8f7      	bhi.n	8001b92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d108      	bne.n	8001bc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d118      	bne.n	8001c0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00d      	beq.n	8001c02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e008      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e003      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d002      	beq.n	8001c22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20001544 	.word	0x20001544
 8001c34:	2000154c 	.word	0x2000154c

08001c38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001c46:	2205      	movs	r2, #5
 8001c48:	492b      	ldr	r1, [pc, #172]	; (8001cf8 <SYSVIEW_AddTask+0xc0>)
 8001c4a:	68b8      	ldr	r0, [r7, #8]
 8001c4c:	f003 ff66 	bl	8005b1c <memcmp>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d04b      	beq.n	8001cee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b07      	cmp	r3, #7
 8001c5c:	d903      	bls.n	8001c66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001c5e:	4828      	ldr	r0, [pc, #160]	; (8001d00 <SYSVIEW_AddTask+0xc8>)
 8001c60:	f001 fa08 	bl	8003074 <SEGGER_SYSVIEW_Warn>
    return;
 8001c64:	e044      	b.n	8001cf0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4926      	ldr	r1, [pc, #152]	; (8001d04 <SYSVIEW_AddTask+0xcc>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4921      	ldr	r1, [pc, #132]	; (8001d04 <SYSVIEW_AddTask+0xcc>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	491b      	ldr	r1, [pc, #108]	; (8001d04 <SYSVIEW_AddTask+0xcc>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4916      	ldr	r1, [pc, #88]	; (8001d04 <SYSVIEW_AddTask+0xcc>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4910      	ldr	r1, [pc, #64]	; (8001d04 <SYSVIEW_AddTask+0xcc>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3310      	adds	r3, #16
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <SYSVIEW_AddTask+0xc4>)
 8001cda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f80e 	bl	8001d08 <SYSVIEW_SendTaskInfo>
 8001cec:	e000      	b.n	8001cf0 <SYSVIEW_AddTask+0xb8>
    return;
 8001cee:	bf00      	nop

}
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08005b88 	.word	0x08005b88
 8001cfc:	20001604 	.word	0x20001604
 8001d00:	08005b90 	.word	0x08005b90
 8001d04:	20001564 	.word	0x20001564

08001d08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2214      	movs	r2, #20
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 ff1a 	bl	8005b58 <memset>
  TaskInfo.TaskID     = TaskID;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fdc7 	bl	80028d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <_DoInit+0x98>)
 8001d54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <_DoInit+0x9c>)
 8001d66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <_DoInit+0xa0>)
 8001d6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <_DoInit+0x9c>)
 8001d8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <_DoInit+0xa4>)
 8001d92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2210      	movs	r2, #16
 8001d98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3307      	adds	r3, #7
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <_DoInit+0xa8>)
 8001db2:	6810      	ldr	r0, [r2, #0]
 8001db4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001db6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <_DoInit+0xac>)
 8001dbe:	6810      	ldr	r0, [r2, #0]
 8001dc0:	6018      	str	r0, [r3, #0]
 8001dc2:	8891      	ldrh	r1, [r2, #4]
 8001dc4:	7992      	ldrb	r2, [r2, #6]
 8001dc6:	8099      	strh	r1, [r3, #4]
 8001dc8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001dca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001dd4:	f3bf 8f5f 	dmb	sy
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20001608 	.word	0x20001608
 8001de8:	08005be0 	.word	0x08005be0
 8001dec:	200016b0 	.word	0x200016b0
 8001df0:	20001ab0 	.word	0x20001ab0
 8001df4:	08005bec 	.word	0x08005bec
 8001df8:	08005bf0 	.word	0x08005bf0

08001dfc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <SEGGER_RTT_ReadNoLock+0x108>)
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <SEGGER_RTT_ReadNoLock+0x1e>
 8001e16:	f7ff ff99 	bl	8001d4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	3360      	adds	r3, #96	; 0x60
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <SEGGER_RTT_ReadNoLock+0x108>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d92b      	bls.n	8001ea0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4293      	cmp	r3, r2
 8001e58:	bf28      	it	cs
 8001e5a:	4613      	movcs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	4413      	add	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e6e:	f003 fe65 	bl	8005b3c <memcpy>
    NumBytesRead += NumBytesRem;
 8001e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4413      	add	r3, r2
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4413      	add	r3, r2
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4413      	add	r3, r2
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d101      	bne.n	8001ea0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf28      	it	cs
 8001eb0:	4613      	movcs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d019      	beq.n	8001eee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	4413      	add	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eca:	f003 fe37 	bl	8005b3c <memcpy>
    NumBytesRead += NumBytesRem;
 8001ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4413      	add	r3, r2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3730      	adds	r7, #48	; 0x30
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20001608 	.word	0x20001608

08001f08 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001f18:	e002      	b.n	8001f20 <_EncodeStr+0x18>
    Len++;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f6      	bne.n	8001f1a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d901      	bls.n	8001f38 <_EncodeStr+0x30>
    Len = Limit;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2bfe      	cmp	r3, #254	; 0xfe
 8001f3c:	d806      	bhi.n	8001f4c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e011      	b.n	8001f70 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60fa      	str	r2, [r7, #12]
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60fa      	str	r2, [r7, #12]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	0a19      	lsrs	r1, r3, #8
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	60fa      	str	r2, [r7, #12]
 8001f6c:	b2ca      	uxtb	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001f74:	e00a      	b.n	8001f8c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	1c53      	adds	r3, r2, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	60f9      	str	r1, [r7, #12]
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	701a      	strb	r2, [r3, #0]
    n++;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3f0      	bcc.n	8001f76 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <_HandleIncomingPacket+0xe0>)
 8001fc4:	7e1b      	ldrb	r3, [r3, #24]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	1cfb      	adds	r3, r7, #3
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff ff15 	bl	8001dfc <SEGGER_RTT_ReadNoLock>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	dd54      	ble.n	8002086 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	d032      	beq.n	8002048 <_HandleIncomingPacket+0x8c>
 8001fe2:	2b80      	cmp	r3, #128	; 0x80
 8001fe4:	dc42      	bgt.n	800206c <_HandleIncomingPacket+0xb0>
 8001fe6:	2b07      	cmp	r3, #7
 8001fe8:	dc16      	bgt.n	8002018 <_HandleIncomingPacket+0x5c>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	dd3e      	ble.n	800206c <_HandleIncomingPacket+0xb0>
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	2b06      	cmp	r3, #6
 8001ff2:	d83b      	bhi.n	800206c <_HandleIncomingPacket+0xb0>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <_HandleIncomingPacket+0x40>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800201f 	.word	0x0800201f
 8002000:	08002025 	.word	0x08002025
 8002004:	0800202b 	.word	0x0800202b
 8002008:	08002031 	.word	0x08002031
 800200c:	08002037 	.word	0x08002037
 8002010:	0800203d 	.word	0x0800203d
 8002014:	08002043 	.word	0x08002043
 8002018:	2b7f      	cmp	r3, #127	; 0x7f
 800201a:	d036      	beq.n	800208a <_HandleIncomingPacket+0xce>
 800201c:	e026      	b.n	800206c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800201e:	f000 fadd 	bl	80025dc <SEGGER_SYSVIEW_Start>
      break;
 8002022:	e037      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002024:	f000 fb94 	bl	8002750 <SEGGER_SYSVIEW_Stop>
      break;
 8002028:	e034      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800202a:	f000 fd49 	bl	8002ac0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800202e:	e031      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002030:	f000 fd32 	bl	8002a98 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002034:	e02e      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002036:	f000 fbb1 	bl	800279c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800203a:	e02b      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800203c:	f000 ffdc 	bl	8002ff8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002040:	e028      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002042:	f000 ffbb 	bl	8002fbc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002046:	e025      	b.n	8002094 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <_HandleIncomingPacket+0xe0>)
 800204a:	7e1b      	ldrb	r3, [r3, #24]
 800204c:	4618      	mov	r0, r3
 800204e:	1cfb      	adds	r3, r7, #3
 8002050:	2201      	movs	r2, #1
 8002052:	4619      	mov	r1, r3
 8002054:	f7ff fed2 	bl	8001dfc <SEGGER_RTT_ReadNoLock>
 8002058:	4603      	mov	r3, r0
 800205a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dd15      	ble.n	800208e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 ff29 	bl	8002ebc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800206a:	e010      	b.n	800208e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	b25b      	sxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0e      	bge.n	8002092 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <_HandleIncomingPacket+0xe0>)
 8002076:	7e1b      	ldrb	r3, [r3, #24]
 8002078:	4618      	mov	r0, r3
 800207a:	1cfb      	adds	r3, r7, #3
 800207c:	2201      	movs	r2, #1
 800207e:	4619      	mov	r1, r3
 8002080:	f7ff febc 	bl	8001dfc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002084:	e005      	b.n	8002092 <_HandleIncomingPacket+0xd6>
    }
  }
 8002086:	bf00      	nop
 8002088:	e004      	b.n	8002094 <_HandleIncomingPacket+0xd8>
      break;
 800208a:	bf00      	nop
 800208c:	e002      	b.n	8002094 <_HandleIncomingPacket+0xd8>
      break;
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <_HandleIncomingPacket+0xd8>
      break;
 8002092:	bf00      	nop
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20001ac0 	.word	0x20001ac0

080020a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80020a6:	2301      	movs	r3, #1
 80020a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <_TrySendOverflowPacket+0xdc>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ba:	e00b      	b.n	80020d4 <_TrySendOverflowPacket+0x34>
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80020c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	09db      	lsrs	r3, r3, #7
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	2b7f      	cmp	r3, #127	; 0x7f
 80020d8:	d8f0      	bhi.n	80020bc <_TrySendOverflowPacket+0x1c>
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <_TrySendOverflowPacket+0xe0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <_TrySendOverflowPacket+0xdc>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	623b      	str	r3, [r7, #32]
 8002102:	e00b      	b.n	800211c <_TrySendOverflowPacket+0x7c>
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	6279      	str	r1, [r7, #36]	; 0x24
 800210e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	09db      	lsrs	r3, r3, #7
 800211a:	623b      	str	r3, [r7, #32]
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d8f0      	bhi.n	8002104 <_TrySendOverflowPacket+0x64>
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	627a      	str	r2, [r7, #36]	; 0x24
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <_TrySendOverflowPacket+0xdc>)
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	4618      	mov	r0, r3
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	461a      	mov	r2, r3
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe f81c 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002148:	4603      	mov	r3, r0
 800214a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <_TrySendOverflowPacket+0xdc>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_TrySendOverflowPacket+0xdc>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <_TrySendOverflowPacket+0xdc>)
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e004      	b.n	8002170 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <_TrySendOverflowPacket+0xdc>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <_TrySendOverflowPacket+0xdc>)
 800216e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002170:	693b      	ldr	r3, [r7, #16]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3730      	adds	r7, #48	; 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20001ac0 	.word	0x20001ac0
 8002180:	e0001004 	.word	0xe0001004

08002184 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002190:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <_SendPacket+0x1c0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d010      	beq.n	80021ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <_SendPacket+0x1c0>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a3 	beq.w	80022e8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80021a2:	4b68      	ldr	r3, [pc, #416]	; (8002344 <_SendPacket+0x1c0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d109      	bne.n	80021be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80021aa:	f7ff ff79 	bl	80020a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80021ae:	4b65      	ldr	r3, [pc, #404]	; (8002344 <_SendPacket+0x1c0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 809a 	bne.w	80022ec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80021b8:	e001      	b.n	80021be <_SendPacket+0x3a>
    goto Send;
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <_SendPacket+0x3c>
Send:
 80021be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b1f      	cmp	r3, #31
 80021c4:	d809      	bhi.n	80021da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <_SendPacket+0x1c0>)
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f040 808b 	bne.w	80022f0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b17      	cmp	r3, #23
 80021de:	d807      	bhi.n	80021f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e03d      	b.n	800226c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b7f      	cmp	r3, #127	; 0x7f
 80021fc:	d912      	bls.n	8002224 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	09da      	lsrs	r2, r3, #7
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	3a01      	subs	r2, #1
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e006      	b.n	8002232 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3b01      	subs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b7f      	cmp	r3, #127	; 0x7f
 8002236:	d912      	bls.n	800225e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	09da      	lsrs	r2, r3, #7
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	3a01      	subs	r2, #1
 8002250:	60fa      	str	r2, [r7, #12]
 8002252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e006      	b.n	800226c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3b01      	subs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <_SendPacket+0x1c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <_SendPacket+0x1c0>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	e00b      	b.n	800229e <_SendPacket+0x11a>
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	6279      	str	r1, [r7, #36]	; 0x24
 8002290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	09db      	lsrs	r3, r3, #7
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2b7f      	cmp	r3, #127	; 0x7f
 80022a2:	d8f0      	bhi.n	8002286 <_SendPacket+0x102>
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	627a      	str	r2, [r7, #36]	; 0x24
 80022aa:	6a3a      	ldr	r2, [r7, #32]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <_SendPacket+0x1c0>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	4618      	mov	r0, r3
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	f7fd ff5c 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80022c8:	4603      	mov	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <_SendPacket+0x1c0>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	60d3      	str	r3, [r2, #12]
 80022d8:	e00b      	b.n	80022f2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <_SendPacket+0x1c0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <_SendPacket+0x1c0>)
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e004      	b.n	80022f2 <_SendPacket+0x16e>
    goto SendDone;
 80022e8:	bf00      	nop
 80022ea:	e002      	b.n	80022f2 <_SendPacket+0x16e>
      goto SendDone;
 80022ec:	bf00      	nop
 80022ee:	e000      	b.n	80022f2 <_SendPacket+0x16e>
      goto SendDone;
 80022f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <_SendPacket+0x1c0>)
 80022f4:	7e1b      	ldrb	r3, [r3, #24]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_SendPacket+0x1c8>)
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	336c      	adds	r3, #108	; 0x6c
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <_SendPacket+0x1c0>)
 800230a:	7e1b      	ldrb	r3, [r3, #24]
 800230c:	4618      	mov	r0, r3
 800230e:	490f      	ldr	r1, [pc, #60]	; (800234c <_SendPacket+0x1c8>)
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3370      	adds	r3, #112	; 0x70
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d00b      	beq.n	800233a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <_SendPacket+0x1c0>)
 8002324:	789b      	ldrb	r3, [r3, #2]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <_SendPacket+0x1c0>)
 800232c:	2201      	movs	r2, #1
 800232e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002330:	f7ff fe44 	bl	8001fbc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <_SendPacket+0x1c0>)
 8002336:	2200      	movs	r2, #0
 8002338:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20001ac0 	.word	0x20001ac0
 8002348:	e0001004 	.word	0xe0001004
 800234c:	20001608 	.word	0x20001608

08002350 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002358:	f3ef 8311 	mrs	r3, BASEPRI
 800235c:	f04f 0120 	mov.w	r1, #32
 8002360:	f381 8811 	msr	BASEPRI, r1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002368:	f7ff fe1b 	bl	8001fa2 <_PreparePacket>
 800236c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7ff ff06 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f383 8811 	msr	BASEPRI, r3
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20001af0 	.word	0x20001af0

0800238c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002396:	f3ef 8311 	mrs	r3, BASEPRI
 800239a:	f04f 0120 	mov.w	r1, #32
 800239e:	f381 8811 	msr	BASEPRI, r1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	4816      	ldr	r0, [pc, #88]	; (8002400 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80023a6:	f7ff fdfc 	bl	8001fa2 <_PreparePacket>
 80023aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e00b      	b.n	80023d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	1c59      	adds	r1, r3, #1
 80023c2:	61f9      	str	r1, [r7, #28]
 80023c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	09db      	lsrs	r3, r3, #7
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b7f      	cmp	r3, #127	; 0x7f
 80023d6:	d8f0      	bhi.n	80023ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	61fa      	str	r2, [r7, #28]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	6938      	ldr	r0, [r7, #16]
 80023ee:	f7ff fec9 	bl	8002184 <_SendPacket>
  RECORD_END();
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f383 8811 	msr	BASEPRI, r3
}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20001af0 	.word	0x20001af0

08002404 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002410:	f3ef 8311 	mrs	r3, BASEPRI
 8002414:	f04f 0120 	mov.w	r1, #32
 8002418:	f381 8811 	msr	BASEPRI, r1
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	4825      	ldr	r0, [pc, #148]	; (80024b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002420:	f7ff fdbf 	bl	8001fa2 <_PreparePacket>
 8002424:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
 8002432:	e00b      	b.n	800244c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	1c59      	adds	r1, r3, #1
 800243c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800243e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	09db      	lsrs	r3, r3, #7
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	2b7f      	cmp	r3, #127	; 0x7f
 8002450:	d8f0      	bhi.n	8002434 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	e00b      	b.n	8002484 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1c59      	adds	r1, r3, #1
 8002474:	6279      	str	r1, [r7, #36]	; 0x24
 8002476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	09db      	lsrs	r3, r3, #7
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b7f      	cmp	r3, #127	; 0x7f
 8002488:	d8f0      	bhi.n	800246c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	627a      	str	r2, [r7, #36]	; 0x24
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	6979      	ldr	r1, [r7, #20]
 800249e:	69b8      	ldr	r0, [r7, #24]
 80024a0:	f7ff fe70 	bl	8002184 <_SendPacket>
  RECORD_END();
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f383 8811 	msr	BASEPRI, r3
}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20001af0 	.word	0x20001af0

080024b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80024c6:	f3ef 8311 	mrs	r3, BASEPRI
 80024ca:	f04f 0120 	mov.w	r1, #32
 80024ce:	f381 8811 	msr	BASEPRI, r1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	4840      	ldr	r0, [pc, #256]	; (80025d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80024d6:	f7ff fd64 	bl	8001fa2 <_PreparePacket>
 80024da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	e00b      	b.n	8002502 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80024f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	09db      	lsrs	r3, r3, #7
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	2b7f      	cmp	r3, #127	; 0x7f
 8002506:	d8f0      	bhi.n	80024ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800250e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	e00b      	b.n	800253a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	b2da      	uxtb	r2, r3
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	1c59      	adds	r1, r3, #1
 800252a:	6379      	str	r1, [r7, #52]	; 0x34
 800252c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	09db      	lsrs	r3, r3, #7
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	2b7f      	cmp	r3, #127	; 0x7f
 800253e:	d8f0      	bhi.n	8002522 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	637a      	str	r2, [r7, #52]	; 0x34
 8002546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
 8002558:	e00b      	b.n	8002572 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	b2da      	uxtb	r2, r3
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	09db      	lsrs	r3, r3, #7
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	2b7f      	cmp	r3, #127	; 0x7f
 8002576:	d8f0      	bhi.n	800255a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800257e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	e00b      	b.n	80025aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	6279      	str	r1, [r7, #36]	; 0x24
 800259c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	09db      	lsrs	r3, r3, #7
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2b7f      	cmp	r3, #127	; 0x7f
 80025ae:	d8f0      	bhi.n	8002592 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	627a      	str	r2, [r7, #36]	; 0x24
 80025b6:	6a3a      	ldr	r2, [r7, #32]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6979      	ldr	r1, [r7, #20]
 80025c4:	69b8      	ldr	r0, [r7, #24]
 80025c6:	f7ff fddd 	bl	8002184 <_SendPacket>
  RECORD_END();
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f383 8811 	msr	BASEPRI, r3
}
 80025d0:	bf00      	nop
 80025d2:	3740      	adds	r7, #64	; 0x40
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20001af0 	.word	0x20001af0

080025dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80025e2:	4b58      	ldr	r3, [pc, #352]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80025e8:	f3ef 8311 	mrs	r3, BASEPRI
 80025ec:	f04f 0120 	mov.w	r1, #32
 80025f0:	f381 8811 	msr	BASEPRI, r1
 80025f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	220a      	movs	r2, #10
 80025fc:	4952      	ldr	r1, [pc, #328]	; (8002748 <SEGGER_SYSVIEW_Start+0x16c>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fdbe 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800260a:	200a      	movs	r0, #10
 800260c:	f7ff fea0 	bl	8002350 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002610:	f3ef 8311 	mrs	r3, BASEPRI
 8002614:	f04f 0120 	mov.w	r1, #32
 8002618:	f381 8811 	msr	BASEPRI, r1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	484b      	ldr	r0, [pc, #300]	; (800274c <SEGGER_SYSVIEW_Start+0x170>)
 8002620:	f7ff fcbf 	bl	8001fa2 <_PreparePacket>
 8002624:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	e00b      	b.n	800264e <SEGGER_SYSVIEW_Start+0x72>
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	1c59      	adds	r1, r3, #1
 800263e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	09db      	lsrs	r3, r3, #7
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	2b7f      	cmp	r3, #127	; 0x7f
 8002652:	d8f0      	bhi.n	8002636 <SEGGER_SYSVIEW_Start+0x5a>
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800265a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	e00b      	b.n	8002688 <SEGGER_SYSVIEW_Start+0xac>
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	6279      	str	r1, [r7, #36]	; 0x24
 800267a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	09db      	lsrs	r3, r3, #7
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b7f      	cmp	r3, #127	; 0x7f
 800268c:	d8f0      	bhi.n	8002670 <SEGGER_SYSVIEW_Start+0x94>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	627a      	str	r2, [r7, #36]	; 0x24
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e00b      	b.n	80026c2 <SEGGER_SYSVIEW_Start+0xe6>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	61f9      	str	r1, [r7, #28]
 80026b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	09db      	lsrs	r3, r3, #7
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b7f      	cmp	r3, #127	; 0x7f
 80026c6:	d8f0      	bhi.n	80026aa <SEGGER_SYSVIEW_Start+0xce>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	61fa      	str	r2, [r7, #28]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e00b      	b.n	80026fa <SEGGER_SYSVIEW_Start+0x11e>
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1c59      	adds	r1, r3, #1
 80026ea:	6179      	str	r1, [r7, #20]
 80026ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b7f      	cmp	r3, #127	; 0x7f
 80026fe:	d8f0      	bhi.n	80026e2 <SEGGER_SYSVIEW_Start+0x106>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	617a      	str	r2, [r7, #20]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002710:	2218      	movs	r2, #24
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fd35 	bl	8002184 <_SendPacket>
      RECORD_END();
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SEGGER_SYSVIEW_Start+0x168>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800272e:	f000 f9c7 	bl	8002ac0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002732:	f000 f9b1 	bl	8002a98 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002736:	f000 fc5f 	bl	8002ff8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20001ac0 	.word	0x20001ac0
 8002748:	08005c60 	.word	0x08005c60
 800274c:	20001af0 	.word	0x20001af0

08002750 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002756:	f3ef 8311 	mrs	r3, BASEPRI
 800275a:	f04f 0120 	mov.w	r1, #32
 800275e:	f381 8811 	msr	BASEPRI, r1
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <SEGGER_SYSVIEW_Stop+0x44>)
 8002766:	f7ff fc1c 	bl	8001fa2 <_PreparePacket>
 800276a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <SEGGER_SYSVIEW_Stop+0x48>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002774:	220b      	movs	r2, #11
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	6838      	ldr	r0, [r7, #0]
 800277a:	f7ff fd03 	bl	8002184 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SEGGER_SYSVIEW_Stop+0x48>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f383 8811 	msr	BASEPRI, r3
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20001af0 	.word	0x20001af0
 8002798:	20001ac0 	.word	0x20001ac0

0800279c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80027a2:	f3ef 8311 	mrs	r3, BASEPRI
 80027a6:	f04f 0120 	mov.w	r1, #32
 80027aa:	f381 8811 	msr	BASEPRI, r1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4845      	ldr	r0, [pc, #276]	; (80028c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80027b2:	f7ff fbf6 	bl	8001fa2 <_PreparePacket>
 80027b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c6:	e00b      	b.n	80027e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	09db      	lsrs	r3, r3, #7
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2b7f      	cmp	r3, #127	; 0x7f
 80027e4:	d8f0      	bhi.n	80027c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	e00b      	b.n	800281a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	6279      	str	r1, [r7, #36]	; 0x24
 800280c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	09db      	lsrs	r3, r3, #7
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b7f      	cmp	r3, #127	; 0x7f
 800281e:	d8f0      	bhi.n	8002802 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	627a      	str	r2, [r7, #36]	; 0x24
 8002826:	6a3a      	ldr	r2, [r7, #32]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e00b      	b.n	8002854 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	61f9      	str	r1, [r7, #28]
 8002846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	09db      	lsrs	r3, r3, #7
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b7f      	cmp	r3, #127	; 0x7f
 8002858:	d8f0      	bhi.n	800283c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	61fa      	str	r2, [r7, #28]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e00b      	b.n	800288c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	6179      	str	r1, [r7, #20]
 800287e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	09db      	lsrs	r3, r3, #7
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b7f      	cmp	r3, #127	; 0x7f
 8002890:	d8f0      	bhi.n	8002874 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	617a      	str	r2, [r7, #20]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80028a2:	2218      	movs	r2, #24
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	f7ff fc6c 	bl	8002184 <_SendPacket>
  RECORD_END();
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	4798      	blx	r3
  }
}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20001af0 	.word	0x20001af0
 80028cc:	20001ac0 	.word	0x20001ac0

080028d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80028d8:	f3ef 8311 	mrs	r3, BASEPRI
 80028dc:	f04f 0120 	mov.w	r1, #32
 80028e0:	f381 8811 	msr	BASEPRI, r1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	486a      	ldr	r0, [pc, #424]	; (8002a90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80028e8:	f7ff fb5b 	bl	8001fa2 <_PreparePacket>
 80028ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
 8002902:	e00b      	b.n	800291c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002906:	b2da      	uxtb	r2, r3
 8002908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	6479      	str	r1, [r7, #68]	; 0x44
 800290e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002918:	09db      	lsrs	r3, r3, #7
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	2b7f      	cmp	r3, #127	; 0x7f
 8002920:	d8f0      	bhi.n	8002904 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	647a      	str	r2, [r7, #68]	; 0x44
 8002928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
 800293c:	e00b      	b.n	8002956 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	b2da      	uxtb	r2, r3
 8002942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	2b7f      	cmp	r3, #127	; 0x7f
 800295a:	d8f0      	bhi.n	800293e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	4619      	mov	r1, r3
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff fac7 	bl	8001f08 <_EncodeStr>
 800297a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800297c:	2209      	movs	r2, #9
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	6938      	ldr	r0, [r7, #16]
 8002982:	f7ff fbff 	bl	8002184 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
 800299a:	e00b      	b.n	80029b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	6379      	str	r1, [r7, #52]	; 0x34
 80029a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	09db      	lsrs	r3, r3, #7
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	2b7f      	cmp	r3, #127	; 0x7f
 80029b8:	d8f0      	bhi.n	800299c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	637a      	str	r2, [r7, #52]	; 0x34
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d4:	e00b      	b.n	80029ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80029e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	09db      	lsrs	r3, r3, #7
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	2b7f      	cmp	r3, #127	; 0x7f
 80029f2:	d8f0      	bhi.n	80029d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	e00b      	b.n	8002a28 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	6279      	str	r1, [r7, #36]	; 0x24
 8002a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	09db      	lsrs	r3, r3, #7
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a2c:	d8f0      	bhi.n	8002a10 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	627a      	str	r2, [r7, #36]	; 0x24
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	e00b      	b.n	8002a60 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	61f9      	str	r1, [r7, #28]
 8002a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	09db      	lsrs	r3, r3, #7
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b7f      	cmp	r3, #127	; 0x7f
 8002a64:	d8f0      	bhi.n	8002a48 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002a76:	2215      	movs	r2, #21
 8002a78:	68f9      	ldr	r1, [r7, #12]
 8002a7a:	6938      	ldr	r0, [r7, #16]
 8002a7c:	f7ff fb82 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f383 8811 	msr	BASEPRI, r3
}
 8002a86:	bf00      	nop
 8002a88:	3748      	adds	r7, #72	; 0x48
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20001af0 	.word	0x20001af0
 8002a94:	20001ac0 	.word	0x20001ac0

08002a98 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002aae:	4b03      	ldr	r3, [pc, #12]	; (8002abc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4798      	blx	r3
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20001ac0 	.word	0x20001ac0

08002ac0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01a      	beq.n	8002b04 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4798      	blx	r3
 8002ae0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002ae4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	000a      	movs	r2, r1
 8002af4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002af6:	4613      	mov	r3, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4621      	mov	r1, r4
 8002afc:	200d      	movs	r0, #13
 8002afe:	f7ff fc81 	bl	8002404 <SEGGER_SYSVIEW_RecordU32x2>
 8002b02:	e006      	b.n	8002b12 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	200c      	movs	r0, #12
 8002b0c:	f7ff fc3e 	bl	800238c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001ac0 	.word	0x20001ac0
 8002b20:	e0001004 	.word	0xe0001004

08002b24 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b2e:	f04f 0120 	mov.w	r1, #32
 8002b32:	f381 8811 	msr	BASEPRI, r1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002b3a:	f7ff fa32 	bl	8001fa2 <_PreparePacket>
 8002b3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e00b      	b.n	8002b70 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	6179      	str	r1, [r7, #20]
 8002b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	09db      	lsrs	r3, r3, #7
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b7f      	cmp	r3, #127	; 0x7f
 8002b74:	d8f0      	bhi.n	8002b58 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	617a      	str	r2, [r7, #20]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002b86:	2202      	movs	r2, #2
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68b8      	ldr	r0, [r7, #8]
 8002b8c:	f7ff fafa 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f383 8811 	msr	BASEPRI, r3
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20001af0 	.word	0x20001af0
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002bae:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb2:	f04f 0120 	mov.w	r1, #32
 8002bb6:	f381 8811 	msr	BASEPRI, r1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002bbe:	f7ff f9f0 	bl	8001fa2 <_PreparePacket>
 8002bc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	6838      	ldr	r0, [r7, #0]
 8002bca:	f7ff fadb 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f383 8811 	msr	BASEPRI, r3
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20001af0 	.word	0x20001af0

08002be0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002be6:	f3ef 8311 	mrs	r3, BASEPRI
 8002bea:	f04f 0120 	mov.w	r1, #32
 8002bee:	f381 8811 	msr	BASEPRI, r1
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	4807      	ldr	r0, [pc, #28]	; (8002c14 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002bf6:	f7ff f9d4 	bl	8001fa2 <_PreparePacket>
 8002bfa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002bfc:	2212      	movs	r2, #18
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f7ff fabf 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f383 8811 	msr	BASEPRI, r3
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20001af0 	.word	0x20001af0

08002c18 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c22:	f04f 0120 	mov.w	r1, #32
 8002c26:	f381 8811 	msr	BASEPRI, r1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	4807      	ldr	r0, [pc, #28]	; (8002c4c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002c2e:	f7ff f9b8 	bl	8001fa2 <_PreparePacket>
 8002c32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002c34:	2211      	movs	r2, #17
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	6838      	ldr	r0, [r7, #0]
 8002c3a:	f7ff faa3 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f383 8811 	msr	BASEPRI, r3
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20001af0 	.word	0x20001af0

08002c50 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002c58:	f3ef 8311 	mrs	r3, BASEPRI
 8002c5c:	f04f 0120 	mov.w	r1, #32
 8002c60:	f381 8811 	msr	BASEPRI, r1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	4819      	ldr	r0, [pc, #100]	; (8002ccc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002c68:	f7ff f99b 	bl	8001fa2 <_PreparePacket>
 8002c6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e00b      	b.n	8002c9e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1c59      	adds	r1, r3, #1
 8002c8e:	61f9      	str	r1, [r7, #28]
 8002c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	09db      	lsrs	r3, r3, #7
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca2:	d8f0      	bhi.n	8002c86 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	61fa      	str	r2, [r7, #28]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	6938      	ldr	r0, [r7, #16]
 8002cba:	f7ff fa63 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f383 8811 	msr	BASEPRI, r3
}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20001af0 	.word	0x20001af0
 8002cd0:	20001ac0 	.word	0x20001ac0

08002cd4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ce0:	f04f 0120 	mov.w	r1, #32
 8002ce4:	f381 8811 	msr	BASEPRI, r1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	4819      	ldr	r0, [pc, #100]	; (8002d50 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8002cec:	f7ff f959 	bl	8001fa2 <_PreparePacket>
 8002cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e00b      	b.n	8002d22 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1c59      	adds	r1, r3, #1
 8002d12:	61f9      	str	r1, [r7, #28]
 8002d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b7f      	cmp	r3, #127	; 0x7f
 8002d26:	d8f0      	bhi.n	8002d0a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002d38:	2204      	movs	r2, #4
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6938      	ldr	r0, [r7, #16]
 8002d3e:	f7ff fa21 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f383 8811 	msr	BASEPRI, r3
}
 8002d48:	bf00      	nop
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20001af0 	.word	0x20001af0
 8002d54:	20001ac0 	.word	0x20001ac0

08002d58 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002d60:	f3ef 8311 	mrs	r3, BASEPRI
 8002d64:	f04f 0120 	mov.w	r1, #32
 8002d68:	f381 8811 	msr	BASEPRI, r1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	4819      	ldr	r0, [pc, #100]	; (8002dd4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002d70:	f7ff f917 	bl	8001fa2 <_PreparePacket>
 8002d74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e00b      	b.n	8002da6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	1c59      	adds	r1, r3, #1
 8002d96:	61f9      	str	r1, [r7, #28]
 8002d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	09db      	lsrs	r3, r3, #7
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b7f      	cmp	r3, #127	; 0x7f
 8002daa:	d8f0      	bhi.n	8002d8e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	61fa      	str	r2, [r7, #28]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	6938      	ldr	r0, [r7, #16]
 8002dc2:	f7ff f9df 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f383 8811 	msr	BASEPRI, r3
}
 8002dcc:	bf00      	nop
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20001af0 	.word	0x20001af0
 8002dd8:	20001ac0 	.word	0x20001ac0

08002ddc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002de6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dea:	f04f 0120 	mov.w	r1, #32
 8002dee:	f381 8811 	msr	BASEPRI, r1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	4827      	ldr	r0, [pc, #156]	; (8002e94 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8002df6:	f7ff f8d4 	bl	8001fa2 <_PreparePacket>
 8002dfa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	e00b      	b.n	8002e2c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	6279      	str	r1, [r7, #36]	; 0x24
 8002e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	09db      	lsrs	r3, r3, #7
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002e30:	d8f0      	bhi.n	8002e14 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	627a      	str	r2, [r7, #36]	; 0x24
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e00b      	b.n	8002e64 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	61f9      	str	r1, [r7, #28]
 8002e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	09db      	lsrs	r3, r3, #7
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d8f0      	bhi.n	8002e4c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	61fa      	str	r2, [r7, #28]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	68f9      	ldr	r1, [r7, #12]
 8002e7e:	6938      	ldr	r0, [r7, #16]
 8002e80:	f7ff f980 	bl	8002184 <_SendPacket>
  RECORD_END();
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f383 8811 	msr	BASEPRI, r3
}
 8002e8a:	bf00      	nop
 8002e8c:	3728      	adds	r7, #40	; 0x28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001af0 	.word	0x20001af0
 8002e98:	20001ac0 	.word	0x20001ac0

08002e9c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20001ac0 	.word	0x20001ac0

08002ebc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06d      	beq.n	8002faa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed8:	e008      	b.n	8002eec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	3301      	adds	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3f2      	bcc.n	8002eda <SEGGER_SYSVIEW_SendModule+0x1e>
 8002ef4:	e000      	b.n	8002ef8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002ef6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d055      	beq.n	8002faa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002efe:	f3ef 8311 	mrs	r3, BASEPRI
 8002f02:	f04f 0120 	mov.w	r1, #32
 8002f06:	f381 8811 	msr	BASEPRI, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	482a      	ldr	r0, [pc, #168]	; (8002fb8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002f0e:	f7ff f848 	bl	8001fa2 <_PreparePacket>
 8002f12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	e00b      	b.n	8002f3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1c59      	adds	r1, r3, #1
 8002f2a:	6279      	str	r1, [r7, #36]	; 0x24
 8002f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	09db      	lsrs	r3, r3, #7
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f3e:	d8f0      	bhi.n	8002f22 <SEGGER_SYSVIEW_SendModule+0x66>
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	627a      	str	r2, [r7, #36]	; 0x24
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e00b      	b.n	8002f74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	1c59      	adds	r1, r3, #1
 8002f64:	61f9      	str	r1, [r7, #28]
 8002f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	09db      	lsrs	r3, r3, #7
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b7f      	cmp	r3, #127	; 0x7f
 8002f78:	d8f0      	bhi.n	8002f5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	61fa      	str	r2, [r7, #28]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7fe ffb8 	bl	8001f08 <_EncodeStr>
 8002f98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002f9a:	2216      	movs	r2, #22
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	6938      	ldr	r0, [r7, #16]
 8002fa0:	f7ff f8f0 	bl	8002184 <_SendPacket>
      RECORD_END();
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002faa:	bf00      	nop
 8002fac:	3730      	adds	r7, #48	; 0x30
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20001ae8 	.word	0x20001ae8
 8002fb8:	20001af0 	.word	0x20001af0

08002fbc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00f      	beq.n	8002fea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f2      	bne.n	8002fd0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20001ae8 	.word	0x20001ae8

08002ff8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002ffe:	f3ef 8311 	mrs	r3, BASEPRI
 8003002:	f04f 0120 	mov.w	r1, #32
 8003006:	f381 8811 	msr	BASEPRI, r1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	4817      	ldr	r0, [pc, #92]	; (800306c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800300e:	f7fe ffc8 	bl	8001fa2 <_PreparePacket>
 8003012:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e00b      	b.n	800303c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	6179      	str	r1, [r7, #20]
 800302e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	09db      	lsrs	r3, r3, #7
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b7f      	cmp	r3, #127	; 0x7f
 8003040:	d8f0      	bhi.n	8003024 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	617a      	str	r2, [r7, #20]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003052:	221b      	movs	r2, #27
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f7ff f894 	bl	8002184 <_SendPacket>
  RECORD_END();
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f383 8811 	msr	BASEPRI, r3
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001af0 	.word	0x20001af0
 8003070:	20001aec 	.word	0x20001aec

08003074 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800307c:	f3ef 8311 	mrs	r3, BASEPRI
 8003080:	f04f 0120 	mov.w	r1, #32
 8003084:	f381 8811 	msr	BASEPRI, r1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4827      	ldr	r0, [pc, #156]	; (8003128 <SEGGER_SYSVIEW_Warn+0xb4>)
 800308c:	f7fe ff89 	bl	8001fa2 <_PreparePacket>
 8003090:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6938      	ldr	r0, [r7, #16]
 8003098:	f7fe ff36 	bl	8001f08 <_EncodeStr>
 800309c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	2301      	movs	r3, #1
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	e00b      	b.n	80030c0 <SEGGER_SYSVIEW_Warn+0x4c>
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	6279      	str	r1, [r7, #36]	; 0x24
 80030b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	09db      	lsrs	r3, r3, #7
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2b7f      	cmp	r3, #127	; 0x7f
 80030c4:	d8f0      	bhi.n	80030a8 <SEGGER_SYSVIEW_Warn+0x34>
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	627a      	str	r2, [r7, #36]	; 0x24
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e00b      	b.n	80030f8 <SEGGER_SYSVIEW_Warn+0x84>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	61f9      	str	r1, [r7, #28]
 80030ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	09db      	lsrs	r3, r3, #7
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b7f      	cmp	r3, #127	; 0x7f
 80030fc:	d8f0      	bhi.n	80030e0 <SEGGER_SYSVIEW_Warn+0x6c>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	61fa      	str	r2, [r7, #28]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800310e:	221a      	movs	r2, #26
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	f7ff f836 	bl	8002184 <_SendPacket>
  RECORD_END();
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f383 8811 	msr	BASEPRI, r3
}
 800311e:	bf00      	nop
 8003120:	3728      	adds	r7, #40	; 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20001af0 	.word	0x20001af0

0800312c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f023 0218 	bic.w	r2, r3, #24
 8003140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4313      	orrs	r3, r2
 800316e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800317c:	68fb      	ldr	r3, [r7, #12]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003192:	f000 fb63 	bl	800385c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003196:	f000 f891 	bl	80032bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800319a:	f000 f8e3 	bl	8003364 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800319e:	f000 f8ff 	bl	80033a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <main+0xf8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <main+0xf8>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6013      	str	r3, [r2, #0]
 // SEGGER_SYSVIEW_Conf();
 // SEGGER_SYSVIEW_Start();

  BaseType_t status;

  status = xTaskCreate(GreenLedHandler,
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <main+0xfc>)
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2301      	movs	r3, #1
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	22c8      	movs	r2, #200	; 0xc8
 80031ba:	4934      	ldr	r1, [pc, #208]	; (800328c <main+0x100>)
 80031bc:	4834      	ldr	r0, [pc, #208]	; (8003290 <main+0x104>)
 80031be:	f7fd f8dd 	bl	800037c <xTaskCreate>
 80031c2:	6178      	str	r0, [r7, #20]
		  200,
		  NULL,
		  1,
		  &gLedHandle);

  configASSERT(status == pdPASS);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d00a      	beq.n	80031e0 <main+0x54>
        __asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	613b      	str	r3, [r7, #16]
    }
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <main+0x52>

  status = xTaskCreate(BlueLedHandler,
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <main+0x108>)
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	22c8      	movs	r2, #200	; 0xc8
 80031ec:	492a      	ldr	r1, [pc, #168]	; (8003298 <main+0x10c>)
 80031ee:	482b      	ldr	r0, [pc, #172]	; (800329c <main+0x110>)
 80031f0:	f7fd f8c4 	bl	800037c <xTaskCreate>
 80031f4:	6178      	str	r0, [r7, #20]
		  200,
		  NULL,
		  2,
		  &bLedHandle);

  configASSERT(status == pdPASS);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d00a      	beq.n	8003212 <main+0x86>
        __asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60fb      	str	r3, [r7, #12]
    }
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <main+0x84>

  nextTaskHandle = bLedHandle;
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <main+0x108>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <main+0x114>)
 8003218:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(RedLedHandler,
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <main+0x118>)
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2303      	movs	r3, #3
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	22c8      	movs	r2, #200	; 0xc8
 8003226:	4920      	ldr	r1, [pc, #128]	; (80032a8 <main+0x11c>)
 8003228:	4820      	ldr	r0, [pc, #128]	; (80032ac <main+0x120>)
 800322a:	f7fd f8a7 	bl	800037c <xTaskCreate>
 800322e:	6178      	str	r0, [r7, #20]
		  200,
		  NULL,
		  3,
		  &rLedHandle);

  configASSERT(status == pdPASS);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00a      	beq.n	800324c <main+0xc0>
        __asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	60bb      	str	r3, [r7, #8]
    }
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <main+0xbe>

  status = xTaskCreate(BtnHandler,
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <main+0x124>)
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	2304      	movs	r3, #4
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2300      	movs	r3, #0
 8003256:	22c8      	movs	r2, #200	; 0xc8
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <main+0x128>)
 800325a:	4817      	ldr	r0, [pc, #92]	; (80032b8 <main+0x12c>)
 800325c:	f7fd f88e 	bl	800037c <xTaskCreate>
 8003260:	6178      	str	r0, [r7, #20]
		  200,
		  NULL,
		  4,
		  &btnHandle);

  configASSERT(status == pdPASS);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d00a      	beq.n	800327e <main+0xf2>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	607b      	str	r3, [r7, #4]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <main+0xf0>


  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 800327e:	f7fd fb63 	bl	8000948 <vTaskStartScheduler>
  // -- END --
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003282:	e7fe      	b.n	8003282 <main+0xf6>
 8003284:	e0001000 	.word	0xe0001000
 8003288:	20001bd4 	.word	0x20001bd4
 800328c:	08005bf8 	.word	0x08005bf8
 8003290:	080034ad 	.word	0x080034ad
 8003294:	20001bd8 	.word	0x20001bd8
 8003298:	08005c0c 	.word	0x08005c0c
 800329c:	08003451 	.word	0x08003451
 80032a0:	20001be4 	.word	0x20001be4
 80032a4:	20001bdc 	.word	0x20001bdc
 80032a8:	08005c20 	.word	0x08005c20
 80032ac:	08003509 	.word	0x08003509
 80032b0:	20001be0 	.word	0x20001be0
 80032b4:	08005c30 	.word	0x08005c30
 80032b8:	08003561 	.word	0x08003561

080032bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b098      	sub	sp, #96	; 0x60
 80032c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	2244      	movs	r2, #68	; 0x44
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fc44 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d0:	463b      	mov	r3, r7
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	615a      	str	r2, [r3, #20]
 80032e0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032e2:	f000 fd99 	bl	8003e18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7ff ff20 	bl	800312c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80032ec:	2327      	movs	r3, #39	; 0x27
 80032ee:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032f6:	2301      	movs	r3, #1
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003300:	2301      	movs	r3, #1
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003308:	2300      	movs	r3, #0
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800330c:	2360      	movs	r3, #96	; 0x60
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003310:	2300      	movs	r3, #0
 8003312:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f957 	bl	80045cc <HAL_RCC_OscConfig>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003324:	f000 f982 	bl	800362c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003328:	236f      	movs	r3, #111	; 0x6f
 800332a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003344:	463b      	mov	r3, r7
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f001 fc75 	bl	8004c38 <HAL_RCC_ClockConfig>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003354:	f000 f96a 	bl	800362c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003358:	f002 f951 	bl	80055fe <HAL_RCCEx_EnableMSIPLLMode>
}
 800335c:	bf00      	nop
 800335e:	3760      	adds	r7, #96	; 0x60
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	; 0x30
 8003368:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800336a:	463b      	mov	r3, r7
 800336c:	2230      	movs	r2, #48	; 0x30
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fbf1 	bl	8005b58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8003376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800337a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800337c:	2300      	movs	r3, #0
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003380:	2310      	movs	r3, #16
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	4618      	mov	r0, r3
 8003388:	f002 f843 	bl	8005412 <HAL_RCCEx_PeriphCLKConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003392:	f000 f94b 	bl	800362c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003396:	bf00      	nop
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b4:	2004      	movs	r0, #4
 80033b6:	f7ff fecf 	bl	8003158 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	2001      	movs	r0, #1
 80033bc:	f7ff fecc 	bl	8003158 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	2002      	movs	r0, #2
 80033c2:	f7ff fec9 	bl	8003158 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c6:	2010      	movs	r0, #16
 80033c8:	f7ff fec6 	bl	8003158 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2123      	movs	r1, #35	; 0x23
 80033d0:	481d      	ldr	r0, [pc, #116]	; (8003448 <MX_GPIO_Init+0xa8>)
 80033d2:	f000 fcef 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ea:	f000 fb63 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80033ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003400:	2307      	movs	r3, #7
 8003402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	4619      	mov	r1, r3
 8003408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800340c:	f000 fb52 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8003410:	2323      	movs	r3, #35	; 0x23
 8003412:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4808      	ldr	r0, [pc, #32]	; (8003448 <MX_GPIO_Init+0xa8>)
 8003426:	f000 fb45 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800342a:	2310      	movs	r3, #16
 800342c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003432:	2301      	movs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_GPIO_Init+0xac>)
 800343c:	f000 fb3a 	bl	8003ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	48000400 	.word	0x48000400
 800344c:	48001000 	.word	0x48001000

08003450 <BlueLedHandler>:

/* USER CODE BEGIN 4 */

static void BlueLedHandler(void* param)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(1000);
 8003458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345c:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling blue led");
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 800345e:	2120      	movs	r1, #32
 8003460:	480f      	ldr	r0, [pc, #60]	; (80034a0 <BlueLedHandler+0x50>)
 8003462:	f000 fcbf 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2000      	movs	r0, #0
 8003472:	f7fd fd4d 	bl	8000f10 <xTaskGenericNotifyWait>
 8003476:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d1ef      	bne.n	800345e <BlueLedHandler+0xe>
		{
			vTaskSuspendAll();
 800347e:	f7fd fabf 	bl	8000a00 <vTaskSuspendAll>
			nextTaskHandle = gLedHandle;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <BlueLedHandler+0x54>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <BlueLedHandler+0x58>)
 8003488:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800348a:	f7fd fac7 	bl	8000a1c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 800348e:	2201      	movs	r2, #1
 8003490:	2120      	movs	r1, #32
 8003492:	4803      	ldr	r0, [pc, #12]	; (80034a0 <BlueLedHandler+0x50>)
 8003494:	f000 fc8e 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd f90b 	bl	80006b4 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 800349e:	e7de      	b.n	800345e <BlueLedHandler+0xe>
 80034a0:	48000400 	.word	0x48000400
 80034a4:	20001bd4 	.word	0x20001bd4
 80034a8:	20001be4 	.word	0x20001be4

080034ac <GreenLedHandler>:
	}
}


static void GreenLedHandler(void* param)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(800);
 80034b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80034b8:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 80034ba:	2101      	movs	r1, #1
 80034bc:	480f      	ldr	r0, [pc, #60]	; (80034fc <GreenLedHandler+0x50>)
 80034be:	f000 fc91 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fd fd1f 	bl	8000f10 <xTaskGenericNotifyWait>
 80034d2:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d1ef      	bne.n	80034ba <GreenLedHandler+0xe>
		{
			vTaskSuspendAll();
 80034da:	f7fd fa91 	bl	8000a00 <vTaskSuspendAll>
			nextTaskHandle = rLedHandle;
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <GreenLedHandler+0x54>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a08      	ldr	r2, [pc, #32]	; (8003504 <GreenLedHandler+0x58>)
 80034e4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80034e6:	f7fd fa99 	bl	8000a1c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 80034ea:	2201      	movs	r2, #1
 80034ec:	2101      	movs	r1, #1
 80034ee:	4803      	ldr	r0, [pc, #12]	; (80034fc <GreenLedHandler+0x50>)
 80034f0:	f000 fc60 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd f8dd 	bl	80006b4 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 80034fa:	e7de      	b.n	80034ba <GreenLedHandler+0xe>
 80034fc:	48000400 	.word	0x48000400
 8003500:	20001bdc 	.word	0x20001bdc
 8003504:	20001be4 	.word	0x20001be4

08003508 <RedLedHandler>:
	}
}


static void RedLedHandler(void* param)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	const TickType_t xFrequency = pdMS_TO_TICKS(400);
 8003510:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003514:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8003516:	2102      	movs	r1, #2
 8003518:	480f      	ldr	r0, [pc, #60]	; (8003558 <RedLedHandler+0x50>)
 800351a:	f000 fc63 	bl	8003de4 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,xFrequency);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fcf1 	bl	8000f10 <xTaskGenericNotifyWait>
 800352e:	60b8      	str	r0, [r7, #8]
		if(status == pdTRUE)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d1ef      	bne.n	8003516 <RedLedHandler+0xe>
		{
			vTaskSuspendAll();
 8003536:	f7fd fa63 	bl	8000a00 <vTaskSuspendAll>
			nextTaskHandle = NULL;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <RedLedHandler+0x54>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8003540:	f7fd fa6c 	bl	8000a1c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8003544:	2201      	movs	r2, #1
 8003546:	2102      	movs	r1, #2
 8003548:	4803      	ldr	r0, [pc, #12]	; (8003558 <RedLedHandler+0x50>)
 800354a:	f000 fc33 	bl	8003db4 <HAL_GPIO_WritePin>
			//vTaskDelete(btnHandle);
			//vTaskDelete(NULL);
			//vTaskSuspend(btnHandle);
			vTaskSuspend(NULL);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd f8b0 	bl	80006b4 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8003554:	e7df      	b.n	8003516 <RedLedHandler+0xe>
 8003556:	bf00      	nop
 8003558:	48000400 	.word	0x48000400
 800355c:	20001be4 	.word	0x20001be4

08003560 <BtnHandler>:
		}
	}
}

static void BtnHandler(void* param)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
	volatile uint8_t buttonRead = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t previousRead = 1;
 800356c:	2301      	movs	r3, #1
 800356e:	73bb      	strb	r3, [r7, #14]

	while(1)
	{
		// It goes low when the button is pressed.
		buttonRead = HAL_GPIO_ReadPin(GPIOE, B2_Pin);
 8003570:	2110      	movs	r1, #16
 8003572:	481c      	ldr	r0, [pc, #112]	; (80035e4 <BtnHandler+0x84>)
 8003574:	f000 fc06 	bl	8003d84 <HAL_GPIO_ReadPin>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

		if(!buttonRead)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d127      	bne.n	80035d4 <BtnHandler+0x74>
		{
			// This should execute on the 4th push after all the leds become high.
			if(nextTaskHandle == NULL)
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <BtnHandler+0x88>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d116      	bne.n	80035ba <BtnHandler+0x5a>
			{
				vTaskSuspendAll();
 800358c:	f7fd fa38 	bl	8000a00 <vTaskSuspendAll>
				nextTaskHandle = bLedHandle;
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <BtnHandler+0x8c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <BtnHandler+0x88>)
 8003596:	6013      	str	r3, [r2, #0]
				xTaskResumeAll();
 8003598:	f7fd fa40 	bl	8000a1c <xTaskResumeAll>

				vTaskResume(bLedHandle);
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <BtnHandler+0x8c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd f967 	bl	8000874 <vTaskResume>
				vTaskResume(gLedHandle);
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <BtnHandler+0x90>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd f962 	bl	8000874 <vTaskResume>
				vTaskResume(rLedHandle);
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <BtnHandler+0x94>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd f95d 	bl	8000874 <vTaskResume>
			}

			if(previousRead)
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <BtnHandler+0x74>
			{
				xTaskNotify(nextTaskHandle, 0, eNoAction);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <BtnHandler+0x88>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	f7fd fd2c 	bl	800102c <xTaskGenericNotify>
			}
		}
		previousRead = buttonRead;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	73bb      	strb	r3, [r7, #14]
		vTaskDelay(pdMS_TO_TICKS(200));
 80035da:	20c8      	movs	r0, #200	; 0xc8
 80035dc:	f7fd f832 	bl	8000644 <vTaskDelay>
		buttonRead = HAL_GPIO_ReadPin(GPIOE, B2_Pin);
 80035e0:	e7c6      	b.n	8003570 <BtnHandler+0x10>
 80035e2:	bf00      	nop
 80035e4:	48001000 	.word	0x48001000
 80035e8:	20001be4 	.word	0x20001be4
 80035ec:	20001bd8 	.word	0x20001bd8
 80035f0:	20001bd4 	.word	0x20001bd4
 80035f4:	20001bdc 	.word	0x20001bdc

080035f8 <vApplicationIdleHook>:
	}

}

void vApplicationIdleHook( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80035fc:	2101      	movs	r1, #1
 80035fe:	2000      	movs	r0, #0
 8003600:	f000 fc1a 	bl	8003e38 <HAL_PWR_EnterSLEEPMode>
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800361a:	f000 f93f 	bl	800389c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003630:	b672      	cpsid	i
}
 8003632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003634:	e7fe      	b.n	8003634 <Error_Handler+0x8>

08003636 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 800363a:	f7fd ff95 	bl	8001568 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}

08003642 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4313      	orrs	r3, r2
 8003658:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003684:	2200      	movs	r2, #0
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	2019      	movs	r0, #25
 800368a:	f000 f9eb 	bl	8003a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800368e:	2019      	movs	r0, #25
 8003690:	f000 fa02 	bl	8003a98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003694:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003698:	f7ff ffd3 	bl	8003642 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fc9c 	bl	8004fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80036ac:	f001 fc84 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 80036b0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_InitTick+0x8c>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	3b01      	subs	r3, #1
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_InitTick+0x90>)
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_InitTick+0x94>)
 80036c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_InitTick+0x90>)
 80036c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036ce:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_InitTick+0x90>)
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_InitTick+0x90>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_InitTick+0x90>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036e0:	4808      	ldr	r0, [pc, #32]	; (8003704 <HAL_InitTick+0x90>)
 80036e2:	f001 ff92 	bl	800560a <HAL_TIM_Base_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_InitTick+0x90>)
 80036ee:	f001 ffed 	bl	80056cc <HAL_TIM_Base_Start_IT>
 80036f2:	4603      	mov	r3, r0
 80036f4:	e000      	b.n	80036f8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	431bde83 	.word	0x431bde83
 8003704:	20001be8 	.word	0x20001be8
 8003708:	40012c00 	.word	0x40012c00

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <NMI_Handler+0x4>

08003712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <HardFault_Handler+0x4>

08003718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800371c:	e7fe      	b.n	800371c <MemManage_Handler+0x4>

0800371e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <UsageFault_Handler+0x4>

0800372a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800373c:	4802      	ldr	r0, [pc, #8]	; (8003748 <TIM1_UP_IRQHandler+0x10>)
 800373e:	f002 f813 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20001be8 	.word	0x20001be8

0800374c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <SystemInit+0x90>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <SystemInit+0x90>)
 8003758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800375c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003778:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <SystemInit+0x94>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f023 0305 	bic.w	r3, r3, #5
 800379a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	4a0b      	ldr	r2, [pc, #44]	; (80037e4 <SystemInit+0x98>)
 80037b8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00
 80037e0:	faf6fefb 	.word	0xfaf6fefb
 80037e4:	22041000 	.word	0x22041000

080037e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80037e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ec:	3304      	adds	r3, #4

080037ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80037f2:	d3f9      	bcc.n	80037e8 <CopyDataInit>
  bx lr
 80037f4:	4770      	bx	lr

080037f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80037f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80037f8:	3004      	adds	r0, #4

080037fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80037fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80037fc:	d3fb      	bcc.n	80037f6 <FillZerobss>
  bx lr
 80037fe:	4770      	bx	lr

08003800 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003800:	480c      	ldr	r0, [pc, #48]	; (8003834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003802:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003804:	f7ff ffa2 	bl	800374c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <LoopForever+0x6>)
 800380a:	490c      	ldr	r1, [pc, #48]	; (800383c <LoopForever+0xa>)
 800380c:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <LoopForever+0xe>)
 800380e:	2300      	movs	r3, #0
 8003810:	f7ff ffed 	bl	80037ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003814:	480b      	ldr	r0, [pc, #44]	; (8003844 <LoopForever+0x12>)
 8003816:	490c      	ldr	r1, [pc, #48]	; (8003848 <LoopForever+0x16>)
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <LoopForever+0x1a>)
 800381a:	2300      	movs	r3, #0
 800381c:	f7ff ffe7 	bl	80037ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003820:	480b      	ldr	r0, [pc, #44]	; (8003850 <LoopForever+0x1e>)
 8003822:	490c      	ldr	r1, [pc, #48]	; (8003854 <LoopForever+0x22>)
 8003824:	2300      	movs	r3, #0
 8003826:	f7ff ffe8 	bl	80037fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800382a:	f002 f953 	bl	8005ad4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800382e:	f7ff fcad 	bl	800318c <main>

08003832 <LoopForever>:

LoopForever:
  b LoopForever
 8003832:	e7fe      	b.n	8003832 <LoopForever>
  ldr   r0, =_estack
 8003834:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8003838:	20000008 	.word	0x20000008
 800383c:	2000001c 	.word	0x2000001c
 8003840:	08005d14 	.word	0x08005d14
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003844:	20030000 	.word	0x20030000
 8003848:	20030000 	.word	0x20030000
 800384c:	08005d28 	.word	0x08005d28
  INIT_BSS _sbss, _ebss
 8003850:	2000001c 	.word	0x2000001c
 8003854:	20001c38 	.word	0x20001c38

08003858 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003858:	e7fe      	b.n	8003858 <ADC1_IRQHandler>
	...

0800385c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_Init+0x3c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_Init+0x3c>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003872:	2003      	movs	r0, #3
 8003874:	f000 f8eb 	bl	8003a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003878:	200f      	movs	r0, #15
 800387a:	f7ff fefb 	bl	8003674 <HAL_InitTick>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	71fb      	strb	r3, [r7, #7]
 8003888:	e001      	b.n	800388e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800388a:	f7ff fed4 	bl	8003636 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800388e:	79fb      	ldrb	r3, [r7, #7]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	58004000 	.word	0x58004000

0800389c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_IncTick+0x20>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x24>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_IncTick+0x24>)
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000018 	.word	0x20000018
 80038c0:	20001c34 	.word	0x20001c34

080038c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_GetTick+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20001c34 	.word	0x20001c34

080038dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_GetTickPrio+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000014 	.word	0x20000014

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800391c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	db0b      	blt.n	8003982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	f003 021f 	and.w	r2, r3, #31
 8003970:	4907      	ldr	r1, [pc, #28]	; (8003990 <__NVIC_EnableIRQ+0x38>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2001      	movs	r0, #1
 800397a:	fa00 f202 	lsl.w	r2, r0, r2
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff4c 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a72:	f7ff ff63 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003a76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	6978      	ldr	r0, [r7, #20]
 8003a7e:	f7ff ffb3 	bl	80039e8 <NVIC_EncodePriority>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff82 	bl	8003994 <__NVIC_SetPriority>
}
 8003a90:	bf00      	nop
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff56 	bl	8003958 <__NVIC_EnableIRQ>
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	e146      	b.n	8003d52 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8138 	beq.w	8003d4c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_GPIO_Init+0x40>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d130      	bne.n	8003b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0201 	and.w	r2, r3, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d017      	beq.n	8003b92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d123      	bne.n	8003be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	6939      	ldr	r1, [r7, #16]
 8003be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8092 	beq.w	8003d4c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c28:	4a51      	ldr	r2, [pc, #324]	; (8003d70 <HAL_GPIO_Init+0x2bc>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c52:	d013      	beq.n	8003c7c <HAL_GPIO_Init+0x1c8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a47      	ldr	r2, [pc, #284]	; (8003d74 <HAL_GPIO_Init+0x2c0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00d      	beq.n	8003c78 <HAL_GPIO_Init+0x1c4>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_GPIO_Init+0x2c4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <HAL_GPIO_Init+0x1c0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a45      	ldr	r2, [pc, #276]	; (8003d7c <HAL_GPIO_Init+0x2c8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_GPIO_Init+0x1bc>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	e006      	b.n	8003c7e <HAL_GPIO_Init+0x1ca>
 8003c70:	2307      	movs	r3, #7
 8003c72:	e004      	b.n	8003c7e <HAL_GPIO_Init+0x1ca>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e002      	b.n	8003c7e <HAL_GPIO_Init+0x1ca>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_GPIO_Init+0x1ca>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	f002 0203 	and.w	r2, r2, #3
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4093      	lsls	r3, r2
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c8e:	4938      	ldr	r1, [pc, #224]	; (8003d70 <HAL_GPIO_Init+0x2bc>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c9c:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc0:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <HAL_GPIO_Init+0x2cc>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f47f aeb1 	bne.w	8003ac4 <HAL_GPIO_Init+0x10>
  }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40010000 	.word	0x40010000
 8003d74:	48000400 	.word	0x48000400
 8003d78:	48000800 	.word	0x48000800
 8003d7c:	48001000 	.word	0x48001000
 8003d80:	58000800 	.word	0x58000800

08003d84 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e001      	b.n	8003da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dd0:	e002      	b.n	8003dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43d9      	mvns	r1, r3
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	400b      	ands	r3, r1
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	619a      	str	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	58000400 	.word	0x58000400

08003e38 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10c      	bne.n	8003e64 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e56:	d10e      	bne.n	8003e76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003e58:	f000 f832 	bl	8003ec0 <HAL_PWREx_DisableLowPowerRunMode>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003e62:	e016      	b.n	8003e92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d001      	beq.n	8003e76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003e72:	f000 f815 	bl	8003ea0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e88:	bf30      	wfi
 8003e8a:	e002      	b.n	8003e92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e8c:	bf40      	sev
    __WFE();
 8003e8e:	bf20      	wfe
    __WFE();
 8003e90:	bf20      	wfe
  }
}
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58000400 	.word	0x58000400
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	58000400 	.word	0x58000400

08003ec0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	0c9b      	lsrs	r3, r3, #18
 8003ede:	2232      	movs	r2, #50	; 0x32
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003ee6:	e002      	b.n	8003eee <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d102      	bne.n	8003f02 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f2      	bne.n	8003ee8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0e:	d101      	bne.n	8003f14 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	58000400 	.word	0x58000400
 8003f28:	20000010 	.word	0x20000010
 8003f2c:	431bde83 	.word	0x431bde83

08003f30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f42:	d101      	bne.n	8003f48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_RCC_HSE_Enable>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_RCC_HSE_Disable>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
}
 8003f86:	bf00      	nop
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_HSE_IsReady>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa2:	d101      	bne.n	8003fa8 <LL_RCC_HSE_IsReady+0x18>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_RCC_HSE_IsReady+0x1a>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_HSI_Enable>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_HSI_Disable>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_RCC_HSI_IsReady>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d101      	bne.n	8004008 <LL_RCC_HSI_IsReady+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_RCC_HSI_IsReady+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_RCC_LSE_Enable>:
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_LSE_Disable>:
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_LSE_EnableBypass>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_LSE_DisableBypass>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d101      	bne.n	80040de <LL_RCC_LSE_IsReady+0x18>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <LL_RCC_LSE_IsReady+0x1a>
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d101      	bne.n	8004146 <LL_RCC_LSI1_IsReady+0x18>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <LL_RCC_LSI1_IsReady+0x1a>
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d101      	bne.n	80041ae <LL_RCC_LSI2_IsReady+0x18>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <LL_RCC_LSI2_IsReady+0x1a>
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6013      	str	r3, [r2, #0]
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d101      	bne.n	800423a <LL_RCC_MSI_IsReady+0x16>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <LL_RCC_MSI_IsReady+0x18>
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2bb0      	cmp	r3, #176	; 0xb0
 8004284:	d901      	bls.n	800428a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004286:	23b0      	movs	r3, #176	; 0xb0
 8004288:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800428a:	687b      	ldr	r3, [r7, #4]
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	4313      	orrs	r3, r2
 80042b4:	604b      	str	r3, [r1, #4]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 0203 	bic.w	r2, r3, #3
 80042d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800433a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004366:	f023 020f 	bic.w	r2, r3, #15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004464:	6013      	str	r3, [r2, #0]
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044a0:	d101      	bne.n	80044a6 <LL_RCC_PLL_IsReady+0x18>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <LL_RCC_PLL_IsReady+0x1a>
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d101      	bne.n	800452c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800454c:	d101      	bne.n	8004552 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800456a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004572:	d101      	bne.n	8004578 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004596:	d101      	bne.n	800459c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045ba:	d101      	bne.n	80045c0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b08d      	sub	sp, #52	; 0x34
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e324      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 808d 	beq.w	8004706 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ec:	f7ff fe7d 	bl	80042ea <LL_RCC_GetSysClkSource>
 80045f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f2:	f7ff ff83 	bl	80044fc <LL_RCC_PLL_GetMainSource>
 80045f6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x3e>
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d147      	bne.n	8004694 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b01      	cmp	r3, #1
 8004608:	d144      	bne.n	8004694 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e308      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800461a:	f7ff fe28 	bl	800426e <LL_RCC_MSI_GetRange>
 800461e:	4603      	mov	r3, r0
 8004620:	429c      	cmp	r4, r3
 8004622:	d914      	bls.n	800464e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fd0d 	bl	8005048 <RCC_SetFlashLatencyFromMSIRange>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e2f7      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fe02 	bl	8004246 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fe26 	bl	8004298 <LL_RCC_MSI_SetCalibTrimming>
 800464c:	e013      	b.n	8004676 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fdf7 	bl	8004246 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fe1b 	bl	8004298 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fcee 	bl	8005048 <RCC_SetFlashLatencyFromMSIRange>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e2d8      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004676:	f000 fc8b 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 800467a:	4603      	mov	r3, r0
 800467c:	4aa4      	ldr	r2, [pc, #656]	; (8004910 <HAL_RCC_OscConfig+0x344>)
 800467e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004680:	4ba4      	ldr	r3, [pc, #656]	; (8004914 <HAL_RCC_OscConfig+0x348>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fff5 	bl	8003674 <HAL_InitTick>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d039      	beq.n	8004704 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e2c9      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800469c:	f7ff fda4 	bl	80041e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046a0:	f7ff f910 	bl	80038c4 <HAL_GetTick>
 80046a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a8:	f7ff f90c 	bl	80038c4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e2b6      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80046ba:	f7ff fdb3 	bl	8004224 <LL_RCC_MSI_IsReady>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f1      	beq.n	80046a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fdbc 	bl	8004246 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fde0 	bl	8004298 <LL_RCC_MSI_SetCalibTrimming>
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046da:	f7ff fd94 	bl	8004206 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046de:	f7ff f8f1 	bl	80038c4 <HAL_GetTick>
 80046e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e6:	f7ff f8ed 	bl	80038c4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e297      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80046f8:	f7ff fd94 	bl	8004224 <LL_RCC_MSI_IsReady>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f1      	bne.n	80046e6 <HAL_RCC_OscConfig+0x11a>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004704:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d047      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004712:	f7ff fdea 	bl	80042ea <LL_RCC_GetSysClkSource>
 8004716:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004718:	f7ff fef0 	bl	80044fc <LL_RCC_PLL_GetMainSource>
 800471c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d005      	beq.n	8004730 <HAL_RCC_OscConfig+0x164>
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d108      	bne.n	800473c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d134      	bne.n	80047a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e275      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d102      	bne.n	800474c <HAL_RCC_OscConfig+0x180>
 8004746:	f7ff fc05 	bl	8003f54 <LL_RCC_HSE_Enable>
 800474a:	e001      	b.n	8004750 <HAL_RCC_OscConfig+0x184>
 800474c:	f7ff fc11 	bl	8003f72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7ff f8b4 	bl	80038c4 <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7ff f8b0 	bl	80038c4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e25a      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004772:	f7ff fc0d 	bl	8003f90 <LL_RCC_HSE_IsReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f1      	beq.n	8004760 <HAL_RCC_OscConfig+0x194>
 800477c:	e011      	b.n	80047a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7ff f8a1 	bl	80038c4 <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004786:	f7ff f89d 	bl	80038c4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b64      	cmp	r3, #100	; 0x64
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e247      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004798:	f7ff fbfa 	bl	8003f90 <LL_RCC_HSE_IsReady>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f1      	bne.n	8004786 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04c      	beq.n	8004848 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	f7ff fd9c 	bl	80042ea <LL_RCC_GetSysClkSource>
 80047b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b4:	f7ff fea2 	bl	80044fc <LL_RCC_PLL_GetMainSource>
 80047b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d005      	beq.n	80047cc <HAL_RCC_OscConfig+0x200>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d10e      	bne.n	80047e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e227      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fc19 	bl	8004014 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047e2:	e031      	b.n	8004848 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d019      	beq.n	8004820 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ec:	f7ff fbe2 	bl	8003fb4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7ff f868 	bl	80038c4 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f8:	f7ff f864 	bl	80038c4 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e20e      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800480a:	f7ff fbf1 	bl	8003ff0 <LL_RCC_HSI_IsReady>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f1      	beq.n	80047f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fbfb 	bl	8004014 <LL_RCC_HSI_SetCalibTrimming>
 800481e:	e013      	b.n	8004848 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004820:	f7ff fbd7 	bl	8003fd2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7ff f84e 	bl	80038c4 <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7ff f84a 	bl	80038c4 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1f4      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800483e:	f7ff fbd7 	bl	8003ff0 <LL_RCC_HSI_IsReady>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f1      	bne.n	800482c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80a3 	beq.w	80049a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d076      	beq.n	8004958 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	d046      	beq.n	8004904 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004876:	f7ff fc5a 	bl	800412e <LL_RCC_LSI1_IsReady>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d113      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004880:	f7ff fc33 	bl	80040ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004884:	f7ff f81e 	bl	80038c4 <HAL_GetTick>
 8004888:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800488c:	f7ff f81a 	bl	80038c4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1c4      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800489e:	f7ff fc46 	bl	800412e <LL_RCC_LSI1_IsReady>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f1      	beq.n	800488c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80048a8:	f7ff fc53 	bl	8004152 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7ff f80a 	bl	80038c4 <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048b4:	f7ff f806 	bl	80038c4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e1b0      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80048c6:	f7ff fc66 	bl	8004196 <LL_RCC_LSI2_IsReady>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f1      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fc70 	bl	80041ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80048da:	f7ff fc17 	bl	800410c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fe fff1 	bl	80038c4 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048e6:	f7fe ffed 	bl	80038c4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e197      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048f8:	f7ff fc19 	bl	800412e <LL_RCC_LSI1_IsReady>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f1      	bne.n	80048e6 <HAL_RCC_OscConfig+0x31a>
 8004902:	e051      	b.n	80049a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004904:	f7ff fbf1 	bl	80040ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fe ffdc 	bl	80038c4 <HAL_GetTick>
 800490c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800490e:	e00c      	b.n	800492a <HAL_RCC_OscConfig+0x35e>
 8004910:	20000010 	.word	0x20000010
 8004914:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004918:	f7fe ffd4 	bl	80038c4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e17e      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800492a:	f7ff fc00 	bl	800412e <LL_RCC_LSI1_IsReady>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f1      	beq.n	8004918 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004934:	f7ff fc1e 	bl	8004174 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800493a:	f7fe ffc3 	bl	80038c4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e16d      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800494c:	f7ff fc23 	bl	8004196 <LL_RCC_LSI2_IsReady>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x36e>
 8004956:	e027      	b.n	80049a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004958:	f7ff fc0c 	bl	8004174 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fe ffb2 	bl	80038c4 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004964:	f7fe ffae 	bl	80038c4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b03      	cmp	r3, #3
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e158      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004976:	f7ff fc0e 	bl	8004196 <LL_RCC_LSI2_IsReady>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f1      	bne.n	8004964 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004980:	f7ff fbc4 	bl	800410c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fe ff9e 	bl	80038c4 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800498c:	f7fe ff9a 	bl	80038c4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e144      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800499e:	f7ff fbc6 	bl	800412e <LL_RCC_LSI1_IsReady>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f1      	bne.n	800498c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d05b      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b4:	4b9e      	ldr	r3, [pc, #632]	; (8004c30 <HAL_RCC_OscConfig+0x664>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d114      	bne.n	80049ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80049c0:	f7ff fa2a 	bl	8003e18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c4:	f7fe ff7e 	bl	80038c4 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049cc:	f7fe ff7a 	bl	80038c4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e124      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049de:	4b94      	ldr	r3, [pc, #592]	; (8004c30 <HAL_RCC_OscConfig+0x664>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_OscConfig+0x42c>
 80049f2:	f7ff fb24 	bl	800403e <LL_RCC_LSE_Enable>
 80049f6:	e00c      	b.n	8004a12 <HAL_RCC_OscConfig+0x446>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d104      	bne.n	8004a0a <HAL_RCC_OscConfig+0x43e>
 8004a00:	f7ff fb3f 	bl	8004082 <LL_RCC_LSE_EnableBypass>
 8004a04:	f7ff fb1b 	bl	800403e <LL_RCC_LSE_Enable>
 8004a08:	e003      	b.n	8004a12 <HAL_RCC_OscConfig+0x446>
 8004a0a:	f7ff fb29 	bl	8004060 <LL_RCC_LSE_Disable>
 8004a0e:	f7ff fb49 	bl	80040a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fe ff53 	bl	80038c4 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fe ff4f 	bl	80038c4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e0f7      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a38:	f7ff fb45 	bl	80040c6 <LL_RCC_LSE_IsReady>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ef      	beq.n	8004a22 <HAL_RCC_OscConfig+0x456>
 8004a42:	e013      	b.n	8004a6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe ff3e 	bl	80038c4 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fe ff3a 	bl	80038c4 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0e2      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a62:	f7ff fb30 	bl	80040c6 <LL_RCC_LSE_IsReady>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ef      	bne.n	8004a4c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80d8 	beq.w	8004c26 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a76:	f7ff fc38 	bl	80042ea <LL_RCC_GetSysClkSource>
 8004a7a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f040 80a6 	bne.w	8004bda <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d123      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d11c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d114      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d054      	beq.n	8004b8e <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d04f      	beq.n	8004b8a <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aea:	f7ff fcc1 	bl	8004470 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aee:	f7fe fee9 	bl	80038c4 <HAL_GetTick>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fe fee5 	bl	80038c4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e08f      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ef      	bne.n	8004af6 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	4b45      	ldr	r3, [pc, #276]	; (8004c34 <HAL_RCC_OscConfig+0x668>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b2e:	0212      	lsls	r2, r2, #8
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b3c:	4311      	orrs	r1, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b42:	430a      	orrs	r2, r1
 8004b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b4c:	f7ff fc81 	bl	8004452 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b60:	f7fe feb0 	bl	80038c4 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fe feac 	bl	80038c4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e056      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b88:	e04d      	b.n	8004c26 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e04c      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d144      	bne.n	8004c26 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b9c:	f7ff fc59 	bl	8004452 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bb0:	f7fe fe88 	bl	80038c4 <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fe fe84 	bl	80038c4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e02e      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x5ec>
 8004bd8:	e025      	b.n	8004c26 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d020      	beq.n	8004c22 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be0:	f7ff fc46 	bl	8004470 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fe fe6e 	bl	80038c4 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fe fe6a 	bl	80038c4 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e014      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ef      	bne.n	8004bec <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60d3      	str	r3, [r2, #12]
 8004c20:	e001      	b.n	8004c26 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3734      	adds	r7, #52	; 0x34
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd90      	pop	{r4, r7, pc}
 8004c30:	58000400 	.word	0x58000400
 8004c34:	11c1808c 	.word	0x11c1808c

08004c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e12d      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b98      	ldr	r3, [pc, #608]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d91b      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b95      	ldr	r3, [pc, #596]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 0207 	bic.w	r2, r3, #7
 8004c62:	4993      	ldr	r1, [pc, #588]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fe fe2b 	bl	80038c4 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c72:	f7fe fe27 	bl	80038c4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e111      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c84:	4b8a      	ldr	r3, [pc, #552]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1ef      	bne.n	8004c72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fb2d 	bl	8004302 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ca8:	f7fe fe0c 	bl	80038c4 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cb0:	f7fe fe08 	bl	80038c4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e0f2      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cc2:	f7ff fc27 	bl	8004514 <LL_RCC_IsActiveFlag_HPRE>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f1      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fb24 	bl	800432a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ce2:	f7fe fdef 	bl	80038c4 <HAL_GetTick>
 8004ce6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cea:	f7fe fdeb 	bl	80038c4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e0d5      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cfc:	f7ff fc1c 	bl	8004538 <LL_RCC_IsActiveFlag_C2HPRE>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f1      	beq.n	8004cea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fb1d 	bl	8004356 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d1c:	f7fe fdd2 	bl	80038c4 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d24:	f7fe fdce 	bl	80038c4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0b8      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d36:	f7ff fc12 	bl	800455e <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f1      	beq.n	8004d24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb17 	bl	8004384 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d56:	f7fe fdb5 	bl	80038c4 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d5e:	f7fe fdb1 	bl	80038c4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e09b      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d70:	f7ff fc08 	bl	8004584 <LL_RCC_IsActiveFlag_PPRE1>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f1      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d017      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fb0d 	bl	80043ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d92:	f7fe fd97 	bl	80038c4 <HAL_GetTick>
 8004d96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d9a:	f7fe fd93 	bl	80038c4 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e07d      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004dac:	f7ff fbfc 	bl	80045a8 <LL_RCC_IsActiveFlag_PPRE2>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f1      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d043      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004dca:	f7ff f8e1 	bl	8003f90 <LL_RCC_HSE_IsReady>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11e      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e067      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d106      	bne.n	8004dee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004de0:	f7ff fb55 	bl	800448e <LL_RCC_PLL_IsReady>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d113      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e05c      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004df6:	f7ff fa15 	bl	8004224 <LL_RCC_MSI_IsReady>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e051      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e04:	f7ff f8f4 	bl	8003ff0 <LL_RCC_HSI_IsReady>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e04a      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fa53 	bl	80042c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fe fd52 	bl	80038c4 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fe fd4e 	bl	80038c4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e036      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	f7ff fa56 	bl	80042ea <LL_RCC_GetSysClkSource>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d1ec      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4a:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d21b      	bcs.n	8004e90 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 0207 	bic.w	r2, r3, #7
 8004e60:	4913      	ldr	r1, [pc, #76]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e68:	f7fe fd2c 	bl	80038c4 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e70:	f7fe fd28 	bl	80038c4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e012      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_ClockConfig+0x278>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1ef      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e90:	f000 f87e 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <HAL_RCC_ClockConfig+0x27c>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e9a:	f7fe fd1f 	bl	80038dc <HAL_GetTickPrio>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fbe7 	bl	8003674 <HAL_InitTick>
 8004ea6:	4603      	mov	r3, r0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58004000 	.word	0x58004000
 8004eb4:	20000010 	.word	0x20000010

08004eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ebe:	f7ff fa14 	bl	80042ea <LL_RCC_GetSysClkSource>
 8004ec2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004eca:	f7ff f9d0 	bl	800426e <LL_RCC_MSI_GetRange>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e04b      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d102      	bne.n	8004eec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e045      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d10a      	bne.n	8004f08 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ef2:	f7ff f81d 	bl	8003f30 <LL_RCC_HSE_IsEnabledDiv2>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d102      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e03a      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f02:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e037      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f08:	f7ff faf8 	bl	80044fc <LL_RCC_PLL_GetMainSource>
 8004f0c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d003      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x64>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f1a:	e00d      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f1e:	60bb      	str	r3, [r7, #8]
        break;
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f22:	f7ff f805 	bl	8003f30 <LL_RCC_HSE_IsEnabledDiv2>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f2e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f30:	e00d      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f32:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f34:	60bb      	str	r3, [r7, #8]
        break;
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f38:	f7ff f999 	bl	800426e <LL_RCC_MSI_GetRange>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	4a0f      	ldr	r2, [pc, #60]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	60bb      	str	r3, [r7, #8]
        break;
 8004f4c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004f4e:	f7ff fab0 	bl	80044b2 <LL_RCC_PLL_GetN>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	fb03 f402 	mul.w	r4, r3, r2
 8004f5a:	f7ff fac3 	bl	80044e4 <LL_RCC_PLL_GetDivider>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	3301      	adds	r3, #1
 8004f64:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f68:	f7ff fab0 	bl	80044cc <LL_RCC_PLL_GetR>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	0f5b      	lsrs	r3, r3, #29
 8004f70:	3301      	adds	r3, #1
 8004f72:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f76:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f78:	68fb      	ldr	r3, [r7, #12]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08005ccc 	.word	0x08005ccc
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	01e84800 	.word	0x01e84800

08004f90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b598      	push	{r3, r4, r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f94:	f7ff ff90 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	f7ff fa1b 	bl	80043d4 <LL_RCC_GetAHBPrescaler>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	4a03      	ldr	r2, [pc, #12]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd98      	pop	{r3, r4, r7, pc}
 8004fb4:	08005c6c 	.word	0x08005c6c

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b598      	push	{r3, r4, r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004fbc:	f7ff ffe8 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	f7ff fa3a 	bl	800443a <LL_RCC_GetAPB2Prescaler>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	0adb      	lsrs	r3, r3, #11
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd98      	pop	{r3, r4, r7, pc}
 8004fe0:	08005cac 	.word	0x08005cac

08004fe4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	226f      	movs	r2, #111	; 0x6f
 8004ff2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004ff4:	f7ff f979 	bl	80042ea <LL_RCC_GetSysClkSource>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004ffe:	f7ff f9e9 	bl	80043d4 <LL_RCC_GetAHBPrescaler>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005008:	f7ff fa0b 	bl	8004422 <LL_RCC_GetAPB1Prescaler>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005012:	f7ff fa12 	bl	800443a <LL_RCC_GetAPB2Prescaler>
 8005016:	4602      	mov	r2, r0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800501c:	f7ff f9e6 	bl	80043ec <LL_C2_RCC_GetAHBPrescaler>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005026:	f7ff f9ee 	bl	8004406 <LL_RCC_GetAHB4Prescaler>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <HAL_RCC_GetClockConfig+0x60>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0207 	and.w	r2, r3, #7
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	58004000 	.word	0x58004000

08005048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2bb0      	cmp	r3, #176	; 0xb0
 8005054:	d903      	bls.n	800505e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e007      	b.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800506e:	f7ff f9ca 	bl	8004406 <LL_RCC_GetAHB4Prescaler>
 8005072:	4603      	mov	r3, r0
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	0c9b      	lsrs	r3, r3, #18
 8005092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f80c 	bl	80050b4 <RCC_SetFlashLatency>
 800509c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08005ccc 	.word	0x08005ccc
 80050ac:	08005c6c 	.word	0x08005c6c
 80050b0:	431bde83 	.word	0x431bde83

080050b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b08f      	sub	sp, #60	; 0x3c
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <RCC_SetFlashLatency+0x9c>)
 80050c0:	f107 041c 	add.w	r4, r7, #28
 80050c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80050ca:	4b22      	ldr	r3, [pc, #136]	; (8005154 <RCC_SetFlashLatency+0xa0>)
 80050cc:	f107 040c 	add.w	r4, r7, #12
 80050d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80050d6:	2300      	movs	r3, #0
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050da:	2300      	movs	r3, #0
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	e013      	b.n	8005108 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3338      	adds	r3, #56	; 0x38
 80050e6:	443b      	add	r3, r7
 80050e8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d807      	bhi.n	8005102 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	3338      	adds	r3, #56	; 0x38
 80050f8:	443b      	add	r3, r7
 80050fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005100:	e005      	b.n	800510e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	3301      	adds	r3, #1
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	2b03      	cmp	r3, #3
 800510c:	d9e8      	bls.n	80050e0 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <RCC_SetFlashLatency+0xa4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	4910      	ldr	r1, [pc, #64]	; (8005158 <RCC_SetFlashLatency+0xa4>)
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800511e:	f7fe fbd1 	bl	80038c4 <HAL_GetTick>
 8005122:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005124:	e008      	b.n	8005138 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005126:	f7fe fbcd 	bl	80038c4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e007      	b.n	8005148 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <RCC_SetFlashLatency+0xa4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005142:	429a      	cmp	r2, r3
 8005144:	d1ef      	bne.n	8005126 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	373c      	adds	r7, #60	; 0x3c
 800514c:	46bd      	mov	sp, r7
 800514e:	bd90      	pop	{r4, r7, pc}
 8005150:	08005c40 	.word	0x08005c40
 8005154:	08005c50 	.word	0x08005c50
 8005158:	58004000 	.word	0x58004000

0800515c <LL_RCC_LSE_IsEnabled>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <LL_RCC_LSE_IsEnabled+0x18>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <LL_RCC_LSE_IsEnabled+0x1a>
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <LL_RCC_LSE_IsReady>:
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d101      	bne.n	8005198 <LL_RCC_LSE_IsReady+0x18>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <LL_RCC_LSE_IsReady+0x1a>
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_MSI_EnablePLLMode>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b2:	f043 0304 	orr.w	r3, r3, #4
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_SetRFWKPClockSource>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_RCC_SetSMPSClockSource>:
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4313      	orrs	r3, r2
 8005208:	624b      	str	r3, [r1, #36]	; 0x24
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_RCC_SetSMPSPrescaler>:
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_RCC_SetUSARTClockSource>:
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 0203 	bic.w	r2, r3, #3
 8005252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_SetLPUARTClockSource>:
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800527e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <LL_RCC_SetI2CClockSource>:
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ae:	43db      	mvns	r3, r3
 80052b0:	401a      	ands	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <LL_RCC_SetLPTIMClockSource>:
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_RCC_SetRNGClockSource>:
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_RCC_SetCLK48ClockSource>:
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_SetADCClockSource>:
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_RCC_SetRTCClockSource>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_RCC_GetRTCClockSource>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80053b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <LL_RCC_ForceBackupDomainReset>:
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053e6:	bf00      	nop
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800541e:	2300      	movs	r3, #0
 8005420:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542a:	2b00      	cmp	r3, #0
 800542c:	d046      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800542e:	f7ff ffc1 	bl	80053b4 <LL_RCC_GetRTCClockSource>
 8005432:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	429a      	cmp	r2, r3
 800543c:	d03c      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800543e:	f7fe fceb 	bl	8003e18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff9b 	bl	8005388 <LL_RCC_SetRTCClockSource>
 8005452:	e02e      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800545e:	f7ff ffb6 	bl	80053ce <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005462:	f7ff ffc5 	bl	80053f0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800547e:	f7ff fe6d 	bl	800515c <LL_RCC_LSE_IsEnabled>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d114      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005488:	f7fe fa1c 	bl	80038c4 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800548e:	e00b      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fe fa18 	bl	80038c4 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d902      	bls.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	77fb      	strb	r3, [r7, #31]
              break;
 80054a6:	e004      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80054a8:	f7ff fe6a 	bl	8005180 <LL_RCC_LSE_IsReady>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d1ee      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	77bb      	strb	r3, [r7, #30]
 80054b6:	e001      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff feb6 	bl	800523e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fec1 	bl	800526a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fee9 	bl	80052d0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d004      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fede 	bl	80052d0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff feb6 	bl	8005296 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d008      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005548:	d003      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fed4 	bl	8005304 <LL_RCC_SetRNGClockSource>
 800555c:	e00a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	2000      	movs	r0, #0
 800556a:	f7ff fecb 	bl	8005304 <LL_RCC_SetRNGClockSource>
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fede 	bl	8005330 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800557c:	d107      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	2b00      	cmp	r3, #0
 8005598:	d011      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fedc 	bl	800535c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ac:	d107      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fdf7 	bl	80051c2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fe16 	bl	8005216 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fdfd 	bl	80051ee <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80055f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005602:	f7ff fdcf 	bl	80051a4 <LL_RCC_MSI_EnablePLLMode>
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e049      	b.n	80056b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f841 	bl	80056b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 f9d5 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e036      	b.n	8005752 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <HAL_TIM_Base_Start_IT+0x94>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIM_Base_Start_IT+0x44>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d115      	bne.n	800573c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	4b13      	ldr	r3, [pc, #76]	; (8005764 <HAL_TIM_Base_Start_IT+0x98>)
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b06      	cmp	r3, #6
 8005720:	d015      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x82>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d011      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	e008      	b.n	800574e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e000      	b.n	8005750 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0202 	mvn.w	r2, #2
 8005794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f905 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8f7 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f908 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8db 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8cd 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f8de 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8b1 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8a3 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f8b4 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f887 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f879 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f88a 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0201 	mvn.w	r2, #1
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fd fe8e 	bl	8003608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8ca 	bl	8005aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d10e      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d107      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8bd 	bl	8005ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f838 	bl	80059e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b20      	cmp	r3, #32
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0220 	mvn.w	r2, #32
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f87d 	bl	8005a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <TIM_Base_SetConfig+0x9c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x20>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <TIM_Base_SetConfig+0x9c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_Base_SetConfig+0x42>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d108      	bne.n	8005a4c <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <TIM_Base_SetConfig+0x9c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d103      	bne.n	8005a80 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	615a      	str	r2, [r3, #20]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40012c00 	.word	0x40012c00

08005a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f000 f83e 	bl	8005b68 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	08005d0c 	.word	0x08005d0c
 8005b10:	08005d0c 	.word	0x08005d0c
 8005b14:	08005d0c 	.word	0x08005d0c
 8005b18:	08005d10 	.word	0x08005d10

08005b1c <memcmp>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	3901      	subs	r1, #1
 8005b20:	4402      	add	r2, r0
 8005b22:	4290      	cmp	r0, r2
 8005b24:	d101      	bne.n	8005b2a <memcmp+0xe>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e005      	b.n	8005b36 <memcmp+0x1a>
 8005b2a:	7803      	ldrb	r3, [r0, #0]
 8005b2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d001      	beq.n	8005b38 <memcmp+0x1c>
 8005b34:	1b18      	subs	r0, r3, r4
 8005b36:	bd10      	pop	{r4, pc}
 8005b38:	3001      	adds	r0, #1
 8005b3a:	e7f2      	b.n	8005b22 <memcmp+0x6>

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b52:	4291      	cmp	r1, r2
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <memset>:
 8005b58:	4402      	add	r2, r0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
