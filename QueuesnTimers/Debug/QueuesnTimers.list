
QueuesnTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a920  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afd8  0800afd8  0001afd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800afe0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023e0  20000090  0800b068  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002470  0800b068  00022470  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e663  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000416e  00000000  00000000  0003e723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bb0  00000000  00000000  00042898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a18  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021a86  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e0d6  00000000  00000000  000678e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cd2e0  00000000  00000000  000859bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00152c9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d18  00000000  00000000  00152cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	0800aa48 	.word	0x0800aa48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	0800aa48 	.word	0x0800aa48

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LedStartTimer>:

#include "led_effect.h"


void LedStartTimer(uint8_t n)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af02      	add	r7, sp, #8
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	LedEffectStop();
 800053e:	f000 f817 	bl	8000570 <LedEffectStop>
	xTimerStart(hLedTimer[n-1], portMAX_DELAY);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3b01      	subs	r3, #1
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <LedStartTimer+0x38>)
 8000548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800054c:	f007 f9c2 	bl	80078d4 <xTaskGetTickCount>
 8000550:	4602      	mov	r2, r0
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2101      	movs	r1, #1
 800055c:	4620      	mov	r0, r4
 800055e:	f008 f8cb 	bl	80086f8 <xTimerGenericCommand>


}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	bf00      	nop
 800056c:	20000184 	.word	0x20000184

08000570 <LedEffectStop>:

void LedEffectStop(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	for(uint8_t i = 0; i < 3 ; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e00e      	b.n	800059a <LedEffectStop+0x2a>
		xTimerStop(hLedTimer[i],portMAX_DELAY);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <LedEffectStop+0x3c>)
 8000580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2200      	movs	r2, #0
 800058e:	2103      	movs	r1, #3
 8000590:	f008 f8b2 	bl	80086f8 <xTimerGenericCommand>
	for(uint8_t i = 0; i < 3 ; i++)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	3301      	adds	r3, #1
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d9ed      	bls.n	800057c <LedEffectStop+0xc>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000184 	.word	0x20000184

080005b0 <LedEffect1>:

void LedEffect1(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LedEffect1+0x28>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <LedEffect1+0x28>)
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <LedEffect1+0x28>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <LedEffect1+0x20>
 80005ca:	f000 f889 	bl	80006e0 <TurnOffAllLeds>
}
 80005ce:	e001      	b.n	80005d4 <LedEffect1+0x24>
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 80005d0:	f000 f870 	bl	80006b4 <TurnOnAllLeds>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000008 	.word	0x20000008

080005dc <LedEffect2>:

void LedEffect2(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <LedEffect2+0x28>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	f083 0301 	eor.w	r3, r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LedEffect2+0x28>)
 80005ec:	801a      	strh	r2, [r3, #0]
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <LedEffect2+0x28>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <LedEffect2+0x20>
 80005f6:	f000 f889 	bl	800070c <TurnOnOddLeds>
}
 80005fa:	e001      	b.n	8000600 <LedEffect2+0x24>
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 80005fc:	f000 f89c 	bl	8000738 <TurnOnEvenLeds>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000000a 	.word	0x2000000a

08000608 <LedEffect3>:

/* TODO: Try to fix the order of blinking. It starts blinking
 * with BLUE LED and goes in reverse direction. */

void LedEffect3(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	// 1 << 2 : 4	(0x4)
	// 1 << 3 : 8	(0x8)
	// 1 << 4 : 16	(0x10)
	// 1 << 5 : 32	(0x20)
	// 1 << 6 : 64	(0x40)
	LedControl( 0x1 << (i++ % 6) );
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <LedEffect3+0x58>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	1c53      	adds	r3, r2, #1
 8000612:	b299      	uxth	r1, r3
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <LedEffect3+0x58>)
 8000616:	8019      	strh	r1, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <LedEffect3+0x5c>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	0899      	lsrs	r1, r3, #2
 8000620:	460b      	mov	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	2301      	movs	r3, #1
 8000630:	4093      	lsls	r3, r2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f817 	bl	8000668 <LedControl>

	if (i % 6 == 0)
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <LedEffect3+0x58>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <LedEffect3+0x5c>)
 8000640:	fba3 1302 	umull	r1, r3, r3, r2
 8000644:	0899      	lsrs	r1, r3, #2
 8000646:	460b      	mov	r3, r1
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d102      	bne.n	800065c <LedEffect3+0x54>
	{
		// Reset i
		i = 0;
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <LedEffect3+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		// Do nothing.
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000ac 	.word	0x200000ac
 8000664:	aaaaaaab 	.word	0xaaaaaaab

08000668 <LedControl>:

void LedControl(uint8_t value)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	for( uint8_t i = 0; i < 6; i++ )
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e013      	b.n	80006a0 <LedControl+0x38>
		HAL_GPIO_WritePin( GPIOB, ( BLUE_LED >> i), ((value >> i))& 0x1 );
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2220      	movs	r2, #32
 800067c:	fa42 f303 	asr.w	r3, r2, r3
 8000680:	b299      	uxth	r1, r3
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	fa42 f303 	asr.w	r3, r2, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <LedControl+0x48>)
 8000696:	f001 fe99 	bl	80023cc <HAL_GPIO_WritePin>
	for( uint8_t i = 0; i < 6; i++ )
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	d9e8      	bls.n	8000678 <LedControl+0x10>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	48000400 	.word	0x48000400

080006b4 <TurnOnAllLeds>:


void TurnOnAllLeds(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2120      	movs	r1, #32
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <TurnOnAllLeds+0x28>)
 80006be:	f001 fe85 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <TurnOnAllLeds+0x28>)
 80006c8:	f001 fe80 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <TurnOnAllLeds+0x28>)
 80006d2:	f001 fe7b 	bl	80023cc <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	48000400 	.word	0x48000400

080006e0 <TurnOffAllLeds>:

void TurnOffAllLeds(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <TurnOffAllLeds+0x28>)
 80006ea:	f001 fe6f 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <TurnOffAllLeds+0x28>)
 80006f4:	f001 fe6a 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <TurnOffAllLeds+0x28>)
 80006fe:	f001 fe65 	bl	80023cc <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	48000400 	.word	0x48000400

0800070c <TurnOnOddLeds>:

void TurnOnOddLeds(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <TurnOnOddLeds+0x28>)
 8000716:	f001 fe59 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <TurnOnOddLeds+0x28>)
 8000720:	f001 fe54 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <TurnOnOddLeds+0x28>)
 800072a:	f001 fe4f 	bl	80023cc <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <TurnOnEvenLeds>:

void TurnOnEvenLeds(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <TurnOnEvenLeds+0x28>)
 8000742:	f001 fe43 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <TurnOnEvenLeds+0x28>)
 800074c:	f001 fe3e 	bl	80023cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2102      	movs	r1, #2
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <TurnOnEvenLeds+0x28>)
 8000756:	f001 fe39 	bl	80023cc <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	48000400 	.word	0x48000400

08000764 <LedEffectCbx>:

/* Timer callback function. It is called whenever a timer ends */
void LedEffectCbx(TimerHandle_t xTimer)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint32_t id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f008 facc 	bl	8008d0a <pvTimerGetTimerID>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d00f      	beq.n	800079c <LedEffectCbx+0x38>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d80f      	bhi.n	80007a2 <LedEffectCbx+0x3e>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d003      	beq.n	8000790 <LedEffectCbx+0x2c>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d003      	beq.n	8000796 <LedEffectCbx+0x32>
	case LED_EFFECT3:
		LedEffect3();
		break;
	}

}
 800078e:	e008      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect1();
 8000790:	f7ff ff0e 	bl	80005b0 <LedEffect1>
		break;
 8000794:	e005      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect2();
 8000796:	f7ff ff21 	bl	80005dc <LedEffect2>
		break;
 800079a:	e002      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect3();
 800079c:	f7ff ff34 	bl	8000608 <LedEffect3>
		break;
 80007a0:	bf00      	nop
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ba:	f023 0218 	bic.w	r2, r3, #24
 80007be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f001 fa8b 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f921 	bl	8000a58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000816:	f000 f975 	bl	8000b04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fa03 	bl	8000c24 <MX_GPIO_Init>
  MX_RTC_Init();
 800081e:	f000 f98f 	bl	8000b40 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000822:	f000 f9b3 	bl	8000b8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <main+0x1e8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <main+0x1e8>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6013      	str	r3, [r2, #0]

  BaseType_t status;

  status = xTaskCreate(menuTask, "Menu-Task", 250, NULL, 2, &hMenu);
 8000832:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <main+0x1ec>)
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	22fa      	movs	r2, #250	; 0xfa
 800083e:	496e      	ldr	r1, [pc, #440]	; (80009f8 <main+0x1f0>)
 8000840:	486e      	ldr	r0, [pc, #440]	; (80009fc <main+0x1f4>)
 8000842:	f006 fe05 	bl	8007450 <xTaskCreate>
 8000846:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00a      	beq.n	8000864 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000860:	bf00      	nop
 8000862:	e7fe      	b.n	8000862 <main+0x5a>

  status = xTaskCreate(ledTask, "Led-Task", 250, NULL, 2, &hLed);
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <main+0x1f8>)
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	2302      	movs	r3, #2
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	22fa      	movs	r2, #250	; 0xfa
 8000870:	4964      	ldr	r1, [pc, #400]	; (8000a04 <main+0x1fc>)
 8000872:	4865      	ldr	r0, [pc, #404]	; (8000a08 <main+0x200>)
 8000874:	f006 fdec 	bl	8007450 <xTaskCreate>
 8000878:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d00a      	beq.n	8000896 <main+0x8e>
        __asm volatile
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	61bb      	str	r3, [r7, #24]
    }
 8000892:	bf00      	nop
 8000894:	e7fe      	b.n	8000894 <main+0x8c>

  status = xTaskCreate(RTCTask, "RTC-Task", 250, NULL, 2, &hRTC);
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <main+0x204>)
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	2302      	movs	r3, #2
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	22fa      	movs	r2, #250	; 0xfa
 80008a2:	495b      	ldr	r1, [pc, #364]	; (8000a10 <main+0x208>)
 80008a4:	485b      	ldr	r0, [pc, #364]	; (8000a14 <main+0x20c>)
 80008a6:	f006 fdd3 	bl	8007450 <xTaskCreate>
 80008aa:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d00a      	beq.n	80008c8 <main+0xc0>
        __asm volatile
 80008b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	617b      	str	r3, [r7, #20]
    }
 80008c4:	bf00      	nop
 80008c6:	e7fe      	b.n	80008c6 <main+0xbe>

  status = xTaskCreate(printTask, "Print-Task", 250, NULL, 2, &hPrint);
 80008c8:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <main+0x210>)
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	2302      	movs	r3, #2
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	22fa      	movs	r2, #250	; 0xfa
 80008d4:	4951      	ldr	r1, [pc, #324]	; (8000a1c <main+0x214>)
 80008d6:	4852      	ldr	r0, [pc, #328]	; (8000a20 <main+0x218>)
 80008d8:	f006 fdba 	bl	8007450 <xTaskCreate>
 80008dc:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d00a      	beq.n	80008fa <main+0xf2>
        __asm volatile
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
    }
 80008f6:	bf00      	nop
 80008f8:	e7fe      	b.n	80008f8 <main+0xf0>

  status = xTaskCreate(commandTask, "Command-Task", 250, NULL, 2, &hCommand);
 80008fa:	4b4a      	ldr	r3, [pc, #296]	; (8000a24 <main+0x21c>)
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	22fa      	movs	r2, #250	; 0xfa
 8000906:	4948      	ldr	r1, [pc, #288]	; (8000a28 <main+0x220>)
 8000908:	4848      	ldr	r0, [pc, #288]	; (8000a2c <main+0x224>)
 800090a:	f006 fda1 	bl	8007450 <xTaskCreate>
 800090e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d00a      	beq.n	800092c <main+0x124>
        __asm volatile
 8000916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	60fb      	str	r3, [r7, #12]
    }
 8000928:	bf00      	nop
 800092a:	e7fe      	b.n	800092a <main+0x122>

  hInputDataQueue = xQueueCreate(10, sizeof(char));
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	200a      	movs	r0, #10
 8000932:	f006 f841 	bl	80069b8 <xQueueGenericCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <main+0x228>)
 800093a:	6013      	str	r3, [r2, #0]
  configASSERT(hInputDataQueue != NULL);
 800093c:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <main+0x228>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <main+0x152>
        __asm volatile
 8000944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000948:	f383 8811 	msr	BASEPRI, r3
 800094c:	f3bf 8f6f 	isb	sy
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	60bb      	str	r3, [r7, #8]
    }
 8000956:	bf00      	nop
 8000958:	e7fe      	b.n	8000958 <main+0x150>

  /* We pass a string (a reference to char) to the queue API
   * Since a pointer is unsigned long int we used sizeof(unsigned long int) */
  hPrintQueue = xQueueCreate(10, sizeof(size_t));
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	200a      	movs	r0, #10
 8000960:	f006 f82a 	bl	80069b8 <xQueueGenericCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <main+0x22c>)
 8000968:	6013      	str	r3, [r2, #0]
  configASSERT(hPrintQueue != NULL);
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <main+0x22c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10a      	bne.n	8000988 <main+0x180>
        __asm volatile
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	607b      	str	r3, [r7, #4]
    }
 8000984:	bf00      	nop
 8000986:	e7fe      	b.n	8000986 <main+0x17e>

  // Create timers for LED effects
  for(uint8_t i = 0; i < 3; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800098e:	e017      	b.n	80009c0 <main+0x1b8>
	  hLedTimer[i] = xTimerCreate("Led Timer",pdMS_TO_TICKS(500),pdTRUE,(void*)(i+1),LedEffectCbx);
 8000990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000994:	3301      	adds	r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <main+0x230>)
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009a8:	4824      	ldr	r0, [pc, #144]	; (8000a3c <main+0x234>)
 80009aa:	f007 fe49 	bl	8008640 <xTimerCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <main+0x238>)
 80009b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(uint8_t i = 0; i < 3; i++)
 80009b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d9e3      	bls.n	8000990 <main+0x188>

  // Create timer for RTC report
  RtcTimer = xTimerCreate("RTC Timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, RtcTimerCbx);
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <main+0x23c>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <main+0x240>)
 80009d6:	f007 fe33 	bl	8008640 <xTimerCreate>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <main+0x244>)
 80009de:	6013      	str	r3, [r2, #0]



  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 80009e0:	2201      	movs	r2, #1
 80009e2:	491b      	ldr	r1, [pc, #108]	; (8000a50 <main+0x248>)
 80009e4:	481b      	ldr	r0, [pc, #108]	; (8000a54 <main+0x24c>)
 80009e6:	f003 ff57 	bl	8004898 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009ea:	f006 fe77 	bl	80076dc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0x1e6>
 80009f0:	e0001000 	.word	0xe0001000
 80009f4:	20000168 	.word	0x20000168
 80009f8:	0800aa60 	.word	0x0800aa60
 80009fc:	080014b1 	.word	0x080014b1
 8000a00:	2000016c 	.word	0x2000016c
 8000a04:	0800aa6c 	.word	0x0800aa6c
 8000a08:	08001599 	.word	0x08001599
 8000a0c:	20000170 	.word	0x20000170
 8000a10:	0800aa78 	.word	0x0800aa78
 8000a14:	080016b1 	.word	0x080016b1
 8000a18:	20000174 	.word	0x20000174
 8000a1c:	0800aa84 	.word	0x0800aa84
 8000a20:	08001b11 	.word	0x08001b11
 8000a24:	20000178 	.word	0x20000178
 8000a28:	0800aa90 	.word	0x0800aa90
 8000a2c:	08001b51 	.word	0x08001b51
 8000a30:	2000017c 	.word	0x2000017c
 8000a34:	20000180 	.word	0x20000180
 8000a38:	08000765 	.word	0x08000765
 8000a3c:	0800aaa0 	.word	0x0800aaa0
 8000a40:	20000184 	.word	0x20000184
 8000a44:	08000f91 	.word	0x08000f91
 8000a48:	0800aaac 	.word	0x0800aaac
 8000a4c:	20000190 	.word	0x20000190
 8000a50:	20000194 	.word	0x20000194
 8000a54:	200000d4 	.word	0x200000d4

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b098      	sub	sp, #96	; 0x60
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2244      	movs	r2, #68	; 0x44
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f008 fe76 	bl	8009758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a7e:	f001 fcbd 	bl	80023fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fe91 	bl	80007aa <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000a88:	232f      	movs	r3, #47	; 0x2f
 8000a8a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2340      	movs	r3, #64	; 0x40
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aa8:	2360      	movs	r3, #96	; 0x60
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aac:	2305      	movs	r3, #5
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fffd 	bl	8002ab8 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000ac4:	f000 f950 	bl	8000d68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ac8:	236f      	movs	r3, #111	; 0x6f
 8000aca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fb1b 	bl	8003124 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000af4:	f000 f938 	bl	8000d68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000af8:	f003 f80d 	bl	8003b16 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000afc:	bf00      	nop
 8000afe:	3760      	adds	r7, #96	; 0x60
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2230      	movs	r2, #48	; 0x30
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 fe21 	bl	8009758 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 feff 	bl	800392a <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b32:	f000 f919 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	; 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b52:	227f      	movs	r2, #127	; 0x7f
 8000b54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_RTC_Init+0x44>)
 8000b70:	f002 ffd8 	bl	8003b24 <HAL_RTC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b7a:	f000 f8f5 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000b0 	.word	0x200000b0
 8000b88:	40002800 	.word	0x40002800

08000b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <MX_USART1_UART_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bd6:	f003 fd81 	bl	80046dc <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f8c2 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000be8:	f005 fcff 	bl	80065ea <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f8b9 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000bfa:	f005 fd34 	bl	8006666 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f8b0 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_USART1_UART_Init+0x90>)
 8000c0a:	f005 fcb5 	bl	8006578 <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f8a8 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000d4 	.word	0x200000d4
 8000c20:	40013800 	.word	0x40013800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fdcc 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fdc9 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fdc6 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	2010      	movs	r0, #16
 8000c4c:	f7ff fdc3 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2123      	movs	r1, #35	; 0x23
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_GPIO_Init+0x88>)
 8000c56:	f001 fbb9 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c5a:	2340      	movs	r3, #64	; 0x40
 8000c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f001 fa45 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000c72:	2323      	movs	r3, #35	; 0x23
 8000c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_GPIO_Init+0x88>)
 8000c88:	f001 fa38 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0x8c>)
 8000c9e:	f001 fa2d 	bl	80020fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48001000 	.word	0x48001000

08000cb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	BaseType_t isQueueFull;
	// return pdFALSE if the queue is not full, or pdTRUE if the queue is full.
	isQueueFull = xQueueIsQueueFullFromISR(hInputDataQueue);
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_UART_RxCpltCallback+0x80>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fb40 	bl	8007346 <xQueueIsQueueFullFromISR>
 8000cc6:	60f8      	str	r0, [r7, #12]
	if(isQueueFull == pdFALSE)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <HAL_UART_RxCpltCallback+0x2a>
	{
		/* Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_RxCpltCallback+0x80>)
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4918      	ldr	r1, [pc, #96]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000cd8:	f005 ffee 	bl	8006cb8 <xQueueGenericSendFromISR>
 8000cdc:	e012      	b.n	8000d04 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d10e      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* make sure that last data byte of the queue is '\n' */
			// Copy the last received item to the queue into dummy and delete it
			xQueueReceiveFromISR(hInputDataQueue, (void*)&dummy, NULL);
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_UART_RxCpltCallback+0x80>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f107 010b 	add.w	r1, r7, #11
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 f96b 	bl	8006fcc <xQueueReceiveFromISR>

			// Keep '\n' on the back of the queue
			xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_UART_RxCpltCallback+0x80>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000d00:	f005 ffda 	bl	8006cb8 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
			if(user_data == '\n')
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b0a      	cmp	r3, #10
 8000d0a:	d10a      	bne.n	8000d22 <HAL_UART_RxCpltCallback+0x6e>
			{
				xTaskNotifyFromISR(hCommand,0,eNoAction,NULL);
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_UART_RxCpltCallback+0x88>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f007 faed 	bl	80082fc <xTaskGenericNotifyFromISR>
			}



	/* Enable UART data byte reception again in IT mode */
	  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 8000d22:	2201      	movs	r2, #1
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <HAL_UART_RxCpltCallback+0x84>)
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <HAL_UART_RxCpltCallback+0x8c>)
 8000d28:	f003 fdb6 	bl	8004898 <HAL_UART_Receive_IT>



}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000017c 	.word	0x2000017c
 8000d38:	20000194 	.word	0x20000194
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	200000d4 	.word	0x200000d4

08000d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d56:	f001 f807 	bl	8001d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <ShowTimeDate>:
#include "rtc.h"



void ShowTimeDate(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af04      	add	r7, sp, #16


	static char * time = showTime;
	static char * date = showDate;

	memset(&rtcDate,0,sizeof(rtcDate));
 8000d7a:	f107 0318 	add.w	r3, r7, #24
 8000d7e:	2204      	movs	r2, #4
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f008 fce8 	bl	8009758 <memset>
	memset(&rtcTime,0,sizeof(rtcTime));
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2214      	movs	r2, #20
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f008 fce2 	bl	8009758 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4821      	ldr	r0, [pc, #132]	; (8000e20 <ShowTimeDate+0xac>)
 8000d9c:	f003 f836 	bl	8003e0c <HAL_RTC_GetTime>

	/* Get the RTC Current Date */
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <ShowTimeDate+0xac>)
 8000daa:	f003 f939 	bl	8004020 <HAL_RTC_GetDate>

	char * format;
	format = (rtcTime.TimeFormat == RTC_HOURFORMAT_24) ? "24 Hours Format" : "12 Hours Format";
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <ShowTimeDate+0x44>
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <ShowTimeDate+0xb0>)
 8000db6:	e000      	b.n	8000dba <ShowTimeDate+0x46>
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <ShowTimeDate+0xb4>)
 8000dba:	61fb      	str	r3, [r7, #28]

	/* Display time format : hh:mm:ss */
	sprintf((char *)showTime,
			"%s:\t%02d:%02d:%02d [%s]",
			"\nCurrent Time&Date",
			rtcTime.Hours,
 8000dbc:	793b      	ldrb	r3, [r7, #4]
	sprintf((char *)showTime,
 8000dbe:	4618      	mov	r0, r3
			rtcTime.Minutes,
 8000dc0:	797b      	ldrb	r3, [r7, #5]
	sprintf((char *)showTime,
 8000dc2:	461a      	mov	r2, r3
			rtcTime.Seconds,
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
	sprintf((char *)showTime,
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	9101      	str	r1, [sp, #4]
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <ShowTimeDate+0xb8>)
 8000dd4:	4916      	ldr	r1, [pc, #88]	; (8000e30 <ShowTimeDate+0xbc>)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <ShowTimeDate+0xc0>)
 8000dd8:	f008 fcde 	bl	8009798 <siprintf>
			format);

	xQueueSend(	hPrintQueue, &time, portMAX_DELAY );
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <ShowTimeDate+0xc4>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	4915      	ldr	r1, [pc, #84]	; (8000e3c <ShowTimeDate+0xc8>)
 8000de8:	f005 fe68 	bl	8006abc <xQueueGenericSend>

	/* Display date format: date-month-year */
	sprintf((char *)showDate,
			"\t%02d-%02d-%2d\n",
			rtcDate.Month,
 8000dec:	7e7b      	ldrb	r3, [r7, #25]
	sprintf((char *)showDate,
 8000dee:	461a      	mov	r2, r3
			rtcDate.Date,
 8000df0:	7ebb      	ldrb	r3, [r7, #26]
	sprintf((char *)showDate,
 8000df2:	4619      	mov	r1, r3
			2000 + rtcDate.Year);
 8000df4:	7efb      	ldrb	r3, [r7, #27]
	sprintf((char *)showDate,
 8000df6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4910      	ldr	r1, [pc, #64]	; (8000e40 <ShowTimeDate+0xcc>)
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <ShowTimeDate+0xd0>)
 8000e02:	f008 fcc9 	bl	8009798 <siprintf>

	xQueueSend( hPrintQueue, &date, portMAX_DELAY);
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <ShowTimeDate+0xc4>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	490d      	ldr	r1, [pc, #52]	; (8000e48 <ShowTimeDate+0xd4>)
 8000e12:	f005 fe53 	bl	8006abc <xQueueGenericSend>

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000b0 	.word	0x200000b0
 8000e24:	0800aab8 	.word	0x0800aab8
 8000e28:	0800aac8 	.word	0x0800aac8
 8000e2c:	0800aad8 	.word	0x0800aad8
 8000e30:	0800aaec 	.word	0x0800aaec
 8000e34:	20000198 	.word	0x20000198
 8000e38:	20000180 	.word	0x20000180
 8000e3c:	2000000c 	.word	0x2000000c
 8000e40:	0800ab04 	.word	0x0800ab04
 8000e44:	200001fc 	.word	0x200001fc
 8000e48:	20000010 	.word	0x20000010

08000e4c <RtcConfigureTime>:

void RtcConfigureTime(RTC_TimeTypeDef * time)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT_24;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <RtcConfigureTime+0x2c>)
 8000e6c:	f002 ff0a 	bl	8003c84 <HAL_RTC_SetTime>

}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000b0 	.word	0x200000b0

08000e7c <RtcConfigureDate>:

void RtcConfigureDate(RTC_DateTypeDef * date)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <RtcConfigureDate+0x1c>)
 8000e8a:	f003 f81b 	bl	8003ec4 <HAL_RTC_SetDate>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000b0 	.word	0x200000b0

08000e9c <ValidateRtcInfo>:

int ValidateRtcInfo(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	if(time){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00d      	beq.n	8000ec8 <ValidateRtcInfo+0x2c>
		if( (time->Hours > 24) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b18      	cmp	r3, #24
 8000eb2:	d807      	bhi.n	8000ec4 <ValidateRtcInfo+0x28>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b3b      	cmp	r3, #59	; 0x3b
 8000eba:	d803      	bhi.n	8000ec4 <ValidateRtcInfo+0x28>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ec2:	d901      	bls.n	8000ec8 <ValidateRtcInfo+0x2c>
			return 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e015      	b.n	8000ef4 <ValidateRtcInfo+0x58>
	}

	if(date){
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d011      	beq.n	8000ef2 <ValidateRtcInfo+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	789b      	ldrb	r3, [r3, #2]
 8000ed2:	2b1f      	cmp	r3, #31
 8000ed4:	d80b      	bhi.n	8000eee <ValidateRtcInfo+0x52>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d807      	bhi.n	8000eee <ValidateRtcInfo+0x52>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	78db      	ldrb	r3, [r3, #3]
 8000ee2:	2b63      	cmp	r3, #99	; 0x63
 8000ee4:	d803      	bhi.n	8000eee <ValidateRtcInfo+0x52>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	2b0c      	cmp	r3, #12
 8000eec:	d901      	bls.n	8000ef2 <ValidateRtcInfo+0x56>
			return 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <ValidateRtcInfo+0x58>
	}

	return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <ShowRealTimeDate_ITM>:

void ShowRealTimeDate_ITM(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtcDate;
	RTC_TimeTypeDef rtcTime;

	memset(&rtcDate,0,sizeof(rtcDate));
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 fc22 	bl	8009758 <memset>
	memset(&rtcTime,0,sizeof(rtcTime));
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2214      	movs	r2, #20
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f008 fc1c 	bl	8009758 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <ShowRealTimeDate_ITM+0x7c>)
 8000f28:	f002 ff70 	bl	8003e0c <HAL_RTC_GetTime>

	/* Get the RTC Current Date */
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <ShowRealTimeDate_ITM+0x7c>)
 8000f36:	f003 f873 	bl	8004020 <HAL_RTC_GetDate>

	char * format;
	format = (rtcTime.TimeFormat == RTC_HOURFORMAT_24) ? "24 Hours Format" : "12 Hours Format";
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <ShowRealTimeDate_ITM+0x44>
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <ShowRealTimeDate_ITM+0x80>)
 8000f42:	e000      	b.n	8000f46 <ShowRealTimeDate_ITM+0x46>
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <ShowRealTimeDate_ITM+0x84>)
 8000f46:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,format);
 8000f48:	793b      	ldrb	r3, [r7, #4]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4603      	mov	r3, r0
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <ShowRealTimeDate_ITM+0x88>)
 8000f5c:	f008 fc04 	bl	8009768 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 8000f60:	7e7b      	ldrb	r3, [r7, #25]
 8000f62:	4619      	mov	r1, r3
 8000f64:	7ebb      	ldrb	r3, [r7, #26]
 8000f66:	461a      	mov	r2, r3
 8000f68:	7efb      	ldrb	r3, [r7, #27]
 8000f6a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <ShowRealTimeDate_ITM+0x8c>)
 8000f70:	f008 fbfa 	bl	8009768 <iprintf>
}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000b0 	.word	0x200000b0
 8000f80:	0800aab8 	.word	0x0800aab8
 8000f84:	0800aac8 	.word	0x0800aac8
 8000f88:	0800ab14 	.word	0x0800ab14
 8000f8c:	0800ab04 	.word	0x0800ab04

08000f90 <RtcTimerCbx>:

void RtcTimerCbx(TimerHandle_t xTimer)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	ShowRealTimeDate_ITM();
 8000f98:	f7ff ffb2 	bl	8000f00 <ShowRealTimeDate_ITM>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_AHB2_GRP1_EnableClock>:
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800102a:	b480      	push	{r7}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4313      	orrs	r3, r2
 8001040:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8001060:	f007 ffa2 	bl	8008fa8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2230      	movs	r2, #48	; 0x30
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fb6d 	bl	8009758 <memset>
  if(hrtc->Instance==RTC)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_RTC_MspInit+0x54>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d115      	bne.n	80010b4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800108c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fc46 	bl	800392a <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010a4:	f7ff fe60 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010a8:	f7ff ff7c 	bl	8000fa4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010b0:	f7ff ffa2 	bl	8000ff8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40002800 	.word	0x40002800

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2230      	movs	r2, #48	; 0x30
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 fb39 	bl	8009758 <memset>
  if(huart->Instance==USART1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_UART_MspInit+0x98>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d12e      	bne.n	800114e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fc14 	bl	800392a <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001108:	f7ff fe2e 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001110:	f7ff ff8b 	bl	800102a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ff56 	bl	8000fc6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800111a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800112c:	2307      	movs	r3, #7
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 ffdf 	bl	80020fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2106      	movs	r1, #6
 8001142:	2024      	movs	r0, #36	; 0x24
 8001144:	f000 fef4 	bl	8001f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001148:	2024      	movs	r0, #36	; 0x24
 800114a:	f000 ff0b 	bl	8001f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40013800 	.word	0x40013800

0800115c <LL_APB2_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2019      	movs	r0, #25
 80011a6:	f000 fec3 	bl	8001f30 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011aa:	2019      	movs	r0, #25
 80011ac:	f000 feda 	bl	8001f64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011b4:	f7ff ffd2 	bl	800115c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 f99a 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011c8:	f002 f982 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80011cc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_InitTick+0x8c>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	3b01      	subs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_InitTick+0x90>)
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_InitTick+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_InitTick+0x90>)
 80011e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ea:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_InitTick+0x90>)
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_InitTick+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_InitTick+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <HAL_InitTick+0x90>)
 80011fe:	f002 ffe8 	bl	80041d2 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_InitTick+0x90>)
 800120a:	f003 f843 	bl	8004294 <HAL_TIM_Base_Start_IT>
 800120e:	4603      	mov	r3, r0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3730      	adds	r7, #48	; 0x30
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	431bde83 	.word	0x431bde83
 8001220:	20000260 	.word	0x20000260
 8001224:	40012c00 	.word	0x40012c00

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM1_UP_IRQHandler+0x10>)
 800125a:	f003 f869 	bl	8004330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000260 	.word	0x20000260

08001268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART1_IRQHandler+0x10>)
 800126e:	f003 fb5f 	bl	8004930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000d4 	.word	0x200000d4

0800127c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <ITM_SendChar+0x48>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <ITM_SendChar+0x48>)
 800128c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001290:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <ITM_SendChar+0x4c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <ITM_SendChar+0x4c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800129e:	bf00      	nop
 80012a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f8      	beq.n	80012a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80012ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000edfc 	.word	0xe000edfc
 80012c8:	e0000e00 	.word	0xe0000e00

080012cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012de:	f3af 8000 	nop.w
 80012e2:	4601      	mov	r1, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <_read+0x12>
  }

  return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e009      	b.n	800132c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffab 	bl	800127c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf1      	blt.n	8001318 <_write+0x12>
	}
	return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_close>:

int _close(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001366:	605a      	str	r2, [r3, #4]
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_isatty>:

int _isatty(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f008 f986 	bl	80096e8 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20003000 	.word	0x20003000
 8001408:	00000400 	.word	0x00000400
 800140c:	200002ac 	.word	0x200002ac
 8001410:	20002470 	.word	0x20002470

08001414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemInit+0x90>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemInit+0x90>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001440:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <SystemInit+0x94>)
 800144e:	4013      	ands	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145e:	f023 0305 	bic.w	r3, r3, #5
 8001462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800146e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <SystemInit+0x98>)
 8001480:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	faf6fefb 	.word	0xfaf6fefb
 80014ac:	22041000 	.word	0x22041000

080014b0 <menuTask>:
State_t currentProgramState = sMainMenu;

const char* invalid_message = "~~Invalid Message~~\n";

void menuTask(void* parameters)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	int8_t option;

	const char* entry_message = "======================\n"
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <menuTask+0xd0>)
 80014ba:	60bb      	str	r3, [r7, #8]
									"DATE & TIME	--->	1\n"
									"EXIT	--->	2\n"
									"ENTER YOUR CHOICE HERE... : ";
	while(1)
	{
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <menuTask+0xd4>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f107 0108 	add.w	r1, r7, #8
 80014c4:	2300      	movs	r3, #0
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ca:	f005 faf7 	bl	8006abc <xQueueGenericSend>
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	2000      	movs	r0, #0
 80014de:	f006 fda1 	bl	8008024 <xTaskGenericNotifyWait>

		// Wait for menu commands
		command = (Command_t*)command_adr;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	617b      	str	r3, [r7, #20]
		if(command -> len == 1)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	7a9b      	ldrb	r3, [r3, #10]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d133      	bne.n	8001556 <menuTask+0xa6>
		{
			// Converting ASCII to number by subtracting 48
			option = command->payload[0] - 48;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3b30      	subs	r3, #48	; 0x30
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	74fb      	strb	r3, [r7, #19]

			switch(option)
 80014f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d033      	beq.n	8001568 <menuTask+0xb8>
 8001500:	2b02      	cmp	r3, #2
 8001502:	dc1e      	bgt.n	8001542 <menuTask+0x92>
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <menuTask+0x5e>
 8001508:	2b01      	cmp	r3, #1
 800150a:	d00d      	beq.n	8001528 <menuTask+0x78>
 800150c:	e019      	b.n	8001542 <menuTask+0x92>
			{
			case LED_EFFECT:
				currentProgramState = sLedEffect;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <menuTask+0xd8>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hLed,0,eNoAction);
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <menuTask+0xdc>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	f006 fe03 	bl	800812c <xTaskGenericNotify>
				break;
 8001526:	e020      	b.n	800156a <menuTask+0xba>
			case DATE_TIME:
				currentProgramState = sRtcMenu;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <menuTask+0xd8>)
 800152a:	2202      	movs	r2, #2
 800152c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hRTC,0,eNoAction);
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <menuTask+0xe0>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	f006 fdf6 	bl	800812c <xTaskGenericNotify>
				break;
 8001540:	e013      	b.n	800156a <menuTask+0xba>
			case EXIT_MENU:
				/* Todo: implement exit */
				//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
				break;
			default:
				xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <menuTask+0xd4>)
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	f107 0108 	add.w	r1, r7, #8
 800154a:	2300      	movs	r3, #0
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	f005 fab4 	bl	8006abc <xQueueGenericSend>
				continue;
 8001554:	e012      	b.n	800157c <menuTask+0xcc>
			}
		}
		else
		{
			// Invalid entry
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <menuTask+0xd4>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <menuTask+0xe4>)
 8001562:	f005 faab 	bl	8006abc <xQueueGenericSend>
			continue;
 8001566:	e009      	b.n	800157c <menuTask+0xcc>
				break;
 8001568:	bf00      	nop
		}

		// Wait to run again when some other task notifies menu task.
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f006 fd54 	bl	8008024 <xTaskGenericNotifyWait>
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 800157c:	e79e      	b.n	80014bc <menuTask+0xc>
 800157e:	bf00      	nop
 8001580:	0800ab40 	.word	0x0800ab40
 8001584:	20000180 	.word	0x20000180
 8001588:	200002b0 	.word	0x200002b0
 800158c:	2000016c 	.word	0x2000016c
 8001590:	20000170 	.word	0x20000170
 8001594:	20000018 	.word	0x20000018

08001598 <ledTask>:
	} // End of while loop

}

void ledTask(void* parameters)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
 800159e:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	const char* led_message = 	"=====================\n"
 80015a0:	4b3a      	ldr	r3, [pc, #232]	; (800168c <ledTask+0xf4>)
 80015a2:	60fb      	str	r3, [r7, #12]
								"OPTIONS: Please type none, e1, e2 or e3.\n"
								"ENTER YOUR CHOICE HERE... :\n ";
	while(1)
	{
		/* Wait for notification */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f006 fd37 	bl	8008024 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(hPrintQueue,&led_message,portMAX_DELAY);
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <ledTask+0xf8>)
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f107 010c 	add.w	r1, r7, #12
 80015be:	2300      	movs	r3, #0
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	f005 fa7a 	bl	8006abc <xQueueGenericSend>

		/* Wait for LED commands */
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2000      	movs	r0, #0
 80015d8:	f006 fd24 	bl	8008024 <xTaskGenericNotifyWait>

		command = (Command_t*)command_adr;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	617b      	str	r3, [r7, #20]

		if( (command->len) <= 4)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	7a9b      	ldrb	r3, [r3, #10]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d83b      	bhi.n	8001660 <ledTask+0xc8>
		{
			if(! strncmp((char*)command->payload, "none", strlen("none")) )
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4929      	ldr	r1, [pc, #164]	; (8001694 <ledTask+0xfc>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 f8f2 	bl	80097d8 <strncmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <ledTask+0x68>
				LedEffectStop();
 80015fa:	f7fe ffb9 	bl	8000570 <LedEffectStop>
 80015fe:	e037      	b.n	8001670 <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e1", strlen("e1")) )
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2202      	movs	r2, #2
 8001604:	4924      	ldr	r1, [pc, #144]	; (8001698 <ledTask+0x100>)
 8001606:	4618      	mov	r0, r3
 8001608:	f008 f8e6 	bl	80097d8 <strncmp>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <ledTask+0x82>
				LedStartTimer(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f7fe ff8e 	bl	8000534 <LedStartTimer>
 8001618:	e02a      	b.n	8001670 <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e2", strlen("e2")) )
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2202      	movs	r2, #2
 800161e:	491f      	ldr	r1, [pc, #124]	; (800169c <ledTask+0x104>)
 8001620:	4618      	mov	r0, r3
 8001622:	f008 f8d9 	bl	80097d8 <strncmp>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <ledTask+0x9c>
				LedStartTimer(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f7fe ff81 	bl	8000534 <LedStartTimer>
 8001632:	e01d      	b.n	8001670 <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e3", strlen("e3")) )
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2202      	movs	r2, #2
 8001638:	4919      	ldr	r1, [pc, #100]	; (80016a0 <ledTask+0x108>)
 800163a:	4618      	mov	r0, r3
 800163c:	f008 f8cc 	bl	80097d8 <strncmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <ledTask+0xb6>
				LedStartTimer(3);
 8001646:	2003      	movs	r0, #3
 8001648:	f7fe ff74 	bl	8000534 <LedStartTimer>
 800164c:	e010      	b.n	8001670 <ledTask+0xd8>
			else
				// Print invalid message
				xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <ledTask+0xf8>)
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	4912      	ldr	r1, [pc, #72]	; (80016a4 <ledTask+0x10c>)
 800165a:	f005 fa2f 	bl	8006abc <xQueueGenericSend>
 800165e:	e007      	b.n	8001670 <ledTask+0xd8>
		}
		else
			// Print invalid message
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <ledTask+0xf8>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <ledTask+0x10c>)
 800166c:	f005 fa26 	bl	8006abc <xQueueGenericSend>

		// Update the state variable
		currentProgramState = sMainMenu;
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <ledTask+0x110>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

		// Notify menu task
		xTaskNotify(hMenu,0,eNoAction);
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <ledTask+0x114>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	f006 fd52 	bl	800812c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001688:	e78c      	b.n	80015a4 <ledTask+0xc>
 800168a:	bf00      	nop
 800168c:	0800abc8 	.word	0x0800abc8
 8001690:	20000180 	.word	0x20000180
 8001694:	0800ac4c 	.word	0x0800ac4c
 8001698:	0800ac54 	.word	0x0800ac54
 800169c:	0800ac58 	.word	0x0800ac58
 80016a0:	0800ac5c 	.word	0x0800ac5c
 80016a4:	20000018 	.word	0x20000018
 80016a8:	200002b0 	.word	0x200002b0
 80016ac:	20000168 	.word	0x20000168

080016b0 <RTCTask>:

	}
}

void RTCTask(void* parameters)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b099      	sub	sp, #100	; 0x64
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
	const char* msg_rtc = 	"========================\n"
 80016b8:	4bbd      	ldr	r3, [pc, #756]	; (80019b0 <RTCTask+0x300>)
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable/Disable reporting  ----> 2\n"
							"Exit to main menu         ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter Hour(1-24):";
 80016bc:	4bbd      	ldr	r3, [pc, #756]	; (80019b4 <RTCTask+0x304>)
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter Minutes(0-59):";
 80016c0:	4bbd      	ldr	r3, [pc, #756]	; (80019b8 <RTCTask+0x308>)
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter Seconds(0-59):";
 80016c4:	4bbd      	ldr	r3, [pc, #756]	; (80019bc <RTCTask+0x30c>)
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter Date(1-31):";
 80016c8:	4bbd      	ldr	r3, [pc, #756]	; (80019c0 <RTCTask+0x310>)
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter Month(1-12):";
 80016cc:	4bbd      	ldr	r3, [pc, #756]	; (80019c4 <RTCTask+0x314>)
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter Day(1-7 [Sunday:1]):";
 80016d0:	4bbd      	ldr	r3, [pc, #756]	; (80019c8 <RTCTask+0x318>)
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter Year(0-99):";
 80016d4:	4bbd      	ldr	r3, [pc, #756]	; (80019cc <RTCTask+0x31c>)
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80016d8:	4bbd      	ldr	r3, [pc, #756]	; (80019d0 <RTCTask+0x320>)
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable/Disable Time & Date Reporting(y/n)?: ";
 80016dc:	4bbd      	ldr	r3, [pc, #756]	; (80019d4 <RTCTask+0x324>)
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
	RTC_DateTypeDef date;

	while(1)
	{
		/* Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2000      	movs	r0, #0
 80016ee:	f006 fc99 	bl	8008024 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */

		xQueueSend(hPrintQueue,&msg_rtc,portMAX_DELAY);
 80016f2:	4bb9      	ldr	r3, [pc, #740]	; (80019d8 <RTCTask+0x328>)
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80016fa:	2300      	movs	r3, #0
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	f005 f9dc 	bl	8006abc <xQueueGenericSend>

		ShowTimeDate();
 8001704:	f7ff fb36 	bl	8000d74 <ShowTimeDate>

		while(currentProgramState != sMainMenu)
 8001708:	bf00      	nop
 800170a:	e1e6      	b.n	8001ada <RTCTask+0x42a>
		{

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f006 fc82 	bl	8008024 <xTaskGenericNotifyWait>

			command = (Command_t*)command_adr;
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	657b      	str	r3, [r7, #84]	; 0x54

			switch(currentProgramState)
 8001724:	4bad      	ldr	r3, [pc, #692]	; (80019dc <RTCTask+0x32c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3b02      	subs	r3, #2
 800172a:	2b03      	cmp	r3, #3
 800172c:	f200 81d5 	bhi.w	8001ada <RTCTask+0x42a>
 8001730:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <RTCTask+0x88>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	08001749 	.word	0x08001749
 800173c:	08001803 	.word	0x08001803
 8001740:	080018f3 	.word	0x080018f3
 8001744:	08001a57 	.word	0x08001a57
			{

				case sRtcMenu:{
					/* process RTC menu commands */
					if( command->len == 1)
 8001748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174a:	7a9b      	ldrb	r3, [r3, #10]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d14c      	bne.n	80017ea <RTCTask+0x13a>
					{
						// Converting ASCII to number by subtracting 48
						option = command->payload[0] - 48;
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3b30      	subs	r3, #48	; 0x30
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

						switch(option)
 800175c:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8001760:	2b03      	cmp	r3, #3
 8001762:	d836      	bhi.n	80017d2 <RTCTask+0x122>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <RTCTask+0xbc>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001797 	.word	0x08001797
 8001774:	080017b1 	.word	0x080017b1
 8001778:	080017cb 	.word	0x080017cb
						{
						case DATE_CONFIG:
							currentProgramState = sRtcTimeConfig;
 800177c:	4b97      	ldr	r3, [pc, #604]	; (80019dc <RTCTask+0x32c>)
 800177e:	2203      	movs	r2, #3
 8001780:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_hh,portMAX_DELAY);
 8001782:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <RTCTask+0x328>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800178a:	2300      	movs	r3, #0
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	f005 f994 	bl	8006abc <xQueueGenericSend>
							break;
 8001794:	e034      	b.n	8001800 <RTCTask+0x150>
						case MONTH_CONFIG:
							currentProgramState = sRtcDateConfig;
 8001796:	4b91      	ldr	r3, [pc, #580]	; (80019dc <RTCTask+0x32c>)
 8001798:	2204      	movs	r2, #4
 800179a:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_dd,portMAX_DELAY);
 800179c:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <RTCTask+0x328>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80017a4:	2300      	movs	r3, #0
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	f005 f987 	bl	8006abc <xQueueGenericSend>
							break;
 80017ae:	e027      	b.n	8001800 <RTCTask+0x150>
						case YEAR_CONFIG:
							currentProgramState = sRtcReport;
 80017b0:	4b8a      	ldr	r3, [pc, #552]	; (80019dc <RTCTask+0x32c>)
 80017b2:	2205      	movs	r2, #5
 80017b4:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_report,portMAX_DELAY);
 80017b6:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <RTCTask+0x328>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017be:	2300      	movs	r3, #0
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	f005 f97a 	bl	8006abc <xQueueGenericSend>
							break;
 80017c8:	e01a      	b.n	8001800 <RTCTask+0x150>
						case DAY_CONFIG:
							currentProgramState = sMainMenu;
 80017ca:	4b84      	ldr	r3, [pc, #528]	; (80019dc <RTCTask+0x32c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
							break;
 80017d0:	e016      	b.n	8001800 <RTCTask+0x150>
						default:
							currentProgramState = sMainMenu;
 80017d2:	4b82      	ldr	r3, [pc, #520]	; (80019dc <RTCTask+0x32c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80017d8:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <RTCTask+0x328>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	497f      	ldr	r1, [pc, #508]	; (80019e0 <RTCTask+0x330>)
 80017e4:	f005 f96a 	bl	8006abc <xQueueGenericSend>
 80017e8:	e177      	b.n	8001ada <RTCTask+0x42a>
						}
					}
					else
					{
						currentProgramState = sMainMenu;
 80017ea:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <RTCTask+0x32c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <RTCTask+0x328>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	f04f 32ff 	mov.w	r2, #4294967295
 80017fa:	4979      	ldr	r1, [pc, #484]	; (80019e0 <RTCTask+0x330>)
 80017fc:	f005 f95e 	bl	8006abc <xQueueGenericSend>
					}


					break;}
 8001800:	e16b      	b.n	8001ada <RTCTask+0x42a>

				case sRtcTimeConfig:{

					/* get hh, mm, ss infor and configure RTC */
					/* take care of invalid entries */
					switch(rtcState)
 8001802:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <RTCTask+0x334>)
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d03b      	beq.n	8001884 <RTCTask+0x1d4>
 800180c:	2b02      	cmp	r3, #2
 800180e:	f300 8164 	bgt.w	8001ada <RTCTask+0x42a>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <RTCTask+0x16c>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d01a      	beq.n	8001850 <RTCTask+0x1a0>
 800181a:	e15e      	b.n	8001ada <RTCTask+0x42a>
					{
					case HH_CONFIG:{
						uint8_t hour = getNumber(command->payload, command->len);
 800181c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800181e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001820:	7a9b      	ldrb	r3, [r3, #10]
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f000 fa21 	bl	8001c6c <getNumber>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
						time.Hours = hour;
 8001830:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001834:	733b      	strb	r3, [r7, #12]
						rtcState = MM_CONFIG;
 8001836:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <RTCTask+0x334>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&msg_rtc_mm,portMAX_DELAY);
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <RTCTask+0x328>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001844:	2300      	movs	r3, #0
 8001846:	f04f 32ff 	mov.w	r2, #4294967295
 800184a:	f005 f937 	bl	8006abc <xQueueGenericSend>
						break;}
 800184e:	e04f      	b.n	80018f0 <RTCTask+0x240>

					case MM_CONFIG:{
						uint8_t minute = getNumber(command->payload, command->len);
 8001850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	7a9b      	ldrb	r3, [r3, #10]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f000 fa07 	bl	8001c6c <getNumber>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						time.Minutes = minute;
 8001864:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001868:	737b      	strb	r3, [r7, #13]
						rtcState = SS_CONFIG;
 800186a:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <RTCTask+0x334>)
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&msg_rtc_ss,portMAX_DELAY);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <RTCTask+0x328>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001878:	2300      	movs	r3, #0
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	f005 f91d 	bl	8006abc <xQueueGenericSend>
						break;}
 8001882:	e035      	b.n	80018f0 <RTCTask+0x240>

					case SS_CONFIG:{
						uint8_t second = getNumber(command->payload, command->len);
 8001884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001888:	7a9b      	ldrb	r3, [r3, #10]
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f000 f9ed 	bl	8001c6c <getNumber>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						time.Seconds = second;
 8001898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800189c:	73bb      	strb	r3, [r7, #14]
						if(! ValidateRtcInfo(&time,NULL) )
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff faf9 	bl	8000e9c <ValidateRtcInfo>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d110      	bne.n	80018d2 <RTCTask+0x222>
						{
							RtcConfigureTime(&time);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fac9 	bl	8000e4c <RtcConfigureTime>
							xQueueSend(hPrintQueue, &msg_conf, portMAX_DELAY);
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <RTCTask+0x328>)
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018c2:	2300      	movs	r3, #0
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	f005 f8f8 	bl	8006abc <xQueueGenericSend>
							ShowTimeDate();
 80018cc:	f7ff fa52 	bl	8000d74 <ShowTimeDate>
 80018d0:	e007      	b.n	80018e2 <RTCTask+0x232>
						}
						else
							xQueueSend(hPrintQueue,&invalid_message, portMAX_DELAY);
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <RTCTask+0x328>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	4940      	ldr	r1, [pc, #256]	; (80019e0 <RTCTask+0x330>)
 80018de:	f005 f8ed 	bl	8006abc <xQueueGenericSend>

						currentProgramState = sMainMenu;
 80018e2:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <RTCTask+0x32c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
						rtcState = HH_CONFIG;
 80018e8:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <RTCTask+0x334>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
						break;}
 80018ee:	bf00      	nop
					}

					break;}
 80018f0:	e0f3      	b.n	8001ada <RTCTask+0x42a>

					/* get date, month, day , year info and configure RTC */

					/* take care of invalid entries */

					switch(rtcState)
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <RTCTask+0x334>)
 80018f4:	f993 3000 	ldrsb.w	r3, [r3]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	f200 80ee 	bhi.w	8001ada <RTCTask+0x42a>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <RTCTask+0x254>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	08001949 	.word	0x08001949
 800190c:	080019e9 	.word	0x080019e9
 8001910:	0800197d 	.word	0x0800197d
					{
					case DATE_CONFIG:{
						uint8_t d = getNumber(command->payload, command->len);
 8001914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001918:	7a9b      	ldrb	r3, [r3, #10]
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 f9a5 	bl	8001c6c <getNumber>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
						date.Date = d;
 8001928:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800192c:	72bb      	strb	r3, [r7, #10]
						rtcState = MONTH_CONFIG;
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <RTCTask+0x334>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&msg_rtc_mo,portMAX_DELAY);
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <RTCTask+0x328>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800193c:	2300      	movs	r3, #0
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	f005 f8bb 	bl	8006abc <xQueueGenericSend>
						break;}
 8001946:	e085      	b.n	8001a54 <RTCTask+0x3a4>

					case MONTH_CONFIG:{
						uint8_t month = getNumber(command->payload, command->len);
 8001948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	7a9b      	ldrb	r3, [r3, #10]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f000 f98b 	bl	8001c6c <getNumber>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
						date.Month = month;
 800195c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001960:	727b      	strb	r3, [r7, #9]
						rtcState = DAY_CONFIG;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <RTCTask+0x334>)
 8001964:	2203      	movs	r2, #3
 8001966:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue, &msg_rtc_dow, portMAX_DELAY);
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <RTCTask+0x328>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001970:	2300      	movs	r3, #0
 8001972:	f04f 32ff 	mov.w	r2, #4294967295
 8001976:	f005 f8a1 	bl	8006abc <xQueueGenericSend>
						break;}
 800197a:	e06b      	b.n	8001a54 <RTCTask+0x3a4>

					case DAY_CONFIG:{
						uint8_t day = getNumber(command->payload, command->len);
 800197c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	7a9b      	ldrb	r3, [r3, #10]
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f000 f971 	bl	8001c6c <getNumber>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
						date.WeekDay = day;
 8001990:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001994:	723b      	strb	r3, [r7, #8]
						rtcState = YEAR_CONFIG;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <RTCTask+0x334>)
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue, &msg_rtc_yr, portMAX_DELAY);
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <RTCTask+0x328>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019a4:	2300      	movs	r3, #0
 80019a6:	f04f 32ff 	mov.w	r2, #4294967295
 80019aa:	f005 f887 	bl	8006abc <xQueueGenericSend>
						break;}
 80019ae:	e051      	b.n	8001a54 <RTCTask+0x3a4>
 80019b0:	0800ac60 	.word	0x0800ac60
 80019b4:	0800ad50 	.word	0x0800ad50
 80019b8:	0800ad64 	.word	0x0800ad64
 80019bc:	0800ad7c 	.word	0x0800ad7c
 80019c0:	0800ad94 	.word	0x0800ad94
 80019c4:	0800ada8 	.word	0x0800ada8
 80019c8:	0800adbc 	.word	0x0800adbc
 80019cc:	0800add8 	.word	0x0800add8
 80019d0:	0800adec 	.word	0x0800adec
 80019d4:	0800ae08 	.word	0x0800ae08
 80019d8:	20000180 	.word	0x20000180
 80019dc:	200002b0 	.word	0x200002b0
 80019e0:	20000018 	.word	0x20000018
 80019e4:	200002b1 	.word	0x200002b1

					case YEAR_CONFIG:{
						uint8_t year = getNumber(command->payload, command->len);
 80019e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	7a9b      	ldrb	r3, [r3, #10]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f000 f93b 	bl	8001c6c <getNumber>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
						date.Year = year;
 80019fc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001a00:	72fb      	strb	r3, [r7, #11]

						if( !ValidateRtcInfo(NULL, &date))
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fa47 	bl	8000e9c <ValidateRtcInfo>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d110      	bne.n	8001a36 <RTCTask+0x386>
						{
							RtcConfigureDate(&date);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fa2f 	bl	8000e7c <RtcConfigureDate>
							xQueueSend(hPrintQueue,&msg_conf,portMAX_DELAY);
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <RTCTask+0x448>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a26:	2300      	movs	r3, #0
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	f005 f846 	bl	8006abc <xQueueGenericSend>
							ShowTimeDate();
 8001a30:	f7ff f9a0 	bl	8000d74 <ShowTimeDate>
 8001a34:	e007      	b.n	8001a46 <RTCTask+0x396>
						}
						else
							xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <RTCTask+0x448>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	492e      	ldr	r1, [pc, #184]	; (8001afc <RTCTask+0x44c>)
 8001a42:	f005 f83b 	bl	8006abc <xQueueGenericSend>

						currentProgramState = sMainMenu;
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <RTCTask+0x450>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
						rtcState = DATE_CONFIG;
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <RTCTask+0x454>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
						break;}
 8001a52:	bf00      	nop

					}
					}


					break;
 8001a54:	e041      	b.n	8001ada <RTCTask+0x42a>

				case sRtcReport:{
					/* enable or disable RTC current time reporting over ITM printf */
					if(command->len == 1)
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	7a9b      	ldrb	r3, [r3, #10]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d131      	bne.n	8001ac2 <RTCTask+0x412>
					{
						if(command->payload[0] == 'y')
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b79      	cmp	r3, #121	; 0x79
 8001a64:	d115      	bne.n	8001a92 <RTCTask+0x3e2>
						{
							if(xTimerIsTimerActive(RtcTimer) == pdFALSE)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <RTCTask+0x458>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 f924 	bl	8008cb8 <xTimerIsTimerActive>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d12d      	bne.n	8001ad2 <RTCTask+0x422>
								xTimerStart(RtcTimer,portMAX_DELAY);
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <RTCTask+0x458>)
 8001a78:	681c      	ldr	r4, [r3, #0]
 8001a7a:	f005 ff2b 	bl	80078d4 <xTaskGetTickCount>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f006 fe34 	bl	80086f8 <xTimerGenericCommand>
 8001a90:	e01f      	b.n	8001ad2 <RTCTask+0x422>


						}
						else if(command->payload[0] == 'n')
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b6e      	cmp	r3, #110	; 0x6e
 8001a98:	d10a      	bne.n	8001ab0 <RTCTask+0x400>
						{
							xTimerStop(RtcTimer,portMAX_DELAY);
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <RTCTask+0x458>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	f006 fe25 	bl	80086f8 <xTimerGenericCommand>
 8001aae:	e010      	b.n	8001ad2 <RTCTask+0x422>
						}
						else
							xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <RTCTask+0x448>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aba:	4910      	ldr	r1, [pc, #64]	; (8001afc <RTCTask+0x44c>)
 8001abc:	f004 fffe 	bl	8006abc <xQueueGenericSend>
 8001ac0:	e007      	b.n	8001ad2 <RTCTask+0x422>

					}
					else
						xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <RTCTask+0x448>)
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	490b      	ldr	r1, [pc, #44]	; (8001afc <RTCTask+0x44c>)
 8001ace:	f004 fff5 	bl	8006abc <xQueueGenericSend>


					currentProgramState = sMainMenu;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <RTCTask+0x450>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
					break;}
 8001ad8:	bf00      	nop
		while(currentProgramState != sMainMenu)
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <RTCTask+0x450>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f47f ae14 	bne.w	800170c <RTCTask+0x5c>
			}// switch end

		} //while end

		/* Notify menu task */
		xTaskNotify(hMenu,0,eNoAction);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <RTCTask+0x45c>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	f006 fb1b 	bl	800812c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001af6:	e5f3      	b.n	80016e0 <RTCTask+0x30>
 8001af8:	20000180 	.word	0x20000180
 8001afc:	20000018 	.word	0x20000018
 8001b00:	200002b0 	.word	0x200002b0
 8001b04:	200002b1 	.word	0x200002b1
 8001b08:	20000190 	.word	0x20000190
 8001b0c:	20000168 	.word	0x20000168

08001b10 <printTask>:

		}//while super loop end
}

void printTask(void* parameters)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	uint32_t* message;
	while(1)
	{
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <printTask+0x38>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f107 010c 	add.w	r1, r7, #12
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 f971 	bl	8006e0c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen((char*)message), HAL_MAX_DELAY);
 8001b2a:	68fc      	ldr	r4, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb26 	bl	8000180 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <printTask+0x3c>)
 8001b40:	f002 fe1c 	bl	800477c <HAL_UART_Transmit>
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 8001b44:	e7e8      	b.n	8001b18 <printTask+0x8>
 8001b46:	bf00      	nop
 8001b48:	20000180 	.word	0x20000180
 8001b4c:	200000d4 	.word	0x200000d4

08001b50 <commandTask>:
	}
}

 void commandTask(void* parameters)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
	 //const TickType_t xFrequency = pdMS_TO_TICKS(1000);
	 Command_t command;
		while(1)
		{
			/* Implement notify wait */
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f006 fa5d 	bl	8008024 <xTaskGenericNotifyWait>
 8001b6a:	6178      	str	r0, [r7, #20]
			if(status == pdTRUE)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d1f2      	bne.n	8001b58 <commandTask+0x8>
			{
				/* Process the user data(command) stored in input data queue */
				/* Notify the command to relevant task */
				processCommand(&command);
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f802 	bl	8001b80 <processCommand>
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b7c:	e7ec      	b.n	8001b58 <commandTask+0x8>
	...

08001b80 <processCommand>:
/* The notification value of the target task is
 * unconditionally set to ulValue when eSetValueWithOverwrite
 * is used.   */

 void processCommand(Command_t* command)
 {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	6078      	str	r0, [r7, #4]
	 /* Extract the data bytes from the input data queue and form a command */
	 extract_command(command);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f835 	bl	8001bf8 <extract_command>

	 switch(currentProgramState)
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <processCommand+0x68>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	dc24      	bgt.n	8001be0 <processCommand+0x60>
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	da18      	bge.n	8001bcc <processCommand+0x4c>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <processCommand+0x24>
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d00a      	beq.n	8001bb8 <processCommand+0x38>
		 /* Notify RTC task with the command */
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
		 break;

	 }
 }
 8001ba2:	e01d      	b.n	8001be0 <processCommand+0x60>
		 xTaskNotify(hMenu, (uint32_t)command, eSetValueWithOverwrite);
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <processCommand+0x6c>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2303      	movs	r3, #3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f006 fabb 	bl	800812c <xTaskGenericNotify>
		 break;
 8001bb6:	e013      	b.n	8001be0 <processCommand+0x60>
		 xTaskNotify(hLed, (uint32_t)command, eSetValueWithOverwrite);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <processCommand+0x70>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f006 fab1 	bl	800812c <xTaskGenericNotify>
		 break;
 8001bca:	e009      	b.n	8001be0 <processCommand+0x60>
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <processCommand+0x74>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f006 faa7 	bl	800812c <xTaskGenericNotify>
		 break;
 8001bde:	bf00      	nop
 }
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002b0 	.word	0x200002b0
 8001bec:	20000168 	.word	0x20000168
 8001bf0:	2000016c 	.word	0x2000016c
 8001bf4:	20000170 	.word	0x20000170

08001bf8 <extract_command>:

 int extract_command(Command_t* command)
 {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	 uint8_t item;
	 BaseType_t status;

	 // Return the number of messages stored in a queue.
	 status = uxQueueMessagesWaiting(hInputDataQueue);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <extract_command+0x70>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fa70 	bl	80070ea <uxQueueMessagesWaiting>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]
	 if(!status) return -1;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <extract_command+0x22>
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	e022      	b.n	8001c60 <extract_command+0x68>

	 uint8_t i = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
	 do
	 {
		 // Received item into the hInputDataQueue will be copied to item buffer.
		 status = xQueueReceive(hInputDataQueue, (void*)&item, 0);
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <extract_command+0x70>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f107 010f 	add.w	r1, r7, #15
 8001c26:	2200      	movs	r2, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 f8ef 	bl	8006e0c <xQueueReceive>
 8001c2e:	6138      	str	r0, [r7, #16]
		 if(status == pdTRUE) command -> payload[i++] = item;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d106      	bne.n	8001c44 <extract_command+0x4c>
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	75fa      	strb	r2, [r7, #23]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	7bf9      	ldrb	r1, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	5499      	strb	r1, [r3, r2]
	 }while(item != '\n');
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d1e9      	bne.n	8001c1e <extract_command+0x26>

	 command -> payload[i-1] = '\0';
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	2100      	movs	r1, #0
 8001c52:	54d1      	strb	r1, [r2, r3]
	 command -> len = i-1; /* Save length of the command excluding null char */
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	729a      	strb	r2, [r3, #10]

	 return 0;
 8001c5e:	2300      	movs	r3, #0
 }
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000017c 	.word	0x2000017c

08001c6c <getNumber>:

 // Converting ASCII to number by subtracting 48
 uint8_t getNumber(uint8_t * p, int len)
 {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	 int value;

	 if(len > 1)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	dd0f      	ble.n	8001c9c <getNumber+0x30>
	 {
		 value = ( ( (p[0]-48) * 10 ) + (p[1] - 48 ) );
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3301      	adds	r3, #1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	3b30      	subs	r3, #48	; 0x30
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e003      	b.n	8001ca4 <getNumber+0x38>
	 }
	 else
	 {
		 value = p[0] - 48;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3b30      	subs	r3, #48	; 0x30
 8001ca2:	60fb      	str	r3, [r7, #12]
	 }

	 return value;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b2db      	uxtb	r3, r3
 }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001cb4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb8:	3304      	adds	r3, #4

08001cba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001cbe:	d3f9      	bcc.n	8001cb4 <CopyDataInit>
  bx lr
 8001cc0:	4770      	bx	lr

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cc2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cc4:	3004      	adds	r0, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cc6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>
  bx lr
 8001cca:	4770      	bx	lr

08001ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd0:	f7ff fba0 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopForever+0x6>)
 8001cd6:	490c      	ldr	r1, [pc, #48]	; (8001d08 <LoopForever+0xa>)
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <LoopForever+0xe>)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f7ff ffed 	bl	8001cba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <LoopForever+0x12>)
 8001ce2:	490c      	ldr	r1, [pc, #48]	; (8001d14 <LoopForever+0x16>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <LoopForever+0x1a>)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f7ff ffe7 	bl	8001cba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <LoopForever+0x1e>)
 8001cee:	490c      	ldr	r1, [pc, #48]	; (8001d20 <LoopForever+0x22>)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f7ff ffe8 	bl	8001cc6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cf6:	f007 fcfd 	bl	80096f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001cfa:	f7fe fd85 	bl	8000808 <main>

08001cfe <LoopForever>:

LoopForever:
  b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   r0, =_estack
 8001d00:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000090 	.word	0x20000090
 8001d0c:	0800afe0 	.word	0x0800afe0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d10:	20030000 	.word	0x20030000
 8001d14:	20030000 	.word	0x20030000
 8001d18:	0800b068 	.word	0x0800b068
  INIT_BSS _sbss, _ebss
 8001d1c:	20000090 	.word	0x20000090
 8001d20:	20002470 	.word	0x20002470

08001d24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_Init+0x3c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_Init+0x3c>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 f8eb 	bl	8001f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d44:	200f      	movs	r0, #15
 8001d46:	f7ff fa23 	bl	8001190 <HAL_InitTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	e001      	b.n	8001d5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d56:	f7ff f981 	bl	800105c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58004000 	.word	0x58004000

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000020 	.word	0x20000020
 8001d8c:	200002b4 	.word	0x200002b4

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200002b4 	.word	0x200002b4

08001da8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTickPrio+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000001c 	.word	0x2000001c

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff4c 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3e:	f7ff ff63 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7ff ffb3 	bl	8001eb4 <NVIC_EncodePriority>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff82 	bl	8001e60 <__NVIC_SetPriority>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff56 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e04f      	b.n	8002032 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d008      	beq.n	8001fb0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e040      	b.n	8002032 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020e 	bic.w	r2, r2, #14
 8001fbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f003 021c 	and.w	r2, r3, #28
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ffc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002014:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800201e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d005      	beq.n	8002062 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e047      	b.n	80020f2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 020e 	bic.w	r2, r2, #14
 8002070:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 021c 	and.w	r2, r3, #28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00c      	beq.n	80020d2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    }
  }
  return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e146      	b.n	800239a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8138 	beq.w	8002394 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d017      	beq.n	80021da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d123      	bne.n	800222e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8092 	beq.w	8002394 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x2bc>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1c8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_GPIO_Init+0x2c0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1c4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a46      	ldr	r2, [pc, #280]	; (80023c0 <HAL_GPIO_Init+0x2c4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1c0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <HAL_GPIO_Init+0x2c8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1bc>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1ca>
 80022b8:	2307      	movs	r3, #7
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1ca>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1ca>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1ca>
 80022c4:	2300      	movs	r3, #0
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d6:	4938      	ldr	r1, [pc, #224]	; (80023b8 <HAL_GPIO_Init+0x2bc>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002308:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002332:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 800233a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 8002368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_GPIO_Init+0x2cc>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f aeb1 	bne.w	800210c <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40010000 	.word	0x40010000
 80023bc:	48000400 	.word	0x48000400
 80023c0:	48000800 	.word	0x48000800
 80023c4:	48001000 	.word	0x48001000
 80023c8:	58000800 	.word	0x58000800

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	58000400 	.word	0x58000400

0800241c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800242e:	d101      	bne.n	8002434 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_RCC_HSE_Enable>:
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_RCC_HSE_Disable>:
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_RCC_HSE_IsReady>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800248e:	d101      	bne.n	8002494 <LL_RCC_HSE_IsReady+0x18>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <LL_RCC_HSE_IsReady+0x1a>
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_RCC_HSI_Enable>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_RCC_HSI_Disable>:
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_RCC_HSI_IsReady>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d101      	bne.n	80024f4 <LL_RCC_HSI_IsReady+0x18>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_RCC_HSI_IsReady+0x1a>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_RCC_LSE_Enable>:
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_RCC_LSE_Disable>:
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_RCC_LSE_EnableBypass>:
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_RCC_LSE_DisableBypass>:
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_LSE_IsReady>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d101      	bne.n	80025ca <LL_RCC_LSE_IsReady+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_RCC_LSE_IsReady+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_LSI1_Enable>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_LSI1_Disable>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_RCC_LSI1_IsReady>:
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d101      	bne.n	8002632 <LL_RCC_LSI1_IsReady+0x18>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <LL_RCC_LSI1_IsReady+0x1a>
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_RCC_LSI2_Enable>:
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_RCC_LSI2_Disable>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_RCC_LSI2_IsReady>:
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d101      	bne.n	800269a <LL_RCC_LSI2_IsReady+0x18>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <LL_RCC_LSI2_IsReady+0x1a>
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_LSI2_SetTrimming>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_MSI_Enable>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_RCC_MSI_Disable>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_RCC_MSI_IsReady>:
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d101      	bne.n	8002726 <LL_RCC_MSI_IsReady+0x16>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_RCC_MSI_IsReady+0x18>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_RCC_MSI_SetRange>:
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_MSI_GetRange>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2bb0      	cmp	r3, #176	; 0xb0
 8002770:	d901      	bls.n	8002776 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002772:	23b0      	movs	r3, #176	; 0xb0
 8002774:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_RCC_SetSysClkSource>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 0203 	bic.w	r2, r3, #3
 80027c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_GetSysClkSource>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_SetAHBPrescaler>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_SetAHB4Prescaler>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002852:	f023 020f 	bic.w	r2, r3, #15
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_SetAPB1Prescaler>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_RCC_SetAPB2Prescaler>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_GetAHBPrescaler>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_C2_RCC_GetAHBPrescaler>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_GetAHB4Prescaler>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_GetAPB1Prescaler>:
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_RCC_GetAPB2Prescaler>:
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298c:	d101      	bne.n	8002992 <LL_RCC_PLL_IsReady+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_RCC_PLL_IsReady+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d101      	bne.n	8002a18 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a38:	d101      	bne.n	8002a3e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d101      	bne.n	8002a64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a82:	d101      	bne.n	8002a88 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aa6:	d101      	bne.n	8002aac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b08d      	sub	sp, #52	; 0x34
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e324      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 808d 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad8:	f7ff fe7d 	bl	80027d6 <LL_RCC_GetSysClkSource>
 8002adc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ade:	f7ff ff83 	bl	80029e8 <LL_RCC_PLL_GetMainSource>
 8002ae2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x3e>
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d147      	bne.n	8002b80 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d144      	bne.n	8002b80 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e308      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b06:	f7ff fe28 	bl	800275a <LL_RCC_MSI_GetRange>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	d914      	bls.n	8002b3a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fd23 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e2f7      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe02 	bl	8002732 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fe26 	bl	8002784 <LL_RCC_MSI_SetCalibTrimming>
 8002b38:	e013      	b.n	8002b62 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fdf7 	bl	8002732 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fe1b 	bl	8002784 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fd04 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e2d8      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b62:	f000 fc8b 	bl	800347c <HAL_RCC_GetHCLKFreq>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4aa4      	ldr	r2, [pc, #656]	; (8002dfc <HAL_RCC_OscConfig+0x344>)
 8002b6a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b6c:	4ba4      	ldr	r3, [pc, #656]	; (8002e00 <HAL_RCC_OscConfig+0x348>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fb0d 	bl	8001190 <HAL_InitTick>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d039      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e2c9      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01e      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b88:	f7ff fda4 	bl	80026d4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f900 	bl	8001d90 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b94:	f7ff f8fc 	bl	8001d90 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2b6      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ba6:	f7ff fdb3 	bl	8002710 <LL_RCC_MSI_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f1      	beq.n	8002b94 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fdbc 	bl	8002732 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fde0 	bl	8002784 <LL_RCC_MSI_SetCalibTrimming>
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc6:	f7ff fd94 	bl	80026f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bca:	f7ff f8e1 	bl	8001d90 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f8dd 	bl	8001d90 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e297      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002be4:	f7ff fd94 	bl	8002710 <LL_RCC_MSI_IsReady>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f1      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x11a>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bf0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d047      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	f7ff fdea 	bl	80027d6 <LL_RCC_GetSysClkSource>
 8002c02:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c04:	f7ff fef0 	bl	80029e8 <LL_RCC_PLL_GetMainSource>
 8002c08:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x164>
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d134      	bne.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e275      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x180>
 8002c32:	f7ff fc05 	bl	8002440 <LL_RCC_HSE_Enable>
 8002c36:	e001      	b.n	8002c3c <HAL_RCC_OscConfig+0x184>
 8002c38:	f7ff fc11 	bl	800245e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7ff f8a4 	bl	8001d90 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff f8a0 	bl	8001d90 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e25a      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c5e:	f7ff fc0d 	bl	800247c <LL_RCC_HSE_IsReady>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f1      	beq.n	8002c4c <HAL_RCC_OscConfig+0x194>
 8002c68:	e011      	b.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f891 	bl	8001d90 <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c72:	f7ff f88d 	bl	8001d90 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e247      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c84:	f7ff fbfa 	bl	800247c <LL_RCC_HSE_IsReady>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f1      	bne.n	8002c72 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d04c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	f7ff fd9c 	bl	80027d6 <LL_RCC_GetSysClkSource>
 8002c9e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca0:	f7ff fea2 	bl	80029e8 <LL_RCC_PLL_GetMainSource>
 8002ca4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x200>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e227      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fc19 	bl	8002500 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cce:	e031      	b.n	8002d34 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d019      	beq.n	8002d0c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	f7ff fbe2 	bl	80024a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff f858 	bl	8001d90 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f854 	bl	8001d90 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e20e      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cf6:	f7ff fbf1 	bl	80024dc <LL_RCC_HSI_IsReady>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f1      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbfb 	bl	8002500 <LL_RCC_HSI_SetCalibTrimming>
 8002d0a:	e013      	b.n	8002d34 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0c:	f7ff fbd7 	bl	80024be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff f83e 	bl	8001d90 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7ff f83a 	bl	8001d90 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1f4      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d2a:	f7ff fbd7 	bl	80024dc <LL_RCC_HSI_IsReady>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f1      	bne.n	8002d18 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a3 	beq.w	8002e94 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d076      	beq.n	8002e44 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d046      	beq.n	8002df0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002d62:	f7ff fc5a 	bl	800261a <LL_RCC_LSI1_IsReady>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d113      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002d6c:	f7ff fc33 	bl	80025d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d70:	f7ff f80e 	bl	8001d90 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d78:	f7ff f80a 	bl	8001d90 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1c4      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d8a:	f7ff fc46 	bl	800261a <LL_RCC_LSI1_IsReady>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f1      	beq.n	8002d78 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002d94:	f7ff fc53 	bl	800263e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fffa 	bl	8001d90 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002da0:	f7fe fff6 	bl	8001d90 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1b0      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002db2:	f7ff fc66 	bl	8002682 <LL_RCC_LSI2_IsReady>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f1      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fc70 	bl	80026a6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002dc6:	f7ff fc17 	bl	80025f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe ffe1 	bl	8001d90 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002dd2:	f7fe ffdd 	bl	8001d90 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e197      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002de4:	f7ff fc19 	bl	800261a <LL_RCC_LSI1_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f1      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x31a>
 8002dee:	e051      	b.n	8002e94 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002df0:	f7ff fbf1 	bl	80025d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe ffcc 	bl	8001d90 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002dfa:	e00c      	b.n	8002e16 <HAL_RCC_OscConfig+0x35e>
 8002dfc:	20000014 	.word	0x20000014
 8002e00:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e04:	f7fe ffc4 	bl	8001d90 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e17e      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e16:	f7ff fc00 	bl	800261a <LL_RCC_LSI1_IsReady>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f1      	beq.n	8002e04 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002e20:	f7ff fc1e 	bl	8002660 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e26:	f7fe ffb3 	bl	8001d90 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e16d      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002e38:	f7ff fc23 	bl	8002682 <LL_RCC_LSI2_IsReady>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f1      	bne.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002e42:	e027      	b.n	8002e94 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002e44:	f7ff fc0c 	bl	8002660 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe ffa2 	bl	8001d90 <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e50:	f7fe ff9e 	bl	8001d90 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e158      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e62:	f7ff fc0e 	bl	8002682 <LL_RCC_LSI2_IsReady>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f1      	bne.n	8002e50 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002e6c:	f7ff fbc4 	bl	80025f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe ff8e 	bl	8001d90 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e78:	f7fe ff8a 	bl	8001d90 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e144      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e8a:	f7ff fbc6 	bl	800261a <LL_RCC_LSI1_IsReady>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f1      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea0:	4b9e      	ldr	r3, [pc, #632]	; (800311c <HAL_RCC_OscConfig+0x664>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d114      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002eac:	f7ff faa6 	bl	80023fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ff6e 	bl	8001d90 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe ff6a 	bl	8001d90 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e124      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eca:	4b94      	ldr	r3, [pc, #592]	; (800311c <HAL_RCC_OscConfig+0x664>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x42c>
 8002ede:	f7ff fb24 	bl	800252a <LL_RCC_LSE_Enable>
 8002ee2:	e00c      	b.n	8002efe <HAL_RCC_OscConfig+0x446>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d104      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x43e>
 8002eec:	f7ff fb3f 	bl	800256e <LL_RCC_LSE_EnableBypass>
 8002ef0:	f7ff fb1b 	bl	800252a <LL_RCC_LSE_Enable>
 8002ef4:	e003      	b.n	8002efe <HAL_RCC_OscConfig+0x446>
 8002ef6:	f7ff fb29 	bl	800254c <LL_RCC_LSE_Disable>
 8002efa:	f7ff fb49 	bl	8002590 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d014      	beq.n	8002f30 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe ff43 	bl	8001d90 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe ff3f 	bl	8001d90 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0f7      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f24:	f7ff fb45 	bl	80025b2 <LL_RCC_LSE_IsReady>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <HAL_RCC_OscConfig+0x456>
 8002f2e:	e013      	b.n	8002f58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe ff2e 	bl	8001d90 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe ff2a 	bl	8001d90 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0e2      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f4e:	f7ff fb30 	bl	80025b2 <LL_RCC_LSE_IsReady>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80d8 	beq.w	8003112 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	f7ff fc38 	bl	80027d6 <LL_RCC_GetSysClkSource>
 8002f66:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	f040 80a6 	bne.w	80030c6 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d123      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d114      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d054      	beq.n	800307a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d04f      	beq.n	8003076 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fd6:	f7ff fcc1 	bl	800295c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fda:	f7fe fed9 	bl	8001d90 <HAL_GetTick>
 8002fde:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fed5 	bl	8001d90 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e08f      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ef      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCC_OscConfig+0x668>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800301a:	0212      	lsls	r2, r2, #8
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800302e:	430a      	orrs	r2, r1
 8003030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003034:	4313      	orrs	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003038:	f7ff fc81 	bl	800293e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800304c:	f7fe fea0 	bl	8001d90 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fe9c 	bl	8001d90 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e056      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003074:	e04d      	b.n	8003112 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e04c      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d144      	bne.n	8003112 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003088:	f7ff fc59 	bl	800293e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800309c:	f7fe fe78 	bl	8001d90 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fe74 	bl	8001d90 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <HAL_RCC_OscConfig+0x5ec>
 80030c4:	e025      	b.n	8003112 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d020      	beq.n	800310e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	f7ff fc46 	bl	800295c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fe5e 	bl	8001d90 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fe5a 	bl	8001d90 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e014      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ef      	bne.n	80030d8 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60d3      	str	r3, [r2, #12]
 800310c:	e001      	b.n	8003112 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3734      	adds	r7, #52	; 0x34
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	58000400 	.word	0x58000400
 8003120:	11c1808c 	.word	0x11c1808c

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e12d      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b98      	ldr	r3, [pc, #608]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d91b      	bls.n	800317e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b95      	ldr	r3, [pc, #596]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4993      	ldr	r1, [pc, #588]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fe fe1b 	bl	8001d90 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315c:	e008      	b.n	8003170 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800315e:	f7fe fe17 	bl	8001d90 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e111      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003170:	4b8a      	ldr	r3, [pc, #552]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d1ef      	bne.n	800315e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fb2d 	bl	80027ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003194:	f7fe fdfc 	bl	8001d90 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800319c:	f7fe fdf8 	bl	8001d90 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0f2      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031ae:	f7ff fc27 	bl	8002a00 <LL_RCC_IsActiveFlag_HPRE>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f1      	beq.n	800319c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fb24 	bl	8002816 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031ce:	f7fe fddf 	bl	8001d90 <HAL_GetTick>
 80031d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031d6:	f7fe fddb 	bl	8001d90 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e0d5      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031e8:	f7ff fc1c 	bl	8002a24 <LL_RCC_IsActiveFlag_C2HPRE>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f1      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fb1d 	bl	8002842 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003208:	f7fe fdc2 	bl	8001d90 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003210:	f7fe fdbe 	bl	8001d90 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0b8      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003222:	f7ff fc12 	bl	8002a4a <LL_RCC_IsActiveFlag_SHDHPRE>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f1      	beq.n	8003210 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d016      	beq.n	8003266 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fb17 	bl	8002870 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003242:	f7fe fda5 	bl	8001d90 <HAL_GetTick>
 8003246:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800324a:	f7fe fda1 	bl	8001d90 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e09b      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800325c:	f7ff fc08 	bl	8002a70 <LL_RCC_IsActiveFlag_PPRE1>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f1      	beq.n	800324a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fb0d 	bl	8002898 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800327e:	f7fe fd87 	bl	8001d90 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003286:	f7fe fd83 	bl	8001d90 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e07d      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003298:	f7ff fbfc 	bl	8002a94 <LL_RCC_IsActiveFlag_PPRE2>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f1      	beq.n	8003286 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d043      	beq.n	8003336 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d106      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032b6:	f7ff f8e1 	bl	800247c <LL_RCC_HSE_IsReady>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11e      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e067      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032cc:	f7ff fb55 	bl	800297a <LL_RCC_PLL_IsReady>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d113      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e05c      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80032e2:	f7ff fa15 	bl	8002710 <LL_RCC_MSI_IsReady>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e051      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032f0:	f7ff f8f4 	bl	80024dc <LL_RCC_HSI_IsReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e04a      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fa53 	bl	80027ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fe fd42 	bl	8001d90 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fd3e 	bl	8001d90 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e036      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	f7ff fa56 	bl	80027d6 <LL_RCC_GetSysClkSource>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	429a      	cmp	r2, r3
 8003334:	d1ec      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d21b      	bcs.n	800337c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 0207 	bic.w	r2, r3, #7
 800334c:	4913      	ldr	r1, [pc, #76]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fe fd1c 	bl	8001d90 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	e008      	b.n	800336e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800335c:	f7fe fd18 	bl	8001d90 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e012      	b.n	8003394 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x278>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d1ef      	bne.n	800335c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800337c:	f000 f87e 	bl	800347c <HAL_RCC_GetHCLKFreq>
 8003380:	4603      	mov	r3, r0
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_ClockConfig+0x27c>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003386:	f7fe fd0f 	bl	8001da8 <HAL_GetTickPrio>
 800338a:	4603      	mov	r3, r0
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd feff 	bl	8001190 <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58004000 	.word	0x58004000
 80033a0:	20000014 	.word	0x20000014

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	f7ff fa14 	bl	80027d6 <LL_RCC_GetSysClkSource>
 80033ae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033b6:	f7ff f9d0 	bl	800275a <LL_RCC_MSI_GetRange>
 80033ba:	4603      	mov	r3, r0
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e04b      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e045      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d10a      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033de:	f7ff f81d 	bl	800241c <LL_RCC_HSE_IsEnabledDiv2>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e03a      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	e037      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80033f4:	f7ff faf8 	bl	80029e8 <LL_RCC_PLL_GetMainSource>
 80033f8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d003      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x64>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x6a>
 8003406:	e00d      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_GetSysClockFreq+0xd0>)
 800340a:	60bb      	str	r3, [r7, #8]
        break;
 800340c:	e015      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800340e:	f7ff f805 	bl	800241c <LL_RCC_HSE_IsEnabledDiv2>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_RCC_GetSysClockFreq+0xd0>)
 800341a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800341c:	e00d      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003420:	60bb      	str	r3, [r7, #8]
        break;
 8003422:	e00a      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003424:	f7ff f999 	bl	800275a <LL_RCC_MSI_GetRange>
 8003428:	4603      	mov	r3, r0
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003436:	60bb      	str	r3, [r7, #8]
        break;
 8003438:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800343a:	f7ff fab0 	bl	800299e <LL_RCC_PLL_GetN>
 800343e:	4602      	mov	r2, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	fb03 f402 	mul.w	r4, r3, r2
 8003446:	f7ff fac3 	bl	80029d0 <LL_RCC_PLL_GetDivider>
 800344a:	4603      	mov	r3, r0
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	3301      	adds	r3, #1
 8003450:	fbb4 f4f3 	udiv	r4, r4, r3
 8003454:	f7ff fab0 	bl	80029b8 <LL_RCC_PLL_GetR>
 8003458:	4603      	mov	r3, r0
 800345a:	0f5b      	lsrs	r3, r3, #29
 800345c:	3301      	adds	r3, #1
 800345e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003462:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003464:	68fb      	ldr	r3, [r7, #12]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	0800aed0 	.word	0x0800aed0
 8003474:	00f42400 	.word	0x00f42400
 8003478:	01e84800 	.word	0x01e84800

0800347c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b598      	push	{r3, r4, r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003480:	f7ff ff90 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003484:	4604      	mov	r4, r0
 8003486:	f7ff fa1b 	bl	80028c0 <LL_RCC_GetAHBPrescaler>
 800348a:	4603      	mov	r3, r0
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd98      	pop	{r3, r4, r7, pc}
 80034a0:	0800ae70 	.word	0x0800ae70

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b598      	push	{r3, r4, r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034a8:	f7ff ffe8 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034ac:	4604      	mov	r4, r0
 80034ae:	f7ff fa2e 	bl	800290e <LL_RCC_GetAPB1Prescaler>
 80034b2:	4603      	mov	r3, r0
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd98      	pop	{r3, r4, r7, pc}
 80034cc:	0800aeb0 	.word	0x0800aeb0

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b598      	push	{r3, r4, r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80034d4:	f7ff ffd2 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034d8:	4604      	mov	r4, r0
 80034da:	f7ff fa24 	bl	8002926 <LL_RCC_GetAPB2Prescaler>
 80034de:	4603      	mov	r3, r0
 80034e0:	0adb      	lsrs	r3, r3, #11
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd98      	pop	{r3, r4, r7, pc}
 80034f8:	0800aeb0 	.word	0x0800aeb0

080034fc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	226f      	movs	r2, #111	; 0x6f
 800350a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800350c:	f7ff f963 	bl	80027d6 <LL_RCC_GetSysClkSource>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003516:	f7ff f9d3 	bl	80028c0 <LL_RCC_GetAHBPrescaler>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003520:	f7ff f9f5 	bl	800290e <LL_RCC_GetAPB1Prescaler>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800352a:	f7ff f9fc 	bl	8002926 <LL_RCC_GetAPB2Prescaler>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003534:	f7ff f9d0 	bl	80028d8 <LL_C2_RCC_GetAHBPrescaler>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800353e:	f7ff f9d8 	bl	80028f2 <LL_RCC_GetAHB4Prescaler>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_GetClockConfig+0x60>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0207 	and.w	r2, r3, #7
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	58004000 	.word	0x58004000

08003560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2bb0      	cmp	r3, #176	; 0xb0
 800356c:	d903      	bls.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e007      	b.n	8003586 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003584:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003586:	f7ff f9b4 	bl	80028f2 <LL_RCC_GetAHB4Prescaler>
 800358a:	4603      	mov	r3, r0
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	0c9b      	lsrs	r3, r3, #18
 80035aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f80c 	bl	80035cc <RCC_SetFlashLatency>
 80035b4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	0800aed0 	.word	0x0800aed0
 80035c4:	0800ae70 	.word	0x0800ae70
 80035c8:	431bde83 	.word	0x431bde83

080035cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b08f      	sub	sp, #60	; 0x3c
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <RCC_SetFlashLatency+0x9c>)
 80035d8:	f107 041c 	add.w	r4, r7, #28
 80035dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <RCC_SetFlashLatency+0xa0>)
 80035e4:	f107 040c 	add.w	r4, r7, #12
 80035e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	e013      	b.n	8003620 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	3338      	adds	r3, #56	; 0x38
 80035fe:	443b      	add	r3, r7
 8003600:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d807      	bhi.n	800361a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3338      	adds	r3, #56	; 0x38
 8003610:	443b      	add	r3, r7
 8003612:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003618:	e005      	b.n	8003626 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	3301      	adds	r3, #1
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2b03      	cmp	r3, #3
 8003624:	d9e8      	bls.n	80035f8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <RCC_SetFlashLatency+0xa4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4910      	ldr	r1, [pc, #64]	; (8003670 <RCC_SetFlashLatency+0xa4>)
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003636:	f7fe fbab 	bl	8001d90 <HAL_GetTick>
 800363a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800363c:	e008      	b.n	8003650 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800363e:	f7fe fba7 	bl	8001d90 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e007      	b.n	8003660 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <RCC_SetFlashLatency+0xa4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365a:	429a      	cmp	r2, r3
 800365c:	d1ef      	bne.n	800363e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	373c      	adds	r7, #60	; 0x3c
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	0800ae38 	.word	0x0800ae38
 800366c:	0800ae48 	.word	0x0800ae48
 8003670:	58004000 	.word	0x58004000

08003674 <LL_RCC_LSE_IsEnabled>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <LL_RCC_LSE_IsEnabled+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_RCC_LSE_IsEnabled+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_LSE_IsReady>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d101      	bne.n	80036b0 <LL_RCC_LSE_IsReady+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_RCC_LSE_IsReady+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_RCC_MSI_EnablePLLMode>:
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_RCC_SetRFWKPClockSource>:
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_SetSMPSClockSource>:
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f023 0203 	bic.w	r2, r3, #3
 8003718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4313      	orrs	r3, r2
 8003720:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_RCC_SetSMPSPrescaler>:
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4313      	orrs	r3, r2
 8003748:	624b      	str	r3, [r1, #36]	; 0x24
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_RCC_SetUSARTClockSource>:
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_RCC_SetLPUARTClockSource>:
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_SetI2CClockSource>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80037c6:	43db      	mvns	r3, r3
 80037c8:	401a      	ands	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80037d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_SetLPTIMClockSource>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	43db      	mvns	r3, r3
 8003800:	401a      	ands	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_RCC_SetRNGClockSource>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_RCC_SetCLK48ClockSource>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800385c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_RCC_SetADCClockSource>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_SetRTCClockSource>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_RCC_GetRTCClockSource>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_ForceBackupDomainReset>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b088      	sub	sp, #32
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003932:	2300      	movs	r3, #0
 8003934:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003936:	2300      	movs	r3, #0
 8003938:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003942:	2b00      	cmp	r3, #0
 8003944:	d046      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003946:	f7ff ffc1 	bl	80038cc <LL_RCC_GetRTCClockSource>
 800394a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	429a      	cmp	r2, r3
 8003954:	d03c      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003956:	f7fe fd51 	bl	80023fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff9b 	bl	80038a0 <LL_RCC_SetRTCClockSource>
 800396a:	e02e      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003976:	f7ff ffb6 	bl	80038e6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800397a:	f7ff ffc5 	bl	8003908 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800398c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003996:	f7ff fe6d 	bl	8003674 <LL_RCC_LSE_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d114      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a0:	f7fe f9f6 	bl	8001d90 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80039a6:	e00b      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fe f9f2 	bl	8001d90 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d902      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	77fb      	strb	r3, [r7, #31]
              break;
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80039c0:	f7ff fe6a 	bl	8003698 <LL_RCC_LSE_IsReady>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d1ee      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	77bb      	strb	r3, [r7, #30]
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
 80039d2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff feb6 	bl	8003756 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fec1 	bl	8003782 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fee9 	bl	80037e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fede 	bl	80037e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff feb6 	bl	80037ae <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d008      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fed4 	bl	800381c <LL_RCC_SetRNGClockSource>
 8003a74:	e00a      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7ff fecb 	bl	800381c <LL_RCC_SetRNGClockSource>
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fede 	bl	8003848 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d011      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fedc 	bl	8003874 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fdf7 	bl	80036da <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fe16 	bl	800372e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fdfd 	bl	8003706 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003b1a:	f7ff fdcf 	bl	80036bc <LL_RCC_MSI_EnablePLLMode>
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e09f      	b.n	8003c76 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fa8c 	bl	8001068 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <HAL_RTC_Init+0x15c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d07e      	beq.n	8003c62 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	22ca      	movs	r2, #202	; 0xca
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2253      	movs	r2, #83	; 0x53
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fac6 	bl	8004106 <RTC_EnterInitMode>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	22ff      	movs	r2, #255	; 0xff
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e067      	b.n	8003c66 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6899      	ldr	r1, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68d2      	ldr	r2, [r2, #12]
 8003bd0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6919      	ldr	r1, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0202 	bic.w	r2, r2, #2
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d113      	bne.n	8003c54 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa44 	bl	80040ba <HAL_RTC_WaitForSynchro>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e010      	b.n	8003c76 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e001      	b.n	8003c66 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40002800 	.word	0x40002800

08003c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_RTC_SetTime+0x1a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e0b2      	b.n	8003e04 <HAL_RTC_SetTime+0x180>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d126      	bne.n	8003d02 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fa44 	bl	800415a <RTC_ByteToBcd2>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fa3d 	bl	800415a <RTC_ByteToBcd2>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003ce4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fa35 	bl	800415a <RTC_ByteToBcd2>
 8003cf0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003cf2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	78db      	ldrb	r3, [r3, #3]
 8003cfa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e018      	b.n	8003d34 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d22:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	78db      	ldrb	r3, [r3, #3]
 8003d2e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	22ca      	movs	r2, #202	; 0xca
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2253      	movs	r2, #83	; 0x53
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f9de 	bl	8004106 <RTC_EnterInitMode>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04b      	b.n	8003e04 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d7a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d8a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f979 	bl	80040ba <HAL_RTC_WaitForSynchro>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e00c      	b.n	8003e04 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}

08003e0c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11a      	bne.n	8003eba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f986 	bl	800419a <RTC_Bcd2ToByte>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f97d 	bl	800419a <RTC_Bcd2ToByte>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	789b      	ldrb	r3, [r3, #2]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f974 	bl	800419a <RTC_Bcd2ToByte>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_RTC_SetDate+0x1a>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e09c      	b.n	8004018 <HAL_RTC_SetDate+0x154>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10e      	bne.n	8003f12 <HAL_RTC_SetDate+0x4e>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	330a      	adds	r3, #10
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11c      	bne.n	8003f52 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f91c 	bl	800415a <RTC_ByteToBcd2>
 8003f22:	4603      	mov	r3, r0
 8003f24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f915 	bl	800415a <RTC_ByteToBcd2>
 8003f30:	4603      	mov	r3, r0
 8003f32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003f34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f90d 	bl	800415a <RTC_ByteToBcd2>
 8003f40:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003f42:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e00e      	b.n	8003f70 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	78db      	ldrb	r3, [r3, #3]
 8003f56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f5e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003f64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	22ca      	movs	r2, #202	; 0xca
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2253      	movs	r2, #83	; 0x53
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f8c0 	bl	8004106 <RTC_EnterInitMode>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	22ff      	movs	r2, #255	; 0xff
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2204      	movs	r2, #4
 8003f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e037      	b.n	8004018 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fb2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fb6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f86f 	bl	80040ba <HAL_RTC_WaitForSynchro>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2204      	movs	r2, #4
 8003fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00c      	b.n	8004018 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800403a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	0b5b      	lsrs	r3, r3, #13
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11a      	bne.n	80040b0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f88b 	bl	800419a <RTC_Bcd2ToByte>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f882 	bl	800419a <RTC_Bcd2ToByte>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	789b      	ldrb	r3, [r3, #2]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f879 	bl	800419a <RTC_Bcd2ToByte>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80040d2:	f7fd fe5d 	bl	8001d90 <HAL_GetTick>
 80040d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040d8:	e009      	b.n	80040ee <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040da:	f7fd fe59 	bl	8001d90 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e8:	d901      	bls.n	80040ee <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e007      	b.n	80040fe <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ee      	beq.n	80040da <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d119      	bne.n	8004150 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f04f 32ff 	mov.w	r2, #4294967295
 8004124:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004126:	f7fd fe33 	bl	8001d90 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800412c:	e009      	b.n	8004142 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800412e:	f7fd fe2f 	bl	8001d90 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800413c:	d901      	bls.n	8004142 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e007      	b.n	8004152 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800416c:	e005      	b.n	800417a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004174:	7afb      	ldrb	r3, [r7, #11]
 8004176:	3b0a      	subs	r3, #10
 8004178:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	2b09      	cmp	r3, #9
 800417e:	d8f6      	bhi.n	800416e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	b2da      	uxtb	r2, r3
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	4313      	orrs	r3, r2
 800418c:	b2db      	uxtb	r3, r3
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	b2db      	uxtb	r3, r3
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e049      	b.n	8004278 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f841 	bl	8004280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f000 f9d5 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e036      	b.n	800431a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <HAL_TIM_Base_Start_IT+0x94>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x44>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d115      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_TIM_Base_Start_IT+0x98>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d015      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x82>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d011      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e008      	b.n	8004316 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e000      	b.n	8004318 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	00010007 	.word	0x00010007

08004330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0202 	mvn.w	r2, #2
 800435c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f905 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8f7 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f908 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0204 	mvn.w	r2, #4
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8db 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8cd 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8de 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0208 	mvn.w	r2, #8
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8b1 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f8a3 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f8b4 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b10      	cmp	r3, #16
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2208      	movs	r2, #8
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f887 	bl	8004582 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f879 	bl	800456e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f88a 	bl	8004596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0201 	mvn.w	r2, #1
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fc48 	bl	8000d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8ca 	bl	8004674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8bd 	bl	8004688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f838 	bl	80045aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b20      	cmp	r3, #32
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b20      	cmp	r3, #32
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0220 	mvn.w	r2, #32
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f87d 	bl	8004660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <TIM_Base_SetConfig+0x9c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x20>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <TIM_Base_SetConfig+0x9c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_Base_SetConfig+0x42>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d108      	bne.n	8004614 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a08      	ldr	r2, [pc, #32]	; (800465c <TIM_Base_SetConfig+0x9c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40012c00 	.word	0x40012c00

08004660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_GetUSARTClockSource>:
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4013      	ands	r3, r2
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_RCC_GetLPUARTClockSource>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4013      	ands	r3, r2
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e042      	b.n	8004774 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc fcdd 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	; 0x24
 800470a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fc4a 	bl	8004fb8 <UART_SetConfig>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e022      	b.n	8004774 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fe66 	bl	8005408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 feed 	bl	800554c <UART_CheckIdleState>
 8004772:	4603      	mov	r3, r0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	2b20      	cmp	r3, #32
 8004794:	d17b      	bne.n	800488e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_UART_Transmit+0x26>
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e074      	b.n	8004890 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2221      	movs	r2, #33	; 0x21
 80047b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b6:	f7fd faeb 	bl	8001d90 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x6c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047f0:	e030      	b.n	8004854 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2180      	movs	r1, #128	; 0x80
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 ff4f 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e03d      	b.n	8004890 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1c8      	bne.n	80047f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 ff18 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e006      	b.n	8004890 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d137      	bne.n	8004920 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Receive_IT+0x24>
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e030      	b.n	8004922 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_UART_Receive_IT+0x94>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d01f      	beq.n	8004910 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	613b      	str	r3, [r7, #16]
   return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	61bb      	str	r3, [r7, #24]
   return(result);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	461a      	mov	r2, r3
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 ff2a 	bl	8005770 <UART_Start_Receive_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	e000      	b.n	8004922 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40008000 	.word	0x40008000

08004930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b0ba      	sub	sp, #232	; 0xe8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800495a:	f640 030f 	movw	r3, #2063	; 0x80f
 800495e:	4013      	ands	r3, r2
 8004960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11b      	bne.n	80049a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 82e3 	beq.w	8004f60 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      }
      return;
 80049a2:	e2dd      	b.n	8004f60 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8123 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049b2:	4b8d      	ldr	r3, [pc, #564]	; (8004be8 <HAL_UART_IRQHandler+0x2b8>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_UART_IRQHandler+0x2bc>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8116 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d011      	beq.n	80049f8 <HAL_UART_IRQHandler+0xc8>
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2201      	movs	r2, #1
 80049e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d011      	beq.n	8004a28 <HAL_UART_IRQHandler+0xf8>
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2202      	movs	r2, #2
 8004a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d011      	beq.n	8004a58 <HAL_UART_IRQHandler+0x128>
 8004a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2204      	movs	r2, #4
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f043 0202 	orr.w	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a74:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <HAL_UART_IRQHandler+0x2b8>)
 8004a76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f043 0208 	orr.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x196>
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8249 	beq.w	8004f64 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d013      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d005      	beq.n	8004b2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d054      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 ff42 	bl	80059b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d146      	bne.n	8004bcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1d9      	bne.n	8004b3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_UART_IRQHandler+0x2c0>)
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fa4a 	bl	800203e <HAL_DMA_Abort_IT>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d019      	beq.n	8004be4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc2:	e00f      	b.n	8004be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9e1 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bca:	e00b      	b.n	8004be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f9dd 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd2:	e007      	b.n	8004be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9d9 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004be2:	e1bf      	b.n	8004f64 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	bf00      	nop
    return;
 8004be6:	e1bd      	b.n	8004f64 <HAL_UART_IRQHandler+0x634>
 8004be8:	10000001 	.word	0x10000001
 8004bec:	04000120 	.word	0x04000120
 8004bf0:	08005a81 	.word	0x08005a81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 8153 	bne.w	8004ea4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 814c 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8145 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	f040 80bb 	bne.w	8004da8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 818f 	beq.w	8004f68 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c54:	429a      	cmp	r2, r3
 8004c56:	f080 8187 	bcs.w	8004f68 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8087 	bne.w	8004d86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ca6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1da      	bne.n	8004c78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ce6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e1      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3308      	adds	r3, #8
 8004d04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fd f8fd 	bl	8001f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8fd 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004da6:	e0df      	b.n	8004f68 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80d1 	beq.w	8004f6c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004dca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80cc 	beq.w	8004f6c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
 8004df8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e4      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e32:	633a      	str	r2, [r7, #48]	; 0x30
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e1      	bne.n	8004e0a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0310 	bic.w	r3, r3, #16
 8004e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e4      	bne.n	8004e5a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f87f 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea2:	e063      	b.n	8004f6c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <HAL_UART_IRQHandler+0x59e>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fb38 	bl	800653c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ecc:	e051      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03a      	beq.n	8004f70 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
    }
    return;
 8004f02:	e035      	b.n	8004f70 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_UART_IRQHandler+0x5f4>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fdc5 	bl	8005aac <UART_EndTransmit_IT>
    return;
 8004f22:	e026      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <HAL_UART_IRQHandler+0x614>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 fb11 	bl	8006564 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f42:	e016      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <HAL_UART_IRQHandler+0x642>
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da0c      	bge.n	8004f72 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 faf9 	bl	8006550 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f5e:	e008      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
      return;
 8004f60:	bf00      	nop
 8004f62:	e006      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
    return;
 8004f64:	bf00      	nop
 8004f66:	e004      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
      return;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
      return;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <HAL_UART_IRQHandler+0x642>
    return;
 8004f70:	bf00      	nop
  }
}
 8004f72:	37e8      	adds	r7, #232	; 0xe8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fbc:	b08c      	sub	sp, #48	; 0x30
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4baf      	ldr	r3, [pc, #700]	; (80052a4 <UART_SetConfig+0x2ec>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4aa4      	ldr	r2, [pc, #656]	; (80052a8 <UART_SetConfig+0x2f0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	4313      	orrs	r3, r2
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800502e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005038:	430b      	orrs	r3, r1
 800503a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	f023 010f 	bic.w	r1, r3, #15
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a95      	ldr	r2, [pc, #596]	; (80052ac <UART_SetConfig+0x2f4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d125      	bne.n	80050a8 <UART_SetConfig+0xf0>
 800505c:	2003      	movs	r0, #3
 800505e:	f7ff fb1d 	bl	800469c <LL_RCC_GetUSARTClockSource>
 8005062:	4603      	mov	r3, r0
 8005064:	2b03      	cmp	r3, #3
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0xe8>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0xb8>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005081 	.word	0x08005081
 8005074:	08005091 	.word	0x08005091
 8005078:	08005089 	.word	0x08005089
 800507c:	08005099 	.word	0x08005099
 8005080:	2301      	movs	r3, #1
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e042      	b.n	800510e <UART_SetConfig+0x156>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508e:	e03e      	b.n	800510e <UART_SetConfig+0x156>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005096:	e03a      	b.n	800510e <UART_SetConfig+0x156>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800509e:	e036      	b.n	800510e <UART_SetConfig+0x156>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a6:	e032      	b.n	800510e <UART_SetConfig+0x156>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a7e      	ldr	r2, [pc, #504]	; (80052a8 <UART_SetConfig+0x2f0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d12a      	bne.n	8005108 <UART_SetConfig+0x150>
 80050b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80050b6:	f7ff fb01 	bl	80046bc <LL_RCC_GetLPUARTClockSource>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c0:	d01a      	beq.n	80050f8 <UART_SetConfig+0x140>
 80050c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c6:	d81b      	bhi.n	8005100 <UART_SetConfig+0x148>
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d00c      	beq.n	80050e8 <UART_SetConfig+0x130>
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d2:	d815      	bhi.n	8005100 <UART_SetConfig+0x148>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <UART_SetConfig+0x128>
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050dc:	d008      	beq.n	80050f0 <UART_SetConfig+0x138>
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x148>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e012      	b.n	800510e <UART_SetConfig+0x156>
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e00e      	b.n	800510e <UART_SetConfig+0x156>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e00a      	b.n	800510e <UART_SetConfig+0x156>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e006      	b.n	800510e <UART_SetConfig+0x156>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e002      	b.n	800510e <UART_SetConfig+0x156>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <UART_SetConfig+0x2f0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	f040 8097 	bne.w	8005248 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800511a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800511e:	2b08      	cmp	r3, #8
 8005120:	d823      	bhi.n	800516a <UART_SetConfig+0x1b2>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x170>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	0800516b 	.word	0x0800516b
 8005130:	08005155 	.word	0x08005155
 8005134:	0800516b 	.word	0x0800516b
 8005138:	0800515b 	.word	0x0800515b
 800513c:	0800516b 	.word	0x0800516b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800516b 	.word	0x0800516b
 8005148:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe f9aa 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005152:	e010      	b.n	8005176 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <UART_SetConfig+0x2f8>)
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005158:	e00d      	b.n	8005176 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe f923 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800515e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005160:	e009      	b.n	8005176 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005168:	e005      	b.n	8005176 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 812b 	beq.w	80053d4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	4a4c      	ldr	r2, [pc, #304]	; (80052b4 <UART_SetConfig+0x2fc>)
 8005184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005188:	461a      	mov	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005190:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d305      	bcc.n	80051ae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d903      	bls.n	80051b6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051b4:	e10e      	b.n	80053d4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	2200      	movs	r2, #0
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	60fa      	str	r2, [r7, #12]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <UART_SetConfig+0x2fc>)
 80051c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2200      	movs	r2, #0
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051d8:	f7fb f82a 	bl	8000230 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	020b      	lsls	r3, r1, #8
 80051ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051f2:	0202      	lsls	r2, r0, #8
 80051f4:	6979      	ldr	r1, [r7, #20]
 80051f6:	6849      	ldr	r1, [r1, #4]
 80051f8:	0849      	lsrs	r1, r1, #1
 80051fa:	2000      	movs	r0, #0
 80051fc:	460c      	mov	r4, r1
 80051fe:	4605      	mov	r5, r0
 8005200:	eb12 0804 	adds.w	r8, r2, r4
 8005204:	eb43 0905 	adc.w	r9, r3, r5
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	469a      	mov	sl, r3
 8005210:	4693      	mov	fp, r2
 8005212:	4652      	mov	r2, sl
 8005214:	465b      	mov	r3, fp
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb f809 	bl	8000230 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4613      	mov	r3, r2
 8005224:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522c:	d308      	bcc.n	8005240 <UART_SetConfig+0x288>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005234:	d204      	bcs.n	8005240 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e0c9      	b.n	80053d4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005246:	e0c5      	b.n	80053d4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d16d      	bne.n	800532e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005256:	3b01      	subs	r3, #1
 8005258:	2b07      	cmp	r3, #7
 800525a:	d82d      	bhi.n	80052b8 <UART_SetConfig+0x300>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x2ac>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005285 	.word	0x08005285
 8005268:	0800528d 	.word	0x0800528d
 800526c:	080052b9 	.word	0x080052b9
 8005270:	08005293 	.word	0x08005293
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052b9 	.word	0x080052b9
 8005280:	0800529b 	.word	0x0800529b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fe f924 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800528a:	e01b      	b.n	80052c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <UART_SetConfig+0x2f8>)
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005290:	e018      	b.n	80052c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe f887 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005298:	e014      	b.n	80052c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052a0:	e010      	b.n	80052c4 <UART_SetConfig+0x30c>
 80052a2:	bf00      	nop
 80052a4:	cfff69f3 	.word	0xcfff69f3
 80052a8:	40008000 	.word	0x40008000
 80052ac:	40013800 	.word	0x40013800
 80052b0:	00f42400 	.word	0x00f42400
 80052b4:	0800af10 	.word	0x0800af10
      default:
        pclk = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 8084 	beq.w	80053d4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	4a4b      	ldr	r2, [pc, #300]	; (8005400 <UART_SetConfig+0x448>)
 80052d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d6:	461a      	mov	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	fbb3 f3f2 	udiv	r3, r3, r2
 80052de:	005a      	lsls	r2, r3, #1
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	441a      	add	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d916      	bls.n	8005326 <UART_SetConfig+0x36e>
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d212      	bcs.n	8005326 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	b29a      	uxth	r2, r3
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	4313      	orrs	r3, r2
 800531a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	8bfa      	ldrh	r2, [r7, #30]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e056      	b.n	80053d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800532c:	e052      	b.n	80053d4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005332:	3b01      	subs	r3, #1
 8005334:	2b07      	cmp	r3, #7
 8005336:	d822      	bhi.n	800537e <UART_SetConfig+0x3c6>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x388>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005361 	.word	0x08005361
 8005344:	08005369 	.word	0x08005369
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800536f 	.word	0x0800536f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800537f 	.word	0x0800537f
 800535c:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe f8b6 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <UART_SetConfig+0x44c>)
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe f819 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005388:	bf00      	nop
    }

    if (pclk != 0U)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d021      	beq.n	80053d4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <UART_SetConfig+0x448>)
 8005396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539a:	461a      	mov	r2, r3
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	fbb3 f2f2 	udiv	r2, r3, r2
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	441a      	add	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d909      	bls.n	80053ce <UART_SetConfig+0x416>
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d205      	bcs.n	80053ce <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e002      	b.n	80053d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2201      	movs	r2, #1
 80053e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2200      	movs	r2, #0
 80053e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80053f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	0800af10 	.word	0x0800af10
 8005404:	00f42400 	.word	0x00f42400

08005408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01a      	beq.n	800551e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005506:	d10a      	bne.n	800551e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b098      	sub	sp, #96	; 0x60
 8005550:	af02      	add	r7, sp, #8
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800555c:	f7fc fc18 	bl	8001d90 <HAL_GetTick>
 8005560:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d12f      	bne.n	80055d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005578:	2200      	movs	r2, #0
 800557a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f88e 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d022      	beq.n	80055d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559e:	653b      	str	r3, [r7, #80]	; 0x50
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e063      	b.n	8005698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d149      	bne.n	8005672 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e6:	2200      	movs	r2, #0
 80055e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f857 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d03c      	beq.n	8005672 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	623b      	str	r3, [r7, #32]
   return(result);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
 8005618:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	60fb      	str	r3, [r7, #12]
   return(result);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	64bb      	str	r3, [r7, #72]	; 0x48
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564a:	61fa      	str	r2, [r7, #28]
 800564c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69b9      	ldr	r1, [r7, #24]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	617b      	str	r3, [r7, #20]
   return(result);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e012      	b.n	8005698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3758      	adds	r7, #88	; 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	e049      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d045      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fc fb69 	bl	8001d90 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e048      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d031      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d110      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f95b 	bl	80059b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2208      	movs	r2, #8
 8005702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e029      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005720:	d111      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f941 	bl	80059b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0a6      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b0a3      	sub	sp, #140	; 0x8c
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d10e      	bne.n	80057c2 <UART_Start_Receive_IT+0x52>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <UART_Start_Receive_IT+0x48>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057b6:	e02d      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c0:	e028      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <UART_Start_Receive_IT+0x76>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <UART_Start_Receive_IT+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057da:	e01b      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057e4:	e016      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ee:	d10d      	bne.n	800580c <UART_Start_Receive_IT+0x9c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <UART_Start_Receive_IT+0x92>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	227f      	movs	r2, #127	; 0x7f
 80057fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005800:	e008      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	223f      	movs	r2, #63	; 0x3f
 8005806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800580a:	e003      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2222      	movs	r2, #34	; 0x22
 8005820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005848:	673a      	str	r2, [r7, #112]	; 0x70
 800584a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800584e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e3      	bne.n	8005824 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005864:	d14f      	bne.n	8005906 <UART_Start_Receive_IT+0x196>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	429a      	cmp	r2, r3
 8005870:	d349      	bcc.n	8005906 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d107      	bne.n	800588c <UART_Start_Receive_IT+0x11c>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a47      	ldr	r2, [pc, #284]	; (80059a4 <UART_Start_Receive_IT+0x234>)
 8005888:	675a      	str	r2, [r3, #116]	; 0x74
 800588a:	e002      	b.n	8005892 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a46      	ldr	r2, [pc, #280]	; (80059a8 <UART_Start_Receive_IT+0x238>)
 8005890:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01a      	beq.n	80058d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e4      	bne.n	800589a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80058f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_Start_Receive_IT+0x160>
 8005904:	e046      	b.n	8005994 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	d107      	bne.n	8005920 <UART_Start_Receive_IT+0x1b0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a24      	ldr	r2, [pc, #144]	; (80059ac <UART_Start_Receive_IT+0x23c>)
 800591c:	675a      	str	r2, [r3, #116]	; 0x74
 800591e:	e002      	b.n	8005926 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <UART_Start_Receive_IT+0x240>)
 8005924:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d019      	beq.n	8005962 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005942:	677b      	str	r3, [r7, #116]	; 0x74
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
 800594e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_Start_Receive_IT+0x1be>
 8005960:	e018      	b.n	8005994 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f043 0320 	orr.w	r3, r3, #32
 8005976:	67bb      	str	r3, [r7, #120]	; 0x78
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	61bb      	str	r3, [r7, #24]
   return(result);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	378c      	adds	r7, #140	; 0x8c
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	080061d5 	.word	0x080061d5
 80059a8:	08005e75 	.word	0x08005e75
 80059ac:	08005cbd 	.word	0x08005cbd
 80059b0:	08005b05 	.word	0x08005b05

080059b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b095      	sub	sp, #84	; 0x54
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	643b      	str	r3, [r7, #64]	; 0x40
 80059dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d118      	bne.n	8005a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	647b      	str	r3, [r7, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a74:	bf00      	nop
 8005a76:	3754      	adds	r7, #84	; 0x54
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff fa74 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fa3f 	bl	8004f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afa:	bf00      	nop
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b09c      	sub	sp, #112	; 0x70
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1c:	2b22      	cmp	r3, #34	; 0x22
 8005b1e:	f040 80be 	bne.w	8005c9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b30:	b2d9      	uxtb	r1, r3
 8005b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 80a1 	bne.w	8005cae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8005bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a33      	ldr	r2, [pc, #204]	; (8005cb8 <UART_RxISR_8BIT+0x1b4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01f      	beq.n	8005c30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e6      	bne.n	8005bfe <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d12e      	bne.n	8005c96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	69b9      	ldr	r1, [r7, #24]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e6      	bne.n	8005c3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d103      	bne.n	8005c86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2210      	movs	r2, #16
 8005c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff f986 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c94:	e00b      	b.n	8005cae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb f80c 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8005c9c:	e007      	b.n	8005cae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0208 	orr.w	r2, r2, #8
 8005cac:	619a      	str	r2, [r3, #24]
}
 8005cae:	bf00      	nop
 8005cb0:	3770      	adds	r7, #112	; 0x70
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40008000 	.word	0x40008000

08005cbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b09c      	sub	sp, #112	; 0x70
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd4:	2b22      	cmp	r3, #34	; 0x22
 8005cd6:	f040 80be 	bne.w	8005e56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005cee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 80a1 	bne.w	8005e66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d38:	667b      	str	r3, [r7, #100]	; 0x64
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d42:	657b      	str	r3, [r7, #84]	; 0x54
 8005d44:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d76:	643a      	str	r2, [r7, #64]	; 0x40
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a33      	ldr	r2, [pc, #204]	; (8005e70 <UART_RxISR_16BIT+0x1b4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01f      	beq.n	8005de8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d018      	beq.n	8005de8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d12e      	bne.n	8005e4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	613b      	str	r3, [r7, #16]
   return(result);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d103      	bne.n	8005e3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff f8aa 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e4c:	e00b      	b.n	8005e66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fa ff30 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8005e54:	e007      	b.n	8005e66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0208 	orr.w	r2, r2, #8
 8005e64:	619a      	str	r2, [r3, #24]
}
 8005e66:	bf00      	nop
 8005e68:	3770      	adds	r7, #112	; 0x70
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40008000 	.word	0x40008000

08005e74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b0ac      	sub	sp, #176	; 0xb0
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eaa:	2b22      	cmp	r3, #34	; 0x22
 8005eac:	f040 8182 	bne.w	80061b4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005eb6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005eba:	e125      	b.n	8006108 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ec6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005eca:	b2d9      	uxtb	r1, r3
 8005ecc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d053      	beq.n	8005fb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d011      	beq.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f043 0201 	orr.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d011      	beq.n	8005f6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f043 0204 	orr.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f043 0202 	orr.w	r2, r3, #2
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fe ffef 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 80a2 	bne.w	8006108 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fe8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005fec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e4      	bne.n	8005fc4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800600a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006022:	66ba      	str	r2, [r7, #104]	; 0x68
 8006024:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e1      	bne.n	8005ffa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a5f      	ldr	r2, [pc, #380]	; (80061cc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d021      	beq.n	8006098 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01a      	beq.n	8006098 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006084:	657b      	str	r3, [r7, #84]	; 0x54
 8006086:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800608a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e4      	bne.n	8006062 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d130      	bne.n	8006102 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
 80060ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e4      	bne.n	80060a6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d103      	bne.n	80060f2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2210      	movs	r2, #16
 80060f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fe ff50 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
 8006100:	e002      	b.n	8006108 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fa fdd6 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006108:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	f47f aecf 	bne.w	8005ebc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006124:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006128:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800612c:	2b00      	cmp	r3, #0
 800612e:	d049      	beq.n	80061c4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006136:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800613a:	429a      	cmp	r2, r3
 800613c:	d242      	bcs.n	80061c4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	61fb      	str	r3, [r7, #28]
   return(result);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e3      	bne.n	800613e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800617a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	60bb      	str	r3, [r7, #8]
   return(result);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f043 0320 	orr.w	r3, r3, #32
 8006190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6979      	ldr	r1, [r7, #20]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	613b      	str	r3, [r7, #16]
   return(result);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e4      	bne.n	800617c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061b2:	e007      	b.n	80061c4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0208 	orr.w	r2, r2, #8
 80061c2:	619a      	str	r2, [r3, #24]
}
 80061c4:	bf00      	nop
 80061c6:	37b0      	adds	r7, #176	; 0xb0
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40008000 	.word	0x40008000
 80061d0:	08005b05 	.word	0x08005b05

080061d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0ae      	sub	sp, #184	; 0xb8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620a:	2b22      	cmp	r3, #34	; 0x22
 800620c:	f040 8186 	bne.w	800651c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006216:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800621a:	e129      	b.n	8006470 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800622e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006232:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006236:	4013      	ands	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800623e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d053      	beq.n	800631a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800627e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2201      	movs	r2, #1
 8006290:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f043 0201 	orr.w	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d011      	beq.n	80062d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80062ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2202      	movs	r2, #2
 80062c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f043 0204 	orr.w	r2, r3, #4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d011      	beq.n	8006302 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80062de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2204      	movs	r2, #4
 80062f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f043 0202 	orr.w	r2, r3, #2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fe fe3d 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 80a4 	bne.w	8006470 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800633c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800634e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800635c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e2      	bne.n	8006328 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800638a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800638c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e1      	bne.n	8006362 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a5f      	ldr	r2, [pc, #380]	; (8006534 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d021      	beq.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01a      	beq.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80063ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e4      	bne.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d130      	bne.n	800646a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006430:	647b      	str	r3, [r7, #68]	; 0x44
 8006432:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e4      	bne.n	800640e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d103      	bne.n	800645a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2210      	movs	r2, #16
 8006458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fe fd9c 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
 8006468:	e002      	b.n	8006470 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa fc22 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006470:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f aecb 	bne.w	800621c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800648c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006490:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006494:	2b00      	cmp	r3, #0
 8006496:	d049      	beq.n	800652c <UART_RxISR_16BIT_FIFOEN+0x358>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800649e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d242      	bcs.n	800652c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	623b      	str	r3, [r7, #32]
   return(result);
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80064ca:	633a      	str	r2, [r7, #48]	; 0x30
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e3      	bne.n	80064a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80064e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	617b      	str	r3, [r7, #20]
   return(result);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e4      	bne.n	80064e4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800651a:	e007      	b.n	800652c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0208 	orr.w	r2, r2, #8
 800652a:	619a      	str	r2, [r3, #24]
}
 800652c:	bf00      	nop
 800652e:	37b8      	adds	r7, #184	; 0xb8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40008000 	.word	0x40008000
 8006538:	08005cbd 	.word	0x08005cbd

0800653c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UARTEx_DisableFifoMode+0x16>
 800658a:	2302      	movs	r3, #2
 800658c:	e027      	b.n	80065de <HAL_UARTEx_DisableFifoMode+0x66>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2224      	movs	r2, #36	; 0x24
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065fe:	2302      	movs	r3, #2
 8006600:	e02d      	b.n	800665e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f850 	bl	80066e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800667a:	2302      	movs	r3, #2
 800667c:	e02d      	b.n	80066da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2224      	movs	r2, #36	; 0x24
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f812 	bl	80066e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006704:	e031      	b.n	800676a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006706:	2308      	movs	r3, #8
 8006708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800670a:	2308      	movs	r3, #8
 800670c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	0e5b      	lsrs	r3, r3, #25
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	0f5b      	lsrs	r3, r3, #29
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	7b3a      	ldrb	r2, [r7, #12]
 8006732:	4911      	ldr	r1, [pc, #68]	; (8006778 <UARTEx_SetNbDataToProcess+0x94>)
 8006734:	5c8a      	ldrb	r2, [r1, r2]
 8006736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800673a:	7b3a      	ldrb	r2, [r7, #12]
 800673c:	490f      	ldr	r1, [pc, #60]	; (800677c <UARTEx_SetNbDataToProcess+0x98>)
 800673e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006740:	fb93 f3f2 	sdiv	r3, r3, r2
 8006744:	b29a      	uxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	7b7a      	ldrb	r2, [r7, #13]
 8006750:	4909      	ldr	r1, [pc, #36]	; (8006778 <UARTEx_SetNbDataToProcess+0x94>)
 8006752:	5c8a      	ldrb	r2, [r1, r2]
 8006754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006758:	7b7a      	ldrb	r2, [r7, #13]
 800675a:	4908      	ldr	r1, [pc, #32]	; (800677c <UARTEx_SetNbDataToProcess+0x98>)
 800675c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800675e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	0800af28 	.word	0x0800af28
 800677c:	0800af30 	.word	0x0800af30

08006780 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f103 0208 	add.w	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f103 0208 	add.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d103      	bne.n	8006842 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e00c      	b.n	800685c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3308      	adds	r3, #8
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e002      	b.n	8006850 <vListInsert+0x2e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	d2f6      	bcs.n	800684a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6892      	ldr	r2, [r2, #8]
 80068aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d103      	bne.n	80068c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1e5a      	subs	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueGenericReset+0x2a>
        __asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
    }
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006912:	f002 fbc7 	bl	80090a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	441a      	add	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	3b01      	subs	r3, #1
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	22ff      	movs	r2, #255	; 0xff
 8006956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d114      	bne.n	8006992 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01a      	beq.n	80069a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3310      	adds	r3, #16
 8006974:	4618      	mov	r0, r3
 8006976:	f001 f921 	bl	8007bbc <xTaskRemoveFromEventList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <xQueueGenericReset+0xcc>)
 8006982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	e009      	b.n	80069a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3310      	adds	r3, #16
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fef2 	bl	8006780 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3324      	adds	r3, #36	; 0x24
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff feed 	bl	8006780 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80069a6:	f002 fbad 	bl	8009104 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80069aa:	2301      	movs	r3, #1
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	e000ed04 	.word	0xe000ed04

080069b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	; 0x30
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61bb      	str	r3, [r7, #24]
    }
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <xQueueGenericCreate+0x48>
 80069f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d101      	bne.n	8006a04 <xQueueGenericCreate+0x4c>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <xQueueGenericCreate+0x4e>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xQueueGenericCreate+0x68>
        __asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	617b      	str	r3, [r7, #20]
    }
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006a26:	d90a      	bls.n	8006a3e <xQueueGenericCreate+0x86>
        __asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	613b      	str	r3, [r7, #16]
    }
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	3350      	adds	r3, #80	; 0x50
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 fc52 	bl	80092ec <pvPortMalloc>
 8006a48:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3350      	adds	r3, #80	; 0x50
 8006a58:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a5a:	79fa      	ldrb	r2, [r7, #7]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f805 	bl	8006a76 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
    }
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3728      	adds	r7, #40	; 0x28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d103      	bne.n	8006a92 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e002      	b.n	8006a98 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	69b8      	ldr	r0, [r7, #24]
 8006aa8:	f7ff ff1e 	bl	80068e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xQueueGenericSend+0x32>
        __asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <xQueueGenericSend+0x40>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <xQueueGenericSend+0x44>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <xQueueGenericSend+0x46>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <xQueueGenericSend+0x60>
        __asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x6e>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <xQueueGenericSend+0x72>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueGenericSend+0x74>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xQueueGenericSend+0x8e>
        __asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
    }
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b4a:	f001 f9d3 	bl	8007ef4 <xTaskGetSchedulerState>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <xQueueGenericSend+0x9e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <xQueueGenericSend+0xa2>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <xQueueGenericSend+0xa4>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xQueueGenericSend+0xbe>
        __asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61fb      	str	r3, [r7, #28]
    }
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006b7a:	f002 fa93 	bl	80090a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <xQueueGenericSend+0xd4>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d129      	bne.n	8006be4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b96:	f000 fac6 	bl	8007126 <prvCopyDataToQueue>
 8006b9a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f807 	bl	8007bbc <xTaskRemoveFromEventList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006bb4:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	e00a      	b.n	8006bdc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006bdc:	f002 fa92 	bl	8009104 <vPortExitCritical>
                return pdPASS;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e063      	b.n	8006cac <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006bea:	f002 fa8b 	bl	8009104 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e05c      	b.n	8006cac <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f83f 	bl	8007c80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006c02:	2301      	movs	r3, #1
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006c06:	f002 fa7d 	bl	8009104 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006c0a:	f000 fdb9 	bl	8007780 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006c0e:	f002 fa49 	bl	80090a4 <vPortEnterCritical>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c18:	b25b      	sxtb	r3, r3
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d103      	bne.n	8006c28 <xQueueGenericSend+0x16c>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c2e:	b25b      	sxtb	r3, r3
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d103      	bne.n	8006c3e <xQueueGenericSend+0x182>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3e:	f002 fa61 	bl	8009104 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c42:	1d3a      	adds	r2, r7, #4
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4611      	mov	r1, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 f82e 	bl	8007cac <xTaskCheckForTimeOut>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d124      	bne.n	8006ca0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c58:	f000 fb5d 	bl	8007316 <prvIsQueueFull>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d018      	beq.n	8006c94 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	3310      	adds	r3, #16
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 ff56 	bl	8007b1c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c72:	f000 fae8 	bl	8007246 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006c76:	f000 fd91 	bl	800779c <xTaskResumeAll>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f47f af7c 	bne.w	8006b7a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006c82:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	e772      	b.n	8006b7a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c96:	f000 fad6 	bl	8007246 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006c9a:	f000 fd7f 	bl	800779c <xTaskResumeAll>
 8006c9e:	e76c      	b.n	8006b7a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca2:	f000 fad0 	bl	8007246 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006ca6:	f000 fd79 	bl	800779c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006caa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3738      	adds	r7, #56	; 0x38
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b090      	sub	sp, #64	; 0x40
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x3c>
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <xQueueGenericSendFromISR+0x40>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <xQueueGenericSendFromISR+0x42>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSendFromISR+0x6a>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSendFromISR+0x6e>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSendFromISR+0x70>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	623b      	str	r3, [r7, #32]
    }
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d42:	f002 fa93 	bl	800926c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006d46:	f3ef 8211 	mrs	r2, BASEPRI
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61fa      	str	r2, [r7, #28]
 8006d5c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <xQueueGenericSendFromISR+0xbc>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d13e      	bne.n	8006df2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d8a:	f000 f9cc 	bl	8007126 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d112      	bne.n	8006dbe <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d025      	beq.n	8006dec <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 ff09 	bl	8007bbc <xTaskRemoveFromEventList>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01d      	beq.n	8006dec <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01a      	beq.n	8006dec <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e016      	b.n	8006dec <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006dbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc4:	d10a      	bne.n	8006ddc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	617b      	str	r3, [r7, #20]
    }
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006de0:	3301      	adds	r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	b25a      	sxtb	r2, r3
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006dec:	2301      	movs	r3, #1
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006df0:	e001      	b.n	8006df6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006e00:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3740      	adds	r7, #64	; 0x40
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08c      	sub	sp, #48	; 0x30
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <xQueueReceive+0x30>
        __asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	623b      	str	r3, [r7, #32]
    }
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <xQueueReceive+0x3e>
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <xQueueReceive+0x42>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <xQueueReceive+0x44>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <xQueueReceive+0x5e>
        __asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	61fb      	str	r3, [r7, #28]
    }
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6a:	f001 f843 	bl	8007ef4 <xTaskGetSchedulerState>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <xQueueReceive+0x6e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xQueueReceive+0x72>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueReceive+0x74>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <xQueueReceive+0x8e>
        __asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61bb      	str	r3, [r7, #24]
    }
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006e9a:	f002 f903 	bl	80090a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01f      	beq.n	8006eea <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eae:	f000 f9a4 	bl	80071fa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00f      	beq.n	8006ee2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	3310      	adds	r3, #16
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fe78 	bl	8007bbc <xTaskRemoveFromEventList>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006ed2:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <xQueueReceive+0x1bc>)
 8006ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006ee2:	f002 f90f 	bl	8009104 <vPortExitCritical>
                return pdPASS;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e069      	b.n	8006fbe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006ef0:	f002 f908 	bl	8009104 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e062      	b.n	8006fbe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006efe:	f107 0310 	add.w	r3, r7, #16
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 febc 	bl	8007c80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006f0c:	f002 f8fa 	bl	8009104 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006f10:	f000 fc36 	bl	8007780 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006f14:	f002 f8c6 	bl	80090a4 <vPortEnterCritical>
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1e:	b25b      	sxtb	r3, r3
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d103      	bne.n	8006f2e <xQueueReceive+0x122>
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d103      	bne.n	8006f44 <xQueueReceive+0x138>
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f44:	f002 f8de 	bl	8009104 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f48:	1d3a      	adds	r2, r7, #4
 8006f4a:	f107 0310 	add.w	r3, r7, #16
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 feab 	bl	8007cac <xTaskCheckForTimeOut>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d123      	bne.n	8006fa4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5e:	f000 f9c4 	bl	80072ea <prvIsQueueEmpty>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d017      	beq.n	8006f98 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	3324      	adds	r3, #36	; 0x24
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fdd3 	bl	8007b1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	f000 f965 	bl	8007246 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006f7c:	f000 fc0e 	bl	800779c <xTaskResumeAll>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d189      	bne.n	8006e9a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <xQueueReceive+0x1bc>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e780      	b.n	8006e9a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f000 f954 	bl	8007246 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006f9e:	f000 fbfd 	bl	800779c <xTaskResumeAll>
 8006fa2:	e77a      	b.n	8006e9a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f000 f94e 	bl	8007246 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006faa:	f000 fbf7 	bl	800779c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb0:	f000 f99b 	bl	80072ea <prvIsQueueEmpty>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f43f af6f 	beq.w	8006e9a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006fbc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3730      	adds	r7, #48	; 0x30
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b090      	sub	sp, #64	; 0x40
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <xQueueReceiveFromISR+0x3a>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <xQueueReceiveFromISR+0x3e>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <xQueueReceiveFromISR+0x40>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007026:	f002 f921 	bl	800926c <vPortValidateInterruptPriority>
        __asm volatile
 800702a:	f3ef 8211 	mrs	r2, BASEPRI
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	623a      	str	r2, [r7, #32]
 8007040:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8007042:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03e      	beq.n	80070d0 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007060:	f000 f8cb 	bl	80071fa <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	1e5a      	subs	r2, r3, #1
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800706c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d112      	bne.n	800709c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d025      	beq.n	80070ca <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	3310      	adds	r3, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fd9a 	bl	8007bbc <xTaskRemoveFromEventList>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01d      	beq.n	80070ca <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01a      	beq.n	80070ca <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e016      	b.n	80070ca <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800709c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070a0:	2b7f      	cmp	r3, #127	; 0x7f
 80070a2:	d10a      	bne.n	80070ba <xQueueReceiveFromISR+0xee>
        __asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	61bb      	str	r3, [r7, #24]
    }
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070be:	3301      	adds	r3, #1
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	b25a      	sxtb	r2, r3
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80070ca:	2301      	movs	r3, #1
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ce:	e001      	b.n	80070d4 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f383 8811 	msr	BASEPRI, r3
    }
 80070de:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80070e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3740      	adds	r7, #64	; 0x40
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60bb      	str	r3, [r7, #8]
    }
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800710e:	f001 ffc9 	bl	80090a4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8007118:	f001 fff4 	bl	8009104 <vPortExitCritical>

    return uxReturn;
 800711c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d14d      	bne.n	80071e8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 feed 	bl	8007f30 <xTaskPriorityDisinherit>
 8007156:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	609a      	str	r2, [r3, #8]
 800715e:	e043      	b.n	80071e8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6858      	ldr	r0, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	461a      	mov	r2, r3
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	f002 fae3 	bl	800973c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d32b      	bcc.n	80071e8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]
 8007198:	e026      	b.n	80071e8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68d8      	ldr	r0, [r3, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	461a      	mov	r2, r3
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	f002 fac9 	bl	800973c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	425b      	negs	r3, r3
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d207      	bcs.n	80071d6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	425b      	negs	r3, r3
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d105      	bne.n	80071e8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80071f0:	697b      	ldr	r3, [r7, #20]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d018      	beq.n	800723e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	441a      	add	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	d303      	bcc.n	800722e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68d9      	ldr	r1, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	461a      	mov	r2, r3
 8007238:	6838      	ldr	r0, [r7, #0]
 800723a:	f002 fa7f 	bl	800973c <memcpy>
    }
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800724e:	f001 ff29 	bl	80090a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007258:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800725a:	e011      	b.n	8007280 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	d012      	beq.n	800728a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3324      	adds	r3, #36	; 0x24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fca7 	bl	8007bbc <xTaskRemoveFromEventList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007274:	f000 fd80 	bl	8007d78 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	3b01      	subs	r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dce9      	bgt.n	800725c <prvUnlockQueue+0x16>
 8007288:	e000      	b.n	800728c <prvUnlockQueue+0x46>
                        break;
 800728a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8007294:	f001 ff36 	bl	8009104 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007298:	f001 ff04 	bl	80090a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a4:	e011      	b.n	80072ca <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fc82 	bl	8007bbc <xTaskRemoveFromEventList>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80072be:	f000 fd5b 	bl	8007d78 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dce9      	bgt.n	80072a6 <prvUnlockQueue+0x60>
 80072d2:	e000      	b.n	80072d6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80072d4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	22ff      	movs	r2, #255	; 0xff
 80072da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80072de:	f001 ff11 	bl	8009104 <vPortExitCritical>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80072f2:	f001 fed7 	bl	80090a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e001      	b.n	8007308 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007308:	f001 fefc 	bl	8009104 <vPortExitCritical>

    return xReturn;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800731e:	f001 fec1 	bl	80090a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	429a      	cmp	r2, r3
 800732c:	d102      	bne.n	8007334 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800732e:	2301      	movs	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e001      	b.n	8007338 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007338:	f001 fee4 	bl	8009104 <vPortExitCritical>

    return xReturn;
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60fb      	str	r3, [r7, #12]
    }
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	429a      	cmp	r2, r3
 8007378:	d102      	bne.n	8007380 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800737a:	2301      	movs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e001      	b.n	8007384 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007384:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
	...

08007394 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e014      	b.n	80073ce <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073a4:	4a0f      	ldr	r2, [pc, #60]	; (80073e4 <vQueueAddToRegistry+0x50>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073b0:	490c      	ldr	r1, [pc, #48]	; (80073e4 <vQueueAddToRegistry+0x50>)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80073ba:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <vQueueAddToRegistry+0x50>)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80073c6:	e006      	b.n	80073d6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b07      	cmp	r3, #7
 80073d2:	d9e7      	bls.n	80073a4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	200002b8 	.word	0x200002b8

080073e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80073f8:	f001 fe54 	bl	80090a4 <vPortEnterCritical>
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007402:	b25b      	sxtb	r3, r3
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d103      	bne.n	8007412 <vQueueWaitForMessageRestricted+0x2a>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007418:	b25b      	sxtb	r3, r3
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d103      	bne.n	8007428 <vQueueWaitForMessageRestricted+0x40>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007428:	f001 fe6c 	bl	8009104 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fb91 	bl	8007b64 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f7ff feff 	bl	8007246 <prvUnlockQueue>
    }
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007450:	b580      	push	{r7, lr}
 8007452:	b08c      	sub	sp, #48	; 0x30
 8007454:	af04      	add	r7, sp, #16
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4618      	mov	r0, r3
 8007466:	f001 ff41 	bl	80092ec <pvPortMalloc>
 800746a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00e      	beq.n	8007490 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007472:	205c      	movs	r0, #92	; 0x5c
 8007474:	f001 ff3a 	bl	80092ec <pvPortMalloc>
 8007478:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
 8007486:	e005      	b.n	8007494 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007488:	6978      	ldr	r0, [r7, #20]
 800748a:	f002 f80f 	bl	80094ac <vPortFree>
 800748e:	e001      	b.n	8007494 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d013      	beq.n	80074c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	2300      	movs	r3, #0
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	9302      	str	r3, [sp, #8]
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f80e 	bl	80074d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80074b6:	69f8      	ldr	r0, [r7, #28]
 80074b8:	f000 f8a2 	bl	8007600 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80074bc:	2301      	movs	r3, #1
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	e002      	b.n	80074c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80074c8:	69bb      	ldr	r3, [r7, #24]
    }
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b088      	sub	sp, #32
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	461a      	mov	r2, r3
 80074ea:	21a5      	movs	r1, #165	; 0xa5
 80074ec:	f002 f934 	bl	8009758 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074fa:	3b01      	subs	r3, #1
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f023 0307 	bic.w	r3, r3, #7
 8007508:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <prvInitialiseNewTask+0x58>
        __asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	617b      	str	r3, [r7, #20]
    }
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01f      	beq.n	8007570 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	e012      	b.n	800755c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	7819      	ldrb	r1, [r3, #0]
 800753e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	3334      	adds	r3, #52	; 0x34
 8007546:	460a      	mov	r2, r1
 8007548:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	3301      	adds	r3, #1
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b0f      	cmp	r3, #15
 8007560:	d9e9      	bls.n	8007536 <prvInitialiseNewTask+0x64>
 8007562:	e000      	b.n	8007566 <prvInitialiseNewTask+0x94>
            {
                break;
 8007564:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800756e:	e003      	b.n	8007578 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	2b04      	cmp	r3, #4
 800757c:	d901      	bls.n	8007582 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800757e:	2304      	movs	r3, #4
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007586:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2200      	movs	r2, #0
 8007592:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff f911 	bl	80067c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	3318      	adds	r3, #24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f90c 	bl	80067c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	f1c3 0205 	rsb	r2, r3, #5
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	3354      	adds	r3, #84	; 0x54
 80075c2:	2204      	movs	r2, #4
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f002 f8c6 	bl	8009758 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	3358      	adds	r3, #88	; 0x58
 80075d0:	2201      	movs	r2, #1
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f002 f8bf 	bl	8009758 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	69b8      	ldr	r0, [r7, #24]
 80075e0:	f001 fbb4 	bl	8008d4c <pxPortInitialiseStack>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80075f6:	bf00      	nop
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007608:	f001 fd4c 	bl	80090a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800760c:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <prvAddNewTaskToReadyList+0xc0>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a2b      	ldr	r2, [pc, #172]	; (80076c0 <prvAddNewTaskToReadyList+0xc0>)
 8007614:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007616:	4b2b      	ldr	r3, [pc, #172]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800761e:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007624:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <prvAddNewTaskToReadyList+0xc0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d110      	bne.n	800764e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800762c:	f000 fbc8 	bl	8007dc0 <prvInitialiseTaskLists>
 8007630:	e00d      	b.n	800764e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007632:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	429a      	cmp	r2, r3
 8007646:	d802      	bhi.n	800764e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007648:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800764e:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <prvAddNewTaskToReadyList+0xcc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <prvAddNewTaskToReadyList+0xcc>)
 8007656:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007658:	4b1c      	ldr	r3, [pc, #112]	; (80076cc <prvAddNewTaskToReadyList+0xcc>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	2201      	movs	r2, #1
 8007666:	409a      	lsls	r2, r3
 8007668:	4b19      	ldr	r3, [pc, #100]	; (80076d0 <prvAddNewTaskToReadyList+0xd0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4313      	orrs	r3, r2
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <prvAddNewTaskToReadyList+0xd0>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <prvAddNewTaskToReadyList+0xd4>)
 8007680:	441a      	add	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7ff f8a6 	bl	80067da <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800768e:	f001 fd39 	bl	8009104 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007692:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d207      	bcs.n	80076b8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <prvAddNewTaskToReadyList+0xd8>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200003d0 	.word	0x200003d0
 80076c4:	200002f8 	.word	0x200002f8
 80076c8:	200003dc 	.word	0x200003dc
 80076cc:	200003ec 	.word	0x200003ec
 80076d0:	200003d8 	.word	0x200003d8
 80076d4:	200002fc 	.word	0x200002fc
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80076e2:	4b20      	ldr	r3, [pc, #128]	; (8007764 <vTaskStartScheduler+0x88>)
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2300      	movs	r3, #0
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	2280      	movs	r2, #128	; 0x80
 80076ee:	491e      	ldr	r1, [pc, #120]	; (8007768 <vTaskStartScheduler+0x8c>)
 80076f0:	481e      	ldr	r0, [pc, #120]	; (800776c <vTaskStartScheduler+0x90>)
 80076f2:	f7ff fead 	bl	8007450 <xTaskCreate>
 80076f6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d102      	bne.n	8007704 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80076fe:	f000 ff6d 	bl	80085dc <xTimerCreateTimerTask>
 8007702:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d116      	bne.n	8007738 <vTaskStartScheduler+0x5c>
        __asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	60bb      	str	r3, [r7, #8]
    }
 800771c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800771e:	4b14      	ldr	r3, [pc, #80]	; (8007770 <vTaskStartScheduler+0x94>)
 8007720:	f04f 32ff 	mov.w	r2, #4294967295
 8007724:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <vTaskStartScheduler+0x98>)
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800772c:	4b12      	ldr	r3, [pc, #72]	; (8007778 <vTaskStartScheduler+0x9c>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007732:	f001 fb97 	bl	8008e64 <xPortStartScheduler>
 8007736:	e00e      	b.n	8007756 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d10a      	bne.n	8007756 <vTaskStartScheduler+0x7a>
        __asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	607b      	str	r3, [r7, #4]
    }
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <vTaskStartScheduler+0xa0>)
 8007758:	681b      	ldr	r3, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200003f4 	.word	0x200003f4
 8007768:	0800ae58 	.word	0x0800ae58
 800776c:	08007d91 	.word	0x08007d91
 8007770:	200003f0 	.word	0x200003f0
 8007774:	200003dc 	.word	0x200003dc
 8007778:	200003d4 	.word	0x200003d4
 800777c:	20000024 	.word	0x20000024

08007780 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007784:	4b04      	ldr	r3, [pc, #16]	; (8007798 <vTaskSuspendAll+0x18>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	4a03      	ldr	r2, [pc, #12]	; (8007798 <vTaskSuspendAll+0x18>)
 800778c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800778e:	bf00      	nop
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	200003f8 	.word	0x200003f8

0800779c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80077aa:	4b41      	ldr	r3, [pc, #260]	; (80078b0 <xTaskResumeAll+0x114>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	603b      	str	r3, [r7, #0]
    }
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80077c8:	f001 fc6c 	bl	80090a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80077cc:	4b38      	ldr	r3, [pc, #224]	; (80078b0 <xTaskResumeAll+0x114>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4a37      	ldr	r2, [pc, #220]	; (80078b0 <xTaskResumeAll+0x114>)
 80077d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d6:	4b36      	ldr	r3, [pc, #216]	; (80078b0 <xTaskResumeAll+0x114>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d161      	bne.n	80078a2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077de:	4b35      	ldr	r3, [pc, #212]	; (80078b4 <xTaskResumeAll+0x118>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d05d      	beq.n	80078a2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e6:	e02e      	b.n	8007846 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e8:	4b33      	ldr	r3, [pc, #204]	; (80078b8 <xTaskResumeAll+0x11c>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3318      	adds	r3, #24
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff f84d 	bl	8006894 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff f848 	bl	8006894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	2201      	movs	r2, #1
 800780a:	409a      	lsls	r2, r3
 800780c:	4b2b      	ldr	r3, [pc, #172]	; (80078bc <xTaskResumeAll+0x120>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4313      	orrs	r3, r2
 8007812:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <xTaskResumeAll+0x120>)
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <xTaskResumeAll+0x124>)
 8007824:	441a      	add	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f7fe ffd4 	bl	80067da <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <xTaskResumeAll+0x128>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8007840:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <xTaskResumeAll+0x12c>)
 8007842:	2201      	movs	r2, #1
 8007844:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007846:	4b1c      	ldr	r3, [pc, #112]	; (80078b8 <xTaskResumeAll+0x11c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1cc      	bne.n	80077e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007854:	f000 fb32 	bl	8007ebc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007858:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <xTaskResumeAll+0x130>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d010      	beq.n	8007886 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007864:	f000 f846 	bl	80078f4 <xTaskIncrementTick>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800786e:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <xTaskResumeAll+0x12c>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3b01      	subs	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f1      	bne.n	8007864 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <xTaskResumeAll+0x130>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <xTaskResumeAll+0x12c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800788e:	2301      	movs	r3, #1
 8007890:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <xTaskResumeAll+0x134>)
 8007894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80078a2:	f001 fc2f 	bl	8009104 <vPortExitCritical>

    return xAlreadyYielded;
 80078a6:	68bb      	ldr	r3, [r7, #8]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200003f8 	.word	0x200003f8
 80078b4:	200003d0 	.word	0x200003d0
 80078b8:	20000390 	.word	0x20000390
 80078bc:	200003d8 	.word	0x200003d8
 80078c0:	200002fc 	.word	0x200002fc
 80078c4:	200002f8 	.word	0x200002f8
 80078c8:	200003e4 	.word	0x200003e4
 80078cc:	200003e0 	.word	0x200003e0
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <xTaskGetTickCount+0x1c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80078e0:	687b      	ldr	r3, [r7, #4]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	200003d4 	.word	0x200003d4

080078f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fe:	4b4e      	ldr	r3, [pc, #312]	; (8007a38 <xTaskIncrementTick+0x144>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 808e 	bne.w	8007a24 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007908:	4b4c      	ldr	r3, [pc, #304]	; (8007a3c <xTaskIncrementTick+0x148>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007910:	4a4a      	ldr	r2, [pc, #296]	; (8007a3c <xTaskIncrementTick+0x148>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d120      	bne.n	800795e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800791c:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <xTaskIncrementTick+0x14c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <xTaskIncrementTick+0x48>
        __asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
    }
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xTaskIncrementTick+0x46>
 800793c:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <xTaskIncrementTick+0x14c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	4b40      	ldr	r3, [pc, #256]	; (8007a44 <xTaskIncrementTick+0x150>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a3e      	ldr	r2, [pc, #248]	; (8007a40 <xTaskIncrementTick+0x14c>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4a3e      	ldr	r2, [pc, #248]	; (8007a44 <xTaskIncrementTick+0x150>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <xTaskIncrementTick+0x154>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	4a3c      	ldr	r2, [pc, #240]	; (8007a48 <xTaskIncrementTick+0x154>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	f000 faaf 	bl	8007ebc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <xTaskIncrementTick+0x158>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d348      	bcc.n	80079fa <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007968:	4b35      	ldr	r3, [pc, #212]	; (8007a40 <xTaskIncrementTick+0x14c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	4b36      	ldr	r3, [pc, #216]	; (8007a4c <xTaskIncrementTick+0x158>)
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	601a      	str	r2, [r3, #0]
                    break;
 800797a:	e03e      	b.n	80079fa <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797c:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <xTaskIncrementTick+0x14c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d203      	bcs.n	800799c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007994:	4a2d      	ldr	r2, [pc, #180]	; (8007a4c <xTaskIncrementTick+0x158>)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800799a:	e02e      	b.n	80079fa <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe ff77 	bl	8006894 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	3318      	adds	r3, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe ff6e 	bl	8006894 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	2201      	movs	r2, #1
 80079be:	409a      	lsls	r2, r3
 80079c0:	4b23      	ldr	r3, [pc, #140]	; (8007a50 <xTaskIncrementTick+0x15c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <xTaskIncrementTick+0x15c>)
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <xTaskIncrementTick+0x160>)
 80079d8:	441a      	add	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f7fe fefa 	bl	80067da <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <xTaskIncrementTick+0x164>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d3b9      	bcc.n	8007968 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f8:	e7b6      	b.n	8007968 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079fa:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <xTaskIncrementTick+0x164>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a00:	4914      	ldr	r1, [pc, #80]	; (8007a54 <xTaskIncrementTick+0x160>)
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d901      	bls.n	8007a16 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007a16:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <xTaskIncrementTick+0x168>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e004      	b.n	8007a2e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <xTaskIncrementTick+0x16c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	4a0d      	ldr	r2, [pc, #52]	; (8007a60 <xTaskIncrementTick+0x16c>)
 8007a2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8007a2e:	697b      	ldr	r3, [r7, #20]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200003f8 	.word	0x200003f8
 8007a3c:	200003d4 	.word	0x200003d4
 8007a40:	20000388 	.word	0x20000388
 8007a44:	2000038c 	.word	0x2000038c
 8007a48:	200003e8 	.word	0x200003e8
 8007a4c:	200003f0 	.word	0x200003f0
 8007a50:	200003d8 	.word	0x200003d8
 8007a54:	200002fc 	.word	0x200002fc
 8007a58:	200002f8 	.word	0x200002f8
 8007a5c:	200003e4 	.word	0x200003e4
 8007a60:	200003e0 	.word	0x200003e0

08007a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a6a:	4b27      	ldr	r3, [pc, #156]	; (8007b08 <vTaskSwitchContext+0xa4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <vTaskSwitchContext+0xa8>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007a78:	e03f      	b.n	8007afa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <vTaskSwitchContext+0xa8>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a80:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <vTaskSwitchContext+0xac>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	fab3 f383 	clz	r3, r3
 8007a8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	f1c3 031f 	rsb	r3, r3, #31
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	491f      	ldr	r1, [pc, #124]	; (8007b14 <vTaskSwitchContext+0xb0>)
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	607b      	str	r3, [r7, #4]
    }
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vTaskSwitchContext+0x5a>
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <vTaskSwitchContext+0xb0>)
 8007acc:	4413      	add	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d104      	bne.n	8007af0 <vTaskSwitchContext+0x8c>
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <vTaskSwitchContext+0xb4>)
 8007af8:	6013      	str	r3, [r2, #0]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	200003f8 	.word	0x200003f8
 8007b0c:	200003e4 	.word	0x200003e4
 8007b10:	200003d8 	.word	0x200003d8
 8007b14:	200002fc 	.word	0x200002fc
 8007b18:	200002f8 	.word	0x200002f8

08007b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60fb      	str	r3, [r7, #12]
    }
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <vTaskPlaceOnEventList+0x44>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3318      	adds	r3, #24
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fe fe69 	bl	8006822 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b50:	2101      	movs	r1, #1
 8007b52:	6838      	ldr	r0, [r7, #0]
 8007b54:	f000 fcdc 	bl	8008510 <prvAddCurrentTaskToDelayedList>
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	200002f8 	.word	0x200002f8

08007b64 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
    }
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3318      	adds	r3, #24
 8007b92:	4619      	mov	r1, r3
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7fe fe20 	bl	80067da <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	68b8      	ldr	r0, [r7, #8]
 8007baa:	f000 fcb1 	bl	8008510 <prvAddCurrentTaskToDelayedList>
    }
 8007bae:	bf00      	nop
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200002f8 	.word	0x200002f8

08007bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60fb      	str	r3, [r7, #12]
    }
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3318      	adds	r3, #24
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe fe51 	bl	8006894 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf2:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <xTaskRemoveFromEventList+0xac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d11c      	bne.n	8007c34 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fe48 	bl	8006894 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	2201      	movs	r2, #1
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <xTaskRemoveFromEventList+0xb4>)
 8007c24:	441a      	add	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fe fdd4 	bl	80067da <vListInsertEnd>
 8007c32:	e005      	b.n	8007c40 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3318      	adds	r3, #24
 8007c38:	4619      	mov	r1, r3
 8007c3a:	480e      	ldr	r0, [pc, #56]	; (8007c74 <xTaskRemoveFromEventList+0xb8>)
 8007c3c:	f7fe fdcd 	bl	80067da <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <xTaskRemoveFromEventList+0xbc>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d905      	bls.n	8007c5a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007c52:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <xTaskRemoveFromEventList+0xc0>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e001      	b.n	8007c5e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007c5e:	697b      	ldr	r3, [r7, #20]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	200003f8 	.word	0x200003f8
 8007c6c:	200003d8 	.word	0x200003d8
 8007c70:	200002fc 	.word	0x200002fc
 8007c74:	20000390 	.word	0x20000390
 8007c78:	200002f8 	.word	0x200002f8
 8007c7c:	200003e4 	.word	0x200003e4

08007c80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <vTaskInternalSetTimeOutState+0x24>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <vTaskInternalSetTimeOutState+0x28>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	200003e8 	.word	0x200003e8
 8007ca8:	200003d4 	.word	0x200003d4

08007cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
    }
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
    }
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007cee:	f001 f9d9 	bl	80090a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007cf2:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <xTaskCheckForTimeOut+0xc4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	e026      	b.n	8007d60 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b17      	ldr	r3, [pc, #92]	; (8007d74 <xTaskCheckForTimeOut+0xc8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d00a      	beq.n	8007d34 <xTaskCheckForTimeOut+0x88>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d305      	bcc.n	8007d34 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e015      	b.n	8007d60 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d20b      	bcs.n	8007d56 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad2      	subs	r2, r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff ff98 	bl	8007c80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	e004      	b.n	8007d60 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007d60:	f001 f9d0 	bl	8009104 <vPortExitCritical>

    return xReturn;
 8007d64:	69fb      	ldr	r3, [r7, #28]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3720      	adds	r7, #32
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	200003d4 	.word	0x200003d4
 8007d74:	200003e8 	.word	0x200003e8

08007d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007d7c:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <vTaskMissedYield+0x14>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	200003e4 	.word	0x200003e4

08007d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007d98:	f000 f852 	bl	8007e40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <prvIdleTask+0x28>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d9f9      	bls.n	8007d98 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <prvIdleTask+0x2c>)
 8007da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007db4:	e7f0      	b.n	8007d98 <prvIdleTask+0x8>
 8007db6:	bf00      	nop
 8007db8:	200002fc 	.word	0x200002fc
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
 8007dca:	e00c      	b.n	8007de6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4a12      	ldr	r2, [pc, #72]	; (8007e20 <prvInitialiseTaskLists+0x60>)
 8007dd8:	4413      	add	r3, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fcd0 	bl	8006780 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3301      	adds	r3, #1
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d9ef      	bls.n	8007dcc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007dec:	480d      	ldr	r0, [pc, #52]	; (8007e24 <prvInitialiseTaskLists+0x64>)
 8007dee:	f7fe fcc7 	bl	8006780 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007df2:	480d      	ldr	r0, [pc, #52]	; (8007e28 <prvInitialiseTaskLists+0x68>)
 8007df4:	f7fe fcc4 	bl	8006780 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007df8:	480c      	ldr	r0, [pc, #48]	; (8007e2c <prvInitialiseTaskLists+0x6c>)
 8007dfa:	f7fe fcc1 	bl	8006780 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007dfe:	480c      	ldr	r0, [pc, #48]	; (8007e30 <prvInitialiseTaskLists+0x70>)
 8007e00:	f7fe fcbe 	bl	8006780 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007e04:	480b      	ldr	r0, [pc, #44]	; (8007e34 <prvInitialiseTaskLists+0x74>)
 8007e06:	f7fe fcbb 	bl	8006780 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <prvInitialiseTaskLists+0x78>)
 8007e0c:	4a05      	ldr	r2, [pc, #20]	; (8007e24 <prvInitialiseTaskLists+0x64>)
 8007e0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <prvInitialiseTaskLists+0x7c>)
 8007e12:	4a05      	ldr	r2, [pc, #20]	; (8007e28 <prvInitialiseTaskLists+0x68>)
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200002fc 	.word	0x200002fc
 8007e24:	20000360 	.word	0x20000360
 8007e28:	20000374 	.word	0x20000374
 8007e2c:	20000390 	.word	0x20000390
 8007e30:	200003a4 	.word	0x200003a4
 8007e34:	200003bc 	.word	0x200003bc
 8007e38:	20000388 	.word	0x20000388
 8007e3c:	2000038c 	.word	0x2000038c

08007e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e46:	e019      	b.n	8007e7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007e48:	f001 f92c 	bl	80090a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <prvCheckTasksWaitingTermination+0x50>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fd1b 	bl	8006894 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4a0b      	ldr	r2, [pc, #44]	; (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007e72:	f001 f947 	bl	8009104 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f810 	bl	8007e9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e1      	bne.n	8007e48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	200003a4 	.word	0x200003a4
 8007e94:	200003d0 	.word	0x200003d0
 8007e98:	200003b8 	.word	0x200003b8

08007e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 faff 	bl	80094ac <vPortFree>
                vPortFree( pxTCB );
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fafc 	bl	80094ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <prvResetNextTaskUnblockTime+0x30>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <prvResetNextTaskUnblockTime+0x34>)
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007ed2:	e005      	b.n	8007ee0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <prvResetNextTaskUnblockTime+0x30>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <prvResetNextTaskUnblockTime+0x34>)
 8007ede:	6013      	str	r3, [r2, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000388 	.word	0x20000388
 8007ef0:	200003f0 	.word	0x200003f0

08007ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <xTaskGetSchedulerState+0x34>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007f02:	2301      	movs	r3, #1
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	e008      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f08:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <xTaskGetSchedulerState+0x38>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007f10:	2302      	movs	r3, #2
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	e001      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007f1a:	687b      	ldr	r3, [r7, #4]
    }
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	200003dc 	.word	0x200003dc
 8007f2c:	200003f8 	.word	0x200003f8

08007f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d063      	beq.n	800800e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007f46:	4b34      	ldr	r3, [pc, #208]	; (8008018 <xTaskPriorityDisinherit+0xe8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d00a      	beq.n	8007f66 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
    }
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60bb      	str	r3, [r7, #8]
    }
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f88:	1e5a      	subs	r2, r3, #1
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d039      	beq.n	800800e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d135      	bne.n	800800e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fc74 	bl	8006894 <uxListRemove>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	43da      	mvns	r2, r3
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <xTaskPriorityDisinherit+0xec>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <xTaskPriorityDisinherit+0xec>)
 8007fc6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	f1c3 0205 	rsb	r2, r3, #5
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	409a      	lsls	r2, r3
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <xTaskPriorityDisinherit+0xec>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	4a0c      	ldr	r2, [pc, #48]	; (800801c <xTaskPriorityDisinherit+0xec>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4a09      	ldr	r2, [pc, #36]	; (8008020 <xTaskPriorityDisinherit+0xf0>)
 8007ffc:	441a      	add	r2, r3
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7fe fbe8 	bl	80067da <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800800e:	697b      	ldr	r3, [r7, #20]
    }
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	200002f8 	.word	0x200002f8
 800801c:	200003d8 	.word	0x200003d8
 8008020:	200002fc 	.word	0x200002fc

08008024 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	613b      	str	r3, [r7, #16]
    }
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800804e:	f001 f829 	bl	80090a4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008052:	4b34      	ldr	r3, [pc, #208]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	3358      	adds	r3, #88	; 0x58
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d024      	beq.n	80080ae <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8008064:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3314      	adds	r3, #20
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	43db      	mvns	r3, r3
 8008076:	4019      	ands	r1, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3314      	adds	r3, #20
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008082:	4b28      	ldr	r3, [pc, #160]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	3358      	adds	r3, #88	; 0x58
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008096:	2101      	movs	r1, #1
 8008098:	6a38      	ldr	r0, [r7, #32]
 800809a:	f000 fa39 	bl	8008510 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <xTaskGenericNotifyWait+0x104>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80080ae:	f001 f829 	bl	8009104 <vPortExitCritical>

        taskENTER_CRITICAL();
 80080b2:	f000 fff7 	bl	80090a4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d008      	beq.n	80080ce <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3314      	adds	r3, #20
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	3358      	adds	r3, #88	; 0x58
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d002      	beq.n	80080e6 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e010      	b.n	8008108 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3314      	adds	r3, #20
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	43db      	mvns	r3, r3
 80080f8:	4019      	ands	r1, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3314      	adds	r3, #20
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8008108:	4b06      	ldr	r3, [pc, #24]	; (8008124 <xTaskGenericNotifyWait+0x100>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	3358      	adds	r3, #88	; 0x58
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008116:	f000 fff5 	bl	8009104 <vPortExitCritical>

        return xReturn;
 800811a:	697b      	ldr	r3, [r7, #20]
    }
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200002f8 	.word	0x200002f8
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800813a:	2301      	movs	r3, #1
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <xTaskGenericNotify+0x2e>
        __asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	623b      	str	r3, [r7, #32]
    }
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <xTaskGenericNotify+0x4a>
        __asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	61fb      	str	r3, [r7, #28]
    }
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800817a:	f000 ff93 	bl	80090a4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3314      	adds	r3, #20
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4413      	add	r3, r2
 800819a:	3358      	adds	r3, #88	; 0x58
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80081a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4413      	add	r3, r2
 80081a8:	3358      	adds	r3, #88	; 0x58
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d841      	bhi.n	8008238 <xTaskGenericNotify+0x10c>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <xTaskGenericNotify+0x90>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	08008257 	.word	0x08008257
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	080081ef 	.word	0x080081ef
 80081c8:	0800820b 	.word	0x0800820b
 80081cc:	0800821b 	.word	0x0800821b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80081d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3314      	adds	r3, #20
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	431a      	orrs	r2, r3
 80081e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	3314      	adds	r3, #20
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	605a      	str	r2, [r3, #4]
                    break;
 80081ec:	e036      	b.n	800825c <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80081ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3314      	adds	r3, #20
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3314      	adds	r3, #20
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	605a      	str	r2, [r3, #4]
                    break;
 8008208:	e028      	b.n	800825c <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800820a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3314      	adds	r3, #20
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	605a      	str	r2, [r3, #4]
                    break;
 8008218:	e020      	b.n	800825c <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800821a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800821e:	2b02      	cmp	r3, #2
 8008220:	d007      	beq.n	8008232 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3314      	adds	r3, #20
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008230:	e014      	b.n	800825c <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8008232:	2300      	movs	r3, #0
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8008236:	e011      	b.n	800825c <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008238:	4b2b      	ldr	r3, [pc, #172]	; (80082e8 <xTaskGenericNotify+0x1bc>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00c      	beq.n	800825a <xTaskGenericNotify+0x12e>
        __asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	61bb      	str	r3, [r7, #24]
    }
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTaskGenericNotify+0x128>
                    break;
 8008256:	bf00      	nop
 8008258:	e000      	b.n	800825c <xTaskGenericNotify+0x130>

                    break;
 800825a:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800825c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008260:	2b01      	cmp	r3, #1
 8008262:	d139      	bne.n	80082d8 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fb13 	bl	8006894 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	2201      	movs	r2, #1
 8008274:	409a      	lsls	r2, r3
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <xTaskGenericNotify+0x1c0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4313      	orrs	r3, r2
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <xTaskGenericNotify+0x1c0>)
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <xTaskGenericNotify+0x1c4>)
 800828e:	441a      	add	r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	3304      	adds	r3, #4
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f7fe fa9f 	bl	80067da <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <xTaskGenericNotify+0x18e>
        __asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	617b      	str	r3, [r7, #20]
    }
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <xTaskGenericNotify+0x1c8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d907      	bls.n	80082d8 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <xTaskGenericNotify+0x1cc>)
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80082d8:	f000 ff14 	bl	8009104 <vPortExitCritical>

        return xReturn;
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80082de:	4618      	mov	r0, r3
 80082e0:	3730      	adds	r7, #48	; 0x30
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200003d4 	.word	0x200003d4
 80082ec:	200003d8 	.word	0x200003d8
 80082f0:	200002fc 	.word	0x200002fc
 80082f4:	200002f8 	.word	0x200002f8
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b090      	sub	sp, #64	; 0x40
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008346:	f000 ff91 	bl	800926c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800834e:	f3ef 8211 	mrs	r2, BASEPRI
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	627a      	str	r2, [r7, #36]	; 0x24
 8008364:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3314      	adds	r3, #20
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4413      	add	r3, r2
 8008386:	3358      	adds	r3, #88	; 0x58
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800838e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4413      	add	r3, r2
 8008394:	3358      	adds	r3, #88	; 0x58
 8008396:	2202      	movs	r2, #2
 8008398:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2b04      	cmp	r3, #4
 800839e:	d841      	bhi.n	8008424 <xTaskGenericNotifyFromISR+0x128>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <xTaskGenericNotifyFromISR+0xac>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	08008443 	.word	0x08008443
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083f7 	.word	0x080083f7
 80083b8:	08008407 	.word	0x08008407
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80083bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	3314      	adds	r3, #20
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3314      	adds	r3, #20
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	605a      	str	r2, [r3, #4]
                    break;
 80083d8:	e036      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80083da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3314      	adds	r3, #20
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	3314      	adds	r3, #20
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	605a      	str	r2, [r3, #4]
                    break;
 80083f4:	e028      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80083f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	3314      	adds	r3, #20
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	605a      	str	r2, [r3, #4]
                    break;
 8008404:	e020      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800840a:	2b02      	cmp	r3, #2
 800840c:	d007      	beq.n	800841e <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800840e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	3314      	adds	r3, #20
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800841c:	e014      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8008422:	e011      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8008424:	4b33      	ldr	r3, [pc, #204]	; (80084f4 <xTaskGenericNotifyFromISR+0x1f8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00c      	beq.n	8008446 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	61fb      	str	r3, [r7, #28]
    }
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8008446:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800844c:	2b01      	cmp	r3, #1
 800844e:	d145      	bne.n	80084dc <xTaskGenericNotifyFromISR+0x1e0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <xTaskGenericNotifyFromISR+0x172>
        __asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	61bb      	str	r3, [r7, #24]
    }
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTaskGenericNotifyFromISR+0x170>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <xTaskGenericNotifyFromISR+0x1fc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d11c      	bne.n	80084b0 <xTaskGenericNotifyFromISR+0x1b4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fa0a 	bl	8006894 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	2201      	movs	r2, #1
 8008486:	409a      	lsls	r2, r3
 8008488:	4b1c      	ldr	r3, [pc, #112]	; (80084fc <xTaskGenericNotifyFromISR+0x200>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4313      	orrs	r3, r2
 800848e:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <xTaskGenericNotifyFromISR+0x200>)
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a18      	ldr	r2, [pc, #96]	; (8008500 <xTaskGenericNotifyFromISR+0x204>)
 80084a0:	441a      	add	r2, r3
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fe f996 	bl	80067da <vListInsertEnd>
 80084ae:	e005      	b.n	80084bc <xTaskGenericNotifyFromISR+0x1c0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	3318      	adds	r3, #24
 80084b4:	4619      	mov	r1, r3
 80084b6:	4813      	ldr	r0, [pc, #76]	; (8008504 <xTaskGenericNotifyFromISR+0x208>)
 80084b8:	f7fe f98f 	bl	80067da <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <xTaskGenericNotifyFromISR+0x20c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d908      	bls.n	80084dc <xTaskGenericNotifyFromISR+0x1e0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <xTaskGenericNotifyFromISR+0x1da>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	2201      	movs	r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80084d6:	4b0d      	ldr	r3, [pc, #52]	; (800850c <xTaskGenericNotifyFromISR+0x210>)
 80084d8:	2201      	movs	r2, #1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	617b      	str	r3, [r7, #20]
        __asm volatile
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f383 8811 	msr	BASEPRI, r3
    }
 80084e6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80084e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80084ea:	4618      	mov	r0, r3
 80084ec:	3740      	adds	r7, #64	; 0x40
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200003d4 	.word	0x200003d4
 80084f8:	200003f8 	.word	0x200003f8
 80084fc:	200003d8 	.word	0x200003d8
 8008500:	200002fc 	.word	0x200002fc
 8008504:	20000390 	.word	0x20000390
 8008508:	200002f8 	.word	0x200002f8
 800850c:	200003e4 	.word	0x200003e4

08008510 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800851a:	4b29      	ldr	r3, [pc, #164]	; (80085c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008520:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3304      	adds	r3, #4
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe f9b4 	bl	8006894 <uxListRemove>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008538:	2201      	movs	r2, #1
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43da      	mvns	r2, r3
 8008540:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4013      	ands	r3, r2
 8008546:	4a20      	ldr	r2, [pc, #128]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008548:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d10a      	bne.n	8008568 <prvAddCurrentTaskToDelayedList+0x58>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	481a      	ldr	r0, [pc, #104]	; (80085cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008562:	f7fe f93a 	bl	80067da <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008566:	e026      	b.n	80085b6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d209      	bcs.n	8008594 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3304      	adds	r3, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f7fe f948 	bl	8006822 <vListInsert>
}
 8008592:	e010      	b.n	80085b6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f7fe f93e 	bl	8006822 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d202      	bcs.n	80085b6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80085b0:	4a09      	ldr	r2, [pc, #36]	; (80085d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6013      	str	r3, [r2, #0]
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	200003d4 	.word	0x200003d4
 80085c4:	200002f8 	.word	0x200002f8
 80085c8:	200003d8 	.word	0x200003d8
 80085cc:	200003bc 	.word	0x200003bc
 80085d0:	2000038c 	.word	0x2000038c
 80085d4:	20000388 	.word	0x20000388
 80085d8:	200003f0 	.word	0x200003f0

080085dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80085e6:	f000 fb31 	bl	8008c4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80085ea:	4b11      	ldr	r3, [pc, #68]	; (8008630 <xTimerCreateTimerTask+0x54>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80085f2:	4b10      	ldr	r3, [pc, #64]	; (8008634 <xTimerCreateTimerTask+0x58>)
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	2302      	movs	r3, #2
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008600:	490d      	ldr	r1, [pc, #52]	; (8008638 <xTimerCreateTimerTask+0x5c>)
 8008602:	480e      	ldr	r0, [pc, #56]	; (800863c <xTimerCreateTimerTask+0x60>)
 8008604:	f7fe ff24 	bl	8007450 <xTaskCreate>
 8008608:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	603b      	str	r3, [r7, #0]
    }
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8008626:	687b      	ldr	r3, [r7, #4]
    }
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	2000042c 	.word	0x2000042c
 8008634:	20000430 	.word	0x20000430
 8008638:	0800ae60 	.word	0x0800ae60
 800863c:	0800882d 	.word	0x0800882d

08008640 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800864e:	202c      	movs	r0, #44	; 0x2c
 8008650:	f000 fe4c 	bl	80092ec <pvPortMalloc>
 8008654:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00d      	beq.n	8008678 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f805 	bl	8008682 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008678:	697b      	ldr	r3, [r7, #20]
        }
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	617b      	str	r3, [r7, #20]
    }
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01e      	beq.n	80086f0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80086b2:	f000 facb 	bl	8008c4c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	6a3a      	ldr	r2, [r7, #32]
 80086cc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	3304      	adds	r3, #4
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe f874 	bl	80067c0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086e4:	f043 0304 	orr.w	r3, r3, #4
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80086f0:	bf00      	nop
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008706:	2300      	movs	r3, #0
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xTimerGenericCommand+0x2e>
        __asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
    }
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <xTimerGenericCommand+0x98>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d02a      	beq.n	8008784 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b05      	cmp	r3, #5
 800873e:	dc18      	bgt.n	8008772 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008740:	f7ff fbd8 	bl	8007ef4 <xTaskGetSchedulerState>
 8008744:	4603      	mov	r3, r0
 8008746:	2b02      	cmp	r3, #2
 8008748:	d109      	bne.n	800875e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800874a:	4b11      	ldr	r3, [pc, #68]	; (8008790 <xTimerGenericCommand+0x98>)
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	f107 0114 	add.w	r1, r7, #20
 8008752:	2300      	movs	r3, #0
 8008754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008756:	f7fe f9b1 	bl	8006abc <xQueueGenericSend>
 800875a:	6278      	str	r0, [r7, #36]	; 0x24
 800875c:	e012      	b.n	8008784 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <xTimerGenericCommand+0x98>)
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	f107 0114 	add.w	r1, r7, #20
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	f7fe f9a7 	bl	8006abc <xQueueGenericSend>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24
 8008770:	e008      	b.n	8008784 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <xTimerGenericCommand+0x98>)
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f107 0114 	add.w	r1, r7, #20
 800877a:	2300      	movs	r3, #0
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	f7fe fa9b 	bl	8006cb8 <xQueueGenericSendFromISR>
 8008782:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008786:	4618      	mov	r0, r3
 8008788:	3728      	adds	r7, #40	; 0x28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	2000042c 	.word	0x2000042c

08008794 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af02      	add	r7, sp, #8
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800879e:	4b22      	ldr	r3, [pc, #136]	; (8008828 <prvProcessExpiredTimer+0x94>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe f871 	bl	8006894 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d022      	beq.n	8008806 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	18d1      	adds	r1, r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	6978      	ldr	r0, [r7, #20]
 80087ce:	f000 f8d1 	bl	8008974 <prvInsertTimerInActiveList>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01f      	beq.n	8008818 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087d8:	2300      	movs	r3, #0
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	2100      	movs	r1, #0
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f7ff ff88 	bl	80086f8 <xTimerGenericCommand>
 80087e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d113      	bne.n	8008818 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fb      	str	r3, [r7, #12]
    }
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	b2da      	uxtb	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	6978      	ldr	r0, [r7, #20]
 800881e:	4798      	blx	r3
    }
 8008820:	bf00      	nop
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20000424 	.word	0x20000424

0800882c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4618      	mov	r0, r3
 800883a:	f000 f857 	bl	80088ec <prvGetNextExpireTime>
 800883e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f803 	bl	8008850 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800884a:	f000 f8d5 	bl	80089f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800884e:	e7f1      	b.n	8008834 <prvTimerTask+0x8>

08008850 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800885a:	f7fe ff91 	bl	8007780 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f866 	bl	8008934 <prvSampleTimeNow>
 8008868:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d130      	bne.n	80088d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <prvProcessTimerOrBlockTask+0x3c>
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	429a      	cmp	r2, r3
 800887c:	d806      	bhi.n	800888c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800887e:	f7fe ff8d 	bl	800779c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff85 	bl	8008794 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800888a:	e024      	b.n	80088d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d008      	beq.n	80088a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <prvProcessTimerOrBlockTask+0x90>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <prvProcessTimerOrBlockTask+0x50>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <prvProcessTimerOrBlockTask+0x52>
 80088a0:	2300      	movs	r3, #0
 80088a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <prvProcessTimerOrBlockTask+0x94>)
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7fe fd99 	bl	80073e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80088b6:	f7fe ff71 	bl	800779c <xTaskResumeAll>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <prvProcessTimerOrBlockTask+0x98>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
    }
 80088d0:	e001      	b.n	80088d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80088d2:	f7fe ff63 	bl	800779c <xTaskResumeAll>
    }
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000428 	.word	0x20000428
 80088e4:	2000042c 	.word	0x2000042c
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <prvGetNextExpireTime+0x44>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <prvGetNextExpireTime+0x16>
 80088fe:	2201      	movs	r2, #1
 8008900:	e000      	b.n	8008904 <prvGetNextExpireTime+0x18>
 8008902:	2200      	movs	r2, #0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d105      	bne.n	800891c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008910:	4b07      	ldr	r3, [pc, #28]	; (8008930 <prvGetNextExpireTime+0x44>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	e001      	b.n	8008920 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008920:	68fb      	ldr	r3, [r7, #12]
    }
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20000424 	.word	0x20000424

08008934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800893c:	f7fe ffca 	bl	80078d4 <xTaskGetTickCount>
 8008940:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008942:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <prvSampleTimeNow+0x3c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	429a      	cmp	r2, r3
 800894a:	d205      	bcs.n	8008958 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800894c:	f000 f91a 	bl	8008b84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e002      	b.n	800895e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800895e:	4a04      	ldr	r2, [pc, #16]	; (8008970 <prvSampleTimeNow+0x3c>)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008964:	68fb      	ldr	r3, [r7, #12]
    }
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000434 	.word	0x20000434

08008974 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d812      	bhi.n	80089c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d302      	bcc.n	80089ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e01b      	b.n	80089e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089ae:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <prvInsertTimerInActiveList+0x7c>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f7fd ff32 	bl	8006822 <vListInsert>
 80089be:	e012      	b.n	80089e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d206      	bcs.n	80089d6 <prvInsertTimerInActiveList+0x62>
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80089d0:	2301      	movs	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e007      	b.n	80089e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089d6:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <prvInsertTimerInActiveList+0x80>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3304      	adds	r3, #4
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f7fd ff1e 	bl	8006822 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80089e6:	697b      	ldr	r3, [r7, #20]
    }
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000428 	.word	0x20000428
 80089f4:	20000424 	.word	0x20000424

080089f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089fe:	e0ae      	b.n	8008b5e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f2c0 80aa 	blt.w	8008b5c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fd ff3b 	bl	8006894 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff ff87 	bl	8008934 <prvSampleTimeNow>
 8008a26:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b09      	cmp	r3, #9
 8008a2c:	f200 8097 	bhi.w	8008b5e <prvProcessReceivedCommands+0x166>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <prvProcessReceivedCommands+0x40>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008ad5 	.word	0x08008ad5
 8008a48:	08008ae9 	.word	0x08008ae9
 8008a4c:	08008b33 	.word	0x08008b33
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a61 	.word	0x08008a61
 8008a58:	08008ad5 	.word	0x08008ad5
 8008a5c:	08008ae9 	.word	0x08008ae9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	18d1      	adds	r1, r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a80:	f7ff ff78 	bl	8008974 <prvInsertTimerInActiveList>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d069      	beq.n	8008b5e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a90:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05e      	beq.n	8008b5e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	441a      	add	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2300      	movs	r3, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ab2:	f7ff fe21 	bl	80086f8 <xTimerGenericCommand>
 8008ab6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d14f      	bne.n	8008b5e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	61bb      	str	r3, [r7, #24]
    }
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8008ae6:	e03a      	b.n	8008b5e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	617b      	str	r3, [r7, #20]
    }
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	18d1      	adds	r1, r2, r3
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	6a3a      	ldr	r2, [r7, #32]
 8008b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2c:	f7ff ff22 	bl	8008974 <prvInsertTimerInActiveList>
                        break;
 8008b30:	e015      	b.n	8008b5e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8008b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b42:	f000 fcb3 	bl	80094ac <vPortFree>
 8008b46:	e00a      	b.n	8008b5e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008b5a:	e000      	b.n	8008b5e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008b5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b5e:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <prvProcessReceivedCommands+0x188>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f107 0108 	add.w	r1, r7, #8
 8008b66:	2200      	movs	r2, #0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe f94f 	bl	8006e0c <xQueueReceive>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f af45 	bne.w	8008a00 <prvProcessReceivedCommands+0x8>
        }
    }
 8008b76:	bf00      	nop
 8008b78:	bf00      	nop
 8008b7a:	3728      	adds	r7, #40	; 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	2000042c 	.word	0x2000042c

08008b84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b8a:	e048      	b.n	8008c1e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b8c:	4b2d      	ldr	r3, [pc, #180]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b96:	4b2b      	ldr	r3, [pc, #172]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fd fe75 	bl	8006894 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d02e      	beq.n	8008c1e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d90e      	bls.n	8008bf0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7fd fe1a 	bl	8006822 <vListInsert>
 8008bee:	e016      	b.n	8008c1e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fd7c 	bl	80086f8 <xTimerGenericCommand>
 8008c00:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	603b      	str	r3, [r7, #0]
    }
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1b1      	bne.n	8008b8c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <prvSwitchTimerLists+0xc4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a04      	ldr	r2, [pc, #16]	; (8008c44 <prvSwitchTimerLists+0xc0>)
 8008c34:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008c36:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <prvSwitchTimerLists+0xc4>)
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	6013      	str	r3, [r2, #0]
    }
 8008c3c:	bf00      	nop
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000424 	.word	0x20000424
 8008c48:	20000428 	.word	0x20000428

08008c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008c50:	f000 fa28 	bl	80090a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008c54:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <prvCheckForValidListAndQueue+0x54>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11d      	bne.n	8008c98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008c5c:	4811      	ldr	r0, [pc, #68]	; (8008ca4 <prvCheckForValidListAndQueue+0x58>)
 8008c5e:	f7fd fd8f 	bl	8006780 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008c62:	4811      	ldr	r0, [pc, #68]	; (8008ca8 <prvCheckForValidListAndQueue+0x5c>)
 8008c64:	f7fd fd8c 	bl	8006780 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008c68:	4b10      	ldr	r3, [pc, #64]	; (8008cac <prvCheckForValidListAndQueue+0x60>)
 8008c6a:	4a0e      	ldr	r2, [pc, #56]	; (8008ca4 <prvCheckForValidListAndQueue+0x58>)
 8008c6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <prvCheckForValidListAndQueue+0x64>)
 8008c70:	4a0d      	ldr	r2, [pc, #52]	; (8008ca8 <prvCheckForValidListAndQueue+0x5c>)
 8008c72:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008c74:	2200      	movs	r2, #0
 8008c76:	210c      	movs	r1, #12
 8008c78:	200a      	movs	r0, #10
 8008c7a:	f7fd fe9d 	bl	80069b8 <xQueueGenericCreate>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4a07      	ldr	r2, [pc, #28]	; (8008ca0 <prvCheckForValidListAndQueue+0x54>)
 8008c82:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <prvCheckForValidListAndQueue+0x54>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <prvCheckForValidListAndQueue+0x54>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4908      	ldr	r1, [pc, #32]	; (8008cb4 <prvCheckForValidListAndQueue+0x68>)
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fb7e 	bl	8007394 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008c98:	f000 fa34 	bl	8009104 <vPortExitCritical>
    }
 8008c9c:	bf00      	nop
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	2000042c 	.word	0x2000042c
 8008ca4:	200003fc 	.word	0x200003fc
 8008ca8:	20000410 	.word	0x20000410
 8008cac:	20000424 	.word	0x20000424
 8008cb0:	20000428 	.word	0x20000428
 8008cb4:	0800ae68 	.word	0x0800ae68

08008cb8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <xTimerIsTimerActive+0x28>
        __asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	60fb      	str	r3, [r7, #12]
    }
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8008ce0:	f000 f9e0 	bl	80090a4 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	e001      	b.n	8008cfc <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8008cfc:	f000 fa02 	bl	8009104 <vPortExitCritical>

        return xReturn;
 8008d00:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <pvTimerGetTimerID+0x28>
        __asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	60fb      	str	r3, [r7, #12]
    }
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8008d32:	f000 f9b7 	bl	80090a4 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8008d3c:	f000 f9e2 	bl	8009104 <vPortExitCritical>

        return pvReturn;
 8008d40:	693b      	ldr	r3, [r7, #16]
    }
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3b04      	subs	r3, #4
 8008d5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3b04      	subs	r3, #4
 8008d6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f023 0201 	bic.w	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3b04      	subs	r3, #4
 8008d7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008d7c:	4a0c      	ldr	r2, [pc, #48]	; (8008db0 <pxPortInitialiseStack+0x64>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3b14      	subs	r3, #20
 8008d86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3b04      	subs	r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f06f 0202 	mvn.w	r2, #2
 8008d9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3b20      	subs	r3, #32
 8008da0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	08008db5 	.word	0x08008db5

08008db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <prvTaskExitError+0x54>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc6:	d00a      	beq.n	8008dde <prvTaskExitError+0x2a>
        __asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	60fb      	str	r3, [r7, #12]
    }
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <prvTaskExitError+0x28>
        __asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	60bb      	str	r3, [r7, #8]
    }
 8008df0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008df2:	bf00      	nop
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0fc      	beq.n	8008df4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	20000028 	.word	0x20000028
 8008e0c:	00000000 	.word	0x00000000

08008e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <pxCurrentTCBConst2>)
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	6808      	ldr	r0, [r1, #0]
 8008e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	f380 8809 	msr	PSP, r0
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f380 8811 	msr	BASEPRI, r0
 8008e2a:	4770      	bx	lr
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst2>:
 8008e30:	200002f8 	.word	0x200002f8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop

08008e38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <prvPortStartFirstTask+0x24>)
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f380 8808 	msr	MSP, r0
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8814 	msr	CONTROL, r0
 8008e4a:	b662      	cpsie	i
 8008e4c:	b661      	cpsie	f
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	df00      	svc	0
 8008e58:	bf00      	nop
 8008e5a:	0000      	.short	0x0000
 8008e5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop

08008e64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e6a:	4b46      	ldr	r3, [pc, #280]	; (8008f84 <xPortStartScheduler+0x120>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a46      	ldr	r2, [pc, #280]	; (8008f88 <xPortStartScheduler+0x124>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d10a      	bne.n	8008e8a <xPortStartScheduler+0x26>
        __asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	613b      	str	r3, [r7, #16]
    }
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e8a:	4b3e      	ldr	r3, [pc, #248]	; (8008f84 <xPortStartScheduler+0x120>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a3f      	ldr	r2, [pc, #252]	; (8008f8c <xPortStartScheduler+0x128>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d10a      	bne.n	8008eaa <xPortStartScheduler+0x46>
        __asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	60fb      	str	r3, [r7, #12]
    }
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <xPortStartScheduler+0x12c>)
 8008eac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	22ff      	movs	r2, #255	; 0xff
 8008eba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	4b31      	ldr	r3, [pc, #196]	; (8008f94 <xPortStartScheduler+0x130>)
 8008ed0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ed2:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <xPortStartScheduler+0x134>)
 8008ed4:	2207      	movs	r2, #7
 8008ed6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ed8:	e009      	b.n	8008eee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <xPortStartScheduler+0x134>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4a2d      	ldr	r2, [pc, #180]	; (8008f98 <xPortStartScheduler+0x134>)
 8008ee2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef6:	2b80      	cmp	r3, #128	; 0x80
 8008ef8:	d0ef      	beq.n	8008eda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008efa:	4b27      	ldr	r3, [pc, #156]	; (8008f98 <xPortStartScheduler+0x134>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1c3 0307 	rsb	r3, r3, #7
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d00a      	beq.n	8008f1c <xPortStartScheduler+0xb8>
        __asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60bb      	str	r3, [r7, #8]
    }
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <xPortStartScheduler+0x134>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <xPortStartScheduler+0x134>)
 8008f24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f26:	4b1c      	ldr	r3, [pc, #112]	; (8008f98 <xPortStartScheduler+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	; (8008f98 <xPortStartScheduler+0x134>)
 8008f30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008f3a:	4b18      	ldr	r3, [pc, #96]	; (8008f9c <xPortStartScheduler+0x138>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a17      	ldr	r2, [pc, #92]	; (8008f9c <xPortStartScheduler+0x138>)
 8008f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008f46:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <xPortStartScheduler+0x138>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a14      	ldr	r2, [pc, #80]	; (8008f9c <xPortStartScheduler+0x138>)
 8008f4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008f52:	f000 f95b 	bl	800920c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008f56:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <xPortStartScheduler+0x13c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008f5c:	f000 f97a 	bl	8009254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f60:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <xPortStartScheduler+0x140>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0f      	ldr	r2, [pc, #60]	; (8008fa4 <xPortStartScheduler+0x140>)
 8008f66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008f6c:	f7ff ff64 	bl	8008e38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008f70:	f7fe fd78 	bl	8007a64 <vTaskSwitchContext>
    prvTaskExitError();
 8008f74:	f7ff ff1e 	bl	8008db4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	e000ed00 	.word	0xe000ed00
 8008f88:	410fc271 	.word	0x410fc271
 8008f8c:	410fc270 	.word	0x410fc270
 8008f90:	e000e400 	.word	0xe000e400
 8008f94:	20000438 	.word	0x20000438
 8008f98:	2000043c 	.word	0x2000043c
 8008f9c:	e000ed20 	.word	0xe000ed20
 8008fa0:	20000028 	.word	0x20000028
 8008fa4:	e000ef34 	.word	0xe000ef34

08008fa8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fae:	4b37      	ldr	r3, [pc, #220]	; (800908c <vInitPrioGroupValue+0xe4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a37      	ldr	r2, [pc, #220]	; (8009090 <vInitPrioGroupValue+0xe8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d10a      	bne.n	8008fce <vInitPrioGroupValue+0x26>
        __asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	613b      	str	r3, [r7, #16]
    }
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fce:	4b2f      	ldr	r3, [pc, #188]	; (800908c <vInitPrioGroupValue+0xe4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a30      	ldr	r2, [pc, #192]	; (8009094 <vInitPrioGroupValue+0xec>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d10a      	bne.n	8008fee <vInitPrioGroupValue+0x46>
        __asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	60fb      	str	r3, [r7, #12]
    }
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fee:	4b2a      	ldr	r3, [pc, #168]	; (8009098 <vInitPrioGroupValue+0xf0>)
 8008ff0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	22ff      	movs	r2, #255	; 0xff
 8008ffe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4b22      	ldr	r3, [pc, #136]	; (800909c <vInitPrioGroupValue+0xf4>)
 8009014:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009016:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009018:	2207      	movs	r2, #7
 800901a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800901c:	e009      	b.n	8009032 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800901e:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	4a1e      	ldr	r2, [pc, #120]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009026:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903a:	2b80      	cmp	r3, #128	; 0x80
 800903c:	d0ef      	beq.n	800901e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800903e:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f1c3 0307 	rsb	r3, r3, #7
 8009046:	2b04      	cmp	r3, #4
 8009048:	d00a      	beq.n	8009060 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60bb      	str	r3, [r7, #8]
    }
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	4a0e      	ldr	r2, [pc, #56]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009068:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800906a:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009072:	4a0b      	ldr	r2, [pc, #44]	; (80090a0 <vInitPrioGroupValue+0xf8>)
 8009074:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	b2da      	uxtb	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	e000ed00 	.word	0xe000ed00
 8009090:	410fc271 	.word	0x410fc271
 8009094:	410fc270 	.word	0x410fc270
 8009098:	e000e400 	.word	0xe000e400
 800909c:	20000438 	.word	0x20000438
 80090a0:	2000043c 	.word	0x2000043c

080090a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
        __asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	607b      	str	r3, [r7, #4]
    }
 80090bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <vPortEnterCritical+0x58>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <vPortEnterCritical+0x58>)
 80090c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <vPortEnterCritical+0x58>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10f      	bne.n	80090f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <vPortEnterCritical+0x5c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	603b      	str	r3, [r7, #0]
    }
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <vPortEnterCritical+0x4a>
    }
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000028 	.word	0x20000028
 8009100:	e000ed04 	.word	0xe000ed04

08009104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800910a:	4b12      	ldr	r3, [pc, #72]	; (8009154 <vPortExitCritical+0x50>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <vPortExitCritical+0x24>
        __asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	607b      	str	r3, [r7, #4]
    }
 8009124:	bf00      	nop
 8009126:	e7fe      	b.n	8009126 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009128:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <vPortExitCritical+0x50>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3b01      	subs	r3, #1
 800912e:	4a09      	ldr	r2, [pc, #36]	; (8009154 <vPortExitCritical+0x50>)
 8009130:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <vPortExitCritical+0x50>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <vPortExitCritical+0x42>
 800913a:	2300      	movs	r3, #0
 800913c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	f383 8811 	msr	BASEPRI, r3
    }
 8009144:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000028 	.word	0x20000028
	...

08009160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009160:	f3ef 8009 	mrs	r0, PSP
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <pxCurrentTCBConst>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	f01e 0f10 	tst.w	lr, #16
 8009170:	bf08      	it	eq
 8009172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	6010      	str	r0, [r2, #0]
 800917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009184:	f380 8811 	msr	BASEPRI, r0
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f7fe fc68 	bl	8007a64 <vTaskSwitchContext>
 8009194:	f04f 0000 	mov.w	r0, #0
 8009198:	f380 8811 	msr	BASEPRI, r0
 800919c:	bc09      	pop	{r0, r3}
 800919e:	6819      	ldr	r1, [r3, #0]
 80091a0:	6808      	ldr	r0, [r1, #0]
 80091a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a6:	f01e 0f10 	tst.w	lr, #16
 80091aa:	bf08      	it	eq
 80091ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091b0:	f380 8809 	msr	PSP, r0
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst>:
 80091c0:	200002f8 	.word	0x200002f8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
        __asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	607b      	str	r3, [r7, #4]
    }
 80091e0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80091e2:	f7fe fb87 	bl	80078f4 <xTaskIncrementTick>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <SysTick_Handler+0x40>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f383 8811 	msr	BASEPRI, r3
    }
 80091fe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed04 	.word	0xe000ed04

0800920c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009210:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <vPortSetupTimerInterrupt+0x34>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009216:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <vPortSetupTimerInterrupt+0x38>)
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800921c:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <vPortSetupTimerInterrupt+0x3c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <vPortSetupTimerInterrupt+0x40>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <vPortSetupTimerInterrupt+0x44>)
 800922a:	3b01      	subs	r3, #1
 800922c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <vPortSetupTimerInterrupt+0x34>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	e000e010 	.word	0xe000e010
 8009244:	e000e018 	.word	0xe000e018
 8009248:	20000014 	.word	0x20000014
 800924c:	10624dd3 	.word	0x10624dd3
 8009250:	e000e014 	.word	0xe000e014

08009254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009264 <vPortEnableVFP+0x10>
 8009258:	6801      	ldr	r1, [r0, #0]
 800925a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800925e:	6001      	str	r1, [r0, #0]
 8009260:	4770      	bx	lr
 8009262:	0000      	.short	0x0000
 8009264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop

0800926c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009272:	f3ef 8305 	mrs	r3, IPSR
 8009276:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d914      	bls.n	80092a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800927e:	4a17      	ldr	r2, [pc, #92]	; (80092dc <vPortValidateInterruptPriority+0x70>)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009288:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <vPortValidateInterruptPriority+0x74>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	7afa      	ldrb	r2, [r7, #11]
 800928e:	429a      	cmp	r2, r3
 8009290:	d20a      	bcs.n	80092a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	607b      	str	r3, [r7, #4]
    }
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092a8:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <vPortValidateInterruptPriority+0x78>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <vPortValidateInterruptPriority+0x7c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d90a      	bls.n	80092ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	603b      	str	r3, [r7, #0]
    }
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <vPortValidateInterruptPriority+0x60>
    }
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	e000e3f0 	.word	0xe000e3f0
 80092e0:	20000438 	.word	0x20000438
 80092e4:	e000ed0c 	.word	0xe000ed0c
 80092e8:	2000043c 	.word	0x2000043c

080092ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08a      	sub	sp, #40	; 0x28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80092f8:	f7fe fa42 	bl	8007780 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80092fc:	4b65      	ldr	r3, [pc, #404]	; (8009494 <pvPortMalloc+0x1a8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009304:	f000 f934 	bl	8009570 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009308:	4b63      	ldr	r3, [pc, #396]	; (8009498 <pvPortMalloc+0x1ac>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4013      	ands	r3, r2
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 80a7 	bne.w	8009464 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d02d      	beq.n	8009378 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800931c:	2208      	movs	r2, #8
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d227      	bcs.n	8009378 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8009328:	2208      	movs	r2, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d021      	beq.n	800937e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f023 0307 	bic.w	r3, r3, #7
 8009340:	3308      	adds	r3, #8
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d214      	bcs.n	8009372 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	3308      	adds	r3, #8
 8009350:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <pvPortMalloc+0x92>
        __asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	617b      	str	r3, [r7, #20]
    }
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009376:	e002      	b.n	800937e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	e000      	b.n	8009380 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800937e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d06e      	beq.n	8009464 <pvPortMalloc+0x178>
 8009386:	4b45      	ldr	r3, [pc, #276]	; (800949c <pvPortMalloc+0x1b0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d869      	bhi.n	8009464 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009390:	4b43      	ldr	r3, [pc, #268]	; (80094a0 <pvPortMalloc+0x1b4>)
 8009392:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009394:	4b42      	ldr	r3, [pc, #264]	; (80094a0 <pvPortMalloc+0x1b4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800939a:	e004      	b.n	80093a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d903      	bls.n	80093b8 <pvPortMalloc+0xcc>
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f1      	bne.n	800939c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80093b8:	4b36      	ldr	r3, [pc, #216]	; (8009494 <pvPortMalloc+0x1a8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093be:	429a      	cmp	r2, r3
 80093c0:	d050      	beq.n	8009464 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2208      	movs	r2, #8
 80093c8:	4413      	add	r3, r2
 80093ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	2308      	movs	r3, #8
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d91f      	bls.n	8009424 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4413      	add	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <pvPortMalloc+0x120>
        __asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	613b      	str	r3, [r7, #16]
    }
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	1ad2      	subs	r2, r2, r3
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800941e:	69b8      	ldr	r0, [r7, #24]
 8009420:	f000 f908 	bl	8009634 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <pvPortMalloc+0x1b0>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	4a1b      	ldr	r2, [pc, #108]	; (800949c <pvPortMalloc+0x1b0>)
 8009430:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009432:	4b1a      	ldr	r3, [pc, #104]	; (800949c <pvPortMalloc+0x1b0>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <pvPortMalloc+0x1b8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d203      	bcs.n	8009446 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800943e:	4b17      	ldr	r3, [pc, #92]	; (800949c <pvPortMalloc+0x1b0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a18      	ldr	r2, [pc, #96]	; (80094a4 <pvPortMalloc+0x1b8>)
 8009444:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	4b13      	ldr	r3, [pc, #76]	; (8009498 <pvPortMalloc+0x1ac>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	431a      	orrs	r2, r3
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800945a:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <pvPortMalloc+0x1bc>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3301      	adds	r3, #1
 8009460:	4a11      	ldr	r2, [pc, #68]	; (80094a8 <pvPortMalloc+0x1bc>)
 8009462:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009464:	f7fe f99a 	bl	800779c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <pvPortMalloc+0x19c>
        __asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	60fb      	str	r3, [r7, #12]
    }
 8009484:	bf00      	nop
 8009486:	e7fe      	b.n	8009486 <pvPortMalloc+0x19a>
    return pvReturn;
 8009488:	69fb      	ldr	r3, [r7, #28]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3728      	adds	r7, #40	; 0x28
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20002448 	.word	0x20002448
 8009498:	2000245c 	.word	0x2000245c
 800949c:	2000244c 	.word	0x2000244c
 80094a0:	20002440 	.word	0x20002440
 80094a4:	20002450 	.word	0x20002450
 80094a8:	20002454 	.word	0x20002454

080094ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d04d      	beq.n	800955a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80094be:	2308      	movs	r3, #8
 80094c0:	425b      	negs	r3, r3
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4413      	add	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	4b24      	ldr	r3, [pc, #144]	; (8009564 <vPortFree+0xb8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4013      	ands	r3, r2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10a      	bne.n	80094f0 <vPortFree+0x44>
        __asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	60fb      	str	r3, [r7, #12]
    }
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <vPortFree+0x62>
        __asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	60bb      	str	r3, [r7, #8]
    }
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	4b14      	ldr	r3, [pc, #80]	; (8009564 <vPortFree+0xb8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4013      	ands	r3, r2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01e      	beq.n	800955a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d11a      	bne.n	800955a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <vPortFree+0xb8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	43db      	mvns	r3, r3
 800952e:	401a      	ands	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8009534:	f7fe f924 	bl	8007780 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <vPortFree+0xbc>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4413      	add	r3, r2
 8009542:	4a09      	ldr	r2, [pc, #36]	; (8009568 <vPortFree+0xbc>)
 8009544:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009546:	6938      	ldr	r0, [r7, #16]
 8009548:	f000 f874 	bl	8009634 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <vPortFree+0xc0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	4a06      	ldr	r2, [pc, #24]	; (800956c <vPortFree+0xc0>)
 8009554:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009556:	f7fe f921 	bl	800779c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800955a:	bf00      	nop
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	2000245c 	.word	0x2000245c
 8009568:	2000244c 	.word	0x2000244c
 800956c:	20002458 	.word	0x20002458

08009570 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800957a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800957c:	4b27      	ldr	r3, [pc, #156]	; (800961c <prvHeapInit+0xac>)
 800957e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3307      	adds	r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	4a1f      	ldr	r2, [pc, #124]	; (800961c <prvHeapInit+0xac>)
 80095a0:	4413      	add	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095a8:	4a1d      	ldr	r2, [pc, #116]	; (8009620 <prvHeapInit+0xb0>)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80095ae:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <prvHeapInit+0xb0>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	4413      	add	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80095bc:	2208      	movs	r2, #8
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1a9b      	subs	r3, r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0307 	bic.w	r3, r3, #7
 80095ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a15      	ldr	r2, [pc, #84]	; (8009624 <prvHeapInit+0xb4>)
 80095d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80095d2:	4b14      	ldr	r3, [pc, #80]	; (8009624 <prvHeapInit+0xb4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2200      	movs	r2, #0
 80095d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <prvHeapInit+0xb4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095f0:	4b0c      	ldr	r3, [pc, #48]	; (8009624 <prvHeapInit+0xb4>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	4a0a      	ldr	r2, [pc, #40]	; (8009628 <prvHeapInit+0xb8>)
 80095fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	4a09      	ldr	r2, [pc, #36]	; (800962c <prvHeapInit+0xbc>)
 8009606:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009608:	4b09      	ldr	r3, [pc, #36]	; (8009630 <prvHeapInit+0xc0>)
 800960a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800960e:	601a      	str	r2, [r3, #0]
}
 8009610:	bf00      	nop
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	20000440 	.word	0x20000440
 8009620:	20002440 	.word	0x20002440
 8009624:	20002448 	.word	0x20002448
 8009628:	20002450 	.word	0x20002450
 800962c:	2000244c 	.word	0x2000244c
 8009630:	2000245c 	.word	0x2000245c

08009634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800963c:	4b28      	ldr	r3, [pc, #160]	; (80096e0 <prvInsertBlockIntoFreeList+0xac>)
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e002      	b.n	8009648 <prvInsertBlockIntoFreeList+0x14>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	429a      	cmp	r2, r3
 8009650:	d8f7      	bhi.n	8009642 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4413      	add	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d108      	bne.n	8009676 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	441a      	add	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d118      	bne.n	80096bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d00d      	beq.n	80096b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	441a      	add	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	e008      	b.n	80096c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096b2:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <prvInsertBlockIntoFreeList+0xb0>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e003      	b.n	80096c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d002      	beq.n	80096d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80096d2:	bf00      	nop
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	20002440 	.word	0x20002440
 80096e4:	20002448 	.word	0x20002448

080096e8 <__errno>:
 80096e8:	4b01      	ldr	r3, [pc, #4]	; (80096f0 <__errno+0x8>)
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	2000002c 	.word	0x2000002c

080096f4 <__libc_init_array>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	4d0d      	ldr	r5, [pc, #52]	; (800972c <__libc_init_array+0x38>)
 80096f8:	4c0d      	ldr	r4, [pc, #52]	; (8009730 <__libc_init_array+0x3c>)
 80096fa:	1b64      	subs	r4, r4, r5
 80096fc:	10a4      	asrs	r4, r4, #2
 80096fe:	2600      	movs	r6, #0
 8009700:	42a6      	cmp	r6, r4
 8009702:	d109      	bne.n	8009718 <__libc_init_array+0x24>
 8009704:	4d0b      	ldr	r5, [pc, #44]	; (8009734 <__libc_init_array+0x40>)
 8009706:	4c0c      	ldr	r4, [pc, #48]	; (8009738 <__libc_init_array+0x44>)
 8009708:	f001 f99e 	bl	800aa48 <_init>
 800970c:	1b64      	subs	r4, r4, r5
 800970e:	10a4      	asrs	r4, r4, #2
 8009710:	2600      	movs	r6, #0
 8009712:	42a6      	cmp	r6, r4
 8009714:	d105      	bne.n	8009722 <__libc_init_array+0x2e>
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	f855 3b04 	ldr.w	r3, [r5], #4
 800971c:	4798      	blx	r3
 800971e:	3601      	adds	r6, #1
 8009720:	e7ee      	b.n	8009700 <__libc_init_array+0xc>
 8009722:	f855 3b04 	ldr.w	r3, [r5], #4
 8009726:	4798      	blx	r3
 8009728:	3601      	adds	r6, #1
 800972a:	e7f2      	b.n	8009712 <__libc_init_array+0x1e>
 800972c:	0800afd8 	.word	0x0800afd8
 8009730:	0800afd8 	.word	0x0800afd8
 8009734:	0800afd8 	.word	0x0800afd8
 8009738:	0800afdc 	.word	0x0800afdc

0800973c <memcpy>:
 800973c:	440a      	add	r2, r1
 800973e:	4291      	cmp	r1, r2
 8009740:	f100 33ff 	add.w	r3, r0, #4294967295
 8009744:	d100      	bne.n	8009748 <memcpy+0xc>
 8009746:	4770      	bx	lr
 8009748:	b510      	push	{r4, lr}
 800974a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800974e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009752:	4291      	cmp	r1, r2
 8009754:	d1f9      	bne.n	800974a <memcpy+0xe>
 8009756:	bd10      	pop	{r4, pc}

08009758 <memset>:
 8009758:	4402      	add	r2, r0
 800975a:	4603      	mov	r3, r0
 800975c:	4293      	cmp	r3, r2
 800975e:	d100      	bne.n	8009762 <memset+0xa>
 8009760:	4770      	bx	lr
 8009762:	f803 1b01 	strb.w	r1, [r3], #1
 8009766:	e7f9      	b.n	800975c <memset+0x4>

08009768 <iprintf>:
 8009768:	b40f      	push	{r0, r1, r2, r3}
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <iprintf+0x2c>)
 800976c:	b513      	push	{r0, r1, r4, lr}
 800976e:	681c      	ldr	r4, [r3, #0]
 8009770:	b124      	cbz	r4, 800977c <iprintf+0x14>
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	b913      	cbnz	r3, 800977c <iprintf+0x14>
 8009776:	4620      	mov	r0, r4
 8009778:	f000 f89a 	bl	80098b0 <__sinit>
 800977c:	ab05      	add	r3, sp, #20
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	68a1      	ldr	r1, [r4, #8]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fb4d 	bl	8009e24 <_vfiprintf_r>
 800978a:	b002      	add	sp, #8
 800978c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009790:	b004      	add	sp, #16
 8009792:	4770      	bx	lr
 8009794:	2000002c 	.word	0x2000002c

08009798 <siprintf>:
 8009798:	b40e      	push	{r1, r2, r3}
 800979a:	b500      	push	{lr}
 800979c:	b09c      	sub	sp, #112	; 0x70
 800979e:	ab1d      	add	r3, sp, #116	; 0x74
 80097a0:	9002      	str	r0, [sp, #8]
 80097a2:	9006      	str	r0, [sp, #24]
 80097a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097a8:	4809      	ldr	r0, [pc, #36]	; (80097d0 <siprintf+0x38>)
 80097aa:	9107      	str	r1, [sp, #28]
 80097ac:	9104      	str	r1, [sp, #16]
 80097ae:	4909      	ldr	r1, [pc, #36]	; (80097d4 <siprintf+0x3c>)
 80097b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b4:	9105      	str	r1, [sp, #20]
 80097b6:	6800      	ldr	r0, [r0, #0]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	a902      	add	r1, sp, #8
 80097bc:	f000 fa08 	bl	8009bd0 <_svfiprintf_r>
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	b01c      	add	sp, #112	; 0x70
 80097c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097cc:	b003      	add	sp, #12
 80097ce:	4770      	bx	lr
 80097d0:	2000002c 	.word	0x2000002c
 80097d4:	ffff0208 	.word	0xffff0208

080097d8 <strncmp>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	b17a      	cbz	r2, 80097fc <strncmp+0x24>
 80097dc:	4603      	mov	r3, r0
 80097de:	3901      	subs	r1, #1
 80097e0:	1884      	adds	r4, r0, r2
 80097e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097ea:	4290      	cmp	r0, r2
 80097ec:	d101      	bne.n	80097f2 <strncmp+0x1a>
 80097ee:	42a3      	cmp	r3, r4
 80097f0:	d101      	bne.n	80097f6 <strncmp+0x1e>
 80097f2:	1a80      	subs	r0, r0, r2
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d1f3      	bne.n	80097e2 <strncmp+0xa>
 80097fa:	e7fa      	b.n	80097f2 <strncmp+0x1a>
 80097fc:	4610      	mov	r0, r2
 80097fe:	e7f9      	b.n	80097f4 <strncmp+0x1c>

08009800 <std>:
 8009800:	2300      	movs	r3, #0
 8009802:	b510      	push	{r4, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	e9c0 3300 	strd	r3, r3, [r0]
 800980a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800980e:	6083      	str	r3, [r0, #8]
 8009810:	8181      	strh	r1, [r0, #12]
 8009812:	6643      	str	r3, [r0, #100]	; 0x64
 8009814:	81c2      	strh	r2, [r0, #14]
 8009816:	6183      	str	r3, [r0, #24]
 8009818:	4619      	mov	r1, r3
 800981a:	2208      	movs	r2, #8
 800981c:	305c      	adds	r0, #92	; 0x5c
 800981e:	f7ff ff9b 	bl	8009758 <memset>
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <std+0x38>)
 8009824:	6263      	str	r3, [r4, #36]	; 0x24
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <std+0x3c>)
 8009828:	62a3      	str	r3, [r4, #40]	; 0x28
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <std+0x40>)
 800982c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <std+0x44>)
 8009830:	6224      	str	r4, [r4, #32]
 8009832:	6323      	str	r3, [r4, #48]	; 0x30
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	0800a3cd 	.word	0x0800a3cd
 800983c:	0800a3ef 	.word	0x0800a3ef
 8009840:	0800a427 	.word	0x0800a427
 8009844:	0800a44b 	.word	0x0800a44b

08009848 <_cleanup_r>:
 8009848:	4901      	ldr	r1, [pc, #4]	; (8009850 <_cleanup_r+0x8>)
 800984a:	f000 b8af 	b.w	80099ac <_fwalk_reent>
 800984e:	bf00      	nop
 8009850:	0800a725 	.word	0x0800a725

08009854 <__sfmoreglue>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	2268      	movs	r2, #104	; 0x68
 8009858:	1e4d      	subs	r5, r1, #1
 800985a:	4355      	muls	r5, r2
 800985c:	460e      	mov	r6, r1
 800985e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009862:	f000 f8e5 	bl	8009a30 <_malloc_r>
 8009866:	4604      	mov	r4, r0
 8009868:	b140      	cbz	r0, 800987c <__sfmoreglue+0x28>
 800986a:	2100      	movs	r1, #0
 800986c:	e9c0 1600 	strd	r1, r6, [r0]
 8009870:	300c      	adds	r0, #12
 8009872:	60a0      	str	r0, [r4, #8]
 8009874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009878:	f7ff ff6e 	bl	8009758 <memset>
 800987c:	4620      	mov	r0, r4
 800987e:	bd70      	pop	{r4, r5, r6, pc}

08009880 <__sfp_lock_acquire>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sfp_lock_acquire+0x8>)
 8009882:	f000 b8b3 	b.w	80099ec <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	20002461 	.word	0x20002461

0800988c <__sfp_lock_release>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__sfp_lock_release+0x8>)
 800988e:	f000 b8ae 	b.w	80099ee <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	20002461 	.word	0x20002461

08009898 <__sinit_lock_acquire>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__sinit_lock_acquire+0x8>)
 800989a:	f000 b8a7 	b.w	80099ec <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20002462 	.word	0x20002462

080098a4 <__sinit_lock_release>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sinit_lock_release+0x8>)
 80098a6:	f000 b8a2 	b.w	80099ee <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20002462 	.word	0x20002462

080098b0 <__sinit>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	4604      	mov	r4, r0
 80098b4:	f7ff fff0 	bl	8009898 <__sinit_lock_acquire>
 80098b8:	69a3      	ldr	r3, [r4, #24]
 80098ba:	b11b      	cbz	r3, 80098c4 <__sinit+0x14>
 80098bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c0:	f7ff bff0 	b.w	80098a4 <__sinit_lock_release>
 80098c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098c8:	6523      	str	r3, [r4, #80]	; 0x50
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <__sinit+0x68>)
 80098cc:	4a13      	ldr	r2, [pc, #76]	; (800991c <__sinit+0x6c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	bf04      	itt	eq
 80098d6:	2301      	moveq	r3, #1
 80098d8:	61a3      	streq	r3, [r4, #24]
 80098da:	4620      	mov	r0, r4
 80098dc:	f000 f820 	bl	8009920 <__sfp>
 80098e0:	6060      	str	r0, [r4, #4]
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f81c 	bl	8009920 <__sfp>
 80098e8:	60a0      	str	r0, [r4, #8]
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 f818 	bl	8009920 <__sfp>
 80098f0:	2200      	movs	r2, #0
 80098f2:	60e0      	str	r0, [r4, #12]
 80098f4:	2104      	movs	r1, #4
 80098f6:	6860      	ldr	r0, [r4, #4]
 80098f8:	f7ff ff82 	bl	8009800 <std>
 80098fc:	68a0      	ldr	r0, [r4, #8]
 80098fe:	2201      	movs	r2, #1
 8009900:	2109      	movs	r1, #9
 8009902:	f7ff ff7d 	bl	8009800 <std>
 8009906:	68e0      	ldr	r0, [r4, #12]
 8009908:	2202      	movs	r2, #2
 800990a:	2112      	movs	r1, #18
 800990c:	f7ff ff78 	bl	8009800 <std>
 8009910:	2301      	movs	r3, #1
 8009912:	61a3      	str	r3, [r4, #24]
 8009914:	e7d2      	b.n	80098bc <__sinit+0xc>
 8009916:	bf00      	nop
 8009918:	0800af38 	.word	0x0800af38
 800991c:	08009849 	.word	0x08009849

08009920 <__sfp>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	4607      	mov	r7, r0
 8009924:	f7ff ffac 	bl	8009880 <__sfp_lock_acquire>
 8009928:	4b1e      	ldr	r3, [pc, #120]	; (80099a4 <__sfp+0x84>)
 800992a:	681e      	ldr	r6, [r3, #0]
 800992c:	69b3      	ldr	r3, [r6, #24]
 800992e:	b913      	cbnz	r3, 8009936 <__sfp+0x16>
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff ffbd 	bl	80098b0 <__sinit>
 8009936:	3648      	adds	r6, #72	; 0x48
 8009938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800993c:	3b01      	subs	r3, #1
 800993e:	d503      	bpl.n	8009948 <__sfp+0x28>
 8009940:	6833      	ldr	r3, [r6, #0]
 8009942:	b30b      	cbz	r3, 8009988 <__sfp+0x68>
 8009944:	6836      	ldr	r6, [r6, #0]
 8009946:	e7f7      	b.n	8009938 <__sfp+0x18>
 8009948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800994c:	b9d5      	cbnz	r5, 8009984 <__sfp+0x64>
 800994e:	4b16      	ldr	r3, [pc, #88]	; (80099a8 <__sfp+0x88>)
 8009950:	60e3      	str	r3, [r4, #12]
 8009952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009956:	6665      	str	r5, [r4, #100]	; 0x64
 8009958:	f000 f847 	bl	80099ea <__retarget_lock_init_recursive>
 800995c:	f7ff ff96 	bl	800988c <__sfp_lock_release>
 8009960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009968:	6025      	str	r5, [r4, #0]
 800996a:	61a5      	str	r5, [r4, #24]
 800996c:	2208      	movs	r2, #8
 800996e:	4629      	mov	r1, r5
 8009970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009974:	f7ff fef0 	bl	8009758 <memset>
 8009978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800997c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009980:	4620      	mov	r0, r4
 8009982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009984:	3468      	adds	r4, #104	; 0x68
 8009986:	e7d9      	b.n	800993c <__sfp+0x1c>
 8009988:	2104      	movs	r1, #4
 800998a:	4638      	mov	r0, r7
 800998c:	f7ff ff62 	bl	8009854 <__sfmoreglue>
 8009990:	4604      	mov	r4, r0
 8009992:	6030      	str	r0, [r6, #0]
 8009994:	2800      	cmp	r0, #0
 8009996:	d1d5      	bne.n	8009944 <__sfp+0x24>
 8009998:	f7ff ff78 	bl	800988c <__sfp_lock_release>
 800999c:	230c      	movs	r3, #12
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	e7ee      	b.n	8009980 <__sfp+0x60>
 80099a2:	bf00      	nop
 80099a4:	0800af38 	.word	0x0800af38
 80099a8:	ffff0001 	.word	0xffff0001

080099ac <_fwalk_reent>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	4606      	mov	r6, r0
 80099b2:	4688      	mov	r8, r1
 80099b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099b8:	2700      	movs	r7, #0
 80099ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099be:	f1b9 0901 	subs.w	r9, r9, #1
 80099c2:	d505      	bpl.n	80099d0 <_fwalk_reent+0x24>
 80099c4:	6824      	ldr	r4, [r4, #0]
 80099c6:	2c00      	cmp	r4, #0
 80099c8:	d1f7      	bne.n	80099ba <_fwalk_reent+0xe>
 80099ca:	4638      	mov	r0, r7
 80099cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d0:	89ab      	ldrh	r3, [r5, #12]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d907      	bls.n	80099e6 <_fwalk_reent+0x3a>
 80099d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099da:	3301      	adds	r3, #1
 80099dc:	d003      	beq.n	80099e6 <_fwalk_reent+0x3a>
 80099de:	4629      	mov	r1, r5
 80099e0:	4630      	mov	r0, r6
 80099e2:	47c0      	blx	r8
 80099e4:	4307      	orrs	r7, r0
 80099e6:	3568      	adds	r5, #104	; 0x68
 80099e8:	e7e9      	b.n	80099be <_fwalk_reent+0x12>

080099ea <__retarget_lock_init_recursive>:
 80099ea:	4770      	bx	lr

080099ec <__retarget_lock_acquire_recursive>:
 80099ec:	4770      	bx	lr

080099ee <__retarget_lock_release_recursive>:
 80099ee:	4770      	bx	lr

080099f0 <sbrk_aligned>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	4e0e      	ldr	r6, [pc, #56]	; (8009a2c <sbrk_aligned+0x3c>)
 80099f4:	460c      	mov	r4, r1
 80099f6:	6831      	ldr	r1, [r6, #0]
 80099f8:	4605      	mov	r5, r0
 80099fa:	b911      	cbnz	r1, 8009a02 <sbrk_aligned+0x12>
 80099fc:	f000 fcd6 	bl	800a3ac <_sbrk_r>
 8009a00:	6030      	str	r0, [r6, #0]
 8009a02:	4621      	mov	r1, r4
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 fcd1 	bl	800a3ac <_sbrk_r>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d00a      	beq.n	8009a24 <sbrk_aligned+0x34>
 8009a0e:	1cc4      	adds	r4, r0, #3
 8009a10:	f024 0403 	bic.w	r4, r4, #3
 8009a14:	42a0      	cmp	r0, r4
 8009a16:	d007      	beq.n	8009a28 <sbrk_aligned+0x38>
 8009a18:	1a21      	subs	r1, r4, r0
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 fcc6 	bl	800a3ac <_sbrk_r>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d101      	bne.n	8009a28 <sbrk_aligned+0x38>
 8009a24:	f04f 34ff 	mov.w	r4, #4294967295
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	20002468 	.word	0x20002468

08009a30 <_malloc_r>:
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	1ccd      	adds	r5, r1, #3
 8009a36:	f025 0503 	bic.w	r5, r5, #3
 8009a3a:	3508      	adds	r5, #8
 8009a3c:	2d0c      	cmp	r5, #12
 8009a3e:	bf38      	it	cc
 8009a40:	250c      	movcc	r5, #12
 8009a42:	2d00      	cmp	r5, #0
 8009a44:	4607      	mov	r7, r0
 8009a46:	db01      	blt.n	8009a4c <_malloc_r+0x1c>
 8009a48:	42a9      	cmp	r1, r5
 8009a4a:	d905      	bls.n	8009a58 <_malloc_r+0x28>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	2600      	movs	r6, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a58:	4e2e      	ldr	r6, [pc, #184]	; (8009b14 <_malloc_r+0xe4>)
 8009a5a:	f000 ff31 	bl	800a8c0 <__malloc_lock>
 8009a5e:	6833      	ldr	r3, [r6, #0]
 8009a60:	461c      	mov	r4, r3
 8009a62:	bb34      	cbnz	r4, 8009ab2 <_malloc_r+0x82>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4638      	mov	r0, r7
 8009a68:	f7ff ffc2 	bl	80099f0 <sbrk_aligned>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	4604      	mov	r4, r0
 8009a70:	d14d      	bne.n	8009b0e <_malloc_r+0xde>
 8009a72:	6834      	ldr	r4, [r6, #0]
 8009a74:	4626      	mov	r6, r4
 8009a76:	2e00      	cmp	r6, #0
 8009a78:	d140      	bne.n	8009afc <_malloc_r+0xcc>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4638      	mov	r0, r7
 8009a80:	eb04 0803 	add.w	r8, r4, r3
 8009a84:	f000 fc92 	bl	800a3ac <_sbrk_r>
 8009a88:	4580      	cmp	r8, r0
 8009a8a:	d13a      	bne.n	8009b02 <_malloc_r+0xd2>
 8009a8c:	6821      	ldr	r1, [r4, #0]
 8009a8e:	3503      	adds	r5, #3
 8009a90:	1a6d      	subs	r5, r5, r1
 8009a92:	f025 0503 	bic.w	r5, r5, #3
 8009a96:	3508      	adds	r5, #8
 8009a98:	2d0c      	cmp	r5, #12
 8009a9a:	bf38      	it	cc
 8009a9c:	250c      	movcc	r5, #12
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff ffa5 	bl	80099f0 <sbrk_aligned>
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d02b      	beq.n	8009b02 <_malloc_r+0xd2>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	442b      	add	r3, r5
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	e00e      	b.n	8009ad0 <_malloc_r+0xa0>
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	1b52      	subs	r2, r2, r5
 8009ab6:	d41e      	bmi.n	8009af6 <_malloc_r+0xc6>
 8009ab8:	2a0b      	cmp	r2, #11
 8009aba:	d916      	bls.n	8009aea <_malloc_r+0xba>
 8009abc:	1961      	adds	r1, r4, r5
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	6025      	str	r5, [r4, #0]
 8009ac2:	bf18      	it	ne
 8009ac4:	6059      	strne	r1, [r3, #4]
 8009ac6:	6863      	ldr	r3, [r4, #4]
 8009ac8:	bf08      	it	eq
 8009aca:	6031      	streq	r1, [r6, #0]
 8009acc:	5162      	str	r2, [r4, r5]
 8009ace:	604b      	str	r3, [r1, #4]
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f104 060b 	add.w	r6, r4, #11
 8009ad6:	f000 fef9 	bl	800a8cc <__malloc_unlock>
 8009ada:	f026 0607 	bic.w	r6, r6, #7
 8009ade:	1d23      	adds	r3, r4, #4
 8009ae0:	1af2      	subs	r2, r6, r3
 8009ae2:	d0b6      	beq.n	8009a52 <_malloc_r+0x22>
 8009ae4:	1b9b      	subs	r3, r3, r6
 8009ae6:	50a3      	str	r3, [r4, r2]
 8009ae8:	e7b3      	b.n	8009a52 <_malloc_r+0x22>
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	bf0c      	ite	eq
 8009af0:	6032      	streq	r2, [r6, #0]
 8009af2:	605a      	strne	r2, [r3, #4]
 8009af4:	e7ec      	b.n	8009ad0 <_malloc_r+0xa0>
 8009af6:	4623      	mov	r3, r4
 8009af8:	6864      	ldr	r4, [r4, #4]
 8009afa:	e7b2      	b.n	8009a62 <_malloc_r+0x32>
 8009afc:	4634      	mov	r4, r6
 8009afe:	6876      	ldr	r6, [r6, #4]
 8009b00:	e7b9      	b.n	8009a76 <_malloc_r+0x46>
 8009b02:	230c      	movs	r3, #12
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4638      	mov	r0, r7
 8009b08:	f000 fee0 	bl	800a8cc <__malloc_unlock>
 8009b0c:	e7a1      	b.n	8009a52 <_malloc_r+0x22>
 8009b0e:	6025      	str	r5, [r4, #0]
 8009b10:	e7de      	b.n	8009ad0 <_malloc_r+0xa0>
 8009b12:	bf00      	nop
 8009b14:	20002464 	.word	0x20002464

08009b18 <__ssputs_r>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	688e      	ldr	r6, [r1, #8]
 8009b1e:	429e      	cmp	r6, r3
 8009b20:	4682      	mov	sl, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	4690      	mov	r8, r2
 8009b26:	461f      	mov	r7, r3
 8009b28:	d838      	bhi.n	8009b9c <__ssputs_r+0x84>
 8009b2a:	898a      	ldrh	r2, [r1, #12]
 8009b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b30:	d032      	beq.n	8009b98 <__ssputs_r+0x80>
 8009b32:	6825      	ldr	r5, [r4, #0]
 8009b34:	6909      	ldr	r1, [r1, #16]
 8009b36:	eba5 0901 	sub.w	r9, r5, r1
 8009b3a:	6965      	ldr	r5, [r4, #20]
 8009b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b44:	3301      	adds	r3, #1
 8009b46:	444b      	add	r3, r9
 8009b48:	106d      	asrs	r5, r5, #1
 8009b4a:	429d      	cmp	r5, r3
 8009b4c:	bf38      	it	cc
 8009b4e:	461d      	movcc	r5, r3
 8009b50:	0553      	lsls	r3, r2, #21
 8009b52:	d531      	bpl.n	8009bb8 <__ssputs_r+0xa0>
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7ff ff6b 	bl	8009a30 <_malloc_r>
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	b950      	cbnz	r0, 8009b74 <__ssputs_r+0x5c>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	f8ca 3000 	str.w	r3, [sl]
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	464a      	mov	r2, r9
 8009b78:	f7ff fde0 	bl	800973c <memcpy>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	6126      	str	r6, [r4, #16]
 8009b8a:	6165      	str	r5, [r4, #20]
 8009b8c:	444e      	add	r6, r9
 8009b8e:	eba5 0509 	sub.w	r5, r5, r9
 8009b92:	6026      	str	r6, [r4, #0]
 8009b94:	60a5      	str	r5, [r4, #8]
 8009b96:	463e      	mov	r6, r7
 8009b98:	42be      	cmp	r6, r7
 8009b9a:	d900      	bls.n	8009b9e <__ssputs_r+0x86>
 8009b9c:	463e      	mov	r6, r7
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	f000 fe72 	bl	800a88c <memmove>
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	1b9b      	subs	r3, r3, r6
 8009bac:	60a3      	str	r3, [r4, #8]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	4433      	add	r3, r6
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7db      	b.n	8009b70 <__ssputs_r+0x58>
 8009bb8:	462a      	mov	r2, r5
 8009bba:	f000 fed9 	bl	800a970 <_realloc_r>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d1e1      	bne.n	8009b88 <__ssputs_r+0x70>
 8009bc4:	6921      	ldr	r1, [r4, #16]
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f000 fe86 	bl	800a8d8 <_free_r>
 8009bcc:	e7c7      	b.n	8009b5e <__ssputs_r+0x46>
	...

08009bd0 <_svfiprintf_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	4698      	mov	r8, r3
 8009bd6:	898b      	ldrh	r3, [r1, #12]
 8009bd8:	061b      	lsls	r3, r3, #24
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	4607      	mov	r7, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	d50e      	bpl.n	8009c02 <_svfiprintf_r+0x32>
 8009be4:	690b      	ldr	r3, [r1, #16]
 8009be6:	b963      	cbnz	r3, 8009c02 <_svfiprintf_r+0x32>
 8009be8:	2140      	movs	r1, #64	; 0x40
 8009bea:	f7ff ff21 	bl	8009a30 <_malloc_r>
 8009bee:	6028      	str	r0, [r5, #0]
 8009bf0:	6128      	str	r0, [r5, #16]
 8009bf2:	b920      	cbnz	r0, 8009bfe <_svfiprintf_r+0x2e>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e0d1      	b.n	8009da2 <_svfiprintf_r+0x1d2>
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	616b      	str	r3, [r5, #20]
 8009c02:	2300      	movs	r3, #0
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	2320      	movs	r3, #32
 8009c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c10:	2330      	movs	r3, #48	; 0x30
 8009c12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dbc <_svfiprintf_r+0x1ec>
 8009c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c1a:	f04f 0901 	mov.w	r9, #1
 8009c1e:	4623      	mov	r3, r4
 8009c20:	469a      	mov	sl, r3
 8009c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c26:	b10a      	cbz	r2, 8009c2c <_svfiprintf_r+0x5c>
 8009c28:	2a25      	cmp	r2, #37	; 0x25
 8009c2a:	d1f9      	bne.n	8009c20 <_svfiprintf_r+0x50>
 8009c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c30:	d00b      	beq.n	8009c4a <_svfiprintf_r+0x7a>
 8009c32:	465b      	mov	r3, fp
 8009c34:	4622      	mov	r2, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff ff6d 	bl	8009b18 <__ssputs_r>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f000 80aa 	beq.w	8009d98 <_svfiprintf_r+0x1c8>
 8009c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c46:	445a      	add	r2, fp
 8009c48:	9209      	str	r2, [sp, #36]	; 0x24
 8009c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 80a2 	beq.w	8009d98 <_svfiprintf_r+0x1c8>
 8009c54:	2300      	movs	r3, #0
 8009c56:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c5e:	f10a 0a01 	add.w	sl, sl, #1
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	9307      	str	r3, [sp, #28]
 8009c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c6c:	4654      	mov	r4, sl
 8009c6e:	2205      	movs	r2, #5
 8009c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c74:	4851      	ldr	r0, [pc, #324]	; (8009dbc <_svfiprintf_r+0x1ec>)
 8009c76:	f7f6 fa8b 	bl	8000190 <memchr>
 8009c7a:	9a04      	ldr	r2, [sp, #16]
 8009c7c:	b9d8      	cbnz	r0, 8009cb6 <_svfiprintf_r+0xe6>
 8009c7e:	06d0      	lsls	r0, r2, #27
 8009c80:	bf44      	itt	mi
 8009c82:	2320      	movmi	r3, #32
 8009c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c88:	0711      	lsls	r1, r2, #28
 8009c8a:	bf44      	itt	mi
 8009c8c:	232b      	movmi	r3, #43	; 0x2b
 8009c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c92:	f89a 3000 	ldrb.w	r3, [sl]
 8009c96:	2b2a      	cmp	r3, #42	; 0x2a
 8009c98:	d015      	beq.n	8009cc6 <_svfiprintf_r+0xf6>
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	4654      	mov	r4, sl
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	f04f 0c0a 	mov.w	ip, #10
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009caa:	3b30      	subs	r3, #48	; 0x30
 8009cac:	2b09      	cmp	r3, #9
 8009cae:	d94e      	bls.n	8009d4e <_svfiprintf_r+0x17e>
 8009cb0:	b1b0      	cbz	r0, 8009ce0 <_svfiprintf_r+0x110>
 8009cb2:	9207      	str	r2, [sp, #28]
 8009cb4:	e014      	b.n	8009ce0 <_svfiprintf_r+0x110>
 8009cb6:	eba0 0308 	sub.w	r3, r0, r8
 8009cba:	fa09 f303 	lsl.w	r3, r9, r3
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	46a2      	mov	sl, r4
 8009cc4:	e7d2      	b.n	8009c6c <_svfiprintf_r+0x9c>
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	1d19      	adds	r1, r3, #4
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	9103      	str	r1, [sp, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfbb      	ittet	lt
 8009cd2:	425b      	neglt	r3, r3
 8009cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd8:	9307      	strge	r3, [sp, #28]
 8009cda:	9307      	strlt	r3, [sp, #28]
 8009cdc:	bfb8      	it	lt
 8009cde:	9204      	strlt	r2, [sp, #16]
 8009ce0:	7823      	ldrb	r3, [r4, #0]
 8009ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce4:	d10c      	bne.n	8009d00 <_svfiprintf_r+0x130>
 8009ce6:	7863      	ldrb	r3, [r4, #1]
 8009ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cea:	d135      	bne.n	8009d58 <_svfiprintf_r+0x188>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	1d1a      	adds	r2, r3, #4
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	9203      	str	r2, [sp, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb8      	it	lt
 8009cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cfc:	3402      	adds	r4, #2
 8009cfe:	9305      	str	r3, [sp, #20]
 8009d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dcc <_svfiprintf_r+0x1fc>
 8009d04:	7821      	ldrb	r1, [r4, #0]
 8009d06:	2203      	movs	r2, #3
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f7f6 fa41 	bl	8000190 <memchr>
 8009d0e:	b140      	cbz	r0, 8009d22 <_svfiprintf_r+0x152>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	eba0 000a 	sub.w	r0, r0, sl
 8009d16:	fa03 f000 	lsl.w	r0, r3, r0
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	4303      	orrs	r3, r0
 8009d1e:	3401      	adds	r4, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d26:	4826      	ldr	r0, [pc, #152]	; (8009dc0 <_svfiprintf_r+0x1f0>)
 8009d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d2c:	2206      	movs	r2, #6
 8009d2e:	f7f6 fa2f 	bl	8000190 <memchr>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d038      	beq.n	8009da8 <_svfiprintf_r+0x1d8>
 8009d36:	4b23      	ldr	r3, [pc, #140]	; (8009dc4 <_svfiprintf_r+0x1f4>)
 8009d38:	bb1b      	cbnz	r3, 8009d82 <_svfiprintf_r+0x1b2>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	f023 0307 	bic.w	r3, r3, #7
 8009d42:	3308      	adds	r3, #8
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	4433      	add	r3, r6
 8009d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4c:	e767      	b.n	8009c1e <_svfiprintf_r+0x4e>
 8009d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d52:	460c      	mov	r4, r1
 8009d54:	2001      	movs	r0, #1
 8009d56:	e7a5      	b.n	8009ca4 <_svfiprintf_r+0xd4>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	3401      	adds	r4, #1
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4620      	mov	r0, r4
 8009d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6a:	3a30      	subs	r2, #48	; 0x30
 8009d6c:	2a09      	cmp	r2, #9
 8009d6e:	d903      	bls.n	8009d78 <_svfiprintf_r+0x1a8>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0c5      	beq.n	8009d00 <_svfiprintf_r+0x130>
 8009d74:	9105      	str	r1, [sp, #20]
 8009d76:	e7c3      	b.n	8009d00 <_svfiprintf_r+0x130>
 8009d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e7f0      	b.n	8009d64 <_svfiprintf_r+0x194>
 8009d82:	ab03      	add	r3, sp, #12
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	462a      	mov	r2, r5
 8009d88:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <_svfiprintf_r+0x1f8>)
 8009d8a:	a904      	add	r1, sp, #16
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f3af 8000 	nop.w
 8009d92:	1c42      	adds	r2, r0, #1
 8009d94:	4606      	mov	r6, r0
 8009d96:	d1d6      	bne.n	8009d46 <_svfiprintf_r+0x176>
 8009d98:	89ab      	ldrh	r3, [r5, #12]
 8009d9a:	065b      	lsls	r3, r3, #25
 8009d9c:	f53f af2c 	bmi.w	8009bf8 <_svfiprintf_r+0x28>
 8009da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da2:	b01d      	add	sp, #116	; 0x74
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	ab03      	add	r3, sp, #12
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	462a      	mov	r2, r5
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <_svfiprintf_r+0x1f8>)
 8009db0:	a904      	add	r1, sp, #16
 8009db2:	4638      	mov	r0, r7
 8009db4:	f000 f9d4 	bl	800a160 <_printf_i>
 8009db8:	e7eb      	b.n	8009d92 <_svfiprintf_r+0x1c2>
 8009dba:	bf00      	nop
 8009dbc:	0800af9c 	.word	0x0800af9c
 8009dc0:	0800afa6 	.word	0x0800afa6
 8009dc4:	00000000 	.word	0x00000000
 8009dc8:	08009b19 	.word	0x08009b19
 8009dcc:	0800afa2 	.word	0x0800afa2

08009dd0 <__sfputc_r>:
 8009dd0:	6893      	ldr	r3, [r2, #8]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	b410      	push	{r4}
 8009dd8:	6093      	str	r3, [r2, #8]
 8009dda:	da08      	bge.n	8009dee <__sfputc_r+0x1e>
 8009ddc:	6994      	ldr	r4, [r2, #24]
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	db01      	blt.n	8009de6 <__sfputc_r+0x16>
 8009de2:	290a      	cmp	r1, #10
 8009de4:	d103      	bne.n	8009dee <__sfputc_r+0x1e>
 8009de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dea:	f000 bb33 	b.w	800a454 <__swbuf_r>
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	1c58      	adds	r0, r3, #1
 8009df2:	6010      	str	r0, [r2, #0]
 8009df4:	7019      	strb	r1, [r3, #0]
 8009df6:	4608      	mov	r0, r1
 8009df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <__sfputs_r>:
 8009dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e00:	4606      	mov	r6, r0
 8009e02:	460f      	mov	r7, r1
 8009e04:	4614      	mov	r4, r2
 8009e06:	18d5      	adds	r5, r2, r3
 8009e08:	42ac      	cmp	r4, r5
 8009e0a:	d101      	bne.n	8009e10 <__sfputs_r+0x12>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e007      	b.n	8009e20 <__sfputs_r+0x22>
 8009e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e14:	463a      	mov	r2, r7
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7ff ffda 	bl	8009dd0 <__sfputc_r>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d1f3      	bne.n	8009e08 <__sfputs_r+0xa>
 8009e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e24 <_vfiprintf_r>:
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	460d      	mov	r5, r1
 8009e2a:	b09d      	sub	sp, #116	; 0x74
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	4698      	mov	r8, r3
 8009e30:	4606      	mov	r6, r0
 8009e32:	b118      	cbz	r0, 8009e3c <_vfiprintf_r+0x18>
 8009e34:	6983      	ldr	r3, [r0, #24]
 8009e36:	b90b      	cbnz	r3, 8009e3c <_vfiprintf_r+0x18>
 8009e38:	f7ff fd3a 	bl	80098b0 <__sinit>
 8009e3c:	4b89      	ldr	r3, [pc, #548]	; (800a064 <_vfiprintf_r+0x240>)
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	d11b      	bne.n	8009e7a <_vfiprintf_r+0x56>
 8009e42:	6875      	ldr	r5, [r6, #4]
 8009e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e46:	07d9      	lsls	r1, r3, #31
 8009e48:	d405      	bmi.n	8009e56 <_vfiprintf_r+0x32>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	059a      	lsls	r2, r3, #22
 8009e4e:	d402      	bmi.n	8009e56 <_vfiprintf_r+0x32>
 8009e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e52:	f7ff fdcb 	bl	80099ec <__retarget_lock_acquire_recursive>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	071b      	lsls	r3, r3, #28
 8009e5a:	d501      	bpl.n	8009e60 <_vfiprintf_r+0x3c>
 8009e5c:	692b      	ldr	r3, [r5, #16]
 8009e5e:	b9eb      	cbnz	r3, 8009e9c <_vfiprintf_r+0x78>
 8009e60:	4629      	mov	r1, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	f000 fb5a 	bl	800a51c <__swsetup_r>
 8009e68:	b1c0      	cbz	r0, 8009e9c <_vfiprintf_r+0x78>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6c:	07dc      	lsls	r4, r3, #31
 8009e6e:	d50e      	bpl.n	8009e8e <_vfiprintf_r+0x6a>
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	b01d      	add	sp, #116	; 0x74
 8009e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7a:	4b7b      	ldr	r3, [pc, #492]	; (800a068 <_vfiprintf_r+0x244>)
 8009e7c:	429d      	cmp	r5, r3
 8009e7e:	d101      	bne.n	8009e84 <_vfiprintf_r+0x60>
 8009e80:	68b5      	ldr	r5, [r6, #8]
 8009e82:	e7df      	b.n	8009e44 <_vfiprintf_r+0x20>
 8009e84:	4b79      	ldr	r3, [pc, #484]	; (800a06c <_vfiprintf_r+0x248>)
 8009e86:	429d      	cmp	r5, r3
 8009e88:	bf08      	it	eq
 8009e8a:	68f5      	ldreq	r5, [r6, #12]
 8009e8c:	e7da      	b.n	8009e44 <_vfiprintf_r+0x20>
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	0598      	lsls	r0, r3, #22
 8009e92:	d4ed      	bmi.n	8009e70 <_vfiprintf_r+0x4c>
 8009e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e96:	f7ff fdaa 	bl	80099ee <__retarget_lock_release_recursive>
 8009e9a:	e7e9      	b.n	8009e70 <_vfiprintf_r+0x4c>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eaa:	2330      	movs	r3, #48	; 0x30
 8009eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a070 <_vfiprintf_r+0x24c>
 8009eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eb4:	f04f 0901 	mov.w	r9, #1
 8009eb8:	4623      	mov	r3, r4
 8009eba:	469a      	mov	sl, r3
 8009ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec0:	b10a      	cbz	r2, 8009ec6 <_vfiprintf_r+0xa2>
 8009ec2:	2a25      	cmp	r2, #37	; 0x25
 8009ec4:	d1f9      	bne.n	8009eba <_vfiprintf_r+0x96>
 8009ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eca:	d00b      	beq.n	8009ee4 <_vfiprintf_r+0xc0>
 8009ecc:	465b      	mov	r3, fp
 8009ece:	4622      	mov	r2, r4
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ff93 	bl	8009dfe <__sfputs_r>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f000 80aa 	beq.w	800a032 <_vfiprintf_r+0x20e>
 8009ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee0:	445a      	add	r2, fp
 8009ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 80a2 	beq.w	800a032 <_vfiprintf_r+0x20e>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef8:	f10a 0a01 	add.w	sl, sl, #1
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f04:	931a      	str	r3, [sp, #104]	; 0x68
 8009f06:	4654      	mov	r4, sl
 8009f08:	2205      	movs	r2, #5
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4858      	ldr	r0, [pc, #352]	; (800a070 <_vfiprintf_r+0x24c>)
 8009f10:	f7f6 f93e 	bl	8000190 <memchr>
 8009f14:	9a04      	ldr	r2, [sp, #16]
 8009f16:	b9d8      	cbnz	r0, 8009f50 <_vfiprintf_r+0x12c>
 8009f18:	06d1      	lsls	r1, r2, #27
 8009f1a:	bf44      	itt	mi
 8009f1c:	2320      	movmi	r3, #32
 8009f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f22:	0713      	lsls	r3, r2, #28
 8009f24:	bf44      	itt	mi
 8009f26:	232b      	movmi	r3, #43	; 0x2b
 8009f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f30:	2b2a      	cmp	r3, #42	; 0x2a
 8009f32:	d015      	beq.n	8009f60 <_vfiprintf_r+0x13c>
 8009f34:	9a07      	ldr	r2, [sp, #28]
 8009f36:	4654      	mov	r4, sl
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f04f 0c0a 	mov.w	ip, #10
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f44:	3b30      	subs	r3, #48	; 0x30
 8009f46:	2b09      	cmp	r3, #9
 8009f48:	d94e      	bls.n	8009fe8 <_vfiprintf_r+0x1c4>
 8009f4a:	b1b0      	cbz	r0, 8009f7a <_vfiprintf_r+0x156>
 8009f4c:	9207      	str	r2, [sp, #28]
 8009f4e:	e014      	b.n	8009f7a <_vfiprintf_r+0x156>
 8009f50:	eba0 0308 	sub.w	r3, r0, r8
 8009f54:	fa09 f303 	lsl.w	r3, r9, r3
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	46a2      	mov	sl, r4
 8009f5e:	e7d2      	b.n	8009f06 <_vfiprintf_r+0xe2>
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	1d19      	adds	r1, r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	9103      	str	r1, [sp, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bfbb      	ittet	lt
 8009f6c:	425b      	neglt	r3, r3
 8009f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f72:	9307      	strge	r3, [sp, #28]
 8009f74:	9307      	strlt	r3, [sp, #28]
 8009f76:	bfb8      	it	lt
 8009f78:	9204      	strlt	r2, [sp, #16]
 8009f7a:	7823      	ldrb	r3, [r4, #0]
 8009f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f7e:	d10c      	bne.n	8009f9a <_vfiprintf_r+0x176>
 8009f80:	7863      	ldrb	r3, [r4, #1]
 8009f82:	2b2a      	cmp	r3, #42	; 0x2a
 8009f84:	d135      	bne.n	8009ff2 <_vfiprintf_r+0x1ce>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	1d1a      	adds	r2, r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	9203      	str	r2, [sp, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfb8      	it	lt
 8009f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f96:	3402      	adds	r4, #2
 8009f98:	9305      	str	r3, [sp, #20]
 8009f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a080 <_vfiprintf_r+0x25c>
 8009f9e:	7821      	ldrb	r1, [r4, #0]
 8009fa0:	2203      	movs	r2, #3
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	f7f6 f8f4 	bl	8000190 <memchr>
 8009fa8:	b140      	cbz	r0, 8009fbc <_vfiprintf_r+0x198>
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	eba0 000a 	sub.w	r0, r0, sl
 8009fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	4303      	orrs	r3, r0
 8009fb8:	3401      	adds	r4, #1
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc0:	482c      	ldr	r0, [pc, #176]	; (800a074 <_vfiprintf_r+0x250>)
 8009fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fc6:	2206      	movs	r2, #6
 8009fc8:	f7f6 f8e2 	bl	8000190 <memchr>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d03f      	beq.n	800a050 <_vfiprintf_r+0x22c>
 8009fd0:	4b29      	ldr	r3, [pc, #164]	; (800a078 <_vfiprintf_r+0x254>)
 8009fd2:	bb1b      	cbnz	r3, 800a01c <_vfiprintf_r+0x1f8>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	3307      	adds	r3, #7
 8009fd8:	f023 0307 	bic.w	r3, r3, #7
 8009fdc:	3308      	adds	r3, #8
 8009fde:	9303      	str	r3, [sp, #12]
 8009fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe2:	443b      	add	r3, r7
 8009fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe6:	e767      	b.n	8009eb8 <_vfiprintf_r+0x94>
 8009fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fec:	460c      	mov	r4, r1
 8009fee:	2001      	movs	r0, #1
 8009ff0:	e7a5      	b.n	8009f3e <_vfiprintf_r+0x11a>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	3401      	adds	r4, #1
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f04f 0c0a 	mov.w	ip, #10
 8009ffe:	4620      	mov	r0, r4
 800a000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a004:	3a30      	subs	r2, #48	; 0x30
 800a006:	2a09      	cmp	r2, #9
 800a008:	d903      	bls.n	800a012 <_vfiprintf_r+0x1ee>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0c5      	beq.n	8009f9a <_vfiprintf_r+0x176>
 800a00e:	9105      	str	r1, [sp, #20]
 800a010:	e7c3      	b.n	8009f9a <_vfiprintf_r+0x176>
 800a012:	fb0c 2101 	mla	r1, ip, r1, r2
 800a016:	4604      	mov	r4, r0
 800a018:	2301      	movs	r3, #1
 800a01a:	e7f0      	b.n	8009ffe <_vfiprintf_r+0x1da>
 800a01c:	ab03      	add	r3, sp, #12
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	462a      	mov	r2, r5
 800a022:	4b16      	ldr	r3, [pc, #88]	; (800a07c <_vfiprintf_r+0x258>)
 800a024:	a904      	add	r1, sp, #16
 800a026:	4630      	mov	r0, r6
 800a028:	f3af 8000 	nop.w
 800a02c:	4607      	mov	r7, r0
 800a02e:	1c78      	adds	r0, r7, #1
 800a030:	d1d6      	bne.n	8009fe0 <_vfiprintf_r+0x1bc>
 800a032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a034:	07d9      	lsls	r1, r3, #31
 800a036:	d405      	bmi.n	800a044 <_vfiprintf_r+0x220>
 800a038:	89ab      	ldrh	r3, [r5, #12]
 800a03a:	059a      	lsls	r2, r3, #22
 800a03c:	d402      	bmi.n	800a044 <_vfiprintf_r+0x220>
 800a03e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a040:	f7ff fcd5 	bl	80099ee <__retarget_lock_release_recursive>
 800a044:	89ab      	ldrh	r3, [r5, #12]
 800a046:	065b      	lsls	r3, r3, #25
 800a048:	f53f af12 	bmi.w	8009e70 <_vfiprintf_r+0x4c>
 800a04c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a04e:	e711      	b.n	8009e74 <_vfiprintf_r+0x50>
 800a050:	ab03      	add	r3, sp, #12
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	462a      	mov	r2, r5
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <_vfiprintf_r+0x258>)
 800a058:	a904      	add	r1, sp, #16
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 f880 	bl	800a160 <_printf_i>
 800a060:	e7e4      	b.n	800a02c <_vfiprintf_r+0x208>
 800a062:	bf00      	nop
 800a064:	0800af5c 	.word	0x0800af5c
 800a068:	0800af7c 	.word	0x0800af7c
 800a06c:	0800af3c 	.word	0x0800af3c
 800a070:	0800af9c 	.word	0x0800af9c
 800a074:	0800afa6 	.word	0x0800afa6
 800a078:	00000000 	.word	0x00000000
 800a07c:	08009dff 	.word	0x08009dff
 800a080:	0800afa2 	.word	0x0800afa2

0800a084 <_printf_common>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	4616      	mov	r6, r2
 800a08a:	4699      	mov	r9, r3
 800a08c:	688a      	ldr	r2, [r1, #8]
 800a08e:	690b      	ldr	r3, [r1, #16]
 800a090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a094:	4293      	cmp	r3, r2
 800a096:	bfb8      	it	lt
 800a098:	4613      	movlt	r3, r2
 800a09a:	6033      	str	r3, [r6, #0]
 800a09c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	b10a      	cbz	r2, 800a0aa <_printf_common+0x26>
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	0699      	lsls	r1, r3, #26
 800a0ae:	bf42      	ittt	mi
 800a0b0:	6833      	ldrmi	r3, [r6, #0]
 800a0b2:	3302      	addmi	r3, #2
 800a0b4:	6033      	strmi	r3, [r6, #0]
 800a0b6:	6825      	ldr	r5, [r4, #0]
 800a0b8:	f015 0506 	ands.w	r5, r5, #6
 800a0bc:	d106      	bne.n	800a0cc <_printf_common+0x48>
 800a0be:	f104 0a19 	add.w	sl, r4, #25
 800a0c2:	68e3      	ldr	r3, [r4, #12]
 800a0c4:	6832      	ldr	r2, [r6, #0]
 800a0c6:	1a9b      	subs	r3, r3, r2
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	dc26      	bgt.n	800a11a <_printf_common+0x96>
 800a0cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0d0:	1e13      	subs	r3, r2, #0
 800a0d2:	6822      	ldr	r2, [r4, #0]
 800a0d4:	bf18      	it	ne
 800a0d6:	2301      	movne	r3, #1
 800a0d8:	0692      	lsls	r2, r2, #26
 800a0da:	d42b      	bmi.n	800a134 <_printf_common+0xb0>
 800a0dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d01e      	beq.n	800a128 <_printf_common+0xa4>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	68e5      	ldr	r5, [r4, #12]
 800a0ee:	6832      	ldr	r2, [r6, #0]
 800a0f0:	f003 0306 	and.w	r3, r3, #6
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	bf08      	it	eq
 800a0f8:	1aad      	subeq	r5, r5, r2
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	6922      	ldr	r2, [r4, #16]
 800a0fe:	bf0c      	ite	eq
 800a100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a104:	2500      	movne	r5, #0
 800a106:	4293      	cmp	r3, r2
 800a108:	bfc4      	itt	gt
 800a10a:	1a9b      	subgt	r3, r3, r2
 800a10c:	18ed      	addgt	r5, r5, r3
 800a10e:	2600      	movs	r6, #0
 800a110:	341a      	adds	r4, #26
 800a112:	42b5      	cmp	r5, r6
 800a114:	d11a      	bne.n	800a14c <_printf_common+0xc8>
 800a116:	2000      	movs	r0, #0
 800a118:	e008      	b.n	800a12c <_printf_common+0xa8>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4652      	mov	r2, sl
 800a11e:	4649      	mov	r1, r9
 800a120:	4638      	mov	r0, r7
 800a122:	47c0      	blx	r8
 800a124:	3001      	adds	r0, #1
 800a126:	d103      	bne.n	800a130 <_printf_common+0xac>
 800a128:	f04f 30ff 	mov.w	r0, #4294967295
 800a12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a130:	3501      	adds	r5, #1
 800a132:	e7c6      	b.n	800a0c2 <_printf_common+0x3e>
 800a134:	18e1      	adds	r1, r4, r3
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	2030      	movs	r0, #48	; 0x30
 800a13a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a13e:	4422      	add	r2, r4
 800a140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a148:	3302      	adds	r3, #2
 800a14a:	e7c7      	b.n	800a0dc <_printf_common+0x58>
 800a14c:	2301      	movs	r3, #1
 800a14e:	4622      	mov	r2, r4
 800a150:	4649      	mov	r1, r9
 800a152:	4638      	mov	r0, r7
 800a154:	47c0      	blx	r8
 800a156:	3001      	adds	r0, #1
 800a158:	d0e6      	beq.n	800a128 <_printf_common+0xa4>
 800a15a:	3601      	adds	r6, #1
 800a15c:	e7d9      	b.n	800a112 <_printf_common+0x8e>
	...

0800a160 <_printf_i>:
 800a160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	7e0f      	ldrb	r7, [r1, #24]
 800a166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a168:	2f78      	cmp	r7, #120	; 0x78
 800a16a:	4691      	mov	r9, r2
 800a16c:	4680      	mov	r8, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	469a      	mov	sl, r3
 800a172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a176:	d807      	bhi.n	800a188 <_printf_i+0x28>
 800a178:	2f62      	cmp	r7, #98	; 0x62
 800a17a:	d80a      	bhi.n	800a192 <_printf_i+0x32>
 800a17c:	2f00      	cmp	r7, #0
 800a17e:	f000 80d8 	beq.w	800a332 <_printf_i+0x1d2>
 800a182:	2f58      	cmp	r7, #88	; 0x58
 800a184:	f000 80a3 	beq.w	800a2ce <_printf_i+0x16e>
 800a188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a18c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a190:	e03a      	b.n	800a208 <_printf_i+0xa8>
 800a192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a196:	2b15      	cmp	r3, #21
 800a198:	d8f6      	bhi.n	800a188 <_printf_i+0x28>
 800a19a:	a101      	add	r1, pc, #4	; (adr r1, 800a1a0 <_printf_i+0x40>)
 800a19c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1a0:	0800a1f9 	.word	0x0800a1f9
 800a1a4:	0800a20d 	.word	0x0800a20d
 800a1a8:	0800a189 	.word	0x0800a189
 800a1ac:	0800a189 	.word	0x0800a189
 800a1b0:	0800a189 	.word	0x0800a189
 800a1b4:	0800a189 	.word	0x0800a189
 800a1b8:	0800a20d 	.word	0x0800a20d
 800a1bc:	0800a189 	.word	0x0800a189
 800a1c0:	0800a189 	.word	0x0800a189
 800a1c4:	0800a189 	.word	0x0800a189
 800a1c8:	0800a189 	.word	0x0800a189
 800a1cc:	0800a319 	.word	0x0800a319
 800a1d0:	0800a23d 	.word	0x0800a23d
 800a1d4:	0800a2fb 	.word	0x0800a2fb
 800a1d8:	0800a189 	.word	0x0800a189
 800a1dc:	0800a189 	.word	0x0800a189
 800a1e0:	0800a33b 	.word	0x0800a33b
 800a1e4:	0800a189 	.word	0x0800a189
 800a1e8:	0800a23d 	.word	0x0800a23d
 800a1ec:	0800a189 	.word	0x0800a189
 800a1f0:	0800a189 	.word	0x0800a189
 800a1f4:	0800a303 	.word	0x0800a303
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	1d1a      	adds	r2, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	602a      	str	r2, [r5, #0]
 800a200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a208:	2301      	movs	r3, #1
 800a20a:	e0a3      	b.n	800a354 <_printf_i+0x1f4>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	6829      	ldr	r1, [r5, #0]
 800a210:	0606      	lsls	r6, r0, #24
 800a212:	f101 0304 	add.w	r3, r1, #4
 800a216:	d50a      	bpl.n	800a22e <_printf_i+0xce>
 800a218:	680e      	ldr	r6, [r1, #0]
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	2e00      	cmp	r6, #0
 800a21e:	da03      	bge.n	800a228 <_printf_i+0xc8>
 800a220:	232d      	movs	r3, #45	; 0x2d
 800a222:	4276      	negs	r6, r6
 800a224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a228:	485e      	ldr	r0, [pc, #376]	; (800a3a4 <_printf_i+0x244>)
 800a22a:	230a      	movs	r3, #10
 800a22c:	e019      	b.n	800a262 <_printf_i+0x102>
 800a22e:	680e      	ldr	r6, [r1, #0]
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a236:	bf18      	it	ne
 800a238:	b236      	sxthne	r6, r6
 800a23a:	e7ef      	b.n	800a21c <_printf_i+0xbc>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	6820      	ldr	r0, [r4, #0]
 800a240:	1d19      	adds	r1, r3, #4
 800a242:	6029      	str	r1, [r5, #0]
 800a244:	0601      	lsls	r1, r0, #24
 800a246:	d501      	bpl.n	800a24c <_printf_i+0xec>
 800a248:	681e      	ldr	r6, [r3, #0]
 800a24a:	e002      	b.n	800a252 <_printf_i+0xf2>
 800a24c:	0646      	lsls	r6, r0, #25
 800a24e:	d5fb      	bpl.n	800a248 <_printf_i+0xe8>
 800a250:	881e      	ldrh	r6, [r3, #0]
 800a252:	4854      	ldr	r0, [pc, #336]	; (800a3a4 <_printf_i+0x244>)
 800a254:	2f6f      	cmp	r7, #111	; 0x6f
 800a256:	bf0c      	ite	eq
 800a258:	2308      	moveq	r3, #8
 800a25a:	230a      	movne	r3, #10
 800a25c:	2100      	movs	r1, #0
 800a25e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a262:	6865      	ldr	r5, [r4, #4]
 800a264:	60a5      	str	r5, [r4, #8]
 800a266:	2d00      	cmp	r5, #0
 800a268:	bfa2      	ittt	ge
 800a26a:	6821      	ldrge	r1, [r4, #0]
 800a26c:	f021 0104 	bicge.w	r1, r1, #4
 800a270:	6021      	strge	r1, [r4, #0]
 800a272:	b90e      	cbnz	r6, 800a278 <_printf_i+0x118>
 800a274:	2d00      	cmp	r5, #0
 800a276:	d04d      	beq.n	800a314 <_printf_i+0x1b4>
 800a278:	4615      	mov	r5, r2
 800a27a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a27e:	fb03 6711 	mls	r7, r3, r1, r6
 800a282:	5dc7      	ldrb	r7, [r0, r7]
 800a284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a288:	4637      	mov	r7, r6
 800a28a:	42bb      	cmp	r3, r7
 800a28c:	460e      	mov	r6, r1
 800a28e:	d9f4      	bls.n	800a27a <_printf_i+0x11a>
 800a290:	2b08      	cmp	r3, #8
 800a292:	d10b      	bne.n	800a2ac <_printf_i+0x14c>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	07de      	lsls	r6, r3, #31
 800a298:	d508      	bpl.n	800a2ac <_printf_i+0x14c>
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	6861      	ldr	r1, [r4, #4]
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	bfde      	ittt	le
 800a2a2:	2330      	movle	r3, #48	; 0x30
 800a2a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2ac:	1b52      	subs	r2, r2, r5
 800a2ae:	6122      	str	r2, [r4, #16]
 800a2b0:	f8cd a000 	str.w	sl, [sp]
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	aa03      	add	r2, sp, #12
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f7ff fee2 	bl	800a084 <_printf_common>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d14c      	bne.n	800a35e <_printf_i+0x1fe>
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	b004      	add	sp, #16
 800a2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ce:	4835      	ldr	r0, [pc, #212]	; (800a3a4 <_printf_i+0x244>)
 800a2d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2d4:	6829      	ldr	r1, [r5, #0]
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2dc:	6029      	str	r1, [r5, #0]
 800a2de:	061d      	lsls	r5, r3, #24
 800a2e0:	d514      	bpl.n	800a30c <_printf_i+0x1ac>
 800a2e2:	07df      	lsls	r7, r3, #31
 800a2e4:	bf44      	itt	mi
 800a2e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a2ea:	6023      	strmi	r3, [r4, #0]
 800a2ec:	b91e      	cbnz	r6, 800a2f6 <_printf_i+0x196>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	f023 0320 	bic.w	r3, r3, #32
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	2310      	movs	r3, #16
 800a2f8:	e7b0      	b.n	800a25c <_printf_i+0xfc>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	f043 0320 	orr.w	r3, r3, #32
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	2378      	movs	r3, #120	; 0x78
 800a304:	4828      	ldr	r0, [pc, #160]	; (800a3a8 <_printf_i+0x248>)
 800a306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a30a:	e7e3      	b.n	800a2d4 <_printf_i+0x174>
 800a30c:	0659      	lsls	r1, r3, #25
 800a30e:	bf48      	it	mi
 800a310:	b2b6      	uxthmi	r6, r6
 800a312:	e7e6      	b.n	800a2e2 <_printf_i+0x182>
 800a314:	4615      	mov	r5, r2
 800a316:	e7bb      	b.n	800a290 <_printf_i+0x130>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	6826      	ldr	r6, [r4, #0]
 800a31c:	6961      	ldr	r1, [r4, #20]
 800a31e:	1d18      	adds	r0, r3, #4
 800a320:	6028      	str	r0, [r5, #0]
 800a322:	0635      	lsls	r5, r6, #24
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	d501      	bpl.n	800a32c <_printf_i+0x1cc>
 800a328:	6019      	str	r1, [r3, #0]
 800a32a:	e002      	b.n	800a332 <_printf_i+0x1d2>
 800a32c:	0670      	lsls	r0, r6, #25
 800a32e:	d5fb      	bpl.n	800a328 <_printf_i+0x1c8>
 800a330:	8019      	strh	r1, [r3, #0]
 800a332:	2300      	movs	r3, #0
 800a334:	6123      	str	r3, [r4, #16]
 800a336:	4615      	mov	r5, r2
 800a338:	e7ba      	b.n	800a2b0 <_printf_i+0x150>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	602a      	str	r2, [r5, #0]
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	6862      	ldr	r2, [r4, #4]
 800a344:	2100      	movs	r1, #0
 800a346:	4628      	mov	r0, r5
 800a348:	f7f5 ff22 	bl	8000190 <memchr>
 800a34c:	b108      	cbz	r0, 800a352 <_printf_i+0x1f2>
 800a34e:	1b40      	subs	r0, r0, r5
 800a350:	6060      	str	r0, [r4, #4]
 800a352:	6863      	ldr	r3, [r4, #4]
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	2300      	movs	r3, #0
 800a358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a35c:	e7a8      	b.n	800a2b0 <_printf_i+0x150>
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	462a      	mov	r2, r5
 800a362:	4649      	mov	r1, r9
 800a364:	4640      	mov	r0, r8
 800a366:	47d0      	blx	sl
 800a368:	3001      	adds	r0, #1
 800a36a:	d0ab      	beq.n	800a2c4 <_printf_i+0x164>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	079b      	lsls	r3, r3, #30
 800a370:	d413      	bmi.n	800a39a <_printf_i+0x23a>
 800a372:	68e0      	ldr	r0, [r4, #12]
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	4298      	cmp	r0, r3
 800a378:	bfb8      	it	lt
 800a37a:	4618      	movlt	r0, r3
 800a37c:	e7a4      	b.n	800a2c8 <_printf_i+0x168>
 800a37e:	2301      	movs	r3, #1
 800a380:	4632      	mov	r2, r6
 800a382:	4649      	mov	r1, r9
 800a384:	4640      	mov	r0, r8
 800a386:	47d0      	blx	sl
 800a388:	3001      	adds	r0, #1
 800a38a:	d09b      	beq.n	800a2c4 <_printf_i+0x164>
 800a38c:	3501      	adds	r5, #1
 800a38e:	68e3      	ldr	r3, [r4, #12]
 800a390:	9903      	ldr	r1, [sp, #12]
 800a392:	1a5b      	subs	r3, r3, r1
 800a394:	42ab      	cmp	r3, r5
 800a396:	dcf2      	bgt.n	800a37e <_printf_i+0x21e>
 800a398:	e7eb      	b.n	800a372 <_printf_i+0x212>
 800a39a:	2500      	movs	r5, #0
 800a39c:	f104 0619 	add.w	r6, r4, #25
 800a3a0:	e7f5      	b.n	800a38e <_printf_i+0x22e>
 800a3a2:	bf00      	nop
 800a3a4:	0800afad 	.word	0x0800afad
 800a3a8:	0800afbe 	.word	0x0800afbe

0800a3ac <_sbrk_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_sbrk_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f6 fff6 	bl	80013a8 <_sbrk>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_sbrk_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_sbrk_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	2000246c 	.word	0x2000246c

0800a3cc <__sread>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d4:	f000 fafc 	bl	800a9d0 <_read_r>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	bfab      	itete	ge
 800a3dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3de:	89a3      	ldrhlt	r3, [r4, #12]
 800a3e0:	181b      	addge	r3, r3, r0
 800a3e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3e6:	bfac      	ite	ge
 800a3e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ea:	81a3      	strhlt	r3, [r4, #12]
 800a3ec:	bd10      	pop	{r4, pc}

0800a3ee <__swrite>:
 800a3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	898b      	ldrh	r3, [r1, #12]
 800a3f6:	05db      	lsls	r3, r3, #23
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4616      	mov	r6, r2
 800a3fe:	d505      	bpl.n	800a40c <__swrite+0x1e>
 800a400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a404:	2302      	movs	r3, #2
 800a406:	2200      	movs	r2, #0
 800a408:	f000 f9c8 	bl	800a79c <_lseek_r>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	4632      	mov	r2, r6
 800a41a:	463b      	mov	r3, r7
 800a41c:	4628      	mov	r0, r5
 800a41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a422:	f000 b869 	b.w	800a4f8 <_write_r>

0800a426 <__sseek>:
 800a426:	b510      	push	{r4, lr}
 800a428:	460c      	mov	r4, r1
 800a42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42e:	f000 f9b5 	bl	800a79c <_lseek_r>
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	bf15      	itete	ne
 800a438:	6560      	strne	r0, [r4, #84]	; 0x54
 800a43a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a43e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a442:	81a3      	strheq	r3, [r4, #12]
 800a444:	bf18      	it	ne
 800a446:	81a3      	strhne	r3, [r4, #12]
 800a448:	bd10      	pop	{r4, pc}

0800a44a <__sclose>:
 800a44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44e:	f000 b8d3 	b.w	800a5f8 <_close_r>
	...

0800a454 <__swbuf_r>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	460e      	mov	r6, r1
 800a458:	4614      	mov	r4, r2
 800a45a:	4605      	mov	r5, r0
 800a45c:	b118      	cbz	r0, 800a466 <__swbuf_r+0x12>
 800a45e:	6983      	ldr	r3, [r0, #24]
 800a460:	b90b      	cbnz	r3, 800a466 <__swbuf_r+0x12>
 800a462:	f7ff fa25 	bl	80098b0 <__sinit>
 800a466:	4b21      	ldr	r3, [pc, #132]	; (800a4ec <__swbuf_r+0x98>)
 800a468:	429c      	cmp	r4, r3
 800a46a:	d12b      	bne.n	800a4c4 <__swbuf_r+0x70>
 800a46c:	686c      	ldr	r4, [r5, #4]
 800a46e:	69a3      	ldr	r3, [r4, #24]
 800a470:	60a3      	str	r3, [r4, #8]
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	071a      	lsls	r2, r3, #28
 800a476:	d52f      	bpl.n	800a4d8 <__swbuf_r+0x84>
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	b36b      	cbz	r3, 800a4d8 <__swbuf_r+0x84>
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	1ac0      	subs	r0, r0, r3
 800a482:	6963      	ldr	r3, [r4, #20]
 800a484:	b2f6      	uxtb	r6, r6
 800a486:	4283      	cmp	r3, r0
 800a488:	4637      	mov	r7, r6
 800a48a:	dc04      	bgt.n	800a496 <__swbuf_r+0x42>
 800a48c:	4621      	mov	r1, r4
 800a48e:	4628      	mov	r0, r5
 800a490:	f000 f948 	bl	800a724 <_fflush_r>
 800a494:	bb30      	cbnz	r0, 800a4e4 <__swbuf_r+0x90>
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	3b01      	subs	r3, #1
 800a49a:	60a3      	str	r3, [r4, #8]
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	6022      	str	r2, [r4, #0]
 800a4a2:	701e      	strb	r6, [r3, #0]
 800a4a4:	6963      	ldr	r3, [r4, #20]
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	4283      	cmp	r3, r0
 800a4aa:	d004      	beq.n	800a4b6 <__swbuf_r+0x62>
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	07db      	lsls	r3, r3, #31
 800a4b0:	d506      	bpl.n	800a4c0 <__swbuf_r+0x6c>
 800a4b2:	2e0a      	cmp	r6, #10
 800a4b4:	d104      	bne.n	800a4c0 <__swbuf_r+0x6c>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 f933 	bl	800a724 <_fflush_r>
 800a4be:	b988      	cbnz	r0, 800a4e4 <__swbuf_r+0x90>
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <__swbuf_r+0x9c>)
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	d101      	bne.n	800a4ce <__swbuf_r+0x7a>
 800a4ca:	68ac      	ldr	r4, [r5, #8]
 800a4cc:	e7cf      	b.n	800a46e <__swbuf_r+0x1a>
 800a4ce:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <__swbuf_r+0xa0>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	bf08      	it	eq
 800a4d4:	68ec      	ldreq	r4, [r5, #12]
 800a4d6:	e7ca      	b.n	800a46e <__swbuf_r+0x1a>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f81e 	bl	800a51c <__swsetup_r>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d0cb      	beq.n	800a47c <__swbuf_r+0x28>
 800a4e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4e8:	e7ea      	b.n	800a4c0 <__swbuf_r+0x6c>
 800a4ea:	bf00      	nop
 800a4ec:	0800af5c 	.word	0x0800af5c
 800a4f0:	0800af7c 	.word	0x0800af7c
 800a4f4:	0800af3c 	.word	0x0800af3c

0800a4f8 <_write_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d07      	ldr	r5, [pc, #28]	; (800a518 <_write_r+0x20>)
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	4608      	mov	r0, r1
 800a500:	4611      	mov	r1, r2
 800a502:	2200      	movs	r2, #0
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7f6 fefd 	bl	8001306 <_write>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_write_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_write_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	2000246c 	.word	0x2000246c

0800a51c <__swsetup_r>:
 800a51c:	4b32      	ldr	r3, [pc, #200]	; (800a5e8 <__swsetup_r+0xcc>)
 800a51e:	b570      	push	{r4, r5, r6, lr}
 800a520:	681d      	ldr	r5, [r3, #0]
 800a522:	4606      	mov	r6, r0
 800a524:	460c      	mov	r4, r1
 800a526:	b125      	cbz	r5, 800a532 <__swsetup_r+0x16>
 800a528:	69ab      	ldr	r3, [r5, #24]
 800a52a:	b913      	cbnz	r3, 800a532 <__swsetup_r+0x16>
 800a52c:	4628      	mov	r0, r5
 800a52e:	f7ff f9bf 	bl	80098b0 <__sinit>
 800a532:	4b2e      	ldr	r3, [pc, #184]	; (800a5ec <__swsetup_r+0xd0>)
 800a534:	429c      	cmp	r4, r3
 800a536:	d10f      	bne.n	800a558 <__swsetup_r+0x3c>
 800a538:	686c      	ldr	r4, [r5, #4]
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a540:	0719      	lsls	r1, r3, #28
 800a542:	d42c      	bmi.n	800a59e <__swsetup_r+0x82>
 800a544:	06dd      	lsls	r5, r3, #27
 800a546:	d411      	bmi.n	800a56c <__swsetup_r+0x50>
 800a548:	2309      	movs	r3, #9
 800a54a:	6033      	str	r3, [r6, #0]
 800a54c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a550:	81a3      	strh	r3, [r4, #12]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	e03e      	b.n	800a5d6 <__swsetup_r+0xba>
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__swsetup_r+0xd4>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d101      	bne.n	800a562 <__swsetup_r+0x46>
 800a55e:	68ac      	ldr	r4, [r5, #8]
 800a560:	e7eb      	b.n	800a53a <__swsetup_r+0x1e>
 800a562:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <__swsetup_r+0xd8>)
 800a564:	429c      	cmp	r4, r3
 800a566:	bf08      	it	eq
 800a568:	68ec      	ldreq	r4, [r5, #12]
 800a56a:	e7e6      	b.n	800a53a <__swsetup_r+0x1e>
 800a56c:	0758      	lsls	r0, r3, #29
 800a56e:	d512      	bpl.n	800a596 <__swsetup_r+0x7a>
 800a570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a572:	b141      	cbz	r1, 800a586 <__swsetup_r+0x6a>
 800a574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a578:	4299      	cmp	r1, r3
 800a57a:	d002      	beq.n	800a582 <__swsetup_r+0x66>
 800a57c:	4630      	mov	r0, r6
 800a57e:	f000 f9ab 	bl	800a8d8 <_free_r>
 800a582:	2300      	movs	r3, #0
 800a584:	6363      	str	r3, [r4, #52]	; 0x34
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	2300      	movs	r3, #0
 800a590:	6063      	str	r3, [r4, #4]
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f043 0308 	orr.w	r3, r3, #8
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	b94b      	cbnz	r3, 800a5b6 <__swsetup_r+0x9a>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ac:	d003      	beq.n	800a5b6 <__swsetup_r+0x9a>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f000 f92b 	bl	800a80c <__smakebuf_r>
 800a5b6:	89a0      	ldrh	r0, [r4, #12]
 800a5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5bc:	f010 0301 	ands.w	r3, r0, #1
 800a5c0:	d00a      	beq.n	800a5d8 <__swsetup_r+0xbc>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	6963      	ldr	r3, [r4, #20]
 800a5c8:	425b      	negs	r3, r3
 800a5ca:	61a3      	str	r3, [r4, #24]
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b943      	cbnz	r3, 800a5e2 <__swsetup_r+0xc6>
 800a5d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5d4:	d1ba      	bne.n	800a54c <__swsetup_r+0x30>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	0781      	lsls	r1, r0, #30
 800a5da:	bf58      	it	pl
 800a5dc:	6963      	ldrpl	r3, [r4, #20]
 800a5de:	60a3      	str	r3, [r4, #8]
 800a5e0:	e7f4      	b.n	800a5cc <__swsetup_r+0xb0>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e7f7      	b.n	800a5d6 <__swsetup_r+0xba>
 800a5e6:	bf00      	nop
 800a5e8:	2000002c 	.word	0x2000002c
 800a5ec:	0800af5c 	.word	0x0800af5c
 800a5f0:	0800af7c 	.word	0x0800af7c
 800a5f4:	0800af3c 	.word	0x0800af3c

0800a5f8 <_close_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	; (800a614 <_close_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7f6 fe9b 	bl	800133e <_close>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_close_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_close_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	2000246c 	.word	0x2000246c

0800a618 <__sflush_r>:
 800a618:	898a      	ldrh	r2, [r1, #12]
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	4605      	mov	r5, r0
 800a620:	0710      	lsls	r0, r2, #28
 800a622:	460c      	mov	r4, r1
 800a624:	d458      	bmi.n	800a6d8 <__sflush_r+0xc0>
 800a626:	684b      	ldr	r3, [r1, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc05      	bgt.n	800a638 <__sflush_r+0x20>
 800a62c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	dc02      	bgt.n	800a638 <__sflush_r+0x20>
 800a632:	2000      	movs	r0, #0
 800a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d0f9      	beq.n	800a632 <__sflush_r+0x1a>
 800a63e:	2300      	movs	r3, #0
 800a640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a644:	682f      	ldr	r7, [r5, #0]
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	d032      	beq.n	800a6b0 <__sflush_r+0x98>
 800a64a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	075a      	lsls	r2, r3, #29
 800a650:	d505      	bpl.n	800a65e <__sflush_r+0x46>
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	1ac0      	subs	r0, r0, r3
 800a656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a658:	b10b      	cbz	r3, 800a65e <__sflush_r+0x46>
 800a65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65c:	1ac0      	subs	r0, r0, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	4602      	mov	r2, r0
 800a662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a664:	6a21      	ldr	r1, [r4, #32]
 800a666:	4628      	mov	r0, r5
 800a668:	47b0      	blx	r6
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	d106      	bne.n	800a67e <__sflush_r+0x66>
 800a670:	6829      	ldr	r1, [r5, #0]
 800a672:	291d      	cmp	r1, #29
 800a674:	d82c      	bhi.n	800a6d0 <__sflush_r+0xb8>
 800a676:	4a2a      	ldr	r2, [pc, #168]	; (800a720 <__sflush_r+0x108>)
 800a678:	40ca      	lsrs	r2, r1
 800a67a:	07d6      	lsls	r6, r2, #31
 800a67c:	d528      	bpl.n	800a6d0 <__sflush_r+0xb8>
 800a67e:	2200      	movs	r2, #0
 800a680:	6062      	str	r2, [r4, #4]
 800a682:	04d9      	lsls	r1, r3, #19
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	6022      	str	r2, [r4, #0]
 800a688:	d504      	bpl.n	800a694 <__sflush_r+0x7c>
 800a68a:	1c42      	adds	r2, r0, #1
 800a68c:	d101      	bne.n	800a692 <__sflush_r+0x7a>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b903      	cbnz	r3, 800a694 <__sflush_r+0x7c>
 800a692:	6560      	str	r0, [r4, #84]	; 0x54
 800a694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a696:	602f      	str	r7, [r5, #0]
 800a698:	2900      	cmp	r1, #0
 800a69a:	d0ca      	beq.n	800a632 <__sflush_r+0x1a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__sflush_r+0x92>
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 f917 	bl	800a8d8 <_free_r>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ae:	e7c1      	b.n	800a634 <__sflush_r+0x1c>
 800a6b0:	6a21      	ldr	r1, [r4, #32]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b0      	blx	r6
 800a6b8:	1c41      	adds	r1, r0, #1
 800a6ba:	d1c7      	bne.n	800a64c <__sflush_r+0x34>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0c4      	beq.n	800a64c <__sflush_r+0x34>
 800a6c2:	2b1d      	cmp	r3, #29
 800a6c4:	d001      	beq.n	800a6ca <__sflush_r+0xb2>
 800a6c6:	2b16      	cmp	r3, #22
 800a6c8:	d101      	bne.n	800a6ce <__sflush_r+0xb6>
 800a6ca:	602f      	str	r7, [r5, #0]
 800a6cc:	e7b1      	b.n	800a632 <__sflush_r+0x1a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	e7ad      	b.n	800a634 <__sflush_r+0x1c>
 800a6d8:	690f      	ldr	r7, [r1, #16]
 800a6da:	2f00      	cmp	r7, #0
 800a6dc:	d0a9      	beq.n	800a632 <__sflush_r+0x1a>
 800a6de:	0793      	lsls	r3, r2, #30
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	bf08      	it	eq
 800a6e4:	694b      	ldreq	r3, [r1, #20]
 800a6e6:	600f      	str	r7, [r1, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	eba6 0807 	sub.w	r8, r6, r7
 800a6f0:	608b      	str	r3, [r1, #8]
 800a6f2:	f1b8 0f00 	cmp.w	r8, #0
 800a6f6:	dd9c      	ble.n	800a632 <__sflush_r+0x1a>
 800a6f8:	6a21      	ldr	r1, [r4, #32]
 800a6fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6fc:	4643      	mov	r3, r8
 800a6fe:	463a      	mov	r2, r7
 800a700:	4628      	mov	r0, r5
 800a702:	47b0      	blx	r6
 800a704:	2800      	cmp	r0, #0
 800a706:	dc06      	bgt.n	800a716 <__sflush_r+0xfe>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	e78e      	b.n	800a634 <__sflush_r+0x1c>
 800a716:	4407      	add	r7, r0
 800a718:	eba8 0800 	sub.w	r8, r8, r0
 800a71c:	e7e9      	b.n	800a6f2 <__sflush_r+0xda>
 800a71e:	bf00      	nop
 800a720:	20400001 	.word	0x20400001

0800a724 <_fflush_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b913      	cbnz	r3, 800a734 <_fflush_r+0x10>
 800a72e:	2500      	movs	r5, #0
 800a730:	4628      	mov	r0, r5
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	b118      	cbz	r0, 800a73e <_fflush_r+0x1a>
 800a736:	6983      	ldr	r3, [r0, #24]
 800a738:	b90b      	cbnz	r3, 800a73e <_fflush_r+0x1a>
 800a73a:	f7ff f8b9 	bl	80098b0 <__sinit>
 800a73e:	4b14      	ldr	r3, [pc, #80]	; (800a790 <_fflush_r+0x6c>)
 800a740:	429c      	cmp	r4, r3
 800a742:	d11b      	bne.n	800a77c <_fflush_r+0x58>
 800a744:	686c      	ldr	r4, [r5, #4]
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0ef      	beq.n	800a72e <_fflush_r+0xa>
 800a74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d404      	bmi.n	800a75e <_fflush_r+0x3a>
 800a754:	0599      	lsls	r1, r3, #22
 800a756:	d402      	bmi.n	800a75e <_fflush_r+0x3a>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f7ff f947 	bl	80099ec <__retarget_lock_acquire_recursive>
 800a75e:	4628      	mov	r0, r5
 800a760:	4621      	mov	r1, r4
 800a762:	f7ff ff59 	bl	800a618 <__sflush_r>
 800a766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a768:	07da      	lsls	r2, r3, #31
 800a76a:	4605      	mov	r5, r0
 800a76c:	d4e0      	bmi.n	800a730 <_fflush_r+0xc>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	059b      	lsls	r3, r3, #22
 800a772:	d4dd      	bmi.n	800a730 <_fflush_r+0xc>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f7ff f93a 	bl	80099ee <__retarget_lock_release_recursive>
 800a77a:	e7d9      	b.n	800a730 <_fflush_r+0xc>
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <_fflush_r+0x70>)
 800a77e:	429c      	cmp	r4, r3
 800a780:	d101      	bne.n	800a786 <_fflush_r+0x62>
 800a782:	68ac      	ldr	r4, [r5, #8]
 800a784:	e7df      	b.n	800a746 <_fflush_r+0x22>
 800a786:	4b04      	ldr	r3, [pc, #16]	; (800a798 <_fflush_r+0x74>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	bf08      	it	eq
 800a78c:	68ec      	ldreq	r4, [r5, #12]
 800a78e:	e7da      	b.n	800a746 <_fflush_r+0x22>
 800a790:	0800af5c 	.word	0x0800af5c
 800a794:	0800af7c 	.word	0x0800af7c
 800a798:	0800af3c 	.word	0x0800af3c

0800a79c <_lseek_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	; (800a7bc <_lseek_r+0x20>)
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	4608      	mov	r0, r1
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	602a      	str	r2, [r5, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f7f6 fdee 	bl	800138c <_lseek>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_lseek_r+0x1e>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_lseek_r+0x1e>
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	2000246c 	.word	0x2000246c

0800a7c0 <__swhatbuf_r>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	460e      	mov	r6, r1
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	b096      	sub	sp, #88	; 0x58
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	461d      	mov	r5, r3
 800a7d0:	da08      	bge.n	800a7e4 <__swhatbuf_r+0x24>
 800a7d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	061a      	lsls	r2, r3, #24
 800a7dc:	d410      	bmi.n	800a800 <__swhatbuf_r+0x40>
 800a7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e2:	e00e      	b.n	800a802 <__swhatbuf_r+0x42>
 800a7e4:	466a      	mov	r2, sp
 800a7e6:	f000 f905 	bl	800a9f4 <_fstat_r>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	dbf1      	blt.n	800a7d2 <__swhatbuf_r+0x12>
 800a7ee:	9a01      	ldr	r2, [sp, #4]
 800a7f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7f8:	425a      	negs	r2, r3
 800a7fa:	415a      	adcs	r2, r3
 800a7fc:	602a      	str	r2, [r5, #0]
 800a7fe:	e7ee      	b.n	800a7de <__swhatbuf_r+0x1e>
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	2000      	movs	r0, #0
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	b016      	add	sp, #88	; 0x58
 800a808:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a80c <__smakebuf_r>:
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a810:	079d      	lsls	r5, r3, #30
 800a812:	4606      	mov	r6, r0
 800a814:	460c      	mov	r4, r1
 800a816:	d507      	bpl.n	800a828 <__smakebuf_r+0x1c>
 800a818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	2301      	movs	r3, #1
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	b002      	add	sp, #8
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	ab01      	add	r3, sp, #4
 800a82a:	466a      	mov	r2, sp
 800a82c:	f7ff ffc8 	bl	800a7c0 <__swhatbuf_r>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	4605      	mov	r5, r0
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff f8fb 	bl	8009a30 <_malloc_r>
 800a83a:	b948      	cbnz	r0, 800a850 <__smakebuf_r+0x44>
 800a83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a840:	059a      	lsls	r2, r3, #22
 800a842:	d4ef      	bmi.n	800a824 <__smakebuf_r+0x18>
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	f043 0302 	orr.w	r3, r3, #2
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	e7e3      	b.n	800a818 <__smakebuf_r+0xc>
 800a850:	4b0d      	ldr	r3, [pc, #52]	; (800a888 <__smakebuf_r+0x7c>)
 800a852:	62b3      	str	r3, [r6, #40]	; 0x28
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	6020      	str	r0, [r4, #0]
 800a858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	9b00      	ldr	r3, [sp, #0]
 800a860:	6163      	str	r3, [r4, #20]
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	6120      	str	r0, [r4, #16]
 800a866:	b15b      	cbz	r3, 800a880 <__smakebuf_r+0x74>
 800a868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a86c:	4630      	mov	r0, r6
 800a86e:	f000 f8d3 	bl	800aa18 <_isatty_r>
 800a872:	b128      	cbz	r0, 800a880 <__smakebuf_r+0x74>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	89a0      	ldrh	r0, [r4, #12]
 800a882:	4305      	orrs	r5, r0
 800a884:	81a5      	strh	r5, [r4, #12]
 800a886:	e7cd      	b.n	800a824 <__smakebuf_r+0x18>
 800a888:	08009849 	.word	0x08009849

0800a88c <memmove>:
 800a88c:	4288      	cmp	r0, r1
 800a88e:	b510      	push	{r4, lr}
 800a890:	eb01 0402 	add.w	r4, r1, r2
 800a894:	d902      	bls.n	800a89c <memmove+0x10>
 800a896:	4284      	cmp	r4, r0
 800a898:	4623      	mov	r3, r4
 800a89a:	d807      	bhi.n	800a8ac <memmove+0x20>
 800a89c:	1e43      	subs	r3, r0, #1
 800a89e:	42a1      	cmp	r1, r4
 800a8a0:	d008      	beq.n	800a8b4 <memmove+0x28>
 800a8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8aa:	e7f8      	b.n	800a89e <memmove+0x12>
 800a8ac:	4402      	add	r2, r0
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	428a      	cmp	r2, r1
 800a8b2:	d100      	bne.n	800a8b6 <memmove+0x2a>
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8be:	e7f7      	b.n	800a8b0 <memmove+0x24>

0800a8c0 <__malloc_lock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__malloc_lock+0x8>)
 800a8c2:	f7ff b893 	b.w	80099ec <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20002460 	.word	0x20002460

0800a8cc <__malloc_unlock>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__malloc_unlock+0x8>)
 800a8ce:	f7ff b88e 	b.w	80099ee <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20002460 	.word	0x20002460

0800a8d8 <_free_r>:
 800a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d044      	beq.n	800a968 <_free_r+0x90>
 800a8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e2:	9001      	str	r0, [sp, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ea:	bfb8      	it	lt
 800a8ec:	18e4      	addlt	r4, r4, r3
 800a8ee:	f7ff ffe7 	bl	800a8c0 <__malloc_lock>
 800a8f2:	4a1e      	ldr	r2, [pc, #120]	; (800a96c <_free_r+0x94>)
 800a8f4:	9801      	ldr	r0, [sp, #4]
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	b933      	cbnz	r3, 800a908 <_free_r+0x30>
 800a8fa:	6063      	str	r3, [r4, #4]
 800a8fc:	6014      	str	r4, [r2, #0]
 800a8fe:	b003      	add	sp, #12
 800a900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a904:	f7ff bfe2 	b.w	800a8cc <__malloc_unlock>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d908      	bls.n	800a91e <_free_r+0x46>
 800a90c:	6825      	ldr	r5, [r4, #0]
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	428b      	cmp	r3, r1
 800a912:	bf01      	itttt	eq
 800a914:	6819      	ldreq	r1, [r3, #0]
 800a916:	685b      	ldreq	r3, [r3, #4]
 800a918:	1949      	addeq	r1, r1, r5
 800a91a:	6021      	streq	r1, [r4, #0]
 800a91c:	e7ed      	b.n	800a8fa <_free_r+0x22>
 800a91e:	461a      	mov	r2, r3
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	b10b      	cbz	r3, 800a928 <_free_r+0x50>
 800a924:	42a3      	cmp	r3, r4
 800a926:	d9fa      	bls.n	800a91e <_free_r+0x46>
 800a928:	6811      	ldr	r1, [r2, #0]
 800a92a:	1855      	adds	r5, r2, r1
 800a92c:	42a5      	cmp	r5, r4
 800a92e:	d10b      	bne.n	800a948 <_free_r+0x70>
 800a930:	6824      	ldr	r4, [r4, #0]
 800a932:	4421      	add	r1, r4
 800a934:	1854      	adds	r4, r2, r1
 800a936:	42a3      	cmp	r3, r4
 800a938:	6011      	str	r1, [r2, #0]
 800a93a:	d1e0      	bne.n	800a8fe <_free_r+0x26>
 800a93c:	681c      	ldr	r4, [r3, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	6053      	str	r3, [r2, #4]
 800a942:	4421      	add	r1, r4
 800a944:	6011      	str	r1, [r2, #0]
 800a946:	e7da      	b.n	800a8fe <_free_r+0x26>
 800a948:	d902      	bls.n	800a950 <_free_r+0x78>
 800a94a:	230c      	movs	r3, #12
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	e7d6      	b.n	800a8fe <_free_r+0x26>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	1961      	adds	r1, r4, r5
 800a954:	428b      	cmp	r3, r1
 800a956:	bf04      	itt	eq
 800a958:	6819      	ldreq	r1, [r3, #0]
 800a95a:	685b      	ldreq	r3, [r3, #4]
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	bf04      	itt	eq
 800a960:	1949      	addeq	r1, r1, r5
 800a962:	6021      	streq	r1, [r4, #0]
 800a964:	6054      	str	r4, [r2, #4]
 800a966:	e7ca      	b.n	800a8fe <_free_r+0x26>
 800a968:	b003      	add	sp, #12
 800a96a:	bd30      	pop	{r4, r5, pc}
 800a96c:	20002464 	.word	0x20002464

0800a970 <_realloc_r>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	4680      	mov	r8, r0
 800a976:	4614      	mov	r4, r2
 800a978:	460e      	mov	r6, r1
 800a97a:	b921      	cbnz	r1, 800a986 <_realloc_r+0x16>
 800a97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a980:	4611      	mov	r1, r2
 800a982:	f7ff b855 	b.w	8009a30 <_malloc_r>
 800a986:	b92a      	cbnz	r2, 800a994 <_realloc_r+0x24>
 800a988:	f7ff ffa6 	bl	800a8d8 <_free_r>
 800a98c:	4625      	mov	r5, r4
 800a98e:	4628      	mov	r0, r5
 800a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a994:	f000 f850 	bl	800aa38 <_malloc_usable_size_r>
 800a998:	4284      	cmp	r4, r0
 800a99a:	4607      	mov	r7, r0
 800a99c:	d802      	bhi.n	800a9a4 <_realloc_r+0x34>
 800a99e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9a2:	d812      	bhi.n	800a9ca <_realloc_r+0x5a>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff f842 	bl	8009a30 <_malloc_r>
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d0ed      	beq.n	800a98e <_realloc_r+0x1e>
 800a9b2:	42bc      	cmp	r4, r7
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	bf28      	it	cs
 800a9ba:	463a      	movcs	r2, r7
 800a9bc:	f7fe febe 	bl	800973c <memcpy>
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f7ff ff88 	bl	800a8d8 <_free_r>
 800a9c8:	e7e1      	b.n	800a98e <_realloc_r+0x1e>
 800a9ca:	4635      	mov	r5, r6
 800a9cc:	e7df      	b.n	800a98e <_realloc_r+0x1e>
	...

0800a9d0 <_read_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d07      	ldr	r5, [pc, #28]	; (800a9f0 <_read_r+0x20>)
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	4608      	mov	r0, r1
 800a9d8:	4611      	mov	r1, r2
 800a9da:	2200      	movs	r2, #0
 800a9dc:	602a      	str	r2, [r5, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f7f6 fc74 	bl	80012cc <_read>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_read_r+0x1e>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_read_r+0x1e>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	2000246c 	.word	0x2000246c

0800a9f4 <_fstat_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_fstat_r+0x20>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f6 fca8 	bl	8001356 <_fstat>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_fstat_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_fstat_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	2000246c 	.word	0x2000246c

0800aa18 <_isatty_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d06      	ldr	r5, [pc, #24]	; (800aa34 <_isatty_r+0x1c>)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f6 fca7 	bl	8001376 <_isatty>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_isatty_r+0x1a>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_isatty_r+0x1a>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	2000246c 	.word	0x2000246c

0800aa38 <_malloc_usable_size_r>:
 800aa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3c:	1f18      	subs	r0, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfbc      	itt	lt
 800aa42:	580b      	ldrlt	r3, [r1, r0]
 800aa44:	18c0      	addlt	r0, r0, r3
 800aa46:	4770      	bx	lr

0800aa48 <_init>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	bf00      	nop
 800aa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4e:	bc08      	pop	{r3}
 800aa50:	469e      	mov	lr, r3
 800aa52:	4770      	bx	lr

0800aa54 <_fini>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr
