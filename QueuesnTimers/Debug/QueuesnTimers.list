
QueuesnTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000008  08008100  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016f0  20000018  08008110  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001708  08008110  00021708  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a6cb  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000379e  00000000  00000000  0003a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001888  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001740  00000000  00000000  0003f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001f48b  00000000  00000000  00040e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019850  00000000  00000000  0006030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb237  00000000  00000000  00079b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00144d92  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066e8  00000000  00000000  00144de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000018 	.word	0x20000018
 800015c:	00000000 	.word	0x00000000
 8000160:	08007f0c 	.word	0x08007f0c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000001c 	.word	0x2000001c
 800017c:	08007f0c 	.word	0x08007f0c

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fcf9 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f8e1 	bl	80006b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f2:	f000 f935 	bl	8000760 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f9c3 	bl	8000880 <MX_GPIO_Init>
  MX_RTC_Init();
 80004fa:	f000 f94f 	bl	800079c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80004fe:	f000 f973 	bl	80007e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BaseType_t status;

  status = xTaskCreate(menuTask, "Menu-Task", 250, NULL, 2, &hMenu);
 8000502:	4b59      	ldr	r3, [pc, #356]	; (8000668 <main+0x184>)
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2302      	movs	r3, #2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	22fa      	movs	r2, #250	; 0xfa
 800050e:	4957      	ldr	r1, [pc, #348]	; (800066c <main+0x188>)
 8000510:	4857      	ldr	r0, [pc, #348]	; (8000670 <main+0x18c>)
 8000512:	f005 fc1b 	bl	8005d4c <xTaskCreate>
 8000516:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d00a      	beq.n	8000534 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000522:	f383 8811 	msr	BASEPRI, r3
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	f3bf 8f4f 	dsb	sy
 800052e:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000530:	bf00      	nop
 8000532:	e7fe      	b.n	8000532 <main+0x4e>

  status = xTaskCreate(ledTask, "Led-Task", 250, NULL, 2, &hLed);
 8000534:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <main+0x190>)
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2302      	movs	r3, #2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	22fa      	movs	r2, #250	; 0xfa
 8000540:	494d      	ldr	r1, [pc, #308]	; (8000678 <main+0x194>)
 8000542:	484e      	ldr	r0, [pc, #312]	; (800067c <main+0x198>)
 8000544:	f005 fc02 	bl	8005d4c <xTaskCreate>
 8000548:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d00a      	beq.n	8000566 <main+0x82>
        __asm volatile
 8000550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000554:	f383 8811 	msr	BASEPRI, r3
 8000558:	f3bf 8f6f 	isb	sy
 800055c:	f3bf 8f4f 	dsb	sy
 8000560:	617b      	str	r3, [r7, #20]
    }
 8000562:	bf00      	nop
 8000564:	e7fe      	b.n	8000564 <main+0x80>

  status = xTaskCreate(RTCTask, "RTC-Task", 250, NULL, 2, &hRTC);
 8000566:	4b46      	ldr	r3, [pc, #280]	; (8000680 <main+0x19c>)
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2302      	movs	r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	22fa      	movs	r2, #250	; 0xfa
 8000572:	4944      	ldr	r1, [pc, #272]	; (8000684 <main+0x1a0>)
 8000574:	4844      	ldr	r0, [pc, #272]	; (8000688 <main+0x1a4>)
 8000576:	f005 fbe9 	bl	8005d4c <xTaskCreate>
 800057a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d00a      	beq.n	8000598 <main+0xb4>
        __asm volatile
 8000582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000586:	f383 8811 	msr	BASEPRI, r3
 800058a:	f3bf 8f6f 	isb	sy
 800058e:	f3bf 8f4f 	dsb	sy
 8000592:	613b      	str	r3, [r7, #16]
    }
 8000594:	bf00      	nop
 8000596:	e7fe      	b.n	8000596 <main+0xb2>

  status = xTaskCreate(printTask, "Print-Task", 250, NULL, 2, &hPrint);
 8000598:	4b3c      	ldr	r3, [pc, #240]	; (800068c <main+0x1a8>)
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	22fa      	movs	r2, #250	; 0xfa
 80005a4:	493a      	ldr	r1, [pc, #232]	; (8000690 <main+0x1ac>)
 80005a6:	483b      	ldr	r0, [pc, #236]	; (8000694 <main+0x1b0>)
 80005a8:	f005 fbd0 	bl	8005d4c <xTaskCreate>
 80005ac:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0xe6>
        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	60fb      	str	r3, [r7, #12]
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0xe4>

  status = xTaskCreate(commandTask, "Command-Task", 250, NULL, 2, &hCommand);
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <main+0x1b4>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	4931      	ldr	r1, [pc, #196]	; (800069c <main+0x1b8>)
 80005d8:	4831      	ldr	r0, [pc, #196]	; (80006a0 <main+0x1bc>)
 80005da:	f005 fbb7 	bl	8005d4c <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x118>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60bb      	str	r3, [r7, #8]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x116>

  hInputDataQueue = xQueueCreate(10, sizeof(char));
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	200a      	movs	r0, #10
 8000602:	f004 fe57 	bl	80052b4 <xQueueGenericCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <main+0x1c0>)
 800060a:	6013      	str	r3, [r2, #0]
  configASSERT(hInputDataQueue != NULL);
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <main+0x1c0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10a      	bne.n	800062a <main+0x146>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	607b      	str	r3, [r7, #4]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0x144>

  /* We pass a string (a reference to char) to the queue API
   * Since a pointer is unsigned long int we used sizeof(unsigned long int) */
  hPrintQueue = xQueueCreate(10, sizeof(size_t));
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	200a      	movs	r0, #10
 8000630:	f004 fe40 	bl	80052b4 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <main+0x1c4>)
 8000638:	6013      	str	r3, [r2, #0]
  configASSERT(hPrintQueue != NULL);
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <main+0x1c4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10a      	bne.n	8000658 <main+0x174>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	603b      	str	r3, [r7, #0]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0x172>

  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 8000658:	2201      	movs	r2, #1
 800065a:	4914      	ldr	r1, [pc, #80]	; (80006ac <main+0x1c8>)
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <main+0x1cc>)
 800065e:	f002 fd99 	bl	8003194 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000662:	f005 fcb9 	bl	8005fd8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0x182>
 8000668:	200000ec 	.word	0x200000ec
 800066c:	08007f24 	.word	0x08007f24
 8000670:	08000d0d 	.word	0x08000d0d
 8000674:	200000f0 	.word	0x200000f0
 8000678:	08007f30 	.word	0x08007f30
 800067c:	08000d35 	.word	0x08000d35
 8000680:	200000f4 	.word	0x200000f4
 8000684:	08007f3c 	.word	0x08007f3c
 8000688:	08000d3f 	.word	0x08000d3f
 800068c:	200000f8 	.word	0x200000f8
 8000690:	08007f48 	.word	0x08007f48
 8000694:	08000d49 	.word	0x08000d49
 8000698:	200000fc 	.word	0x200000fc
 800069c:	08007f54 	.word	0x08007f54
 80006a0:	08000d53 	.word	0x08000d53
 80006a4:	20000100 	.word	0x20000100
 80006a8:	20000104 	.word	0x20000104
 80006ac:	20000108 	.word	0x20000108
 80006b0:	20000058 	.word	0x20000058

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b098      	sub	sp, #96	; 0x60
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2244      	movs	r2, #68	; 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 fc1a 	bl	8007efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006da:	f000 ff57 	bl	800158c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff fed0 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80006e4:	232f      	movs	r3, #47	; 0x2f
 80006e6:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000708:	2305      	movs	r3, #5
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa97 	bl	8001c48 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000720:	f000 f93e 	bl	80009a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000724:	236f      	movs	r3, #111	; 0x6f
 8000726:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fdb5 	bl	80022b4 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000750:	f000 f926 	bl	80009a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000754:	f002 faa7 	bl	8002ca6 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000758:	bf00      	nop
 800075a:	3760      	adds	r7, #96	; 0x60
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2230      	movs	r2, #48	; 0x30
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fbc5 	bl	8007efc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f999 	bl	8002aba <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800078e:	f000 f907 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000792:	bf00      	nop
 8000794:	3730      	adds	r7, #48	; 0x30
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_RTC_Init+0x44>)
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_RTC_Init+0x48>)
 80007a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_RTC_Init+0x44>)
 80007a8:	2240      	movs	r2, #64	; 0x40
 80007aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_RTC_Init+0x44>)
 80007ae:	227f      	movs	r2, #127	; 0x7f
 80007b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_RTC_Init+0x44>)
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_RTC_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_RTC_Init+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_RTC_Init+0x44>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_RTC_Init+0x44>)
 80007cc:	f002 fa72 	bl	8002cb4 <HAL_RTC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007d6:	f000 f8e3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000034 	.word	0x20000034
 80007e4:	40002800 	.word	0x40002800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_USART1_UART_Init+0x90>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <MX_USART1_UART_Init+0x94>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_USART1_UART_Init+0x90>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_USART1_UART_Init+0x90>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_USART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000832:	f002 fc5f 	bl	80030f4 <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 f8b0 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000844:	f004 fb4f 	bl	8004ee6 <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084e:	f000 f8a7 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000856:	f004 fb84 	bl	8004f62 <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 f89e 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_USART1_UART_Init+0x90>)
 8000866:	f004 fb05 	bl	8004e74 <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f896 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000058 	.word	0x20000058
 800087c:	40013800 	.word	0x40013800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	2004      	movs	r0, #4
 8000896:	f7ff fe0b 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fe08 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fe05 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2010      	movs	r0, #16
 80008a8:	f7ff fe02 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2123      	movs	r1, #35	; 0x23
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <MX_GPIO_Init+0x88>)
 80008b2:	f000 fe53 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f000 fcdf 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80008ce:	2323      	movs	r3, #35	; 0x23
 80008d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_GPIO_Init+0x88>)
 80008e4:	f000 fcd2 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x8c>)
 80008fa:	f000 fcc7 	bl	800128c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	48000400 	.word	0x48000400
 800090c:	48001000 	.word	0x48001000

08000910 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	BaseType_t isQueueFull;
	// return pdFALSE if the queue is not full, or pdTRUE if the queue is full.
	isQueueFull = xQueueIsQueueFullFromISR(hInputDataQueue);
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_UART_RxCpltCallback+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f005 f990 	bl	8005c42 <xQueueIsQueueFullFromISR>
 8000922:	60f8      	str	r0, [r7, #12]
	if(isQueueFull == pdFALSE)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d107      	bne.n	800093a <HAL_UART_RxCpltCallback+0x2a>
	{
		/* Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_RxCpltCallback+0x80>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	4918      	ldr	r1, [pc, #96]	; (8000994 <HAL_UART_RxCpltCallback+0x84>)
 8000934:	f004 fe3e 	bl	80055b4 <xQueueGenericSendFromISR>
 8000938:	e012      	b.n	8000960 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_UART_RxCpltCallback+0x84>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b0a      	cmp	r3, #10
 8000940:	d10e      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* make sure that last data byte of the queue is '\n' */
			// Copy the last received item to the queue into dummy and delete it
			xQueueReceiveFromISR(hInputDataQueue, (void*)&dummy, NULL);
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_UART_RxCpltCallback+0x80>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f107 010b 	add.w	r1, r7, #11
 800094a:	2200      	movs	r2, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f004 ffbb 	bl	80058c8 <xQueueReceiveFromISR>

			// Keep '\n' on the back of the queue
			xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_UART_RxCpltCallback+0x80>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <HAL_UART_RxCpltCallback+0x84>)
 800095c:	f004 fe2a 	bl	80055b4 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
			if(user_data == '\n')
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_UART_RxCpltCallback+0x84>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b0a      	cmp	r3, #10
 8000966:	d10a      	bne.n	800097e <HAL_UART_RxCpltCallback+0x6e>
			{
				xTaskNotifyFromISR(hCommand,0,eNoAction,NULL);
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_UART_RxCpltCallback+0x88>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	2300      	movs	r3, #0
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	f006 f93d 	bl	8006bf8 <xTaskGenericNotifyFromISR>
			}



	/* Enable UART data byte reception again in IT mode */
	  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 800097e:	2201      	movs	r2, #1
 8000980:	4904      	ldr	r1, [pc, #16]	; (8000994 <HAL_UART_RxCpltCallback+0x84>)
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_UART_RxCpltCallback+0x8c>)
 8000984:	f002 fc06 	bl	8003194 <HAL_UART_Receive_IT>



}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000100 	.word	0x20000100
 8000994:	20000108 	.word	0x20000108
 8000998:	200000fc 	.word	0x200000fc
 800099c:	20000058 	.word	0x20000058

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>

080009aa <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80009ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_AHB2_GRP1_EnableClock>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f0:	68fb      	ldr	r3, [r7, #12]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a54:	68fb      	ldr	r3, [r7, #12]
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8000a66:	f006 fe77 	bl	8007758 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2230      	movs	r2, #48	; 0x30
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 fa3b 	bl	8007efc <memset>
  if(hrtc->Instance==RTC)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_RTC_MspInit+0x54>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d115      	bne.n	8000abc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a94:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 f80a 	bl	8002aba <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000aac:	f7ff ff78 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ab0:	f7ff ff7b 	bl	80009aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ab4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ab8:	f7ff ffa1 	bl	80009fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3738      	adds	r7, #56	; 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2230      	movs	r2, #48	; 0x30
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f007 fa07 	bl	8007efc <memset>
  if(huart->Instance==USART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <HAL_UART_MspInit+0x98>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d12e      	bne.n	8000b56 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ffd8 	bl	8002aba <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b10:	f7ff ff46 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b18:	f7ff ff8a 	bl	8000a30 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ff55 	bl	80009cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b34:	2307      	movs	r3, #7
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fba3 	bl	800128c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2106      	movs	r1, #6
 8000b4a:	2024      	movs	r0, #36	; 0x24
 8000b4c:	f000 fab8 	bl	80010c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b50:	2024      	movs	r0, #36	; 0x24
 8000b52:	f000 facf 	bl	80010f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013800 	.word	0x40013800

08000b64 <LL_APB2_GRP1_EnableClock>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b88:	68fb      	ldr	r3, [r7, #12]
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2019      	movs	r0, #25
 8000bae:	f000 fa87 	bl	80010c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 fa9e 	bl	80010f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bbc:	f7ff ffd2 	bl	8000b64 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc0:	f107 0208 	add.w	r2, r7, #8
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fd5e 	bl	800268c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bd0:	f001 fd46 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8000bd4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_InitTick+0x8c>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	3b01      	subs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_InitTick+0x90>)
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <HAL_InitTick+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_InitTick+0x90>)
 8000bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_InitTick+0x90>)
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_InitTick+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_InitTick+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <HAL_InitTick+0x90>)
 8000c06:	f002 f955 	bl	8002eb4 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d104      	bne.n	8000c1a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_InitTick+0x90>)
 8000c12:	f002 f9b1 	bl	8002f78 <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	2000010c 	.word	0x2000010c
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <USART1_IRQHandler+0x10>)
 8000c62:	f002 fae3 	bl	800322c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000058 	.word	0x20000058

08000c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <SystemInit+0x90>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <SystemInit+0x90>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c9c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <SystemInit+0x94>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cba:	f023 0305 	bic.w	r3, r3, #5
 8000cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <SystemInit+0x98>)
 8000cdc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	faf6fefb 	.word	0xfaf6fefb
 8000d08:	22041000 	.word	0x22041000

08000d0c <menuTask>:
void process_command(Command_t* command);

State_t currentProgramState = sMainMenu;

void menuTask(void* parameters)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	const char* entry_message = "=====================\n"
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <menuTask+0x20>)
 8000d16:	60fb      	str	r3, [r7, #12]
									"DATE & TIME --->  1\n"
									"EXIT 		 --->  2\n"
									"ENTER YOUR CHOICE HERE : ";
	while(1)
	{
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <menuTask+0x24>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	2300      	movs	r3, #0
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	f004 fb47 	bl	80053b8 <xQueueGenericSend>
 8000d2a:	e7f5      	b.n	8000d18 <menuTask+0xc>
 8000d2c:	08007f64 	.word	0x08007f64
 8000d30:	20000104 	.word	0x20000104

08000d34 <ledTask>:
	}

}

void ledTask(void* parameters)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	while(1)
 8000d3c:	e7fe      	b.n	8000d3c <ledTask+0x8>

08000d3e <RTCTask>:

	}
}

void RTCTask(void* parameters)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	while(1)
 8000d46:	e7fe      	b.n	8000d46 <RTCTask+0x8>

08000d48 <printTask>:

	}
}

void printTask(void* parameters)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	while(1)
 8000d50:	e7fe      	b.n	8000d50 <printTask+0x8>

08000d52 <commandTask>:

	}
}

 void commandTask(void* parameters)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b088      	sub	sp, #32
 8000d56:	af02      	add	r7, sp, #8
 8000d58:	6078      	str	r0, [r7, #4]
	 //const TickType_t xFrequency = pdMS_TO_TICKS(1000);
	 Command_t command;
		while(1)
		{
			/* TODO: Implement notify wait */
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2300      	movs	r3, #0
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2000      	movs	r0, #0
 8000d68:	f005 fdda 	bl	8006920 <xTaskGenericNotifyWait>
 8000d6c:	6178      	str	r0, [r7, #20]
			if(status == pdTRUE)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d1f2      	bne.n	8000d5a <commandTask+0x8>
			{
				process_command(&command);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f801 	bl	8000d80 <process_command>
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000d7e:	e7ec      	b.n	8000d5a <commandTask+0x8>

08000d80 <process_command>:
			/* TODO: Notify the command to relevant task */
		}
}

 void process_command(Command_t* command)
 {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	6078      	str	r0, [r7, #4]
	 /* Extract the data bytes from the input data queue and form a command */
	 extract_command(command);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f835 	bl	8000df8 <extract_command>

	 switch(currentProgramState)
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <process_command+0x68>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	dc24      	bgt.n	8000de0 <process_command+0x60>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	da18      	bge.n	8000dcc <process_command+0x4c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <process_command+0x24>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d00a      	beq.n	8000db8 <process_command+0x38>
		 /* Notify RTC task with the command */
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
		 break;

	 }
 }
 8000da2:	e01d      	b.n	8000de0 <process_command+0x60>
		 xTaskNotify(hMenu, (uint32_t)command, eSetValueWithOverwrite);
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <process_command+0x6c>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2303      	movs	r3, #3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f005 fe39 	bl	8006a28 <xTaskGenericNotify>
		 break;
 8000db6:	e013      	b.n	8000de0 <process_command+0x60>
		 xTaskNotify(hLed, (uint32_t)command, eSetValueWithOverwrite);
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <process_command+0x70>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f005 fe2f 	bl	8006a28 <xTaskGenericNotify>
		 break;
 8000dca:	e009      	b.n	8000de0 <process_command+0x60>
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <process_command+0x74>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f005 fe25 	bl	8006a28 <xTaskGenericNotify>
		 break;
 8000dde:	bf00      	nop
 }
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000158 	.word	0x20000158
 8000dec:	200000ec 	.word	0x200000ec
 8000df0:	200000f0 	.word	0x200000f0
 8000df4:	200000f4 	.word	0x200000f4

08000df8 <extract_command>:

 int extract_command(Command_t* command)
 {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	 uint8_t item;
	 BaseType_t status;

	 status = uxQueueMessagesWaiting(hInputDataQueue);
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <extract_command+0x70>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fdee 	bl	80059e6 <uxQueueMessagesWaiting>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]
	 if(!status) return -1;
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <extract_command+0x22>
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e022      	b.n	8000e60 <extract_command+0x68>

	 uint8_t i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
	 do
	 {
		 status = xQueueReceive(hInputDataQueue, (void*)&item, 0);
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <extract_command+0x70>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f107 010f 	add.w	r1, r7, #15
 8000e26:	2200      	movs	r2, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fc6d 	bl	8005708 <xQueueReceive>
 8000e2e:	6138      	str	r0, [r7, #16]
		 if(status == pdTRUE) command -> payload[i++] = item;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d106      	bne.n	8000e44 <extract_command+0x4c>
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	75fa      	strb	r2, [r7, #23]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	7bf9      	ldrb	r1, [r7, #15]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	5499      	strb	r1, [r3, r2]
	 }while(item != '\n');
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d1e9      	bne.n	8000e1e <extract_command+0x26>

	 command -> payload[i-1] = '\0';
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	2100      	movs	r1, #0
 8000e52:	54d1      	strb	r1, [r2, r3]
	 command -> len = i-1; /* Save length of the command excluding null char */
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	729a      	strb	r2, [r3, #10]

	 return 0;
 8000e5e:	2300      	movs	r3, #0
 }
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000100 	.word	0x20000100

08000e6c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e6c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e70:	3304      	adds	r3, #4

08000e72 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e72:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e74:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e76:	d3f9      	bcc.n	8000e6c <CopyDataInit>
  bx lr
 8000e78:	4770      	bx	lr

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e7a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e7c:	3004      	adds	r0, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e7e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
  bx lr
 8000e82:	4770      	bx	lr

08000e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff fef2 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopForever+0x6>)
 8000e8e:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <LoopForever+0xa>)
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <LoopForever+0xe>)
 8000e92:	2300      	movs	r3, #0
 8000e94:	f7ff ffed 	bl	8000e72 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
 8000e9a:	490c      	ldr	r1, [pc, #48]	; (8000ecc <LoopForever+0x16>)
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <LoopForever+0x1a>)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f7ff ffe7 	bl	8000e72 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopForever+0x1e>)
 8000ea6:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <LoopForever+0x22>)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f7ff ffe8 	bl	8000e7e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eae:	f006 fff3 	bl	8007e98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000eb2:	f7ff fb17 	bl	80004e4 <main>

08000eb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   r0, =_estack
 8000eb8:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	08008100 	.word	0x08008100
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ec8:	20030000 	.word	0x20030000
 8000ecc:	20030000 	.word	0x20030000
 8000ed0:	08008110 	.word	0x08008110
  INIT_BSS _sbss, _ebss
 8000ed4:	20000018 	.word	0x20000018
 8000ed8:	20001708 	.word	0x20001708

08000edc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_Init+0x3c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_Init+0x3c>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f8d7 	bl	80010aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efc:	200f      	movs	r0, #15
 8000efe:	f7ff fe4b 	bl	8000b98 <HAL_InitTick>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	e001      	b.n	8000f12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0e:	f7ff fda8 	bl	8000a62 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58004000 	.word	0x58004000

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000015c 	.word	0x2000015c

08000f38 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTickPrio+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000000c 	.word	0x2000000c

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff63 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb3 	bl	8001044 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff82 	bl	8000ff0 <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff56 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e04f      	b.n	80011c2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d008      	beq.n	8001140 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e040      	b.n	80011c2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 021c 	and.w	r2, r3, #28
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800118c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d005      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e047      	b.n	8001282 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020e 	bic.w	r2, r2, #14
 8001200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 021c 	and.w	r2, r3, #28
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800123e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001260:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
    }
  }
  return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e146      	b.n	800152a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8138 	beq.w	8001524 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8092 	beq.w	8001524 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x1c8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2c0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00d      	beq.n	8001450 <HAL_GPIO_Init+0x1c4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a46      	ldr	r2, [pc, #280]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1c0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a45      	ldr	r2, [pc, #276]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_GPIO_Init+0x1bc>
 8001444:	2304      	movs	r3, #4
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x1ca>
 8001448:	2307      	movs	r3, #7
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x1ca>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x1ca>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x1ca>
 8001454:	2300      	movs	r3, #0
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001466:	4938      	ldr	r1, [pc, #224]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001498:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 80014f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	f47f aeb1 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48001000 	.word	0x48001000
 8001558:	58000800 	.word	0x58000800

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001578:	e002      	b.n	8001580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	58000400 	.word	0x58000400

080015ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015be:	d101      	bne.n	80015c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_RCC_HSE_Enable>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_RCC_HSE_Disable>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_RCC_HSE_IsReady>:
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161e:	d101      	bne.n	8001624 <LL_RCC_HSE_IsReady+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_RCC_HSE_IsReady+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_RCC_HSI_Enable>:
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_RCC_HSI_Disable>:
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_RCC_HSI_IsReady>:
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d101      	bne.n	8001684 <LL_RCC_HSI_IsReady+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_RCC_HSI_IsReady+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_RCC_LSE_Enable>:
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_RCC_LSE_Disable>:
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_LSE_EnableBypass>:
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_RCC_LSE_DisableBypass>:
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_RCC_LSE_IsReady>:
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b02      	cmp	r3, #2
 8001754:	d101      	bne.n	800175a <LL_RCC_LSE_IsReady+0x18>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_RCC_LSE_IsReady+0x1a>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_RCC_LSI1_Enable>:
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_RCC_LSI1_Disable>:
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_LSI1_IsReady>:
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d101      	bne.n	80017c2 <LL_RCC_LSI1_IsReady+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_RCC_LSI1_IsReady+0x1a>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_RCC_LSI2_Enable>:
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_LSI2_Disable>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_RCC_LSI2_IsReady>:
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b08      	cmp	r3, #8
 8001824:	d101      	bne.n	800182a <LL_RCC_LSI2_IsReady+0x18>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_RCC_LSI2_IsReady+0x1a>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_RCC_LSI2_SetTrimming>:
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	4313      	orrs	r3, r2
 8001854:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_RCC_MSI_Enable>:
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_RCC_MSI_Disable>:
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_RCC_MSI_IsReady>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d101      	bne.n	80018b6 <LL_RCC_MSI_IsReady+0x16>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_RCC_MSI_IsReady+0x18>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_MSI_SetRange>:
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_RCC_MSI_GetRange>:
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2bb0      	cmp	r3, #176	; 0xb0
 8001900:	d901      	bls.n	8001906 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001902:	23b0      	movs	r3, #176	; 0xb0
 8001904:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_RCC_SetSysClkSource>:
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 0203 	bic.w	r2, r3, #3
 8001950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_RCC_GetSysClkSource>:
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_RCC_SetAHBPrescaler>:
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_SetAHB4Prescaler>:
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_RCC_SetAPB1Prescaler>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_SetAPB2Prescaler>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_RCC_GetAHBPrescaler>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_C2_RCC_GetAHBPrescaler>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_GetAHB4Prescaler>:
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_GetAPB1Prescaler>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_GetAPB2Prescaler>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b1c:	d101      	bne.n	8001b22 <LL_RCC_PLL_IsReady+0x18>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <LL_RCC_PLL_IsReady+0x1a>
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0303 	and.w	r3, r3, #3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d101      	bne.n	8001ba8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bc8:	d101      	bne.n	8001bce <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bee:	d101      	bne.n	8001bf4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c12:	d101      	bne.n	8001c18 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c36:	d101      	bne.n	8001c3c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b08d      	sub	sp, #52	; 0x34
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e324      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 808d 	beq.w	8001d82 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c68:	f7ff fe7d 	bl	8001966 <LL_RCC_GetSysClkSource>
 8001c6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6e:	f7ff ff83 	bl	8001b78 <LL_RCC_PLL_GetMainSource>
 8001c72:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3e>
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d147      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d144      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e308      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c96:	f7ff fe28 	bl	80018ea <LL_RCC_MSI_GetRange>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	d914      	bls.n	8001cca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd23 	bl	80026f0 <RCC_SetFlashLatencyFromMSIRange>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e2f7      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe02 	bl	80018c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe26 	bl	8001914 <LL_RCC_MSI_SetCalibTrimming>
 8001cc8:	e013      	b.n	8001cf2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdf7 	bl	80018c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe1b 	bl	8001914 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fd04 	bl	80026f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2d8      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cf2:	f000 fc8b 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4aa4      	ldr	r2, [pc, #656]	; (8001f8c <HAL_RCC_OscConfig+0x344>)
 8001cfa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cfc:	4ba4      	ldr	r3, [pc, #656]	; (8001f90 <HAL_RCC_OscConfig+0x348>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff49 	bl	8000b98 <HAL_InitTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d039      	beq.n	8001d80 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e2c9      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01e      	beq.n	8001d56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d18:	f7ff fda4 	bl	8001864 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f900 	bl	8000f20 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d24:	f7ff f8fc 	bl	8000f20 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e2b6      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d36:	f7ff fdb3 	bl	80018a0 <LL_RCC_MSI_IsReady>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f1      	beq.n	8001d24 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdbc 	bl	80018c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fde0 	bl	8001914 <LL_RCC_MSI_SetCalibTrimming>
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d56:	f7ff fd94 	bl	8001882 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f8e1 	bl	8000f20 <HAL_GetTick>
 8001d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d62:	f7ff f8dd 	bl	8000f20 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e297      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d74:	f7ff fd94 	bl	80018a0 <LL_RCC_MSI_IsReady>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f1      	bne.n	8001d62 <HAL_RCC_OscConfig+0x11a>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d80:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d047      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	f7ff fdea 	bl	8001966 <LL_RCC_GetSysClkSource>
 8001d92:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	f7ff fef0 	bl	8001b78 <LL_RCC_PLL_GetMainSource>
 8001d98:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x164>
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d134      	bne.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e275      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d102      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x180>
 8001dc2:	f7ff fc05 	bl	80015d0 <LL_RCC_HSE_Enable>
 8001dc6:	e001      	b.n	8001dcc <HAL_RCC_OscConfig+0x184>
 8001dc8:	f7ff fc11 	bl	80015ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f8a4 	bl	8000f20 <HAL_GetTick>
 8001dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f8a0 	bl	8000f20 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e25a      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dee:	f7ff fc0d 	bl	800160c <LL_RCC_HSE_IsReady>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f1      	beq.n	8001ddc <HAL_RCC_OscConfig+0x194>
 8001df8:	e011      	b.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f891 	bl	8000f20 <HAL_GetTick>
 8001dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e02:	f7ff f88d 	bl	8000f20 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e247      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e14:	f7ff fbfa 	bl	800160c <LL_RCC_HSE_IsReady>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f1      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d04c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	f7ff fd9c 	bl	8001966 <LL_RCC_GetSysClkSource>
 8001e2e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	f7ff fea2 	bl	8001b78 <LL_RCC_PLL_GetMainSource>
 8001e34:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d10e      	bne.n	8001e60 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e227      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc19 	bl	8001690 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e5e:	e031      	b.n	8001ec4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	f7ff fbe2 	bl	8001630 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f858 	bl	8000f20 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff f854 	bl	8000f20 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e20e      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e86:	f7ff fbf1 	bl	800166c <LL_RCC_HSI_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f1      	beq.n	8001e74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fbfb 	bl	8001690 <LL_RCC_HSI_SetCalibTrimming>
 8001e9a:	e013      	b.n	8001ec4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9c:	f7ff fbd7 	bl	800164e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f83e 	bl	8000f20 <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f83a 	bl	8000f20 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1f4      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eba:	f7ff fbd7 	bl	800166c <LL_RCC_HSI_IsReady>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f1      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a3 	beq.w	8002024 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d076      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d046      	beq.n	8001f80 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ef2:	f7ff fc5a 	bl	80017aa <LL_RCC_LSI1_IsReady>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d113      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001efc:	f7ff fc33 	bl	8001766 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f00:	f7ff f80e 	bl	8000f20 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f08:	f7ff f80a 	bl	8000f20 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1c4      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f1a:	f7ff fc46 	bl	80017aa <LL_RCC_LSI1_IsReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f24:	f7ff fc53 	bl	80017ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fffa 	bl	8000f20 <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f30:	f7fe fff6 	bl	8000f20 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1b0      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f42:	f7ff fc66 	bl	8001812 <LL_RCC_LSI2_IsReady>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f1      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc70 	bl	8001836 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f56:	f7ff fc17 	bl	8001788 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ffe1 	bl	8000f20 <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f62:	f7fe ffdd 	bl	8000f20 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e197      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f74:	f7ff fc19 	bl	80017aa <LL_RCC_LSI1_IsReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f1      	bne.n	8001f62 <HAL_RCC_OscConfig+0x31a>
 8001f7e:	e051      	b.n	8002024 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f80:	f7ff fbf1 	bl	8001766 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffcc 	bl	8000f20 <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f8a:	e00c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f94:	f7fe ffc4 	bl	8000f20 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e17e      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fa6:	f7ff fc00 	bl	80017aa <LL_RCC_LSI1_IsReady>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fb0:	f7ff fc1e 	bl	80017f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fb6:	f7fe ffb3 	bl	8000f20 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e16d      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fc8:	f7ff fc23 	bl	8001812 <LL_RCC_LSI2_IsReady>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f1      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001fd2:	e027      	b.n	8002024 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fd4:	f7ff fc0c 	bl	80017f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7fe ffa2 	bl	8000f20 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fe0:	f7fe ff9e 	bl	8000f20 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e158      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ff2:	f7ff fc0e 	bl	8001812 <LL_RCC_LSI2_IsReady>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f1      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001ffc:	f7ff fbc4 	bl	8001788 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7fe ff8e 	bl	8000f20 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002008:	f7fe ff8a 	bl	8000f20 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e144      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800201a:	f7ff fbc6 	bl	80017aa <LL_RCC_LSI1_IsReady>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f1      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05b      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	4b9e      	ldr	r3, [pc, #632]	; (80022ac <HAL_RCC_OscConfig+0x664>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d114      	bne.n	8002066 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800203c:	f7ff faa6 	bl	800158c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002040:	f7fe ff6e 	bl	8000f20 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7fe ff6a 	bl	8000f20 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e124      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	4b94      	ldr	r3, [pc, #592]	; (80022ac <HAL_RCC_OscConfig+0x664>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x42c>
 800206e:	f7ff fb24 	bl	80016ba <LL_RCC_LSE_Enable>
 8002072:	e00c      	b.n	800208e <HAL_RCC_OscConfig+0x446>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d104      	bne.n	8002086 <HAL_RCC_OscConfig+0x43e>
 800207c:	f7ff fb3f 	bl	80016fe <LL_RCC_LSE_EnableBypass>
 8002080:	f7ff fb1b 	bl	80016ba <LL_RCC_LSE_Enable>
 8002084:	e003      	b.n	800208e <HAL_RCC_OscConfig+0x446>
 8002086:	f7ff fb29 	bl	80016dc <LL_RCC_LSE_Disable>
 800208a:	f7ff fb49 	bl	8001720 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d014      	beq.n	80020c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7fe ff43 	bl	8000f20 <HAL_GetTick>
 800209a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe ff3f 	bl	8000f20 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0f7      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020b4:	f7ff fb45 	bl	8001742 <LL_RCC_LSE_IsReady>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ef      	beq.n	800209e <HAL_RCC_OscConfig+0x456>
 80020be:	e013      	b.n	80020e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe ff2e 	bl	8000f20 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe ff2a 	bl	8000f20 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0e2      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020de:	f7ff fb30 	bl	8001742 <LL_RCC_LSE_IsReady>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ef      	bne.n	80020c8 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80d8 	beq.w	80022a2 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	f7ff fc38 	bl	8001966 <LL_RCC_GetSysClkSource>
 80020f6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	2b02      	cmp	r3, #2
 8002106:	f040 80a6 	bne.w	8002256 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	429a      	cmp	r2, r3
 8002116:	d123      	bne.n	8002160 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d114      	bne.n	8002160 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d10d      	bne.n	8002160 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d054      	beq.n	800220a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d04f      	beq.n	8002206 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002166:	f7ff fcc1 	bl	8001aec <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216a:	f7fe fed9 	bl	8000f20 <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7fe fed5 	bl	8000f20 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e08f      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <HAL_RCC_OscConfig+0x668>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0212      	lsls	r2, r2, #8
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021be:	430a      	orrs	r2, r1
 80021c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021c8:	f7ff fc81 	bl	8001ace <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021dc:	f7fe fea0 	bl	8000f20 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fe9c 	bl	8000f20 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e056      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	e04d      	b.n	80022a2 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e04c      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d144      	bne.n	80022a2 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002218:	f7ff fc59 	bl	8001ace <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222c:	f7fe fe78 	bl	8000f20 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fe74 	bl	8000f20 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e02e      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ef      	beq.n	8002234 <HAL_RCC_OscConfig+0x5ec>
 8002254:	e025      	b.n	80022a2 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	f7ff fc46 	bl	8001aec <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fe5e 	bl	8000f20 <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fe5a 	bl	8000f20 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e014      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ef      	bne.n	8002268 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	60d3      	str	r3, [r2, #12]
 800229c:	e001      	b.n	80022a2 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3734      	adds	r7, #52	; 0x34
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	58000400 	.word	0x58000400
 80022b0:	11c1808c 	.word	0x11c1808c

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e12d      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b98      	ldr	r3, [pc, #608]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d91b      	bls.n	800230e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b95      	ldr	r3, [pc, #596]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4993      	ldr	r1, [pc, #588]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e6:	f7fe fe1b 	bl	8000f20 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022ee:	f7fe fe17 	bl	8000f20 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e111      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002300:	4b8a      	ldr	r3, [pc, #552]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb2d 	bl	800197e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002324:	f7fe fdfc 	bl	8000f20 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800232c:	f7fe fdf8 	bl	8000f20 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0f2      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800233e:	f7ff fc27 	bl	8001b90 <LL_RCC_IsActiveFlag_HPRE>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb24 	bl	80019a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800235e:	f7fe fddf 	bl	8000f20 <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002366:	f7fe fddb 	bl	8000f20 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0d5      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002378:	f7ff fc1c 	bl	8001bb4 <LL_RCC_IsActiveFlag_C2HPRE>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f1      	beq.n	8002366 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fb1d 	bl	80019d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002398:	f7fe fdc2 	bl	8000f20 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023a0:	f7fe fdbe 	bl	8000f20 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0b8      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023b2:	f7ff fc12 	bl	8001bda <LL_RCC_IsActiveFlag_SHDHPRE>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f1      	beq.n	80023a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d016      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb17 	bl	8001a00 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fda5 	bl	8000f20 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023da:	f7fe fda1 	bl	8000f20 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e09b      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023ec:	f7ff fc08 	bl	8001c00 <LL_RCC_IsActiveFlag_PPRE1>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f1      	beq.n	80023da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d017      	beq.n	8002432 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fb0d 	bl	8001a28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800240e:	f7fe fd87 	bl	8000f20 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002416:	f7fe fd83 	bl	8000f20 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e07d      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002428:	f7ff fbfc 	bl	8001c24 <LL_RCC_IsActiveFlag_PPRE2>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f1      	beq.n	8002416 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d043      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d106      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002446:	f7ff f8e1 	bl	800160c <LL_RCC_HSE_IsReady>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11e      	bne.n	800248e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e067      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d106      	bne.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800245c:	f7ff fb55 	bl	8001b0a <LL_RCC_PLL_IsReady>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d113      	bne.n	800248e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e05c      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002472:	f7ff fa15 	bl	80018a0 <LL_RCC_MSI_IsReady>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e051      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002480:	f7ff f8f4 	bl	800166c <LL_RCC_HSI_IsReady>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e04a      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fa53 	bl	800193e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fd42 	bl	8000f20 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fd3e 	bl	8000f20 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e036      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	f7ff fa56 	bl	8001966 <LL_RCC_GetSysClkSource>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d1ec      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d21b      	bcs.n	800250c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 0207 	bic.w	r2, r3, #7
 80024dc:	4913      	ldr	r1, [pc, #76]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe fd1c 	bl	8000f20 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024ec:	f7fe fd18 	bl	8000f20 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e012      	b.n	8002524 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x278>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d1ef      	bne.n	80024ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800250c:	f000 f87e 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002510:	4603      	mov	r3, r0
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_RCC_ClockConfig+0x27c>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002516:	f7fe fd0f 	bl	8000f38 <HAL_GetTickPrio>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fb3b 	bl	8000b98 <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58004000 	.word	0x58004000
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	f7ff fa14 	bl	8001966 <LL_RCC_GetSysClkSource>
 800253e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002546:	f7ff f9d0 	bl	80018ea <LL_RCC_MSI_GetRange>
 800254a:	4603      	mov	r3, r0
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e04b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d102      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e045      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d10a      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800256e:	f7ff f81d 	bl	80015ac <LL_RCC_HSE_IsEnabledDiv2>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_GetSysClockFreq+0xd0>)
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e03a      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e037      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002584:	f7ff faf8 	bl	8001b78 <LL_RCC_PLL_GetMainSource>
 8002588:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d003      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x64>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x6a>
 8002596:	e00d      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCC_GetSysClockFreq+0xd0>)
 800259a:	60bb      	str	r3, [r7, #8]
        break;
 800259c:	e015      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800259e:	f7ff f805 	bl	80015ac <LL_RCC_HSE_IsEnabledDiv2>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025ac:	e00d      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025b0:	60bb      	str	r3, [r7, #8]
        break;
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025b4:	f7ff f999 	bl	80018ea <LL_RCC_MSI_GetRange>
 80025b8:	4603      	mov	r3, r0
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	60bb      	str	r3, [r7, #8]
        break;
 80025c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80025ca:	f7ff fab0 	bl	8001b2e <LL_RCC_PLL_GetN>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fb03 f402 	mul.w	r4, r3, r2
 80025d6:	f7ff fac3 	bl	8001b60 <LL_RCC_PLL_GetDivider>
 80025da:	4603      	mov	r3, r0
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	3301      	adds	r3, #1
 80025e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80025e4:	f7ff fab0 	bl	8001b48 <LL_RCC_PLL_GetR>
 80025e8:	4603      	mov	r3, r0
 80025ea:	0f5b      	lsrs	r3, r3, #29
 80025ec:	3301      	adds	r3, #1
 80025ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80025f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	08008088 	.word	0x08008088
 8002604:	00f42400 	.word	0x00f42400
 8002608:	01e84800 	.word	0x01e84800

0800260c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b598      	push	{r3, r4, r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002610:	f7ff ff90 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8002614:	4604      	mov	r4, r0
 8002616:	f7ff fa1b 	bl	8001a50 <LL_RCC_GetAHBPrescaler>
 800261a:	4603      	mov	r3, r0
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	4a03      	ldr	r2, [pc, #12]	; (8002630 <HAL_RCC_GetHCLKFreq+0x24>)
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd98      	pop	{r3, r4, r7, pc}
 8002630:	08008028 	.word	0x08008028

08002634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002634:	b598      	push	{r3, r4, r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002638:	f7ff ffe8 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800263c:	4604      	mov	r4, r0
 800263e:	f7ff fa2e 	bl	8001a9e <LL_RCC_GetAPB1Prescaler>
 8002642:	4603      	mov	r3, r0
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCC_GetPCLK1Freq+0x28>)
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd98      	pop	{r3, r4, r7, pc}
 800265c:	08008068 	.word	0x08008068

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b598      	push	{r3, r4, r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002664:	f7ff ffd2 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002668:	4604      	mov	r4, r0
 800266a:	f7ff fa24 	bl	8001ab6 <LL_RCC_GetAPB2Prescaler>
 800266e:	4603      	mov	r3, r0
 8002670:	0adb      	lsrs	r3, r3, #11
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd98      	pop	{r3, r4, r7, pc}
 8002688:	08008068 	.word	0x08008068

0800268c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	226f      	movs	r2, #111	; 0x6f
 800269a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800269c:	f7ff f963 	bl	8001966 <LL_RCC_GetSysClkSource>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80026a6:	f7ff f9d3 	bl	8001a50 <LL_RCC_GetAHBPrescaler>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80026b0:	f7ff f9f5 	bl	8001a9e <LL_RCC_GetAPB1Prescaler>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80026ba:	f7ff f9fc 	bl	8001ab6 <LL_RCC_GetAPB2Prescaler>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80026c4:	f7ff f9d0 	bl	8001a68 <LL_C2_RCC_GetAHBPrescaler>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80026ce:	f7ff f9d8 	bl	8001a82 <LL_RCC_GetAHB4Prescaler>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RCC_GetClockConfig+0x60>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0207 	and.w	r2, r3, #7
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58004000 	.word	0x58004000

080026f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2bb0      	cmp	r3, #176	; 0xb0
 80026fc:	d903      	bls.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e007      	b.n	8002716 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002716:	f7ff f9b4 	bl	8001a82 <LL_RCC_GetAHB4Prescaler>
 800271a:	4603      	mov	r3, r0
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	0c9b      	lsrs	r3, r3, #18
 800273a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f80c 	bl	800275c <RCC_SetFlashLatency>
 8002744:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08008088 	.word	0x08008088
 8002754:	08008028 	.word	0x08008028
 8002758:	431bde83 	.word	0x431bde83

0800275c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b08f      	sub	sp, #60	; 0x3c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002766:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <RCC_SetFlashLatency+0x9c>)
 8002768:	f107 041c 	add.w	r4, r7, #28
 800276c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <RCC_SetFlashLatency+0xa0>)
 8002774:	f107 040c 	add.w	r4, r7, #12
 8002778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800277a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002782:	2300      	movs	r3, #0
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	e013      	b.n	80027b0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3338      	adds	r3, #56	; 0x38
 800278e:	443b      	add	r3, r7
 8002790:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d807      	bhi.n	80027aa <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	3338      	adds	r3, #56	; 0x38
 80027a0:	443b      	add	r3, r7
 80027a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80027a8:	e005      	b.n	80027b6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	3301      	adds	r3, #1
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d9e8      	bls.n	8002788 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <RCC_SetFlashLatency+0xa4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <RCC_SetFlashLatency+0xa4>)
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027c6:	f7fe fbab 	bl	8000f20 <HAL_GetTick>
 80027ca:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027cc:	e008      	b.n	80027e0 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ce:	f7fe fba7 	bl	8000f20 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e007      	b.n	80027f0 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <RCC_SetFlashLatency+0xa4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d1ef      	bne.n	80027ce <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	373c      	adds	r7, #60	; 0x3c
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd90      	pop	{r4, r7, pc}
 80027f8:	08007ff0 	.word	0x08007ff0
 80027fc:	08008000 	.word	0x08008000
 8002800:	58004000 	.word	0x58004000

08002804 <LL_RCC_LSE_IsEnabled>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <LL_RCC_LSE_IsEnabled+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_RCC_LSE_IsEnabled+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_RCC_LSE_IsReady>:
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d101      	bne.n	8002840 <LL_RCC_LSE_IsReady+0x18>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <LL_RCC_LSE_IsReady+0x1a>
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_RCC_MSI_EnablePLLMode>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_RCC_SetRFWKPClockSource>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_RCC_SetSMPSClockSource>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f023 0203 	bic.w	r2, r3, #3
 80028a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_RCC_SetSMPSPrescaler>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetUSARTClockSource>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_RCC_SetLPUARTClockSource>:
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_RCC_SetI2CClockSource>:
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002956:	43db      	mvns	r3, r3
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_RCC_SetLPTIMClockSource>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	43db      	mvns	r3, r3
 8002990:	401a      	ands	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_RCC_SetRNGClockSource>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_SetCLK48ClockSource>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_RCC_SetADCClockSource>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_SetRTCClockSource>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_GetRTCClockSource>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_ForceBackupDomainReset>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b088      	sub	sp, #32
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d046      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ad6:	f7ff ffc1 	bl	8002a5c <LL_RCC_GetRTCClockSource>
 8002ada:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d03c      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ae6:	f7fe fd51 	bl	800158c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff9b 	bl	8002a30 <LL_RCC_SetRTCClockSource>
 8002afa:	e02e      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002b06:	f7ff ffb6 	bl	8002a76 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002b0a:	f7ff ffc5 	bl	8002a98 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002b26:	f7ff fe6d 	bl	8002804 <LL_RCC_LSE_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d114      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b30:	f7fe f9f6 	bl	8000f20 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b36:	e00b      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe f9f2 	bl	8000f20 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d902      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	77fb      	strb	r3, [r7, #31]
              break;
 8002b4e:	e004      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b50:	f7ff fe6a 	bl	8002828 <LL_RCC_LSE_IsReady>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d1ee      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	77bb      	strb	r3, [r7, #30]
 8002b5e:	e001      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7ffb      	ldrb	r3, [r7, #31]
 8002b62:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff feb6 	bl	80028e6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fec1 	bl	8002912 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fee9 	bl	8002978 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fede 	bl	8002978 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff feb6 	bl	800293e <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02b      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fed4 	bl	80029ac <LL_RCC_SetRNGClockSource>
 8002c04:	e00a      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fecb 	bl	80029ac <LL_RCC_SetRNGClockSource>
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fede 	bl	80029d8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002c24:	d107      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d011      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fedc 	bl	8002a04 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c54:	d107      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fdf7 	bl	800286a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fe16 	bl	80028be <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fdfd 	bl	8002896 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002caa:	f7ff fdcf 	bl	800284c <LL_RCC_MSI_EnablePLLMode>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e09f      	b.n	8002e06 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fd fec8 	bl	8000a70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ce8:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RTC_Init+0x15c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d07e      	beq.n	8002df2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	22ca      	movs	r2, #202	; 0xca
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2253      	movs	r2, #83	; 0x53
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8ab 	bl	8002e60 <RTC_EnterInitMode>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e067      	b.n	8002df6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d38:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6919      	ldr	r1, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0202 	bic.w	r2, r2, #2
 8002d94:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f829 	bl	8002e14 <HAL_RTC_WaitForSynchro>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	22ff      	movs	r2, #255	; 0xff
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e010      	b.n	8002e06 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40002800 	.word	0x40002800

08002e14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e2c:	f7fe f878 	bl	8000f20 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e32:	e009      	b.n	8002e48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e34:	f7fe f874 	bl	8000f20 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e42:	d901      	bls.n	8002e48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e007      	b.n	8002e58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ee      	beq.n	8002e34 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e80:	f7fe f84e 	bl	8000f20 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e86:	e009      	b.n	8002e9c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e88:	f7fe f84a 	bl	8000f20 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e96:	d901      	bls.n	8002e9c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e007      	b.n	8002eac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ee      	beq.n	8002e88 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e049      	b.n	8002f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f841 	bl	8002f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f000 f88e 	bl	8003014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d001      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e036      	b.n	8002ffe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_TIM_Base_Start_IT+0x94>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x44>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d115      	bne.n	8002fe8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_TIM_Base_Start_IT+0x98>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d015      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0x82>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d011      	beq.n	8002ffa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	e008      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e000      	b.n	8002ffc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	00010007 	.word	0x00010007

08003014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <TIM_Base_SetConfig+0x9c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x20>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <TIM_Base_SetConfig+0x9c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0x42>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <TIM_Base_SetConfig+0x9c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	615a      	str	r2, [r3, #20]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00

080030b4 <LL_RCC_GetUSARTClockSource>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4013      	ands	r3, r2
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_RCC_GetLPUARTClockSource>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4013      	ands	r3, r2
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e042      	b.n	800318c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd fcd5 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2224      	movs	r2, #36	; 0x24
 8003122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fbbc 	bl	80038b4 <UART_SetConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fdd8 	bl	8003d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fe5f 	bl	8003e48 <UART_CheckIdleState>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d137      	bne.n	800321c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_UART_Receive_IT+0x24>
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e030      	b.n	800321e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_UART_Receive_IT+0x94>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d01f      	beq.n	800320c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	613b      	str	r3, [r7, #16]
   return(result);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	69f9      	ldr	r1, [r7, #28]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	61bb      	str	r3, [r7, #24]
   return(result);
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e6      	bne.n	80031da <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	461a      	mov	r2, r3
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 ff2a 	bl	800406c <UART_Start_Receive_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	e000      	b.n	800321e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40008000 	.word	0x40008000

0800322c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0ba      	sub	sp, #232	; 0xe8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003256:	f640 030f 	movw	r3, #2063	; 0x80f
 800325a:	4013      	ands	r3, r2
 800325c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11b      	bne.n	80032a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 82e3 	beq.w	800385c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
      }
      return;
 800329e:	e2dd      	b.n	800385c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8123 	beq.w	80034f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032ae:	4b8d      	ldr	r3, [pc, #564]	; (80034e4 <HAL_UART_IRQHandler+0x2b8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_UART_IRQHandler+0x2bc>)
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8116 	beq.w	80034f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d011      	beq.n	80032f4 <HAL_UART_IRQHandler+0xc8>
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d011      	beq.n	8003324 <HAL_UART_IRQHandler+0xf8>
 8003300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2202      	movs	r2, #2
 8003312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f043 0204 	orr.w	r2, r3, #4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d011      	beq.n	8003354 <HAL_UART_IRQHandler+0x128>
 8003330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2204      	movs	r2, #4
 8003342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800336c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003370:	4b5c      	ldr	r3, [pc, #368]	; (80034e4 <HAL_UART_IRQHandler+0x2b8>)
 8003372:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <HAL_UART_IRQHandler+0x196>
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8249 	beq.w	8003860 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d013      	beq.n	8003402 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d005      	beq.n	8003426 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800341e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d054      	beq.n	80034d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 ff42 	bl	80042b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d146      	bne.n	80034c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800346a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800347e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1d9      	bne.n	800343a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d017      	beq.n	80034c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_UART_IRQHandler+0x2c0>)
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fe94 	bl	80011ce <HAL_DMA_Abort_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80034ba:	4610      	mov	r0, r2
 80034bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034be:	e00f      	b.n	80034e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f9e1 	bl	8003888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c6:	e00b      	b.n	80034e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9dd 	bl	8003888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ce:	e007      	b.n	80034e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f9d9 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80034de:	e1bf      	b.n	8003860 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	bf00      	nop
    return;
 80034e2:	e1bd      	b.n	8003860 <HAL_UART_IRQHandler+0x634>
 80034e4:	10000001 	.word	0x10000001
 80034e8:	04000120 	.word	0x04000120
 80034ec:	0800437d 	.word	0x0800437d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	f040 8153 	bne.w	80037a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 814c 	beq.w	80037a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8145 	beq.w	80037a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	f040 80bb 	bne.w	80036a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800353c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 818f 	beq.w	8003864 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800354c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003550:	429a      	cmp	r2, r3
 8003552:	f080 8187 	bcs.w	8003864 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800355c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8087 	bne.w	8003682 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800359e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1da      	bne.n	8003574 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e1      	bne.n	80035be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3308      	adds	r3, #8
 8003600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800360a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3308      	adds	r3, #8
 800361a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800361e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e3      	bne.n	80035fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003650:	f023 0310 	bic.w	r3, r3, #16
 8003654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003662:	65bb      	str	r3, [r7, #88]	; 0x58
 8003664:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e4      	bne.n	8003640 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fd47 	bl	8001110 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003694:	b29b      	uxth	r3, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	b29b      	uxth	r3, r3
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8fd 	bl	800389c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036a2:	e0df      	b.n	8003864 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80d1 	beq.w	8003868 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80036c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80cc 	beq.w	8003868 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
 80036f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e4      	bne.n	80036d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	623b      	str	r3, [r7, #32]
   return(result);
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800372e:	633a      	str	r2, [r7, #48]	; 0x30
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e1      	bne.n	8003706 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	60fb      	str	r3, [r7, #12]
   return(result);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0310 	bic.w	r3, r3, #16
 800376a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	69b9      	ldr	r1, [r7, #24]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	617b      	str	r3, [r7, #20]
   return(result);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e4      	bne.n	8003756 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f87f 	bl	800389c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800379e:	e063      	b.n	8003868 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_UART_IRQHandler+0x59e>
 80037ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f001 fb38 	bl	8004e38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037c8:	e051      	b.n	800386e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d014      	beq.n	8003800 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80037d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80037e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03a      	beq.n	800386c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
    }
    return;
 80037fe:	e035      	b.n	800386c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <HAL_UART_IRQHandler+0x5f4>
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fdc5 	bl	80043a8 <UART_EndTransmit_IT>
    return;
 800381e:	e026      	b.n	800386e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_UART_IRQHandler+0x614>
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f001 fb11 	bl	8004e60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800383e:	e016      	b.n	800386e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <HAL_UART_IRQHandler+0x642>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003850:	2b00      	cmp	r3, #0
 8003852:	da0c      	bge.n	800386e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f001 faf9 	bl	8004e4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800385a:	e008      	b.n	800386e <HAL_UART_IRQHandler+0x642>
      return;
 800385c:	bf00      	nop
 800385e:	e006      	b.n	800386e <HAL_UART_IRQHandler+0x642>
    return;
 8003860:	bf00      	nop
 8003862:	e004      	b.n	800386e <HAL_UART_IRQHandler+0x642>
      return;
 8003864:	bf00      	nop
 8003866:	e002      	b.n	800386e <HAL_UART_IRQHandler+0x642>
      return;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_UART_IRQHandler+0x642>
    return;
 800386c:	bf00      	nop
  }
}
 800386e:	37e8      	adds	r7, #232	; 0xe8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b08c      	sub	sp, #48	; 0x30
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4313      	orrs	r3, r2
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4baf      	ldr	r3, [pc, #700]	; (8003ba0 <UART_SetConfig+0x2ec>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4aa4      	ldr	r2, [pc, #656]	; (8003ba4 <UART_SetConfig+0x2f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800391c:	4313      	orrs	r3, r2
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800392a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f023 010f 	bic.w	r1, r3, #15
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a95      	ldr	r2, [pc, #596]	; (8003ba8 <UART_SetConfig+0x2f4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d125      	bne.n	80039a4 <UART_SetConfig+0xf0>
 8003958:	2003      	movs	r0, #3
 800395a:	f7ff fbab 	bl	80030b4 <LL_RCC_GetUSARTClockSource>
 800395e:	4603      	mov	r3, r0
 8003960:	2b03      	cmp	r3, #3
 8003962:	d81b      	bhi.n	800399c <UART_SetConfig+0xe8>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0xb8>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398d 	.word	0x0800398d
 8003974:	08003985 	.word	0x08003985
 8003978:	08003995 	.word	0x08003995
 800397c:	2301      	movs	r3, #1
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003982:	e042      	b.n	8003a0a <UART_SetConfig+0x156>
 8003984:	2302      	movs	r3, #2
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398a:	e03e      	b.n	8003a0a <UART_SetConfig+0x156>
 800398c:	2304      	movs	r3, #4
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003992:	e03a      	b.n	8003a0a <UART_SetConfig+0x156>
 8003994:	2308      	movs	r3, #8
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399a:	e036      	b.n	8003a0a <UART_SetConfig+0x156>
 800399c:	2310      	movs	r3, #16
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e032      	b.n	8003a0a <UART_SetConfig+0x156>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7e      	ldr	r2, [pc, #504]	; (8003ba4 <UART_SetConfig+0x2f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d12a      	bne.n	8003a04 <UART_SetConfig+0x150>
 80039ae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80039b2:	f7ff fb8f 	bl	80030d4 <LL_RCC_GetLPUARTClockSource>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039bc:	d01a      	beq.n	80039f4 <UART_SetConfig+0x140>
 80039be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039c2:	d81b      	bhi.n	80039fc <UART_SetConfig+0x148>
 80039c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c8:	d00c      	beq.n	80039e4 <UART_SetConfig+0x130>
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d815      	bhi.n	80039fc <UART_SetConfig+0x148>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <UART_SetConfig+0x128>
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	d008      	beq.n	80039ec <UART_SetConfig+0x138>
 80039da:	e00f      	b.n	80039fc <UART_SetConfig+0x148>
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e2:	e012      	b.n	8003a0a <UART_SetConfig+0x156>
 80039e4:	2302      	movs	r3, #2
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ea:	e00e      	b.n	8003a0a <UART_SetConfig+0x156>
 80039ec:	2304      	movs	r3, #4
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f2:	e00a      	b.n	8003a0a <UART_SetConfig+0x156>
 80039f4:	2308      	movs	r3, #8
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fa:	e006      	b.n	8003a0a <UART_SetConfig+0x156>
 80039fc:	2310      	movs	r3, #16
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a02:	e002      	b.n	8003a0a <UART_SetConfig+0x156>
 8003a04:	2310      	movs	r3, #16
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a65      	ldr	r2, [pc, #404]	; (8003ba4 <UART_SetConfig+0x2f0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	f040 8097 	bne.w	8003b44 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d823      	bhi.n	8003a66 <UART_SetConfig+0x1b2>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0x170>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a67 	.word	0x08003a67
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a67 	.word	0x08003a67
 8003a34:	08003a57 	.word	0x08003a57
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a67 	.word	0x08003a67
 8003a44:	08003a5f 	.word	0x08003a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7fe fdf4 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a4e:	e010      	b.n	8003a72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <UART_SetConfig+0x2f8>)
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe fd6d 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5c:	e009      	b.n	8003a72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a64:	e005      	b.n	8003a72 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 812b 	beq.w	8003cd0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	4a4c      	ldr	r2, [pc, #304]	; (8003bb0 <UART_SetConfig+0x2fc>)
 8003a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a84:	461a      	mov	r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d305      	bcc.n	8003aaa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d903      	bls.n	8003ab2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ab0:	e10e      	b.n	8003cd0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	60fa      	str	r2, [r7, #12]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	4a3c      	ldr	r2, [pc, #240]	; (8003bb0 <UART_SetConfig+0x2fc>)
 8003ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ad4:	f7fc fb54 	bl	8000180 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	020b      	lsls	r3, r1, #8
 8003aea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aee:	0202      	lsls	r2, r0, #8
 8003af0:	6979      	ldr	r1, [r7, #20]
 8003af2:	6849      	ldr	r1, [r1, #4]
 8003af4:	0849      	lsrs	r1, r1, #1
 8003af6:	2000      	movs	r0, #0
 8003af8:	460c      	mov	r4, r1
 8003afa:	4605      	mov	r5, r0
 8003afc:	eb12 0804 	adds.w	r8, r2, r4
 8003b00:	eb43 0905 	adc.w	r9, r3, r5
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	469a      	mov	sl, r3
 8003b0c:	4693      	mov	fp, r2
 8003b0e:	4652      	mov	r2, sl
 8003b10:	465b      	mov	r3, fp
 8003b12:	4640      	mov	r0, r8
 8003b14:	4649      	mov	r1, r9
 8003b16:	f7fc fb33 	bl	8000180 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4613      	mov	r3, r2
 8003b20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b28:	d308      	bcc.n	8003b3c <UART_SetConfig+0x288>
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b30:	d204      	bcs.n	8003b3c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e0c9      	b.n	8003cd0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b42:	e0c5      	b.n	8003cd0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d16d      	bne.n	8003c2a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b52:	3b01      	subs	r3, #1
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d82d      	bhi.n	8003bb4 <UART_SetConfig+0x300>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <UART_SetConfig+0x2ac>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b81 	.word	0x08003b81
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003b8f 	.word	0x08003b8f
 8003b70:	08003bb5 	.word	0x08003bb5
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003bb5 	.word	0x08003bb5
 8003b7c:	08003b97 	.word	0x08003b97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b80:	f7fe fd6e 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b86:	e01b      	b.n	8003bc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <UART_SetConfig+0x2f8>)
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b8c:	e018      	b.n	8003bc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8e:	f7fe fcd1 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b94:	e014      	b.n	8003bc0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b9c:	e010      	b.n	8003bc0 <UART_SetConfig+0x30c>
 8003b9e:	bf00      	nop
 8003ba0:	cfff69f3 	.word	0xcfff69f3
 8003ba4:	40008000 	.word	0x40008000
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	080080c8 	.word	0x080080c8
      default:
        pclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8084 	beq.w	8003cd0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <UART_SetConfig+0x448>)
 8003bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bda:	005a      	lsls	r2, r3, #1
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	441a      	add	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2b0f      	cmp	r3, #15
 8003bf2:	d916      	bls.n	8003c22 <UART_SetConfig+0x36e>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfa:	d212      	bcs.n	8003c22 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f023 030f 	bic.w	r3, r3, #15
 8003c04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	8bfb      	ldrh	r3, [r7, #30]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	8bfa      	ldrh	r2, [r7, #30]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	e056      	b.n	8003cd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c28:	e052      	b.n	8003cd0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	d822      	bhi.n	8003c7a <UART_SetConfig+0x3c6>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <UART_SetConfig+0x388>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c5d 	.word	0x08003c5d
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c7b 	.word	0x08003c7b
 8003c48:	08003c6b 	.word	0x08003c6b
 8003c4c:	08003c7b 	.word	0x08003c7b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c7b 	.word	0x08003c7b
 8003c58:	08003c73 	.word	0x08003c73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c5c:	f7fe fd00 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c62:	e010      	b.n	8003c86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c64:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <UART_SetConfig+0x44c>)
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c68:	e00d      	b.n	8003c86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6a:	f7fe fc63 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c70:	e009      	b.n	8003c86 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c78:	e005      	b.n	8003c86 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c84:	bf00      	nop
    }

    if (pclk != 0U)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d021      	beq.n	8003cd0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <UART_SetConfig+0x448>)
 8003c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	441a      	add	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d909      	bls.n	8003cca <UART_SetConfig+0x416>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d205      	bcs.n	8003cca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
 8003cc8:	e002      	b.n	8003cd0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3730      	adds	r7, #48	; 0x30
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	080080c8 	.word	0x080080c8
 8003d00:	00f42400 	.word	0x00f42400

08003d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01a      	beq.n	8003e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e02:	d10a      	bne.n	8003e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b098      	sub	sp, #96	; 0x60
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e58:	f7fd f862 	bl	8000f20 <HAL_GetTick>
 8003e5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d12f      	bne.n	8003ecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f88e 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d022      	beq.n	8003ecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e6      	bne.n	8003e86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e063      	b.n	8003f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d149      	bne.n	8003f6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f857 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d03c      	beq.n	8003f6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	623b      	str	r3, [r7, #32]
   return(result);
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
 8003f14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f46:	61fa      	str	r2, [r7, #28]
 8003f48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	617b      	str	r3, [r7, #20]
   return(result);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e012      	b.n	8003f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3758      	adds	r7, #88	; 0x58
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fac:	e049      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d045      	beq.n	8004042 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fc ffb3 	bl	8000f20 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e048      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d031      	beq.n	8004042 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d110      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f95b 	bl	80042b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e029      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401c:	d111      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f941 	bl	80042b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e00f      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d0a6      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406c:	b480      	push	{r7}
 800406e:	b0a3      	sub	sp, #140	; 0x8c
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	d10e      	bne.n	80040be <UART_Start_Receive_IT+0x52>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <UART_Start_Receive_IT+0x48>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040b2:	e02d      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	22ff      	movs	r2, #255	; 0xff
 80040b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040bc:	e028      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10d      	bne.n	80040e2 <UART_Start_Receive_IT+0x76>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <UART_Start_Receive_IT+0x6c>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040d6:	e01b      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	227f      	movs	r2, #127	; 0x7f
 80040dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040e0:	e016      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ea:	d10d      	bne.n	8004108 <UART_Start_Receive_IT+0x9c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <UART_Start_Receive_IT+0x92>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	227f      	movs	r2, #127	; 0x7f
 80040f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040fc:	e008      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	223f      	movs	r2, #63	; 0x3f
 8004102:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004106:	e003      	b.n	8004110 <UART_Start_Receive_IT+0xa4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004144:	673a      	str	r2, [r7, #112]	; 0x70
 8004146:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800414a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d14f      	bne.n	8004202 <UART_Start_Receive_IT+0x196>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	429a      	cmp	r2, r3
 800416c:	d349      	bcc.n	8004202 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d107      	bne.n	8004188 <UART_Start_Receive_IT+0x11c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a47      	ldr	r2, [pc, #284]	; (80042a0 <UART_Start_Receive_IT+0x234>)
 8004184:	675a      	str	r2, [r3, #116]	; 0x74
 8004186:	e002      	b.n	800418e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a46      	ldr	r2, [pc, #280]	; (80042a4 <UART_Start_Receive_IT+0x238>)
 800418c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e4      	bne.n	8004196 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80041ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_Start_Receive_IT+0x160>
 8004200:	e046      	b.n	8004290 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420a:	d107      	bne.n	800421c <UART_Start_Receive_IT+0x1b0>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a24      	ldr	r2, [pc, #144]	; (80042a8 <UART_Start_Receive_IT+0x23c>)
 8004218:	675a      	str	r2, [r3, #116]	; 0x74
 800421a:	e002      	b.n	8004222 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a23      	ldr	r2, [pc, #140]	; (80042ac <UART_Start_Receive_IT+0x240>)
 8004220:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800423e:	677b      	str	r3, [r7, #116]	; 0x74
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_Start_Receive_IT+0x1be>
 800425c:	e018      	b.n	8004290 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f043 0320 	orr.w	r3, r3, #32
 8004272:	67bb      	str	r3, [r7, #120]	; 0x78
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	61bb      	str	r3, [r7, #24]
   return(result);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	378c      	adds	r7, #140	; 0x8c
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	08004ad1 	.word	0x08004ad1
 80042a4:	08004771 	.word	0x08004771
 80042a8:	080045b9 	.word	0x080045b9
 80042ac:	08004401 	.word	0x08004401

080042b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b095      	sub	sp, #84	; 0x54
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d6:	643b      	str	r3, [r7, #64]	; 0x40
 80042d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	64bb      	str	r3, [r7, #72]	; 0x48
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800430e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d118      	bne.n	800435c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	60bb      	str	r3, [r7, #8]
   return(result);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004370:	bf00      	nop
 8004372:	3754      	adds	r7, #84	; 0x54
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fa74 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e6      	bne.n	80043b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fa3f 	bl	8003874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f6:	bf00      	nop
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b09c      	sub	sp, #112	; 0x70
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800440e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	2b22      	cmp	r3, #34	; 0x22
 800441a:	f040 80be 	bne.w	800459a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004432:	b2da      	uxtb	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	400a      	ands	r2, r1
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 80a1 	bne.w	80045aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800447c:	66bb      	str	r3, [r7, #104]	; 0x68
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004486:	65bb      	str	r3, [r7, #88]	; 0x58
 8004488:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800448c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	667b      	str	r3, [r7, #100]	; 0x64
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044ba:	647a      	str	r2, [r7, #68]	; 0x44
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <UART_RxISR_8BIT+0x1b4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d01f      	beq.n	800452c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	623b      	str	r3, [r7, #32]
   return(result);
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800450e:	663b      	str	r3, [r7, #96]	; 0x60
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d12e      	bne.n	8004592 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	617b      	str	r3, [r7, #20]
   return(result);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d103      	bne.n	8004582 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2210      	movs	r2, #16
 8004580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff f986 	bl	800389c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004590:	e00b      	b.n	80045aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc f9bc 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 8004598:	e007      	b.n	80045aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0208 	orr.w	r2, r2, #8
 80045a8:	619a      	str	r2, [r3, #24]
}
 80045aa:	bf00      	nop
 80045ac:	3770      	adds	r7, #112	; 0x70
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40008000 	.word	0x40008000

080045b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b09c      	sub	sp, #112	; 0x70
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80045c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	2b22      	cmp	r3, #34	; 0x22
 80045d2:	f040 80be 	bne.w	8004752 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80045e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80045ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 80a1 	bne.w	8004762 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004634:	667b      	str	r3, [r7, #100]	; 0x64
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
 8004640:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e6      	bne.n	8004620 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	663b      	str	r3, [r7, #96]	; 0x60
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004672:	643a      	str	r2, [r7, #64]	; 0x40
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e5      	bne.n	8004652 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a33      	ldr	r2, [pc, #204]	; (800476c <UART_RxISR_16BIT+0x1b4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d01f      	beq.n	80046e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d018      	beq.n	80046e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d12e      	bne.n	800474a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0310 	bic.w	r3, r3, #16
 8004706:	65bb      	str	r3, [r7, #88]	; 0x58
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	613b      	str	r3, [r7, #16]
   return(result);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e6      	bne.n	80046f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b10      	cmp	r3, #16
 8004730:	d103      	bne.n	800473a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2210      	movs	r2, #16
 8004738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff f8aa 	bl	800389c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004748:	e00b      	b.n	8004762 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc f8e0 	bl	8000910 <HAL_UART_RxCpltCallback>
}
 8004750:	e007      	b.n	8004762 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0208 	orr.w	r2, r2, #8
 8004760:	619a      	str	r2, [r3, #24]
}
 8004762:	bf00      	nop
 8004764:	3770      	adds	r7, #112	; 0x70
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40008000 	.word	0x40008000

08004770 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0ac      	sub	sp, #176	; 0xb0
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800477e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a6:	2b22      	cmp	r3, #34	; 0x22
 80047a8:	f040 8182 	bne.w	8004ab0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047b2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047b6:	e125      	b.n	8004a04 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80047c6:	b2d9      	uxtb	r1, r3
 80047c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	400a      	ands	r2, r1
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80047fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d053      	beq.n	80048b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800480a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2202      	movs	r2, #2
 8004858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2204      	movs	r2, #4
 8004888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f043 0202 	orr.w	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fe ffef 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 80a2 	bne.w	8004a04 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048e4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80048e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80048f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e4      	bne.n	80048c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800491e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004920:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004924:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800492c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e1      	bne.n	80048f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5f      	ldr	r2, [pc, #380]	; (8004ac8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d021      	beq.n	8004994 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01a      	beq.n	8004994 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800496c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004980:	657b      	str	r3, [r7, #84]	; 0x54
 8004982:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004986:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e4      	bne.n	800495e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d130      	bne.n	80049fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
 80049c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e4      	bne.n	80049a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d103      	bne.n	80049ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2210      	movs	r2, #16
 80049ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fe ff50 	bl	800389c <HAL_UARTEx_RxEventCallback>
 80049fc:	e002      	b.n	8004a04 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fb ff86 	bl	8000910 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a04:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f aecf 	bne.w	80047b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d049      	beq.n	8004ac0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d242      	bcs.n	8004ac0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e3      	bne.n	8004a3a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004a76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f043 0320 	orr.w	r3, r3, #32
 8004a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e4      	bne.n	8004a78 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aae:	e007      	b.n	8004ac0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0208 	orr.w	r2, r2, #8
 8004abe:	619a      	str	r2, [r3, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	37b0      	adds	r7, #176	; 0xb0
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	08004401 	.word	0x08004401

08004ad0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b0ae      	sub	sp, #184	; 0xb8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ade:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b06:	2b22      	cmp	r3, #34	; 0x22
 8004b08:	f040 8186 	bne.w	8004e18 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b12:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b16:	e129      	b.n	8004d6c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004b2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004b2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d053      	beq.n	8004c16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d011      	beq.n	8004b9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8004b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d011      	beq.n	8004bce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2204      	movs	r2, #4
 8004bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f043 0202 	orr.w	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fe fe3d 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 80a4 	bne.w	8004d6c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e2      	bne.n	8004c24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5f      	ldr	r2, [pc, #380]	; (8004e30 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d021      	beq.n	8004cfc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e4      	bne.n	8004cc6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d130      	bne.n	8004d66 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d103      	bne.n	8004d56 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe fd9c 	bl	800389c <HAL_UARTEx_RxEventCallback>
 8004d64:	e002      	b.n	8004d6c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fb fdd2 	bl	8000910 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d6c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f aecb 	bne.w	8004b18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d88:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d049      	beq.n	8004e28 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d9a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d242      	bcs.n	8004e28 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	623b      	str	r3, [r7, #32]
   return(result);
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004dde:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	69b9      	ldr	r1, [r7, #24]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e4      	bne.n	8004de0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e16:	e007      	b.n	8004e28 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	619a      	str	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	37b8      	adds	r7, #184	; 0xb8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40008000 	.word	0x40008000
 8004e34:	080045b9 	.word	0x080045b9

08004e38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e027      	b.n	8004eda <HAL_UARTEx_DisableFifoMode+0x66>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2224      	movs	r2, #36	; 0x24
 8004e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e02d      	b.n	8004f5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f850 	bl	8004fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e02d      	b.n	8004fd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2224      	movs	r2, #36	; 0x24
 8004f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f812 	bl	8004fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005000:	e031      	b.n	8005066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005002:	2308      	movs	r3, #8
 8005004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005006:	2308      	movs	r3, #8
 8005008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	0e5b      	lsrs	r3, r3, #25
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	0f5b      	lsrs	r3, r3, #29
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	7b3a      	ldrb	r2, [r7, #12]
 800502e:	4911      	ldr	r1, [pc, #68]	; (8005074 <UARTEx_SetNbDataToProcess+0x94>)
 8005030:	5c8a      	ldrb	r2, [r1, r2]
 8005032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005036:	7b3a      	ldrb	r2, [r7, #12]
 8005038:	490f      	ldr	r1, [pc, #60]	; (8005078 <UARTEx_SetNbDataToProcess+0x98>)
 800503a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800503c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	7b7a      	ldrb	r2, [r7, #13]
 800504c:	4909      	ldr	r1, [pc, #36]	; (8005074 <UARTEx_SetNbDataToProcess+0x94>)
 800504e:	5c8a      	ldrb	r2, [r1, r2]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005054:	7b7a      	ldrb	r2, [r7, #13]
 8005056:	4908      	ldr	r1, [pc, #32]	; (8005078 <UARTEx_SetNbDataToProcess+0x98>)
 8005058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800505a:	fb93 f3f2 	sdiv	r3, r3, r2
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	080080e0 	.word	0x080080e0
 8005078:	080080e8 	.word	0x080080e8

0800507c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f103 0208 	add.w	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f103 0208 	add.w	r2, r3, #8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f103 0208 	add.w	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d103      	bne.n	800513e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e00c      	b.n	8005158 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3308      	adds	r3, #8
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e002      	b.n	800514c <vListInsert+0x2e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d2f6      	bcs.n	8005146 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6852      	ldr	r2, [r2, #4]
 80051b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d103      	bne.n	80051c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	1e5a      	subs	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericReset+0x2a>
        __asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60bb      	str	r3, [r7, #8]
    }
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800520e:	f002 fb21 	bl	8007854 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	3b01      	subs	r3, #1
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	441a      	add	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	22ff      	movs	r2, #255	; 0xff
 800525a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d114      	bne.n	800528e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01a      	beq.n	80052a2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f921 	bl	80064b8 <xTaskRemoveFromEventList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <xQueueGenericReset+0xcc>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	e009      	b.n	80052a2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3310      	adds	r3, #16
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fef2 	bl	800507c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3324      	adds	r3, #36	; 0x24
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff feed 	bl	800507c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80052a2:	f002 fb07 	bl	80078b4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08c      	sub	sp, #48	; 0x30
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGenericCreate+0x2a>
        __asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61bb      	str	r3, [r7, #24]
    }
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <xQueueGenericCreate+0x48>
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d101      	bne.n	8005300 <xQueueGenericCreate+0x4c>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <xQueueGenericCreate+0x4e>
 8005300:	2300      	movs	r3, #0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <xQueueGenericCreate+0x68>
        __asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
    }
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005322:	d90a      	bls.n	800533a <xQueueGenericCreate+0x86>
        __asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	613b      	str	r3, [r7, #16]
    }
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	3350      	adds	r3, #80	; 0x50
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fbac 	bl	8007a9c <pvPortMalloc>
 8005344:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3350      	adds	r3, #80	; 0x50
 8005354:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005356:	79fa      	ldrb	r2, [r7, #7]
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f805 	bl	8005372 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005368:	6a3b      	ldr	r3, [r7, #32]
    }
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e002      	b.n	8005394 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053a0:	2101      	movs	r1, #1
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f7ff ff1e 	bl	80051e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericSend+0x32>
        __asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <xQueueGenericSend+0x40>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xQueueGenericSend+0x44>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGenericSend+0x46>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueGenericSend+0x60>
        __asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <xQueueGenericSend+0x6e>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <xQueueGenericSend+0x72>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericSend+0x74>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericSend+0x8e>
        __asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
    }
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 f9d3 	bl	80067f0 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueGenericSend+0x9e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueGenericSend+0xa2>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueGenericSend+0xa4>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericSend+0xbe>
        __asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61fb      	str	r3, [r7, #28]
    }
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005476:	f002 f9ed 	bl	8007854 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <xQueueGenericSend+0xd4>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d129      	bne.n	80054e0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005492:	f000 fac6 	bl	8005a22 <prvCopyDataToQueue>
 8005496:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f807 	bl	80064b8 <xTaskRemoveFromEventList>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80054b0:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <xQueueGenericSend+0x1f8>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	e00a      	b.n	80054d8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <xQueueGenericSend+0x1f8>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80054d8:	f002 f9ec 	bl	80078b4 <vPortExitCritical>
                return pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	e063      	b.n	80055a8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80054e6:	f002 f9e5 	bl	80078b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e05c      	b.n	80055a8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 f83f 	bl	800657c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005502:	f002 f9d7 	bl	80078b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005506:	f000 fdb9 	bl	800607c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800550a:	f002 f9a3 	bl	8007854 <vPortEnterCritical>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005514:	b25b      	sxtb	r3, r3
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d103      	bne.n	8005524 <xQueueGenericSend+0x16c>
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x182>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800553a:	f002 f9bb 	bl	80078b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553e:	1d3a      	adds	r2, r7, #4
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f001 f82e 	bl	80065a8 <xTaskCheckForTimeOut>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d124      	bne.n	800559c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005554:	f000 fb5d 	bl	8005c12 <prvIsQueueFull>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d018      	beq.n	8005590 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	3310      	adds	r3, #16
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff56 	bl	8006418 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800556c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556e:	f000 fae8 	bl	8005b42 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005572:	f000 fd91 	bl	8006098 <xTaskResumeAll>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f47f af7c 	bne.w	8005476 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <xQueueGenericSend+0x1f8>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	e772      	b.n	8005476 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005592:	f000 fad6 	bl	8005b42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005596:	f000 fd7f 	bl	8006098 <xTaskResumeAll>
 800559a:	e76c      	b.n	8005476 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fad0 	bl	8005b42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80055a2:	f000 fd79 	bl	8006098 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80055a6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3738      	adds	r7, #56	; 0x38
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b090      	sub	sp, #64	; 0x40
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <xQueueGenericSendFromISR+0x3c>
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <xQueueGenericSendFromISR+0x40>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <xQueueGenericSendFromISR+0x42>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSendFromISR+0x6a>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSendFromISR+0x6e>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSendFromISR+0x70>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	623b      	str	r3, [r7, #32]
    }
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800563e:	f002 f9ed 	bl	8007a1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005642:	f3ef 8211 	mrs	r2, BASEPRI
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	61fa      	str	r2, [r7, #28]
 8005658:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800565a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <xQueueGenericSendFromISR+0xbc>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d13e      	bne.n	80056ee <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005686:	f000 f9cc 	bl	8005a22 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800568a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d112      	bne.n	80056ba <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d025      	beq.n	80056e8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	3324      	adds	r3, #36	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 ff09 	bl	80064b8 <xTaskRemoveFromEventList>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01d      	beq.n	80056e8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01a      	beq.n	80056e8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e016      	b.n	80056e8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80056ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056be:	2b7f      	cmp	r3, #127	; 0x7f
 80056c0:	d10a      	bne.n	80056d8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	617b      	str	r3, [r7, #20]
    }
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056dc:	3301      	adds	r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	b25a      	sxtb	r2, r3
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80056ec:	e001      	b.n	80056f2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80056fc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005700:	4618      	mov	r0, r3
 8005702:	3740      	adds	r7, #64	; 0x40
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08c      	sub	sp, #48	; 0x30
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueReceive+0x30>
        __asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	623b      	str	r3, [r7, #32]
    }
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueReceive+0x3e>
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueReceive+0x42>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueReceive+0x44>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueReceive+0x5e>
        __asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61fb      	str	r3, [r7, #28]
    }
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005766:	f001 f843 	bl	80067f0 <xTaskGetSchedulerState>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <xQueueReceive+0x6e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <xQueueReceive+0x72>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <xQueueReceive+0x74>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xQueueReceive+0x8e>
        __asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61bb      	str	r3, [r7, #24]
    }
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005796:	f002 f85d 	bl	8007854 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01f      	beq.n	80057e6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057aa:	f000 f9a4 	bl	8005af6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00f      	beq.n	80057de <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	3310      	adds	r3, #16
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fe78 	bl	80064b8 <xTaskRemoveFromEventList>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <xQueueReceive+0x1bc>)
 80057d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80057de:	f002 f869 	bl	80078b4 <vPortExitCritical>
                return pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e069      	b.n	80058ba <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80057ec:	f002 f862 	bl	80078b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e062      	b.n	80058ba <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80057fa:	f107 0310 	add.w	r3, r7, #16
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 febc 	bl	800657c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005808:	f002 f854 	bl	80078b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800580c:	f000 fc36 	bl	800607c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005810:	f002 f820 	bl	8007854 <vPortEnterCritical>
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <xQueueReceive+0x122>
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d103      	bne.n	8005840 <xQueueReceive+0x138>
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005840:	f002 f838 	bl	80078b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005844:	1d3a      	adds	r2, r7, #4
 8005846:	f107 0310 	add.w	r3, r7, #16
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f000 feab 	bl	80065a8 <xTaskCheckForTimeOut>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d123      	bne.n	80058a0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	f000 f9c4 	bl	8005be6 <prvIsQueueEmpty>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fdd3 	bl	8006418 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005874:	f000 f965 	bl	8005b42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005878:	f000 fc0e 	bl	8006098 <xTaskResumeAll>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d189      	bne.n	8005796 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <xQueueReceive+0x1bc>)
 8005884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	e780      	b.n	8005796 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005896:	f000 f954 	bl	8005b42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800589a:	f000 fbfd 	bl	8006098 <xTaskResumeAll>
 800589e:	e77a      	b.n	8005796 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80058a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a2:	f000 f94e 	bl	8005b42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80058a6:	f000 fbf7 	bl	8006098 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ac:	f000 f99b 	bl	8005be6 <prvIsQueueEmpty>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f43f af6f 	beq.w	8005796 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80058b8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b090      	sub	sp, #64	; 0x40
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <xQueueReceiveFromISR+0x3a>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <xQueueReceiveFromISR+0x3e>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <xQueueReceiveFromISR+0x40>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005922:	f002 f87b 	bl	8007a1c <vPortValidateInterruptPriority>
        __asm volatile
 8005926:	f3ef 8211 	mrs	r2, BASEPRI
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	623a      	str	r2, [r7, #32]
 800593c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800593e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	2b00      	cmp	r3, #0
 800594c:	d03e      	beq.n	80059cc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800595c:	f000 f8cb 	bl	8005af6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005968:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d112      	bne.n	8005998 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d025      	beq.n	80059c6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	3310      	adds	r3, #16
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fd9a 	bl	80064b8 <xTaskRemoveFromEventList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01d      	beq.n	80059c6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e016      	b.n	80059c6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005998:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800599c:	2b7f      	cmp	r3, #127	; 0x7f
 800599e:	d10a      	bne.n	80059b6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61bb      	str	r3, [r7, #24]
    }
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ba:	3301      	adds	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	b25a      	sxtb	r2, r3
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	e001      	b.n	80059d0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f383 8811 	msr	BASEPRI, r3
    }
 80059da:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80059dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3740      	adds	r7, #64	; 0x40
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60bb      	str	r3, [r7, #8]
    }
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005a0a:	f001 ff23 	bl	8007854 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005a14:	f001 ff4e 	bl	80078b4 <vPortExitCritical>

    return uxReturn;
 8005a18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d14d      	bne.n	8005ae4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 feed 	bl	800682c <xTaskPriorityDisinherit>
 8005a52:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]
 8005a5a:	e043      	b.n	8005ae4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d119      	bne.n	8005a96 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6858      	ldr	r0, [r3, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	f002 fa37 	bl	8007ee0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d32b      	bcc.n	8005ae4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
 8005a94:	e026      	b.n	8005ae4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68d8      	ldr	r0, [r3, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	f002 fa1d 	bl	8007ee0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	425b      	negs	r3, r3
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d207      	bcs.n	8005ad2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	425b      	negs	r3, r3
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d105      	bne.n	8005ae4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d303      	bcc.n	8005b2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68d9      	ldr	r1, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	461a      	mov	r2, r3
 8005b34:	6838      	ldr	r0, [r7, #0]
 8005b36:	f002 f9d3 	bl	8007ee0 <memcpy>
    }
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005b4a:	f001 fe83 	bl	8007854 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b54:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b56:	e011      	b.n	8005b7c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d012      	beq.n	8005b86 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fca7 	bl	80064b8 <xTaskRemoveFromEventList>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005b70:	f000 fd80 	bl	8006674 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dce9      	bgt.n	8005b58 <prvUnlockQueue+0x16>
 8005b84:	e000      	b.n	8005b88 <prvUnlockQueue+0x46>
                        break;
 8005b86:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005b90:	f001 fe90 	bl	80078b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005b94:	f001 fe5e 	bl	8007854 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba0:	e011      	b.n	8005bc6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d012      	beq.n	8005bd0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3310      	adds	r3, #16
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fc82 	bl	80064b8 <xTaskRemoveFromEventList>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005bba:	f000 fd5b 	bl	8006674 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dce9      	bgt.n	8005ba2 <prvUnlockQueue+0x60>
 8005bce:	e000      	b.n	8005bd2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005bd0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	22ff      	movs	r2, #255	; 0xff
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005bda:	f001 fe6b 	bl	80078b4 <vPortExitCritical>
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005bee:	f001 fe31 	bl	8007854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e001      	b.n	8005c04 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005c04:	f001 fe56 	bl	80078b4 <vPortExitCritical>

    return xReturn;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005c1a:	f001 fe1b 	bl	8007854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d102      	bne.n	8005c30 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e001      	b.n	8005c34 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005c34:	f001 fe3e 	bl	80078b4 <vPortExitCritical>

    return xReturn;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
    }
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d102      	bne.n	8005c7c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e001      	b.n	8005c80 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c80:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e014      	b.n	8005cca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ca0:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <vQueueAddToRegistry+0x50>)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cac:	490c      	ldr	r1, [pc, #48]	; (8005ce0 <vQueueAddToRegistry+0x50>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <vQueueAddToRegistry+0x50>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005cc2:	e006      	b.n	8005cd2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b07      	cmp	r3, #7
 8005cce:	d9e7      	bls.n	8005ca0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000160 	.word	0x20000160

08005ce4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005cf4:	f001 fdae 	bl	8007854 <vPortEnterCritical>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d103      	bne.n	8005d0e <vQueueWaitForMessageRestricted+0x2a>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <vQueueWaitForMessageRestricted+0x40>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d24:	f001 fdc6 	bl	80078b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fb91 	bl	8006460 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7ff feff 	bl	8005b42 <prvUnlockQueue>
    }
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	; 0x30
 8005d50:	af04      	add	r7, sp, #16
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 fe9b 	bl	8007a9c <pvPortMalloc>
 8005d66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d6e:	205c      	movs	r0, #92	; 0x5c
 8005d70:	f001 fe94 	bl	8007a9c <pvPortMalloc>
 8005d74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
 8005d82:	e005      	b.n	8005d90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005d84:	6978      	ldr	r0, [r7, #20]
 8005d86:	f001 ff69 	bl	8007c5c <vPortFree>
 8005d8a:	e001      	b.n	8005d90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d013      	beq.n	8005dbe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f80e 	bl	8005dce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005db2:	69f8      	ldr	r0, [r7, #28]
 8005db4:	f000 f8a2 	bl	8005efc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e002      	b.n	8005dc4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
    }
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	461a      	mov	r2, r3
 8005de6:	21a5      	movs	r1, #165	; 0xa5
 8005de8:	f002 f888 	bl	8007efc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005df6:	3b01      	subs	r3, #1
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f023 0307 	bic.w	r3, r3, #7
 8005e04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	617b      	str	r3, [r7, #20]
    }
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01f      	beq.n	8005e6c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e012      	b.n	8005e58 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	7819      	ldrb	r1, [r3, #0]
 8005e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3334      	adds	r3, #52	; 0x34
 8005e42:	460a      	mov	r2, r1
 8005e44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d006      	beq.n	8005e60 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b0f      	cmp	r3, #15
 8005e5c:	d9e9      	bls.n	8005e32 <prvInitialiseNewTask+0x64>
 8005e5e:	e000      	b.n	8005e62 <prvInitialiseNewTask+0x94>
            {
                break;
 8005e60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e6a:	e003      	b.n	8005e74 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d901      	bls.n	8005e7e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e88:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	3304      	adds	r3, #4
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff f911 	bl	80050bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff f90c 	bl	80050bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	f1c3 0205 	rsb	r2, r3, #5
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	3354      	adds	r3, #84	; 0x54
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 f81a 	bl	8007efc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	3358      	adds	r3, #88	; 0x58
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 f813 	bl	8007efc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68f9      	ldr	r1, [r7, #12]
 8005eda:	69b8      	ldr	r0, [r7, #24]
 8005edc:	f001 fb0e 	bl	80074fc <pxPortInitialiseStack>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ef2:	bf00      	nop
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005f04:	f001 fca6 	bl	8007854 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005f08:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <prvAddNewTaskToReadyList+0xc0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <prvAddNewTaskToReadyList+0xc0>)
 8005f10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005f12:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <prvAddNewTaskToReadyList+0xc4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <prvAddNewTaskToReadyList+0xc4>)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f20:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <prvAddNewTaskToReadyList+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d110      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005f28:	f000 fbc8 	bl	80066bc <prvInitialiseTaskLists>
 8005f2c:	e00d      	b.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005f2e:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <prvAddNewTaskToReadyList+0xc8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f36:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <prvAddNewTaskToReadyList+0xc4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d802      	bhi.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005f44:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <prvAddNewTaskToReadyList+0xc4>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <prvAddNewTaskToReadyList+0xcc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <prvAddNewTaskToReadyList+0xcc>)
 8005f52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f54:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <prvAddNewTaskToReadyList+0xcc>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <prvAddNewTaskToReadyList+0xd0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <prvAddNewTaskToReadyList+0xd0>)
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <prvAddNewTaskToReadyList+0xd4>)
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f7ff f8a6 	bl	80050d6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005f8a:	f001 fc93 	bl	80078b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <prvAddNewTaskToReadyList+0xc8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <prvAddNewTaskToReadyList+0xc4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d207      	bcs.n	8005fb4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <prvAddNewTaskToReadyList+0xd8>)
 8005fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000278 	.word	0x20000278
 8005fc0:	200001a0 	.word	0x200001a0
 8005fc4:	20000284 	.word	0x20000284
 8005fc8:	20000294 	.word	0x20000294
 8005fcc:	20000280 	.word	0x20000280
 8005fd0:	200001a4 	.word	0x200001a4
 8005fd4:	e000ed04 	.word	0xe000ed04

08005fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005fde:	4b20      	ldr	r3, [pc, #128]	; (8006060 <vTaskStartScheduler+0x88>)
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	491e      	ldr	r1, [pc, #120]	; (8006064 <vTaskStartScheduler+0x8c>)
 8005fec:	481e      	ldr	r0, [pc, #120]	; (8006068 <vTaskStartScheduler+0x90>)
 8005fee:	f7ff fead 	bl	8005d4c <xTaskCreate>
 8005ff2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d102      	bne.n	8006000 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005ffa:	f000 ff6d 	bl	8006ed8 <xTimerCreateTimerTask>
 8005ffe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d116      	bne.n	8006034 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60bb      	str	r3, [r7, #8]
    }
 8006018:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <vTaskStartScheduler+0x94>)
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <vTaskStartScheduler+0x98>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <vTaskStartScheduler+0x9c>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800602e:	f001 faf1 	bl	8007614 <xPortStartScheduler>
 8006032:	e00e      	b.n	8006052 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d10a      	bne.n	8006052 <vTaskStartScheduler+0x7a>
        __asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	607b      	str	r3, [r7, #4]
    }
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <vTaskStartScheduler+0xa0>)
 8006054:	681b      	ldr	r3, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	2000029c 	.word	0x2000029c
 8006064:	08008010 	.word	0x08008010
 8006068:	0800668d 	.word	0x0800668d
 800606c:	20000298 	.word	0x20000298
 8006070:	20000284 	.word	0x20000284
 8006074:	2000027c 	.word	0x2000027c
 8006078:	20000010 	.word	0x20000010

0800607c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <vTaskSuspendAll+0x18>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a03      	ldr	r2, [pc, #12]	; (8006094 <vTaskSuspendAll+0x18>)
 8006088:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800608a:	bf00      	nop
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	200002a0 	.word	0x200002a0

08006098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80060a6:	4b41      	ldr	r3, [pc, #260]	; (80061ac <xTaskResumeAll+0x114>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xTaskResumeAll+0x2c>
        __asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	603b      	str	r3, [r7, #0]
    }
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80060c4:	f001 fbc6 	bl	8007854 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80060c8:	4b38      	ldr	r3, [pc, #224]	; (80061ac <xTaskResumeAll+0x114>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4a37      	ldr	r2, [pc, #220]	; (80061ac <xTaskResumeAll+0x114>)
 80060d0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <xTaskResumeAll+0x114>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d161      	bne.n	800619e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060da:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <xTaskResumeAll+0x118>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d05d      	beq.n	800619e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e2:	e02e      	b.n	8006142 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e4:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <xTaskResumeAll+0x11c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff f84d 	bl	8005190 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff f848 	bl	8005190 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	409a      	lsls	r2, r3
 8006108:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <xTaskResumeAll+0x120>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <xTaskResumeAll+0x120>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4a27      	ldr	r2, [pc, #156]	; (80061bc <xTaskResumeAll+0x124>)
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7fe ffd4 	bl	80050d6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <xTaskResumeAll+0x128>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <xTaskResumeAll+0x12c>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xTaskResumeAll+0x11c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1cc      	bne.n	80060e4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006150:	f000 fb32 	bl	80067b8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <xTaskResumeAll+0x130>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006160:	f000 f846 	bl	80061f0 <xTaskIncrementTick>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <xTaskResumeAll+0x12c>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3b01      	subs	r3, #1
 8006174:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f1      	bne.n	8006160 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <xTaskResumeAll+0x130>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <xTaskResumeAll+0x12c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <xTaskResumeAll+0x134>)
 8006190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800619e:	f001 fb89 	bl	80078b4 <vPortExitCritical>

    return xAlreadyYielded;
 80061a2:	68bb      	ldr	r3, [r7, #8]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200002a0 	.word	0x200002a0
 80061b0:	20000278 	.word	0x20000278
 80061b4:	20000238 	.word	0x20000238
 80061b8:	20000280 	.word	0x20000280
 80061bc:	200001a4 	.word	0x200001a4
 80061c0:	200001a0 	.word	0x200001a0
 80061c4:	2000028c 	.word	0x2000028c
 80061c8:	20000288 	.word	0x20000288
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <xTaskGetTickCount+0x1c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80061dc:	687b      	ldr	r3, [r7, #4]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000027c 	.word	0x2000027c

080061f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fa:	4b4e      	ldr	r3, [pc, #312]	; (8006334 <xTaskIncrementTick+0x144>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 808e 	bne.w	8006320 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006204:	4b4c      	ldr	r3, [pc, #304]	; (8006338 <xTaskIncrementTick+0x148>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800620c:	4a4a      	ldr	r2, [pc, #296]	; (8006338 <xTaskIncrementTick+0x148>)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d120      	bne.n	800625a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006218:	4b48      	ldr	r3, [pc, #288]	; (800633c <xTaskIncrementTick+0x14c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <xTaskIncrementTick+0x48>
        __asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	603b      	str	r3, [r7, #0]
    }
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xTaskIncrementTick+0x46>
 8006238:	4b40      	ldr	r3, [pc, #256]	; (800633c <xTaskIncrementTick+0x14c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	4b40      	ldr	r3, [pc, #256]	; (8006340 <xTaskIncrementTick+0x150>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3e      	ldr	r2, [pc, #248]	; (800633c <xTaskIncrementTick+0x14c>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <xTaskIncrementTick+0x150>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <xTaskIncrementTick+0x154>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	4a3c      	ldr	r2, [pc, #240]	; (8006344 <xTaskIncrementTick+0x154>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	f000 faaf 	bl	80067b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800625a:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <xTaskIncrementTick+0x158>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	429a      	cmp	r2, r3
 8006262:	d348      	bcc.n	80062f6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <xTaskIncrementTick+0x14c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <xTaskIncrementTick+0x158>)
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	601a      	str	r2, [r3, #0]
                    break;
 8006276:	e03e      	b.n	80062f6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006278:	4b30      	ldr	r3, [pc, #192]	; (800633c <xTaskIncrementTick+0x14c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d203      	bcs.n	8006298 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006290:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <xTaskIncrementTick+0x158>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006296:	e02e      	b.n	80062f6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe ff77 	bl	8005190 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe ff6e 	bl	8005190 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	2201      	movs	r2, #1
 80062ba:	409a      	lsls	r2, r3
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <xTaskIncrementTick+0x15c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <xTaskIncrementTick+0x15c>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <xTaskIncrementTick+0x160>)
 80062d4:	441a      	add	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7fe fefa 	bl	80050d6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <xTaskIncrementTick+0x164>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3b9      	bcc.n	8006264 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f4:	e7b6      	b.n	8006264 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <xTaskIncrementTick+0x164>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4914      	ldr	r1, [pc, #80]	; (8006350 <xTaskIncrementTick+0x160>)
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d901      	bls.n	8006312 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800630e:	2301      	movs	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <xTaskIncrementTick+0x168>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800631a:	2301      	movs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e004      	b.n	800632a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006320:	4b0e      	ldr	r3, [pc, #56]	; (800635c <xTaskIncrementTick+0x16c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	4a0d      	ldr	r2, [pc, #52]	; (800635c <xTaskIncrementTick+0x16c>)
 8006328:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800632a:	697b      	ldr	r3, [r7, #20]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200002a0 	.word	0x200002a0
 8006338:	2000027c 	.word	0x2000027c
 800633c:	20000230 	.word	0x20000230
 8006340:	20000234 	.word	0x20000234
 8006344:	20000290 	.word	0x20000290
 8006348:	20000298 	.word	0x20000298
 800634c:	20000280 	.word	0x20000280
 8006350:	200001a4 	.word	0x200001a4
 8006354:	200001a0 	.word	0x200001a0
 8006358:	2000028c 	.word	0x2000028c
 800635c:	20000288 	.word	0x20000288

08006360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <vTaskSwitchContext+0xa4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800636e:	4b26      	ldr	r3, [pc, #152]	; (8006408 <vTaskSwitchContext+0xa8>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006374:	e03f      	b.n	80063f6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <vTaskSwitchContext+0xa8>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637c:	4b23      	ldr	r3, [pc, #140]	; (800640c <vTaskSwitchContext+0xac>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	fab3 f383 	clz	r3, r3
 8006388:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	f1c3 031f 	rsb	r3, r3, #31
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	491f      	ldr	r1, [pc, #124]	; (8006410 <vTaskSwitchContext+0xb0>)
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	607b      	str	r3, [r7, #4]
    }
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <vTaskSwitchContext+0x5a>
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a12      	ldr	r2, [pc, #72]	; (8006410 <vTaskSwitchContext+0xb0>)
 80063c8:	4413      	add	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3308      	adds	r3, #8
 80063de:	429a      	cmp	r2, r3
 80063e0:	d104      	bne.n	80063ec <vTaskSwitchContext+0x8c>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4a08      	ldr	r2, [pc, #32]	; (8006414 <vTaskSwitchContext+0xb4>)
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	200002a0 	.word	0x200002a0
 8006408:	2000028c 	.word	0x2000028c
 800640c:	20000280 	.word	0x20000280
 8006410:	200001a4 	.word	0x200001a4
 8006414:	200001a0 	.word	0x200001a0

08006418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
    }
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <vTaskPlaceOnEventList+0x44>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3318      	adds	r3, #24
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fe fe69 	bl	800511e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800644c:	2101      	movs	r1, #1
 800644e:	6838      	ldr	r0, [r7, #0]
 8006450:	f000 fcdc 	bl	8006e0c <prvAddCurrentTaskToDelayedList>
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200001a0 	.word	0x200001a0

08006460 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	617b      	str	r3, [r7, #20]
    }
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3318      	adds	r3, #24
 800648e:	4619      	mov	r1, r3
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7fe fe20 	bl	80050d6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800649c:	f04f 33ff 	mov.w	r3, #4294967295
 80064a0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68b8      	ldr	r0, [r7, #8]
 80064a6:	f000 fcb1 	bl	8006e0c <prvAddCurrentTaskToDelayedList>
    }
 80064aa:	bf00      	nop
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200001a0 	.word	0x200001a0

080064b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60fb      	str	r3, [r7, #12]
    }
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3318      	adds	r3, #24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fe51 	bl	8005190 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <xTaskRemoveFromEventList+0xac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11c      	bne.n	8006530 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fe48 	bl	8005190 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <xTaskRemoveFromEventList+0xb0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <xTaskRemoveFromEventList+0xb0>)
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4a13      	ldr	r2, [pc, #76]	; (800656c <xTaskRemoveFromEventList+0xb4>)
 8006520:	441a      	add	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fe fdd4 	bl	80050d6 <vListInsertEnd>
 800652e:	e005      	b.n	800653c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	3318      	adds	r3, #24
 8006534:	4619      	mov	r1, r3
 8006536:	480e      	ldr	r0, [pc, #56]	; (8006570 <xTaskRemoveFromEventList+0xb8>)
 8006538:	f7fe fdcd 	bl	80050d6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <xTaskRemoveFromEventList+0xbc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	429a      	cmp	r2, r3
 8006548:	d905      	bls.n	8006556 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <xTaskRemoveFromEventList+0xc0>)
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e001      	b.n	800655a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800655a:	697b      	ldr	r3, [r7, #20]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200002a0 	.word	0x200002a0
 8006568:	20000280 	.word	0x20000280
 800656c:	200001a4 	.word	0x200001a4
 8006570:	20000238 	.word	0x20000238
 8006574:	200001a0 	.word	0x200001a0
 8006578:	2000028c 	.word	0x2000028c

0800657c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <vTaskInternalSetTimeOutState+0x24>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <vTaskInternalSetTimeOutState+0x28>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	605a      	str	r2, [r3, #4]
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20000290 	.word	0x20000290
 80065a4:	2000027c 	.word	0x2000027c

080065a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	613b      	str	r3, [r7, #16]
    }
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	60fb      	str	r3, [r7, #12]
    }
 80065e6:	bf00      	nop
 80065e8:	e7fe      	b.n	80065e8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80065ea:	f001 f933 	bl	8007854 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80065ee:	4b1f      	ldr	r3, [pc, #124]	; (800666c <xTaskCheckForTimeOut+0xc4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d102      	bne.n	800660e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e026      	b.n	800665c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b17      	ldr	r3, [pc, #92]	; (8006670 <xTaskCheckForTimeOut+0xc8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d00a      	beq.n	8006630 <xTaskCheckForTimeOut+0x88>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	429a      	cmp	r2, r3
 8006622:	d305      	bcc.n	8006630 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e015      	b.n	800665c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	429a      	cmp	r2, r3
 8006638:	d20b      	bcs.n	8006652 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	1ad2      	subs	r2, r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff98 	bl	800657c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	e004      	b.n	800665c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800665c:	f001 f92a 	bl	80078b4 <vPortExitCritical>

    return xReturn;
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	2000027c 	.word	0x2000027c
 8006670:	20000290 	.word	0x20000290

08006674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <vTaskMissedYield+0x14>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
}
 800667e:	bf00      	nop
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	2000028c 	.word	0x2000028c

0800668c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006694:	f000 f852 	bl	800673c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <prvIdleTask+0x28>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d9f9      	bls.n	8006694 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <prvIdleTask+0x2c>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80066b0:	e7f0      	b.n	8006694 <prvIdleTask+0x8>
 80066b2:	bf00      	nop
 80066b4:	200001a4 	.word	0x200001a4
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	e00c      	b.n	80066e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <prvInitialiseTaskLists+0x60>)
 80066d4:	4413      	add	r3, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fcd0 	bl	800507c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3301      	adds	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d9ef      	bls.n	80066c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80066e8:	480d      	ldr	r0, [pc, #52]	; (8006720 <prvInitialiseTaskLists+0x64>)
 80066ea:	f7fe fcc7 	bl	800507c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80066ee:	480d      	ldr	r0, [pc, #52]	; (8006724 <prvInitialiseTaskLists+0x68>)
 80066f0:	f7fe fcc4 	bl	800507c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80066f4:	480c      	ldr	r0, [pc, #48]	; (8006728 <prvInitialiseTaskLists+0x6c>)
 80066f6:	f7fe fcc1 	bl	800507c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80066fa:	480c      	ldr	r0, [pc, #48]	; (800672c <prvInitialiseTaskLists+0x70>)
 80066fc:	f7fe fcbe 	bl	800507c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006700:	480b      	ldr	r0, [pc, #44]	; (8006730 <prvInitialiseTaskLists+0x74>)
 8006702:	f7fe fcbb 	bl	800507c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <prvInitialiseTaskLists+0x78>)
 8006708:	4a05      	ldr	r2, [pc, #20]	; (8006720 <prvInitialiseTaskLists+0x64>)
 800670a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <prvInitialiseTaskLists+0x7c>)
 800670e:	4a05      	ldr	r2, [pc, #20]	; (8006724 <prvInitialiseTaskLists+0x68>)
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200001a4 	.word	0x200001a4
 8006720:	20000208 	.word	0x20000208
 8006724:	2000021c 	.word	0x2000021c
 8006728:	20000238 	.word	0x20000238
 800672c:	2000024c 	.word	0x2000024c
 8006730:	20000264 	.word	0x20000264
 8006734:	20000230 	.word	0x20000230
 8006738:	20000234 	.word	0x20000234

0800673c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006742:	e019      	b.n	8006778 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006744:	f001 f886 	bl	8007854 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <prvCheckTasksWaitingTermination+0x50>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fd1b 	bl	8005190 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800675a:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <prvCheckTasksWaitingTermination+0x54>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	4a0b      	ldr	r2, [pc, #44]	; (8006790 <prvCheckTasksWaitingTermination+0x54>)
 8006762:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <prvCheckTasksWaitingTermination+0x58>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <prvCheckTasksWaitingTermination+0x58>)
 800676c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800676e:	f001 f8a1 	bl	80078b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f810 	bl	8006798 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <prvCheckTasksWaitingTermination+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e1      	bne.n	8006744 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	2000024c 	.word	0x2000024c
 8006790:	20000278 	.word	0x20000278
 8006794:	20000260 	.word	0x20000260

08006798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fa59 	bl	8007c5c <vPortFree>
                vPortFree( pxTCB );
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fa56 	bl	8007c5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <prvResetNextTaskUnblockTime+0x30>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <prvResetNextTaskUnblockTime+0x34>)
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80067ce:	e005      	b.n	80067dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <prvResetNextTaskUnblockTime+0x30>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <prvResetNextTaskUnblockTime+0x34>)
 80067da:	6013      	str	r3, [r2, #0]
}
 80067dc:	bf00      	nop
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20000230 	.word	0x20000230
 80067ec:	20000298 	.word	0x20000298

080067f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <xTaskGetSchedulerState+0x34>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80067fe:	2301      	movs	r3, #1
 8006800:	607b      	str	r3, [r7, #4]
 8006802:	e008      	b.n	8006816 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <xTaskGetSchedulerState+0x38>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800680c:	2302      	movs	r3, #2
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	e001      	b.n	8006816 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006812:	2300      	movs	r3, #0
 8006814:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006816:	687b      	ldr	r3, [r7, #4]
    }
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20000284 	.word	0x20000284
 8006828:	200002a0 	.word	0x200002a0

0800682c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d063      	beq.n	800690a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006842:	4b34      	ldr	r3, [pc, #208]	; (8006914 <xTaskPriorityDisinherit+0xe8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	429a      	cmp	r2, r3
 800684a:	d00a      	beq.n	8006862 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	60fb      	str	r3, [r7, #12]
    }
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	60bb      	str	r3, [r7, #8]
    }
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	1e5a      	subs	r2, r3, #1
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	429a      	cmp	r2, r3
 8006894:	d039      	beq.n	800690a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	2b00      	cmp	r3, #0
 800689c:	d135      	bne.n	800690a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fc74 	bl	8005190 <uxListRemove>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	2201      	movs	r2, #1
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	43da      	mvns	r2, r3
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <xTaskPriorityDisinherit+0xec>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4013      	ands	r3, r2
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <xTaskPriorityDisinherit+0xec>)
 80068c2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	f1c3 0205 	rsb	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <xTaskPriorityDisinherit+0xec>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <xTaskPriorityDisinherit+0xec>)
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <xTaskPriorityDisinherit+0xf0>)
 80068f8:	441a      	add	r2, r3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f7fe fbe8 	bl	80050d6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800690a:	697b      	ldr	r3, [r7, #20]
    }
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200001a0 	.word	0x200001a0
 8006918:	20000280 	.word	0x20000280
 800691c:	200001a4 	.word	0x200001a4

08006920 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	613b      	str	r3, [r7, #16]
    }
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800694a:	f000 ff83 	bl	8007854 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	3358      	adds	r3, #88	; 0x58
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d024      	beq.n	80069aa <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006960:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3314      	adds	r3, #20
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	43db      	mvns	r3, r3
 8006972:	4019      	ands	r1, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3314      	adds	r3, #20
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800697e:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	3358      	adds	r3, #88	; 0x58
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006992:	2101      	movs	r1, #1
 8006994:	6a38      	ldr	r0, [r7, #32]
 8006996:	f000 fa39 	bl	8006e0c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800699a:	4b22      	ldr	r3, [pc, #136]	; (8006a24 <xTaskGenericNotifyWait+0x104>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80069aa:	f000 ff83 	bl	80078b4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80069ae:	f000 ff51 	bl	8007854 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3314      	adds	r3, #20
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80069ca:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	3358      	adds	r3, #88	; 0x58
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d002      	beq.n	80069e2 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e010      	b.n	8006a04 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3314      	adds	r3, #20
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	6859      	ldr	r1, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	4019      	ands	r1, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3314      	adds	r3, #20
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <xTaskGenericNotifyWait+0x100>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3358      	adds	r3, #88	; 0x58
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006a12:	f000 ff4f 	bl	80078b4 <vPortExitCritical>

        return xReturn;
 8006a16:	697b      	ldr	r3, [r7, #20]
    }
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200001a0 	.word	0x200001a0
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006a36:	2301      	movs	r3, #1
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	623b      	str	r3, [r7, #32]
    }
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61fb      	str	r3, [r7, #28]
    }
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006a76:	f000 feed 	bl	8007854 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3314      	adds	r3, #20
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	3358      	adds	r3, #88	; 0x58
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3358      	adds	r3, #88	; 0x58
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d841      	bhi.n	8006b34 <xTaskGenericNotify+0x10c>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <xTaskGenericNotify+0x90>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006b53 	.word	0x08006b53
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006aeb 	.word	0x08006aeb
 8006ac4:	08006b07 	.word	0x08006b07
 8006ac8:	08006b17 	.word	0x08006b17
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	605a      	str	r2, [r3, #4]
                    break;
 8006ae8:	e036      	b.n	8006b58 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3314      	adds	r3, #20
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3314      	adds	r3, #20
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	605a      	str	r2, [r3, #4]
                    break;
 8006b04:	e028      	b.n	8006b58 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]
                    break;
 8006b14:	e020      	b.n	8006b58 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d007      	beq.n	8006b2e <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	3314      	adds	r3, #20
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006b2c:	e014      	b.n	8006b58 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006b32:	e011      	b.n	8006b58 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <xTaskGenericNotify+0x1bc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00c      	beq.n	8006b56 <xTaskGenericNotify+0x12e>
        __asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	61bb      	str	r3, [r7, #24]
    }
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskGenericNotify+0x128>
                    break;
 8006b52:	bf00      	nop
 8006b54:	e000      	b.n	8006b58 <xTaskGenericNotify+0x130>

                    break;
 8006b56:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d139      	bne.n	8006bd4 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	3304      	adds	r3, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fb13 	bl	8005190 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	2201      	movs	r2, #1
 8006b70:	409a      	lsls	r2, r3
 8006b72:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <xTaskGenericNotify+0x1c0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <xTaskGenericNotify+0x1c0>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a18      	ldr	r2, [pc, #96]	; (8006bec <xTaskGenericNotify+0x1c4>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fe fa9f 	bl	80050d6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <xTaskGenericNotify+0x18e>
        __asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	617b      	str	r3, [r7, #20]
    }
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <xTaskGenericNotify+0x1c8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d907      	bls.n	8006bd4 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <xTaskGenericNotify+0x1cc>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006bd4:	f000 fe6e 	bl	80078b4 <vPortExitCritical>

        return xReturn;
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3730      	adds	r7, #48	; 0x30
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	2000027c 	.word	0x2000027c
 8006be8:	20000280 	.word	0x20000280
 8006bec:	200001a4 	.word	0x200001a4
 8006bf0:	200001a0 	.word	0x200001a0
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b090      	sub	sp, #64	; 0x40
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006c06:	2301      	movs	r3, #1
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c42:	f000 feeb 	bl	8007a1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8006c60:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3314      	adds	r3, #20
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c7a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	3358      	adds	r3, #88	; 0x58
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	3358      	adds	r3, #88	; 0x58
 8006c92:	2202      	movs	r2, #2
 8006c94:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d841      	bhi.n	8006d20 <xTaskGenericNotifyFromISR+0x128>
 8006c9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <xTaskGenericNotifyFromISR+0xac>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006d3f 	.word	0x08006d3f
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	08006cf3 	.word	0x08006cf3
 8006cb4:	08006d03 	.word	0x08006d03
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	605a      	str	r2, [r3, #4]
                    break;
 8006cd4:	e036      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	605a      	str	r2, [r3, #4]
                    break;
 8006cf0:	e028      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3314      	adds	r3, #20
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]
                    break;
 8006d00:	e020      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d007      	beq.n	8006d1a <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006d18:	e014      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006d1e:	e011      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006d20:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <xTaskGenericNotifyFromISR+0x1f8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	61fb      	str	r3, [r7, #28]
    }
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006d3e:	bf00      	nop
 8006d40:	e000      	b.n	8006d44 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8006d42:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d145      	bne.n	8006dd8 <xTaskGenericNotifyFromISR+0x1e0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <xTaskGenericNotifyFromISR+0x172>
        __asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61bb      	str	r3, [r7, #24]
    }
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTaskGenericNotifyFromISR+0x170>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6a:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <xTaskGenericNotifyFromISR+0x1fc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11c      	bne.n	8006dac <xTaskGenericNotifyFromISR+0x1b4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	3304      	adds	r3, #4
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fa0a 	bl	8005190 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	2201      	movs	r2, #1
 8006d82:	409a      	lsls	r2, r3
 8006d84:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <xTaskGenericNotifyFromISR+0x200>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <xTaskGenericNotifyFromISR+0x200>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <xTaskGenericNotifyFromISR+0x204>)
 8006d9c:	441a      	add	r2, r3
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe f996 	bl	80050d6 <vListInsertEnd>
 8006daa:	e005      	b.n	8006db8 <xTaskGenericNotifyFromISR+0x1c0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	3318      	adds	r3, #24
 8006db0:	4619      	mov	r1, r3
 8006db2:	4813      	ldr	r0, [pc, #76]	; (8006e00 <xTaskGenericNotifyFromISR+0x208>)
 8006db4:	f7fe f98f 	bl	80050d6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <xTaskGenericNotifyFromISR+0x20c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d908      	bls.n	8006dd8 <xTaskGenericNotifyFromISR+0x1e0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <xTaskGenericNotifyFromISR+0x1da>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <xTaskGenericNotifyFromISR+0x210>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dda:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f383 8811 	msr	BASEPRI, r3
    }
 8006de2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006de6:	4618      	mov	r0, r3
 8006de8:	3740      	adds	r7, #64	; 0x40
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2000027c 	.word	0x2000027c
 8006df4:	200002a0 	.word	0x200002a0
 8006df8:	20000280 	.word	0x20000280
 8006dfc:	200001a4 	.word	0x200001a4
 8006e00:	20000238 	.word	0x20000238
 8006e04:	200001a0 	.word	0x200001a0
 8006e08:	2000028c 	.word	0x2000028c

08006e0c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe f9b4 	bl	8005190 <uxListRemove>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e2e:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	2201      	movs	r2, #1
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	4b21      	ldr	r3, [pc, #132]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4013      	ands	r3, r2
 8006e42:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d10a      	bne.n	8006e64 <prvAddCurrentTaskToDelayedList+0x58>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	481a      	ldr	r0, [pc, #104]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e5e:	f7fe f93a 	bl	80050d6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006e62:	e026      	b.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e6c:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d209      	bcs.n	8006e90 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe f948 	bl	800511e <vListInsert>
}
 8006e8e:	e010      	b.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7fe f93e 	bl	800511e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d202      	bcs.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006eac:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6013      	str	r3, [r2, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	2000027c 	.word	0x2000027c
 8006ec0:	200001a0 	.word	0x200001a0
 8006ec4:	20000280 	.word	0x20000280
 8006ec8:	20000264 	.word	0x20000264
 8006ecc:	20000234 	.word	0x20000234
 8006ed0:	20000230 	.word	0x20000230
 8006ed4:	20000298 	.word	0x20000298

08006ed8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006ee2:	f000 fad5 	bl	8007490 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <xTimerCreateTimerTask+0x54>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xTimerCreateTimerTask+0x58>)
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006efc:	490d      	ldr	r1, [pc, #52]	; (8006f34 <xTimerCreateTimerTask+0x5c>)
 8006efe:	480e      	ldr	r0, [pc, #56]	; (8006f38 <xTimerCreateTimerTask+0x60>)
 8006f00:	f7fe ff24 	bl	8005d4c <xTaskCreate>
 8006f04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	603b      	str	r3, [r7, #0]
    }
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006f22:	687b      	ldr	r3, [r7, #4]
    }
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200002d4 	.word	0x200002d4
 8006f30:	200002d8 	.word	0x200002d8
 8006f34:	08008018 	.word	0x08008018
 8006f38:	08007071 	.word	0x08007071

08006f3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xTimerGenericCommand+0x2e>
        __asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
    }
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <xTimerGenericCommand+0x98>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d02a      	beq.n	8006fc8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	dc18      	bgt.n	8006fb6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f84:	f7ff fc34 	bl	80067f0 <xTaskGetSchedulerState>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d109      	bne.n	8006fa2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f8e:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <xTimerGenericCommand+0x98>)
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	f107 0114 	add.w	r1, r7, #20
 8006f96:	2300      	movs	r3, #0
 8006f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f9a:	f7fe fa0d 	bl	80053b8 <xQueueGenericSend>
 8006f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006fa0:	e012      	b.n	8006fc8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <xTimerGenericCommand+0x98>)
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	f107 0114 	add.w	r1, r7, #20
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	f7fe fa03 	bl	80053b8 <xQueueGenericSend>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8006fb4:	e008      	b.n	8006fc8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <xTimerGenericCommand+0x98>)
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f107 0114 	add.w	r1, r7, #20
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	f7fe faf7 	bl	80055b4 <xQueueGenericSendFromISR>
 8006fc6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3728      	adds	r7, #40	; 0x28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200002d4 	.word	0x200002d4

08006fd8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe2:	4b22      	ldr	r3, [pc, #136]	; (800706c <prvProcessExpiredTimer+0x94>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe f8cd 	bl	8005190 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d022      	beq.n	800704a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	18d1      	adds	r1, r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	6978      	ldr	r0, [r7, #20]
 8007012:	f000 f8d1 	bl	80071b8 <prvInsertTimerInActiveList>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01f      	beq.n	800705c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	2100      	movs	r1, #0
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7ff ff88 	bl	8006f3c <xTimerGenericCommand>
 800702c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d113      	bne.n	800705c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60fb      	str	r3, [r7, #12]
    }
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	4798      	blx	r3
    }
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200002cc 	.word	0x200002cc

08007070 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007078:	f107 0308 	add.w	r3, r7, #8
 800707c:	4618      	mov	r0, r3
 800707e:	f000 f857 	bl	8007130 <prvGetNextExpireTime>
 8007082:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4619      	mov	r1, r3
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f803 	bl	8007094 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800708e:	f000 f8d5 	bl	800723c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007092:	e7f1      	b.n	8007078 <prvTimerTask+0x8>

08007094 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800709e:	f7fe ffed 	bl	800607c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f866 	bl	8007178 <prvSampleTimeNow>
 80070ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d130      	bne.n	8007116 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <prvProcessTimerOrBlockTask+0x3c>
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d806      	bhi.n	80070d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80070c2:	f7fe ffe9 	bl	8006098 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff85 	bl	8006fd8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80070ce:	e024      	b.n	800711a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <prvProcessTimerOrBlockTask+0x90>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <prvProcessTimerOrBlockTask+0x50>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <prvProcessTimerOrBlockTask+0x52>
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <prvProcessTimerOrBlockTask+0x94>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	4619      	mov	r1, r3
 80070f6:	f7fe fdf5 	bl	8005ce4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070fa:	f7fe ffcd 	bl	8006098 <xTaskResumeAll>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007104:	4b09      	ldr	r3, [pc, #36]	; (800712c <prvProcessTimerOrBlockTask+0x98>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
    }
 8007114:	e001      	b.n	800711a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007116:	f7fe ffbf 	bl	8006098 <xTaskResumeAll>
    }
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200002d0 	.word	0x200002d0
 8007128:	200002d4 	.word	0x200002d4
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <prvGetNextExpireTime+0x44>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <prvGetNextExpireTime+0x16>
 8007142:	2201      	movs	r2, #1
 8007144:	e000      	b.n	8007148 <prvGetNextExpireTime+0x18>
 8007146:	2200      	movs	r2, #0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <prvGetNextExpireTime+0x44>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e001      	b.n	8007164 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007164:	68fb      	ldr	r3, [r7, #12]
    }
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	200002cc 	.word	0x200002cc

08007178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007180:	f7ff f826 	bl	80061d0 <xTaskGetTickCount>
 8007184:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <prvSampleTimeNow+0x3c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d205      	bcs.n	800719c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007190:	f000 f91a 	bl	80073c8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	e002      	b.n	80071a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <prvSampleTimeNow+0x3c>)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80071a8:	68fb      	ldr	r3, [r7, #12]
    }
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	200002dc 	.word	0x200002dc

080071b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d812      	bhi.n	8007204 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d302      	bcc.n	80071f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e01b      	b.n	800722a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <prvInsertTimerInActiveList+0x7c>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7fd ff8e 	bl	800511e <vListInsert>
 8007202:	e012      	b.n	800722a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d206      	bcs.n	800721a <prvInsertTimerInActiveList+0x62>
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d302      	bcc.n	800721a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007214:	2301      	movs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e007      	b.n	800722a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <prvInsertTimerInActiveList+0x80>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7fd ff7a 	bl	800511e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800722a:	697b      	ldr	r3, [r7, #20]
    }
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	200002d0 	.word	0x200002d0
 8007238:	200002cc 	.word	0x200002cc

0800723c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007242:	e0ae      	b.n	80073a2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f2c0 80aa 	blt.w	80073a0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fd ff97 	bl	8005190 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff87 	bl	8007178 <prvSampleTimeNow>
 800726a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b09      	cmp	r3, #9
 8007270:	f200 8097 	bhi.w	80073a2 <prvProcessReceivedCommands+0x166>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <prvProcessReceivedCommands+0x40>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072a5 	.word	0x080072a5
 8007288:	08007319 	.word	0x08007319
 800728c:	0800732d 	.word	0x0800732d
 8007290:	08007377 	.word	0x08007377
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072a5 	.word	0x080072a5
 800729c:	08007319 	.word	0x08007319
 80072a0:	0800732d 	.word	0x0800732d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	18d1      	adds	r1, r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a3a      	ldr	r2, [r7, #32]
 80072c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072c4:	f7ff ff78 	bl	80071b8 <prvInsertTimerInActiveList>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d069      	beq.n	80073a2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d05e      	beq.n	80073a2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	441a      	add	r2, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2300      	movs	r3, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f6:	f7ff fe21 	bl	8006f3c <xTimerGenericCommand>
 80072fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d14f      	bne.n	80073a2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	61bb      	str	r3, [r7, #24]
    }
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800732a:	e03a      	b.n	80073a2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	b2da      	uxtb	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	617b      	str	r3, [r7, #20]
    }
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	18d1      	adds	r1, r2, r3
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	6a3a      	ldr	r2, [r7, #32]
 800736e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007370:	f7ff ff22 	bl	80071b8 <prvInsertTimerInActiveList>
                        break;
 8007374:	e015      	b.n	80073a2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007386:	f000 fc69 	bl	8007c5c <vPortFree>
 800738a:	e00a      	b.n	80073a2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800739e:	e000      	b.n	80073a2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80073a0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <prvProcessReceivedCommands+0x188>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f107 0108 	add.w	r1, r7, #8
 80073aa:	2200      	movs	r2, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe f9ab 	bl	8005708 <xQueueReceive>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f47f af45 	bne.w	8007244 <prvProcessReceivedCommands+0x8>
        }
    }
 80073ba:	bf00      	nop
 80073bc:	bf00      	nop
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	200002d4 	.word	0x200002d4

080073c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ce:	e048      	b.n	8007462 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073d0:	4b2d      	ldr	r3, [pc, #180]	; (8007488 <prvSwitchTimerLists+0xc0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073da:	4b2b      	ldr	r3, [pc, #172]	; (8007488 <prvSwitchTimerLists+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fd fed1 	bl	8005190 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02e      	beq.n	8007462 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d90e      	bls.n	8007434 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <prvSwitchTimerLists+0xc0>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f7fd fe76 	bl	800511e <vListInsert>
 8007432:	e016      	b.n	8007462 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007434:	2300      	movs	r3, #0
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	2300      	movs	r3, #0
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fd7c 	bl	8006f3c <xTimerGenericCommand>
 8007444:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	603b      	str	r3, [r7, #0]
    }
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <prvSwitchTimerLists+0xc0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1b1      	bne.n	80073d0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <prvSwitchTimerLists+0xc0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <prvSwitchTimerLists+0xc4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a04      	ldr	r2, [pc, #16]	; (8007488 <prvSwitchTimerLists+0xc0>)
 8007478:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800747a:	4a04      	ldr	r2, [pc, #16]	; (800748c <prvSwitchTimerLists+0xc4>)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	6013      	str	r3, [r2, #0]
    }
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200002cc 	.word	0x200002cc
 800748c:	200002d0 	.word	0x200002d0

08007490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007494:	f000 f9de 	bl	8007854 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007498:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <prvCheckForValidListAndQueue+0x54>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d11d      	bne.n	80074dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80074a0:	4811      	ldr	r0, [pc, #68]	; (80074e8 <prvCheckForValidListAndQueue+0x58>)
 80074a2:	f7fd fdeb 	bl	800507c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80074a6:	4811      	ldr	r0, [pc, #68]	; (80074ec <prvCheckForValidListAndQueue+0x5c>)
 80074a8:	f7fd fde8 	bl	800507c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <prvCheckForValidListAndQueue+0x60>)
 80074ae:	4a0e      	ldr	r2, [pc, #56]	; (80074e8 <prvCheckForValidListAndQueue+0x58>)
 80074b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <prvCheckForValidListAndQueue+0x64>)
 80074b4:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <prvCheckForValidListAndQueue+0x5c>)
 80074b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80074b8:	2200      	movs	r2, #0
 80074ba:	210c      	movs	r1, #12
 80074bc:	200a      	movs	r0, #10
 80074be:	f7fd fef9 	bl	80052b4 <xQueueGenericCreate>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a07      	ldr	r2, [pc, #28]	; (80074e4 <prvCheckForValidListAndQueue+0x54>)
 80074c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <prvCheckForValidListAndQueue+0x54>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074d0:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <prvCheckForValidListAndQueue+0x54>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4908      	ldr	r1, [pc, #32]	; (80074f8 <prvCheckForValidListAndQueue+0x68>)
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fbda 	bl	8005c90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074dc:	f000 f9ea 	bl	80078b4 <vPortExitCritical>
    }
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200002d4 	.word	0x200002d4
 80074e8:	200002a4 	.word	0x200002a4
 80074ec:	200002b8 	.word	0x200002b8
 80074f0:	200002cc 	.word	0x200002cc
 80074f4:	200002d0 	.word	0x200002d0
 80074f8:	08008020 	.word	0x08008020

080074fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3b04      	subs	r3, #4
 800750c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007514:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b04      	subs	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3b04      	subs	r3, #4
 800752a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800752c:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <pxPortInitialiseStack+0x64>)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3b14      	subs	r3, #20
 8007536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b04      	subs	r3, #4
 8007542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f06f 0202 	mvn.w	r2, #2
 800754a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3b20      	subs	r3, #32
 8007550:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	08007565 	.word	0x08007565

08007564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <prvTaskExitError+0x54>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d00a      	beq.n	800758e <prvTaskExitError+0x2a>
        __asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
    }
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <prvTaskExitError+0x28>
        __asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60bb      	str	r3, [r7, #8]
    }
 80075a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80075a2:	bf00      	nop
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0fc      	beq.n	80075a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000014 	.word	0x20000014
 80075bc:	00000000 	.word	0x00000000

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	200001a0 	.word	0x200001a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
 800760a:	0000      	.short	0x0000
 800760c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop

08007614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800761a:	4b46      	ldr	r3, [pc, #280]	; (8007734 <xPortStartScheduler+0x120>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a46      	ldr	r2, [pc, #280]	; (8007738 <xPortStartScheduler+0x124>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10a      	bne.n	800763a <xPortStartScheduler+0x26>
        __asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	613b      	str	r3, [r7, #16]
    }
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <xPortStartScheduler+0x120>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a3f      	ldr	r2, [pc, #252]	; (800773c <xPortStartScheduler+0x128>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10a      	bne.n	800765a <xPortStartScheduler+0x46>
        __asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
    }
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <xPortStartScheduler+0x12c>)
 800765c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	22ff      	movs	r2, #255	; 0xff
 800766a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800767c:	b2da      	uxtb	r2, r3
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <xPortStartScheduler+0x130>)
 8007680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <xPortStartScheduler+0x134>)
 8007684:	2207      	movs	r2, #7
 8007686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007688:	e009      	b.n	800769e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <xPortStartScheduler+0x134>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3b01      	subs	r3, #1
 8007690:	4a2d      	ldr	r2, [pc, #180]	; (8007748 <xPortStartScheduler+0x134>)
 8007692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d0ef      	beq.n	800768a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <xPortStartScheduler+0x134>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f1c3 0307 	rsb	r3, r3, #7
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d00a      	beq.n	80076cc <xPortStartScheduler+0xb8>
        __asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60bb      	str	r3, [r7, #8]
    }
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <xPortStartScheduler+0x134>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <xPortStartScheduler+0x134>)
 80076d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076d6:	4b1c      	ldr	r3, [pc, #112]	; (8007748 <xPortStartScheduler+0x134>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <xPortStartScheduler+0x134>)
 80076e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <xPortStartScheduler+0x138>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a17      	ldr	r2, [pc, #92]	; (800774c <xPortStartScheduler+0x138>)
 80076f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <xPortStartScheduler+0x138>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a14      	ldr	r2, [pc, #80]	; (800774c <xPortStartScheduler+0x138>)
 80076fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007702:	f000 f95b 	bl	80079bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <xPortStartScheduler+0x13c>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800770c:	f000 f97a 	bl	8007a04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xPortStartScheduler+0x140>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <xPortStartScheduler+0x140>)
 8007716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800771a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800771c:	f7ff ff64 	bl	80075e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007720:	f7fe fe1e 	bl	8006360 <vTaskSwitchContext>
    prvTaskExitError();
 8007724:	f7ff ff1e 	bl	8007564 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	e000ed00 	.word	0xe000ed00
 8007738:	410fc271 	.word	0x410fc271
 800773c:	410fc270 	.word	0x410fc270
 8007740:	e000e400 	.word	0xe000e400
 8007744:	200002e0 	.word	0x200002e0
 8007748:	200002e4 	.word	0x200002e4
 800774c:	e000ed20 	.word	0xe000ed20
 8007750:	20000014 	.word	0x20000014
 8007754:	e000ef34 	.word	0xe000ef34

08007758 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800775e:	4b37      	ldr	r3, [pc, #220]	; (800783c <vInitPrioGroupValue+0xe4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a37      	ldr	r2, [pc, #220]	; (8007840 <vInitPrioGroupValue+0xe8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10a      	bne.n	800777e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	613b      	str	r3, [r7, #16]
    }
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800777e:	4b2f      	ldr	r3, [pc, #188]	; (800783c <vInitPrioGroupValue+0xe4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a30      	ldr	r2, [pc, #192]	; (8007844 <vInitPrioGroupValue+0xec>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10a      	bne.n	800779e <vInitPrioGroupValue+0x46>
        __asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	60fb      	str	r3, [r7, #12]
    }
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800779e:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <vInitPrioGroupValue+0xf0>)
 80077a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	22ff      	movs	r2, #255	; 0xff
 80077ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	4b22      	ldr	r3, [pc, #136]	; (800784c <vInitPrioGroupValue+0xf4>)
 80077c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077c6:	4b22      	ldr	r3, [pc, #136]	; (8007850 <vInitPrioGroupValue+0xf8>)
 80077c8:	2207      	movs	r2, #7
 80077ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077cc:	e009      	b.n	80077e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <vInitPrioGroupValue+0xf8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	4a1e      	ldr	r2, [pc, #120]	; (8007850 <vInitPrioGroupValue+0xf8>)
 80077d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d0ef      	beq.n	80077ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ee:	4b18      	ldr	r3, [pc, #96]	; (8007850 <vInitPrioGroupValue+0xf8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1c3 0307 	rsb	r3, r3, #7
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d00a      	beq.n	8007810 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
    }
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <vInitPrioGroupValue+0xf8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	4a0e      	ldr	r2, [pc, #56]	; (8007850 <vInitPrioGroupValue+0xf8>)
 8007818:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <vInitPrioGroupValue+0xf8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007822:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <vInitPrioGroupValue+0xf8>)
 8007824:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	b2da      	uxtb	r2, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	e000ed00 	.word	0xe000ed00
 8007840:	410fc271 	.word	0x410fc271
 8007844:	410fc270 	.word	0x410fc270
 8007848:	e000e400 	.word	0xe000e400
 800784c:	200002e0 	.word	0x200002e0
 8007850:	200002e4 	.word	0x200002e4

08007854 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
        __asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	607b      	str	r3, [r7, #4]
    }
 800786c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <vPortEnterCritical+0x58>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	4a0d      	ldr	r2, [pc, #52]	; (80078ac <vPortEnterCritical+0x58>)
 8007876:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <vPortEnterCritical+0x58>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10f      	bne.n	80078a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vPortEnterCritical+0x5c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	603b      	str	r3, [r7, #0]
    }
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <vPortEnterCritical+0x4a>
    }
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000014 	.word	0x20000014
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <vPortExitCritical+0x50>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <vPortExitCritical+0x24>
        __asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
    }
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <vPortExitCritical+0x50>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <vPortExitCritical+0x50>)
 80078e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <vPortExitCritical+0x50>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <vPortExitCritical+0x42>
 80078ea:	2300      	movs	r3, #0
 80078ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f383 8811 	msr	BASEPRI, r3
    }
 80078f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000014 	.word	0x20000014
	...

08007910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007910:	f3ef 8009 	mrs	r0, PSP
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4b15      	ldr	r3, [pc, #84]	; (8007970 <pxCurrentTCBConst>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	f01e 0f10 	tst.w	lr, #16
 8007920:	bf08      	it	eq
 8007922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792a:	6010      	str	r0, [r2, #0]
 800792c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007934:	f380 8811 	msr	BASEPRI, r0
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f7fe fd0e 	bl	8006360 <vTaskSwitchContext>
 8007944:	f04f 0000 	mov.w	r0, #0
 8007948:	f380 8811 	msr	BASEPRI, r0
 800794c:	bc09      	pop	{r0, r3}
 800794e:	6819      	ldr	r1, [r3, #0]
 8007950:	6808      	ldr	r0, [r1, #0]
 8007952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007956:	f01e 0f10 	tst.w	lr, #16
 800795a:	bf08      	it	eq
 800795c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007960:	f380 8809 	msr	PSP, r0
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	f3af 8000 	nop.w

08007970 <pxCurrentTCBConst>:
 8007970:	200001a0 	.word	0x200001a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop

08007978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
        __asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	607b      	str	r3, [r7, #4]
    }
 8007990:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007992:	f7fe fc2d 	bl	80061f0 <xTaskIncrementTick>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <SysTick_Handler+0x40>)
 800799e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f383 8811 	msr	BASEPRI, r3
    }
 80079ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <vPortSetupTimerInterrupt+0x34>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079c6:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <vPortSetupTimerInterrupt+0x38>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <vPortSetupTimerInterrupt+0x3c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <vPortSetupTimerInterrupt+0x40>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	099b      	lsrs	r3, r3, #6
 80079d8:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <vPortSetupTimerInterrupt+0x44>)
 80079da:	3b01      	subs	r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <vPortSetupTimerInterrupt+0x34>)
 80079e0:	2207      	movs	r2, #7
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	e000e010 	.word	0xe000e010
 80079f4:	e000e018 	.word	0xe000e018
 80079f8:	20000008 	.word	0x20000008
 80079fc:	10624dd3 	.word	0x10624dd3
 8007a00:	e000e014 	.word	0xe000e014

08007a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a14 <vPortEnableVFP+0x10>
 8007a08:	6801      	ldr	r1, [r0, #0]
 8007a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a0e:	6001      	str	r1, [r0, #0]
 8007a10:	4770      	bx	lr
 8007a12:	0000      	.short	0x0000
 8007a14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop

08007a1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007a22:	f3ef 8305 	mrs	r3, IPSR
 8007a26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d914      	bls.n	8007a58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a2e:	4a17      	ldr	r2, [pc, #92]	; (8007a8c <vPortValidateInterruptPriority+0x70>)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <vPortValidateInterruptPriority+0x74>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	7afa      	ldrb	r2, [r7, #11]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d20a      	bcs.n	8007a58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	607b      	str	r3, [r7, #4]
    }
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <vPortValidateInterruptPriority+0x78>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <vPortValidateInterruptPriority+0x7c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d90a      	bls.n	8007a7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	603b      	str	r3, [r7, #0]
    }
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <vPortValidateInterruptPriority+0x60>
    }
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	e000e3f0 	.word	0xe000e3f0
 8007a90:	200002e0 	.word	0x200002e0
 8007a94:	e000ed0c 	.word	0xe000ed0c
 8007a98:	200002e4 	.word	0x200002e4

08007a9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08a      	sub	sp, #40	; 0x28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007aa8:	f7fe fae8 	bl	800607c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007aac:	4b65      	ldr	r3, [pc, #404]	; (8007c44 <pvPortMalloc+0x1a8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007ab4:	f000 f934 	bl	8007d20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ab8:	4b63      	ldr	r3, [pc, #396]	; (8007c48 <pvPortMalloc+0x1ac>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 80a7 	bne.w	8007c14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02d      	beq.n	8007b28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007acc:	2208      	movs	r2, #8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d227      	bcs.n	8007b28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007ad8:	2208      	movs	r2, #8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4413      	add	r3, r2
 8007ade:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d021      	beq.n	8007b2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f023 0307 	bic.w	r3, r3, #7
 8007af0:	3308      	adds	r3, #8
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d214      	bcs.n	8007b22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	3308      	adds	r3, #8
 8007b00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <pvPortMalloc+0x92>
        __asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	617b      	str	r3, [r7, #20]
    }
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b26:	e002      	b.n	8007b2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	e000      	b.n	8007b30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d06e      	beq.n	8007c14 <pvPortMalloc+0x178>
 8007b36:	4b45      	ldr	r3, [pc, #276]	; (8007c4c <pvPortMalloc+0x1b0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d869      	bhi.n	8007c14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007b40:	4b43      	ldr	r3, [pc, #268]	; (8007c50 <pvPortMalloc+0x1b4>)
 8007b42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007b44:	4b42      	ldr	r3, [pc, #264]	; (8007c50 <pvPortMalloc+0x1b4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b4a:	e004      	b.n	8007b56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d903      	bls.n	8007b68 <pvPortMalloc+0xcc>
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f1      	bne.n	8007b4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007b68:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <pvPortMalloc+0x1a8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d050      	beq.n	8007c14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2208      	movs	r2, #8
 8007b78:	4413      	add	r3, r2
 8007b7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d91f      	bls.n	8007bd4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <pvPortMalloc+0x120>
        __asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	613b      	str	r3, [r7, #16]
    }
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	1ad2      	subs	r2, r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bce:	69b8      	ldr	r0, [r7, #24]
 8007bd0:	f000 f908 	bl	8007de4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bd4:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <pvPortMalloc+0x1b0>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <pvPortMalloc+0x1b0>)
 8007be0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007be2:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <pvPortMalloc+0x1b0>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <pvPortMalloc+0x1b8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d203      	bcs.n	8007bf6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bee:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <pvPortMalloc+0x1b0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <pvPortMalloc+0x1b8>)
 8007bf4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <pvPortMalloc+0x1ac>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <pvPortMalloc+0x1bc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	4a11      	ldr	r2, [pc, #68]	; (8007c58 <pvPortMalloc+0x1bc>)
 8007c12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007c14:	f7fe fa40 	bl	8006098 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <pvPortMalloc+0x19c>
        __asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60fb      	str	r3, [r7, #12]
    }
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <pvPortMalloc+0x19a>
    return pvReturn;
 8007c38:	69fb      	ldr	r3, [r7, #28]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	; 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	200016f0 	.word	0x200016f0
 8007c48:	20001704 	.word	0x20001704
 8007c4c:	200016f4 	.word	0x200016f4
 8007c50:	200016e8 	.word	0x200016e8
 8007c54:	200016f8 	.word	0x200016f8
 8007c58:	200016fc 	.word	0x200016fc

08007c5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d04d      	beq.n	8007d0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007c6e:	2308      	movs	r3, #8
 8007c70:	425b      	negs	r3, r3
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <vPortFree+0xb8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4013      	ands	r3, r2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <vPortFree+0x44>
        __asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	60fb      	str	r3, [r7, #12]
    }
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <vPortFree+0x62>
        __asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	60bb      	str	r3, [r7, #8]
    }
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <vPortFree+0xb8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01e      	beq.n	8007d0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d11a      	bne.n	8007d0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <vPortFree+0xb8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007ce4:	f7fe f9ca 	bl	800607c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortFree+0xbc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4a09      	ldr	r2, [pc, #36]	; (8007d18 <vPortFree+0xbc>)
 8007cf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cf6:	6938      	ldr	r0, [r7, #16]
 8007cf8:	f000 f874 	bl	8007de4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007cfc:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <vPortFree+0xc0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	4a06      	ldr	r2, [pc, #24]	; (8007d1c <vPortFree+0xc0>)
 8007d04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007d06:	f7fe f9c7 	bl	8006098 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007d0a:	bf00      	nop
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20001704 	.word	0x20001704
 8007d18:	200016f4 	.word	0x200016f4
 8007d1c:	20001700 	.word	0x20001700

08007d20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <prvHeapInit+0xac>)
 8007d2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00c      	beq.n	8007d54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3307      	adds	r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	4a1f      	ldr	r2, [pc, #124]	; (8007dcc <prvHeapInit+0xac>)
 8007d50:	4413      	add	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <prvHeapInit+0xb0>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007d5e:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <prvHeapInit+0xb0>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	4413      	add	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <prvHeapInit+0xb4>)
 8007d80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007d82:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <prvHeapInit+0xb4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <prvHeapInit+0xb4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <prvHeapInit+0xb4>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <prvHeapInit+0xb8>)
 8007dae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <prvHeapInit+0xbc>)
 8007db6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <prvHeapInit+0xc0>)
 8007dba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	200002e8 	.word	0x200002e8
 8007dd0:	200016e8 	.word	0x200016e8
 8007dd4:	200016f0 	.word	0x200016f0
 8007dd8:	200016f8 	.word	0x200016f8
 8007ddc:	200016f4 	.word	0x200016f4
 8007de0:	20001704 	.word	0x20001704

08007de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dec:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <prvInsertBlockIntoFreeList+0xac>)
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e002      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x14>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d8f7      	bhi.n	8007df2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d108      	bne.n	8007e26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d118      	bne.n	8007e6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <prvInsertBlockIntoFreeList+0xb0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d00d      	beq.n	8007e62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	441a      	add	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	e008      	b.n	8007e74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <prvInsertBlockIntoFreeList+0xb0>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e003      	b.n	8007e74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d002      	beq.n	8007e82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	200016e8 	.word	0x200016e8
 8007e94:	200016f0 	.word	0x200016f0

08007e98 <__libc_init_array>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4d0d      	ldr	r5, [pc, #52]	; (8007ed0 <__libc_init_array+0x38>)
 8007e9c:	4c0d      	ldr	r4, [pc, #52]	; (8007ed4 <__libc_init_array+0x3c>)
 8007e9e:	1b64      	subs	r4, r4, r5
 8007ea0:	10a4      	asrs	r4, r4, #2
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	42a6      	cmp	r6, r4
 8007ea6:	d109      	bne.n	8007ebc <__libc_init_array+0x24>
 8007ea8:	4d0b      	ldr	r5, [pc, #44]	; (8007ed8 <__libc_init_array+0x40>)
 8007eaa:	4c0c      	ldr	r4, [pc, #48]	; (8007edc <__libc_init_array+0x44>)
 8007eac:	f000 f82e 	bl	8007f0c <_init>
 8007eb0:	1b64      	subs	r4, r4, r5
 8007eb2:	10a4      	asrs	r4, r4, #2
 8007eb4:	2600      	movs	r6, #0
 8007eb6:	42a6      	cmp	r6, r4
 8007eb8:	d105      	bne.n	8007ec6 <__libc_init_array+0x2e>
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec0:	4798      	blx	r3
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	e7ee      	b.n	8007ea4 <__libc_init_array+0xc>
 8007ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eca:	4798      	blx	r3
 8007ecc:	3601      	adds	r6, #1
 8007ece:	e7f2      	b.n	8007eb6 <__libc_init_array+0x1e>
 8007ed0:	080080f8 	.word	0x080080f8
 8007ed4:	080080f8 	.word	0x080080f8
 8007ed8:	080080f8 	.word	0x080080f8
 8007edc:	080080fc 	.word	0x080080fc

08007ee0 <memcpy>:
 8007ee0:	440a      	add	r2, r1
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee8:	d100      	bne.n	8007eec <memcpy+0xc>
 8007eea:	4770      	bx	lr
 8007eec:	b510      	push	{r4, lr}
 8007eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	d1f9      	bne.n	8007eee <memcpy+0xe>
 8007efa:	bd10      	pop	{r4, pc}

08007efc <memset>:
 8007efc:	4402      	add	r2, r0
 8007efe:	4603      	mov	r3, r0
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d100      	bne.n	8007f06 <memset+0xa>
 8007f04:	4770      	bx	lr
 8007f06:	f803 1b01 	strb.w	r1, [r3], #1
 8007f0a:	e7f9      	b.n	8007f00 <memset+0x4>

08007f0c <_init>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

08007f18 <_fini>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr
