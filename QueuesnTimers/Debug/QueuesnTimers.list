
QueuesnTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009998  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  08009fc4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002364  20000090  0800a04c  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200023f4  0800a04c  000223f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dd74  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003faa  00000000  00000000  0003de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001af0  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001968  00000000  00000000  000438d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021018  00000000  00000000  00045238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d762  00000000  00000000  00066250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cc026  00000000  00000000  000839b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014f9d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000748c  00000000  00000000  0014fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	08009ac0 	.word	0x08009ac0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	08009ac0 	.word	0x08009ac0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LedStartTimer>:

#include "led_effect.h"


void LedStartTimer(uint8_t n)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af02      	add	r7, sp, #8
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	LedEffectStop();
 800053e:	f000 f817 	bl	8000570 <LedEffectStop>
	xTimerStart(hLedTimer[n-1], portMAX_DELAY);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3b01      	subs	r3, #1
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <LedStartTimer+0x38>)
 8000548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800054c:	f006 ff20 	bl	8007390 <xTaskGetTickCount>
 8000550:	4602      	mov	r2, r0
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2101      	movs	r1, #1
 800055c:	4620      	mov	r0, r4
 800055e:	f007 fe29 	bl	80081b4 <xTimerGenericCommand>


}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	bf00      	nop
 800056c:	20000184 	.word	0x20000184

08000570 <LedEffectStop>:

void LedEffectStop(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
	for(uint8_t i = 0; i < 3 ; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e00e      	b.n	800059a <LedEffectStop+0x2a>
		xTimerStop(hLedTimer[i],portMAX_DELAY);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <LedEffectStop+0x3c>)
 8000580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2200      	movs	r2, #0
 800058e:	2103      	movs	r1, #3
 8000590:	f007 fe10 	bl	80081b4 <xTimerGenericCommand>
	for(uint8_t i = 0; i < 3 ; i++)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	3301      	adds	r3, #1
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d9ed      	bls.n	800057c <LedEffectStop+0xc>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000184 	.word	0x20000184

080005b0 <LedEffect1>:

void LedEffect1(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LedEffect1+0x28>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <LedEffect1+0x28>)
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <LedEffect1+0x28>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <LedEffect1+0x20>
 80005ca:	f000 f889 	bl	80006e0 <TurnOffAllLeds>
}
 80005ce:	e001      	b.n	80005d4 <LedEffect1+0x24>
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 80005d0:	f000 f870 	bl	80006b4 <TurnOnAllLeds>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000008 	.word	0x20000008

080005dc <LedEffect2>:

void LedEffect2(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <LedEffect2+0x28>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	f083 0301 	eor.w	r3, r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LedEffect2+0x28>)
 80005ec:	801a      	strh	r2, [r3, #0]
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <LedEffect2+0x28>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <LedEffect2+0x20>
 80005f6:	f000 f889 	bl	800070c <TurnOnOddLeds>
}
 80005fa:	e001      	b.n	8000600 <LedEffect2+0x24>
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 80005fc:	f000 f89c 	bl	8000738 <TurnOnEvenLeds>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000000a 	.word	0x2000000a

08000608 <LedEffect3>:

/* TODO: Try to fix the order of blinking. It starts blinking
 * with BLUE LED and goes in reverse direction. */

void LedEffect3(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	// 1 << 2 : 4	(0x4)
	// 1 << 3 : 8	(0x8)
	// 1 << 4 : 16	(0x10)
	// 1 << 5 : 32	(0x20)
	// 1 << 6 : 64	(0x40)
	LedControl( 0x1 << (i++ % 6) );
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <LedEffect3+0x58>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	1c53      	adds	r3, r2, #1
 8000612:	b299      	uxth	r1, r3
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <LedEffect3+0x58>)
 8000616:	8019      	strh	r1, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <LedEffect3+0x5c>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	0899      	lsrs	r1, r3, #2
 8000620:	460b      	mov	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	2301      	movs	r3, #1
 8000630:	4093      	lsls	r3, r2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f817 	bl	8000668 <LedControl>

	if (i % 6 == 0)
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <LedEffect3+0x58>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <LedEffect3+0x5c>)
 8000640:	fba3 1302 	umull	r1, r3, r3, r2
 8000644:	0899      	lsrs	r1, r3, #2
 8000646:	460b      	mov	r3, r1
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	440b      	add	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d102      	bne.n	800065c <LedEffect3+0x54>
	{
		// Reset i
		i = 0;
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <LedEffect3+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		// Do nothing.
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000ac 	.word	0x200000ac
 8000664:	aaaaaaab 	.word	0xaaaaaaab

08000668 <LedControl>:

void LedControl(uint8_t value)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	for( uint8_t i = 0; i < 6; i++ )
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e013      	b.n	80006a0 <LedControl+0x38>
		HAL_GPIO_WritePin( GPIOB, ( BLUE_LED >> i), ((value >> i))& 0x1 );
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2220      	movs	r2, #32
 800067c:	fa42 f303 	asr.w	r3, r2, r3
 8000680:	b299      	uxth	r1, r3
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	fa42 f303 	asr.w	r3, r2, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <LedControl+0x48>)
 8000696:	f001 fca5 	bl	8001fe4 <HAL_GPIO_WritePin>
	for( uint8_t i = 0; i < 6; i++ )
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	3301      	adds	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	d9e8      	bls.n	8000678 <LedControl+0x10>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	48000400 	.word	0x48000400

080006b4 <TurnOnAllLeds>:


void TurnOnAllLeds(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2120      	movs	r1, #32
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <TurnOnAllLeds+0x28>)
 80006be:	f001 fc91 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <TurnOnAllLeds+0x28>)
 80006c8:	f001 fc8c 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <TurnOnAllLeds+0x28>)
 80006d2:	f001 fc87 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	48000400 	.word	0x48000400

080006e0 <TurnOffAllLeds>:

void TurnOffAllLeds(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <TurnOffAllLeds+0x28>)
 80006ea:	f001 fc7b 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <TurnOffAllLeds+0x28>)
 80006f4:	f001 fc76 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <TurnOffAllLeds+0x28>)
 80006fe:	f001 fc71 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	48000400 	.word	0x48000400

0800070c <TurnOnOddLeds>:

void TurnOnOddLeds(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <TurnOnOddLeds+0x28>)
 8000716:	f001 fc65 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <TurnOnOddLeds+0x28>)
 8000720:	f001 fc60 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <TurnOnOddLeds+0x28>)
 800072a:	f001 fc5b 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <TurnOnEvenLeds>:

void TurnOnEvenLeds(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <TurnOnEvenLeds+0x28>)
 8000742:	f001 fc4f 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <TurnOnEvenLeds+0x28>)
 800074c:	f001 fc4a 	bl	8001fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2102      	movs	r1, #2
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <TurnOnEvenLeds+0x28>)
 8000756:	f001 fc45 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	48000400 	.word	0x48000400

08000764 <LedEffectCbx>:

/* Timer callback function. It is called whenever a timer ends */
void LedEffectCbx(TimerHandle_t xTimer)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint32_t id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f008 f801 	bl	8008774 <pvTimerGetTimerID>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d00f      	beq.n	800079c <LedEffectCbx+0x38>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d80f      	bhi.n	80007a2 <LedEffectCbx+0x3e>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d003      	beq.n	8000790 <LedEffectCbx+0x2c>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d003      	beq.n	8000796 <LedEffectCbx+0x32>
	case LED_EFFECT3:
		LedEffect3();
		break;
	}

}
 800078e:	e008      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect1();
 8000790:	f7ff ff0e 	bl	80005b0 <LedEffect1>
		break;
 8000794:	e005      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect2();
 8000796:	f7ff ff21 	bl	80005dc <LedEffect2>
		break;
 800079a:	e002      	b.n	80007a2 <LedEffectCbx+0x3e>
		LedEffect3();
 800079c:	f7ff ff34 	bl	8000608 <LedEffect3>
		break;
 80007a0:	bf00      	nop
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ba:	f023 0218 	bic.w	r2, r3, #24
 80007be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f001 f897 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f90f 	bl	8000a34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000816:	f000 f963 	bl	8000ae0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f9f1 	bl	8000c00 <MX_GPIO_Init>
  MX_RTC_Init();
 800081e:	f000 f97d 	bl	8000b1c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000822:	f000 f9a1 	bl	8000b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <main+0x1d0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a6b      	ldr	r2, [pc, #428]	; (80009d8 <main+0x1d0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6013      	str	r3, [r2, #0]

  BaseType_t status;

  status = xTaskCreate(menuTask, "Menu-Task", 250, NULL, 2, &hMenu);
 8000832:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <main+0x1d4>)
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	22fa      	movs	r2, #250	; 0xfa
 800083e:	4968      	ldr	r1, [pc, #416]	; (80009e0 <main+0x1d8>)
 8000840:	4868      	ldr	r0, [pc, #416]	; (80009e4 <main+0x1dc>)
 8000842:	f006 fb63 	bl	8006f0c <xTaskCreate>
 8000846:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00a      	beq.n	8000864 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000860:	bf00      	nop
 8000862:	e7fe      	b.n	8000862 <main+0x5a>

  status = xTaskCreate(ledTask, "Led-Task", 250, NULL, 2, &hLed);
 8000864:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <main+0x1e0>)
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	2302      	movs	r3, #2
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	22fa      	movs	r2, #250	; 0xfa
 8000870:	495e      	ldr	r1, [pc, #376]	; (80009ec <main+0x1e4>)
 8000872:	485f      	ldr	r0, [pc, #380]	; (80009f0 <main+0x1e8>)
 8000874:	f006 fb4a 	bl	8006f0c <xTaskCreate>
 8000878:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d00a      	beq.n	8000896 <main+0x8e>
        __asm volatile
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	61bb      	str	r3, [r7, #24]
    }
 8000892:	bf00      	nop
 8000894:	e7fe      	b.n	8000894 <main+0x8c>

  status = xTaskCreate(RTCTask, "RTC-Task", 250, NULL, 2, &hRTC);
 8000896:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <main+0x1ec>)
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	2302      	movs	r3, #2
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	22fa      	movs	r2, #250	; 0xfa
 80008a2:	4955      	ldr	r1, [pc, #340]	; (80009f8 <main+0x1f0>)
 80008a4:	4855      	ldr	r0, [pc, #340]	; (80009fc <main+0x1f4>)
 80008a6:	f006 fb31 	bl	8006f0c <xTaskCreate>
 80008aa:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d00a      	beq.n	80008c8 <main+0xc0>
        __asm volatile
 80008b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	617b      	str	r3, [r7, #20]
    }
 80008c4:	bf00      	nop
 80008c6:	e7fe      	b.n	80008c6 <main+0xbe>

  status = xTaskCreate(printTask, "Print-Task", 250, NULL, 2, &hPrint);
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <main+0x1f8>)
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	2302      	movs	r3, #2
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	22fa      	movs	r2, #250	; 0xfa
 80008d4:	494b      	ldr	r1, [pc, #300]	; (8000a04 <main+0x1fc>)
 80008d6:	484c      	ldr	r0, [pc, #304]	; (8000a08 <main+0x200>)
 80008d8:	f006 fb18 	bl	8006f0c <xTaskCreate>
 80008dc:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d00a      	beq.n	80008fa <main+0xf2>
        __asm volatile
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
    }
 80008f6:	bf00      	nop
 80008f8:	e7fe      	b.n	80008f8 <main+0xf0>

  status = xTaskCreate(commandTask, "Command-Task", 250, NULL, 2, &hCommand);
 80008fa:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <main+0x204>)
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	22fa      	movs	r2, #250	; 0xfa
 8000906:	4942      	ldr	r1, [pc, #264]	; (8000a10 <main+0x208>)
 8000908:	4842      	ldr	r0, [pc, #264]	; (8000a14 <main+0x20c>)
 800090a:	f006 faff 	bl	8006f0c <xTaskCreate>
 800090e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d00a      	beq.n	800092c <main+0x124>
        __asm volatile
 8000916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	60fb      	str	r3, [r7, #12]
    }
 8000928:	bf00      	nop
 800092a:	e7fe      	b.n	800092a <main+0x122>

  hInputDataQueue = xQueueCreate(10, sizeof(char));
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	200a      	movs	r0, #10
 8000932:	f005 fd9f 	bl	8006474 <xQueueGenericCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <main+0x210>)
 800093a:	6013      	str	r3, [r2, #0]
  configASSERT(hInputDataQueue != NULL);
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0x210>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <main+0x152>
        __asm volatile
 8000944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000948:	f383 8811 	msr	BASEPRI, r3
 800094c:	f3bf 8f6f 	isb	sy
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	60bb      	str	r3, [r7, #8]
    }
 8000956:	bf00      	nop
 8000958:	e7fe      	b.n	8000958 <main+0x150>

  /* We pass a string (a reference to char) to the queue API
   * Since a pointer is unsigned long int we used sizeof(unsigned long int) */
  hPrintQueue = xQueueCreate(10, sizeof(size_t));
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	200a      	movs	r0, #10
 8000960:	f005 fd88 	bl	8006474 <xQueueGenericCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4a2d      	ldr	r2, [pc, #180]	; (8000a1c <main+0x214>)
 8000968:	6013      	str	r3, [r2, #0]
  configASSERT(hPrintQueue != NULL);
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <main+0x214>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10a      	bne.n	8000988 <main+0x180>
        __asm volatile
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	607b      	str	r3, [r7, #4]
    }
 8000984:	bf00      	nop
 8000986:	e7fe      	b.n	8000986 <main+0x17e>

  // Create timers for LED effects
  for(uint8_t i = 0; i < 3; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800098e:	e017      	b.n	80009c0 <main+0x1b8>
	  hLedTimer[i] = xTimerCreate("Led Timer",pdMS_TO_TICKS(500),pdTRUE,(void*)(i+1),LedEffectCbx);
 8000990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000994:	3301      	adds	r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <main+0x218>)
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009a8:	481e      	ldr	r0, [pc, #120]	; (8000a24 <main+0x21c>)
 80009aa:	f007 fba7 	bl	80080fc <xTimerCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <main+0x220>)
 80009b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(uint8_t i = 0; i < 3; i++)
 80009b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d9e3      	bls.n	8000990 <main+0x188>



  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 80009c8:	2201      	movs	r2, #1
 80009ca:	4918      	ldr	r1, [pc, #96]	; (8000a2c <main+0x224>)
 80009cc:	4818      	ldr	r0, [pc, #96]	; (8000a30 <main+0x228>)
 80009ce:	f003 fcc1 	bl	8004354 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009d2:	f006 fbe1 	bl	8007198 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x1ce>
 80009d8:	e0001000 	.word	0xe0001000
 80009dc:	20000168 	.word	0x20000168
 80009e0:	08009ad8 	.word	0x08009ad8
 80009e4:	0800128d 	.word	0x0800128d
 80009e8:	2000016c 	.word	0x2000016c
 80009ec:	08009ae4 	.word	0x08009ae4
 80009f0:	08001375 	.word	0x08001375
 80009f4:	20000170 	.word	0x20000170
 80009f8:	08009af0 	.word	0x08009af0
 80009fc:	0800148d 	.word	0x0800148d
 8000a00:	20000174 	.word	0x20000174
 8000a04:	08009afc 	.word	0x08009afc
 8000a08:	08001729 	.word	0x08001729
 8000a0c:	20000178 	.word	0x20000178
 8000a10:	08009b08 	.word	0x08009b08
 8000a14:	08001769 	.word	0x08001769
 8000a18:	2000017c 	.word	0x2000017c
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	08000765 	.word	0x08000765
 8000a24:	08009b18 	.word	0x08009b18
 8000a28:	20000184 	.word	0x20000184
 8000a2c:	20000190 	.word	0x20000190
 8000a30:	200000d4 	.word	0x200000d4

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	; 0x60
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2244      	movs	r2, #68	; 0x44
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 fbc0 	bl	80091c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a5a:	f001 fadb 	bl	8002014 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fea3 	bl	80007aa <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000a64:	232f      	movs	r3, #47	; 0x2f
 8000a66:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a84:	2360      	movs	r3, #96	; 0x60
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fe1b 	bl	80026d0 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000aa0:	f000 f950 	bl	8000d44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000aa4:	236f      	movs	r3, #111	; 0x6f
 8000aa6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 f939 	bl	8002d3c <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ad0:	f000 f938 	bl	8000d44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ad4:	f002 fe2b 	bl	800372e <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ad8:	bf00      	nop
 8000ada:	3760      	adds	r7, #96	; 0x60
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2230      	movs	r2, #48	; 0x30
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fb6b 	bl	80091c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000afc:	2310      	movs	r3, #16
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fd1d 	bl	8003542 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b0e:	f000 f919 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <MX_RTC_Init+0x48>)
 8000b24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b2e:	227f      	movs	r2, #127	; 0x7f
 8000b30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_RTC_Init+0x44>)
 8000b4c:	f002 fdf6 	bl	800373c <HAL_RTC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b56:	f000 f8f5 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000b0 	.word	0x200000b0
 8000b64:	40002800 	.word	0x40002800

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_USART1_UART_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f003 faf1 	bl	8004198 <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f8c2 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000bc4:	f005 fa6f 	bl	80060a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f000 f8b9 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000bd6:	f005 faa4 	bl	8006122 <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f000 f8b0 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_USART1_UART_Init+0x90>)
 8000be6:	f005 fa25 	bl	8006034 <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f8a8 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000d4 	.word	0x200000d4
 8000bfc:	40013800 	.word	0x40013800

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	2004      	movs	r0, #4
 8000c16:	f7ff fdde 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fddb 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fdd8 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2010      	movs	r0, #16
 8000c28:	f7ff fdd5 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2123      	movs	r1, #35	; 0x23
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x88>)
 8000c32:	f001 f9d7 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c36:	2340      	movs	r3, #64	; 0x40
 8000c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 f863 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000c4e:	2323      	movs	r3, #35	; 0x23
 8000c50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <MX_GPIO_Init+0x88>)
 8000c64:	f001 f856 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0x8c>)
 8000c7a:	f001 f84b 	bl	8001d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48001000 	.word	0x48001000

08000c90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	BaseType_t isQueueFull;
	// return pdFALSE if the queue is not full, or pdTRUE if the queue is full.
	isQueueFull = xQueueIsQueueFullFromISR(hInputDataQueue);
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_UART_RxCpltCallback+0x80>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 f8b0 	bl	8006e02 <xQueueIsQueueFullFromISR>
 8000ca2:	60f8      	str	r0, [r7, #12]
	if(isQueueFull == pdFALSE)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d107      	bne.n	8000cba <HAL_UART_RxCpltCallback+0x2a>
	{
		/* Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_UART_RxCpltCallback+0x80>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4918      	ldr	r1, [pc, #96]	; (8000d14 <HAL_UART_RxCpltCallback+0x84>)
 8000cb4:	f005 fd5e 	bl	8006774 <xQueueGenericSendFromISR>
 8000cb8:	e012      	b.n	8000ce0 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_UART_RxCpltCallback+0x84>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* make sure that last data byte of the queue is '\n' */
			// Copy the last received item to the queue into dummy and delete it
			xQueueReceiveFromISR(hInputDataQueue, (void*)&dummy, NULL);
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_UART_RxCpltCallback+0x80>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f107 010b 	add.w	r1, r7, #11
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f005 fedb 	bl	8006a88 <xQueueReceiveFromISR>

			// Keep '\n' on the back of the queue
			xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_UART_RxCpltCallback+0x80>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <HAL_UART_RxCpltCallback+0x84>)
 8000cdc:	f005 fd4a 	bl	8006774 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
			if(user_data == '\n')
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_UART_RxCpltCallback+0x84>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b0a      	cmp	r3, #10
 8000ce6:	d10a      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x6e>
			{
				xTaskNotifyFromISR(hCommand,0,eNoAction,NULL);
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_UART_RxCpltCallback+0x88>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f007 f85d 	bl	8007db8 <xTaskGenericNotifyFromISR>
			}



	/* Enable UART data byte reception again in IT mode */
	  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <HAL_UART_RxCpltCallback+0x84>)
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <HAL_UART_RxCpltCallback+0x8c>)
 8000d04:	f003 fb26 	bl	8004354 <HAL_UART_Receive_IT>



}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000017c 	.word	0x2000017c
 8000d14:	20000190 	.word	0x20000190
 8000d18:	20000178 	.word	0x20000178
 8000d1c:	200000d4 	.word	0x200000d4

08000d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d32:	f000 fe25 	bl	8001980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40012c00 	.word	0x40012c00

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <ShowTimeDate>:
#include "rtc.h"



void ShowTimeDate(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af04      	add	r7, sp, #16


	static char * time = showTime;
	static char * date = showDate;

	memset(&rtcDate,0,sizeof(rtcDate));
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f008 fa32 	bl	80091c8 <memset>
	memset(&rtcTime,0,sizeof(rtcTime));
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2214      	movs	r2, #20
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f008 fa2c 	bl	80091c8 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4820      	ldr	r0, [pc, #128]	; (8000df8 <ShowTimeDate+0xa8>)
 8000d78:	f002 fe54 	bl	8003a24 <HAL_RTC_GetTime>

	/* Get the RTC Current Date */
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <ShowTimeDate+0xa8>)
 8000d86:	f002 fea9 	bl	8003adc <HAL_RTC_GetDate>

	char * format;
	format = (rtcTime.TimeFormat == RTC_HOURFORMAT_24) ? "24 Hours Format" : "12 Hours Format";
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <ShowTimeDate+0x44>
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <ShowTimeDate+0xac>)
 8000d92:	e000      	b.n	8000d96 <ShowTimeDate+0x46>
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <ShowTimeDate+0xb0>)
 8000d96:	61fb      	str	r3, [r7, #28]

	/* Display time format : hh:mm:ss */
	sprintf((char *)showTime,
			"%s:\t%02d:%02d:%02d [%s]",
			"\nCurrent Time&Date",
			rtcTime.Hours,
 8000d98:	793b      	ldrb	r3, [r7, #4]
	sprintf((char *)showTime,
 8000d9a:	4618      	mov	r0, r3
			rtcTime.Minutes,
 8000d9c:	797b      	ldrb	r3, [r7, #5]
	sprintf((char *)showTime,
 8000d9e:	461a      	mov	r2, r3
			rtcTime.Seconds,
 8000da0:	79bb      	ldrb	r3, [r7, #6]
	sprintf((char *)showTime,
 8000da2:	4619      	mov	r1, r3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	9302      	str	r3, [sp, #8]
 8000da8:	9101      	str	r1, [sp, #4]
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	4603      	mov	r3, r0
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <ShowTimeDate+0xb4>)
 8000db0:	4915      	ldr	r1, [pc, #84]	; (8000e08 <ShowTimeDate+0xb8>)
 8000db2:	4816      	ldr	r0, [pc, #88]	; (8000e0c <ShowTimeDate+0xbc>)
 8000db4:	f008 fa10 	bl	80091d8 <siprintf>
			format);

	xQueueSend(	hPrintQueue, &time, portMAX_DELAY );
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <ShowTimeDate+0xc0>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc2:	4914      	ldr	r1, [pc, #80]	; (8000e14 <ShowTimeDate+0xc4>)
 8000dc4:	f005 fbd8 	bl	8006578 <xQueueGenericSend>

	/* Display date format: date-month-year */
	sprintf((char *)showDate,
			"\t%02d-%02d-%2d\n",
			rtcDate.Month,
 8000dc8:	7e7b      	ldrb	r3, [r7, #25]
	sprintf((char *)showDate,
 8000dca:	461a      	mov	r2, r3
			rtcDate.Date,
 8000dcc:	7ebb      	ldrb	r3, [r7, #26]
	sprintf((char *)showDate,
 8000dce:	4619      	mov	r1, r3
			rtcDate.Year);
 8000dd0:	7efb      	ldrb	r3, [r7, #27]
	sprintf((char *)showDate,
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4910      	ldr	r1, [pc, #64]	; (8000e18 <ShowTimeDate+0xc8>)
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <ShowTimeDate+0xcc>)
 8000dda:	f008 f9fd 	bl	80091d8 <siprintf>

	xQueueSend( hPrintQueue, &date, portMAX_DELAY);
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <ShowTimeDate+0xc0>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	490d      	ldr	r1, [pc, #52]	; (8000e20 <ShowTimeDate+0xd0>)
 8000dea:	f005 fbc5 	bl	8006578 <xQueueGenericSend>

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000b0 	.word	0x200000b0
 8000dfc:	08009b24 	.word	0x08009b24
 8000e00:	08009b34 	.word	0x08009b34
 8000e04:	08009b44 	.word	0x08009b44
 8000e08:	08009b58 	.word	0x08009b58
 8000e0c:	20000194 	.word	0x20000194
 8000e10:	20000180 	.word	0x20000180
 8000e14:	2000000c 	.word	0x2000000c
 8000e18:	08009b70 	.word	0x08009b70
 8000e1c:	200001bc 	.word	0x200001bc
 8000e20:	20000010 	.word	0x20000010

08000e24 <RtcConfigureTime>:

void RtcConfigureTime(RTC_TimeTypeDef * time)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT_24;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000e32:	2200      	movs	r2, #0
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <RtcConfigureTime+0x20>)
 8000e38:	f002 fd30 	bl	800389c <HAL_RTC_SetTime>

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000b0 	.word	0x200000b0

08000e48 <ValidateRtcInfo>:
{
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
}

int ValidateRtcInfo(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	if(time){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00d      	beq.n	8000e74 <ValidateRtcInfo+0x2c>
		if( (time->Hours > 24) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b18      	cmp	r3, #24
 8000e5e:	d807      	bhi.n	8000e70 <ValidateRtcInfo+0x28>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	2b3b      	cmp	r3, #59	; 0x3b
 8000e66:	d803      	bhi.n	8000e70 <ValidateRtcInfo+0x28>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	789b      	ldrb	r3, [r3, #2]
 8000e6c:	2b3b      	cmp	r3, #59	; 0x3b
 8000e6e:	d901      	bls.n	8000e74 <ValidateRtcInfo+0x2c>
			return 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e015      	b.n	8000ea0 <ValidateRtcInfo+0x58>
	}

	if(date){
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d011      	beq.n	8000e9e <ValidateRtcInfo+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	2b1f      	cmp	r3, #31
 8000e80:	d80b      	bhi.n	8000e9a <ValidateRtcInfo+0x52>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	d807      	bhi.n	8000e9a <ValidateRtcInfo+0x52>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	2b63      	cmp	r3, #99	; 0x63
 8000e90:	d803      	bhi.n	8000e9a <ValidateRtcInfo+0x52>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d901      	bls.n	8000e9e <ValidateRtcInfo+0x56>
			return 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <ValidateRtcInfo+0x58>
	}

	return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_AHB2_GRP1_EnableClock>:
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4013      	ands	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8000f68:	f007 fd56 	bl	8008a18 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2230      	movs	r2, #48	; 0x30
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 f921 	bl	80091c8 <memset>
  if(hrtc->Instance==RTC)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_RTC_MspInit+0x54>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d115      	bne.n	8000fbc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f94:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 face 	bl	8003542 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fac:	f7ff feca 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fb0:	f7ff ff7c 	bl	8000eac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fb8:	f7ff ffa2 	bl	8000f00 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3738      	adds	r7, #56	; 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40002800 	.word	0x40002800

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2230      	movs	r2, #48	; 0x30
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f008 f8ed 	bl	80091c8 <memset>
  if(huart->Instance==USART1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_UART_MspInit+0x98>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d12e      	bne.n	8001056 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fa9c 	bl	8003542 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001010:	f7ff fe98 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001014:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001018:	f7ff ff8b 	bl	8000f32 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ff56 	bl	8000ece <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001022:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001034:	2307      	movs	r3, #7
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 fe67 	bl	8001d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2106      	movs	r1, #6
 800104a:	2024      	movs	r0, #36	; 0x24
 800104c:	f000 fd7c 	bl	8001b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001050:	2024      	movs	r0, #36	; 0x24
 8001052:	f000 fd93 	bl	8001b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013800 	.word	0x40013800

08001064 <LL_APB2_GRP1_EnableClock>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001088:	68fb      	ldr	r3, [r7, #12]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	2019      	movs	r0, #25
 80010ae:	f000 fd4b 	bl	8001b48 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010b2:	2019      	movs	r0, #25
 80010b4:	f000 fd62 	bl	8001b7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010bc:	f7ff ffd2 	bl	8001064 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f822 	bl	8003114 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010d0:	f002 f80a 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80010d4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <HAL_InitTick+0x8c>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0c9b      	lsrs	r3, r3, #18
 80010e0:	3b01      	subs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_InitTick+0x90>)
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_InitTick+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_InitTick+0x90>)
 80010ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_InitTick+0x90>)
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_InitTick+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_InitTick+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <HAL_InitTick+0x90>)
 8001106:	f002 fdc2 	bl	8003c8e <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d104      	bne.n	800111a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_InitTick+0x90>)
 8001112:	f002 fe1d 	bl	8003d50 <HAL_TIM_Base_Start_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3730      	adds	r7, #48	; 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	431bde83 	.word	0x431bde83
 8001128:	200001e4 	.word	0x200001e4
 800112c:	40012c00 	.word	0x40012c00

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM1_UP_IRQHandler+0x10>)
 8001162:	f002 fe43 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001e4 	.word	0x200001e4

08001170 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USART1_IRQHandler+0x10>)
 8001176:	f003 f939 	bl	80043ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000d4 	.word	0x200000d4

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f007 ffd0 	bl	8009158 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20003000 	.word	0x20003000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	20000230 	.word	0x20000230
 80011ec:	200023f8 	.word	0x200023f8

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <SystemInit+0x90>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <SystemInit+0x90>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001218:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800121c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <SystemInit+0x94>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123a:	f023 0305 	bic.w	r3, r3, #5
 800123e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800124a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <SystemInit+0x98>)
 800125c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	faf6fefb 	.word	0xfaf6fefb
 8001288:	22041000 	.word	0x22041000

0800128c <menuTask>:
State_t currentProgramState = sMainMenu;

const char* invalid_message = "~~Invalid Message~~\n";

void menuTask(void* parameters)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	int8_t option;

	const char* entry_message = "======================\n"
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <menuTask+0xd0>)
 8001296:	60bb      	str	r3, [r7, #8]
									"DATE & TIME	--->	1\n"
									"EXIT	--->	2\n"
									"ENTER YOUR CHOICE HERE... : ";
	while(1)
	{
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <menuTask+0xd4>)
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	f107 0108 	add.w	r1, r7, #8
 80012a0:	2300      	movs	r3, #0
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	f005 f967 	bl	8006578 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f006 fc11 	bl	8007ae0 <xTaskGenericNotifyWait>

		// Wait for menu commands
		command = (Command_t*)command_adr;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	617b      	str	r3, [r7, #20]
		if(command -> len == 1)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	7a9b      	ldrb	r3, [r3, #10]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d133      	bne.n	8001332 <menuTask+0xa6>
		{
			// Converting ASCII to number by subtracting 48
			option = command->payload[0] - 48;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3b30      	subs	r3, #48	; 0x30
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	74fb      	strb	r3, [r7, #19]

			switch(option)
 80012d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d033      	beq.n	8001344 <menuTask+0xb8>
 80012dc:	2b02      	cmp	r3, #2
 80012de:	dc1e      	bgt.n	800131e <menuTask+0x92>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <menuTask+0x5e>
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d00d      	beq.n	8001304 <menuTask+0x78>
 80012e8:	e019      	b.n	800131e <menuTask+0x92>
			{
			case LED_EFFECT:
				currentProgramState = sLedEffect;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <menuTask+0xd8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hLed,0,eNoAction);
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <menuTask+0xdc>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2300      	movs	r3, #0
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	f006 fc73 	bl	8007be8 <xTaskGenericNotify>
				break;
 8001302:	e020      	b.n	8001346 <menuTask+0xba>
			case DATE_TIME:
				currentProgramState = sRtcMenu;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <menuTask+0xd8>)
 8001306:	2202      	movs	r2, #2
 8001308:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hRTC,0,eNoAction);
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <menuTask+0xe0>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	f006 fc66 	bl	8007be8 <xTaskGenericNotify>
				break;
 800131c:	e013      	b.n	8001346 <menuTask+0xba>
			case EXIT_MENU:
				/* Todo: implement exit */
				break;
			default:
				xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <menuTask+0xd4>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	2300      	movs	r3, #0
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	f005 f924 	bl	8006578 <xQueueGenericSend>
				continue;
 8001330:	e012      	b.n	8001358 <menuTask+0xcc>
			}
		}
		else
		{
			// Invalid entry
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <menuTask+0xd4>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <menuTask+0xe4>)
 800133e:	f005 f91b 	bl	8006578 <xQueueGenericSend>
			continue;
 8001342:	e009      	b.n	8001358 <menuTask+0xcc>
				break;
 8001344:	bf00      	nop
		}

		// Wait to run again when some other task notifies menu task.
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f006 fbc4 	bl	8007ae0 <xTaskGenericNotifyWait>
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8001358:	e79e      	b.n	8001298 <menuTask+0xc>
 800135a:	bf00      	nop
 800135c:	08009b98 	.word	0x08009b98
 8001360:	20000180 	.word	0x20000180
 8001364:	20000234 	.word	0x20000234
 8001368:	2000016c 	.word	0x2000016c
 800136c:	20000170 	.word	0x20000170
 8001370:	20000018 	.word	0x20000018

08001374 <ledTask>:
	} // End of while loop

}

void ledTask(void* parameters)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	const char* led_message = 	"=====================\n"
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <ledTask+0xf4>)
 800137e:	60fb      	str	r3, [r7, #12]
								"OPTIONS: Please type none, e1, e2 or e3.\n"
								"ENTER YOUR CHOICE HERE... :\n ";
	while(1)
	{
		/* Wait for notification */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2300      	movs	r3, #0
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2000      	movs	r0, #0
 800138e:	f006 fba7 	bl	8007ae0 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(hPrintQueue,&led_message,portMAX_DELAY);
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <ledTask+0xf8>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	2300      	movs	r3, #0
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	f005 f8ea 	bl	8006578 <xQueueGenericSend>

		/* Wait for LED commands */
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	9200      	str	r2, [sp, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f006 fb94 	bl	8007ae0 <xTaskGenericNotifyWait>

		command = (Command_t*)command_adr;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	617b      	str	r3, [r7, #20]

		if( (command->len) <= 4)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	7a9b      	ldrb	r3, [r3, #10]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d83b      	bhi.n	800143c <ledTask+0xc8>
		{
			if(! strncmp((char*)command->payload, "none", strlen("none")) )
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4929      	ldr	r1, [pc, #164]	; (8001470 <ledTask+0xfc>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 ff24 	bl	8009218 <strncmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <ledTask+0x68>
				LedEffectStop();
 80013d6:	f7ff f8cb 	bl	8000570 <LedEffectStop>
 80013da:	e037      	b.n	800144c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e1", strlen("e1")) )
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2202      	movs	r2, #2
 80013e0:	4924      	ldr	r1, [pc, #144]	; (8001474 <ledTask+0x100>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 ff18 	bl	8009218 <strncmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <ledTask+0x82>
				LedStartTimer(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff f8a0 	bl	8000534 <LedStartTimer>
 80013f4:	e02a      	b.n	800144c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e2", strlen("e2")) )
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2202      	movs	r2, #2
 80013fa:	491f      	ldr	r1, [pc, #124]	; (8001478 <ledTask+0x104>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 ff0b 	bl	8009218 <strncmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <ledTask+0x9c>
				LedStartTimer(2);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff f893 	bl	8000534 <LedStartTimer>
 800140e:	e01d      	b.n	800144c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e3", strlen("e3")) )
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2202      	movs	r2, #2
 8001414:	4919      	ldr	r1, [pc, #100]	; (800147c <ledTask+0x108>)
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fefe 	bl	8009218 <strncmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <ledTask+0xb6>
				LedStartTimer(3);
 8001422:	2003      	movs	r0, #3
 8001424:	f7ff f886 	bl	8000534 <LedStartTimer>
 8001428:	e010      	b.n	800144c <ledTask+0xd8>
			else
				// Print invalid message
				xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <ledTask+0xf8>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <ledTask+0x10c>)
 8001436:	f005 f89f 	bl	8006578 <xQueueGenericSend>
 800143a:	e007      	b.n	800144c <ledTask+0xd8>
		}
		else
			// Print invalid message
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <ledTask+0xf8>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <ledTask+0x10c>)
 8001448:	f005 f896 	bl	8006578 <xQueueGenericSend>

		// Update the state variable
		currentProgramState = sMainMenu;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <ledTask+0x110>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

		// Notify menu task
		xTaskNotify(hMenu,0,eNoAction);
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <ledTask+0x114>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	f006 fbc2 	bl	8007be8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001464:	e78c      	b.n	8001380 <ledTask+0xc>
 8001466:	bf00      	nop
 8001468:	08009c20 	.word	0x08009c20
 800146c:	20000180 	.word	0x20000180
 8001470:	08009ca4 	.word	0x08009ca4
 8001474:	08009cac 	.word	0x08009cac
 8001478:	08009cb0 	.word	0x08009cb0
 800147c:	08009cb4 	.word	0x08009cb4
 8001480:	20000018 	.word	0x20000018
 8001484:	20000234 	.word	0x20000234
 8001488:	20000168 	.word	0x20000168

0800148c <RTCTask>:

	}
}

void RTCTask(void* parameters)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
	const char* msg_rtc = 	"========================\n"
 8001494:	4b95      	ldr	r3, [pc, #596]	; (80016ec <RTCTask+0x260>)
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
							"Enable reporting          ----> 2\n"
							"Exit to main menu         ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001498:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <RTCTask+0x264>)
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800149c:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <RTCTask+0x268>)
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80014a0:	4b95      	ldr	r3, [pc, #596]	; (80016f8 <RTCTask+0x26c>)
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80014a4:	4b95      	ldr	r3, [pc, #596]	; (80016fc <RTCTask+0x270>)
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80014a8:	4b95      	ldr	r3, [pc, #596]	; (8001700 <RTCTask+0x274>)
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80014ac:	4b95      	ldr	r3, [pc, #596]	; (8001704 <RTCTask+0x278>)
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80014b0:	4b95      	ldr	r3, [pc, #596]	; (8001708 <RTCTask+0x27c>)
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44

	const char *msg_conf = "Configuration successful\n";
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <RTCTask+0x280>)
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80014b8:	4b95      	ldr	r3, [pc, #596]	; (8001710 <RTCTask+0x284>)
 80014ba:	623b      	str	r3, [r7, #32]
	RTC_TimeTypeDef time;

	while(1)
	{
		/* Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f006 fb09 	bl	8007ae0 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */

		xQueueSend(hPrintQueue,&msg_rtc,portMAX_DELAY);
 80014ce:	4b91      	ldr	r3, [pc, #580]	; (8001714 <RTCTask+0x288>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014d6:	2300      	movs	r3, #0
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	f005 f84c 	bl	8006578 <xQueueGenericSend>

		ShowTimeDate();
 80014e0:	f7ff fc36 	bl	8000d50 <ShowTimeDate>

		while(currentProgramState != sMainMenu)
 80014e4:	bf00      	nop
 80014e6:	e0f2      	b.n	80016ce <RTCTask+0x242>
		{

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	f006 faf2 	bl	8007ae0 <xTaskGenericNotifyWait>

			command = (Command_t*)command_adr;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	643b      	str	r3, [r7, #64]	; 0x40

			switch(currentProgramState)
 8001500:	4b85      	ldr	r3, [pc, #532]	; (8001718 <RTCTask+0x28c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3b02      	subs	r3, #2
 8001506:	2b03      	cmp	r3, #3
 8001508:	f200 80e1 	bhi.w	80016ce <RTCTask+0x242>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <RTCTask+0x88>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001525 	.word	0x08001525
 8001518:	080015df 	.word	0x080015df
 800151c:	080016cf 	.word	0x080016cf
 8001520:	080016cd 	.word	0x080016cd
			{

				case sRtcMenu:{
					/* process RTC menu commands */
					if( command->len == 1)
 8001524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001526:	7a9b      	ldrb	r3, [r3, #10]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d14c      	bne.n	80015c6 <RTCTask+0x13a>
					{
						// Converting ASCII to number by subtracting 48
						option = command->payload[0] - 48;
 800152c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b30      	subs	r3, #48	; 0x30
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

						switch(option)
 8001538:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 800153c:	2b03      	cmp	r3, #3
 800153e:	d836      	bhi.n	80015ae <RTCTask+0x122>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <RTCTask+0xbc>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001559 	.word	0x08001559
 800154c:	08001573 	.word	0x08001573
 8001550:	0800158d 	.word	0x0800158d
 8001554:	080015a7 	.word	0x080015a7
						{
						case DATE_CONFIG:
							currentProgramState = sRtcTimeConfig;
 8001558:	4b6f      	ldr	r3, [pc, #444]	; (8001718 <RTCTask+0x28c>)
 800155a:	2203      	movs	r2, #3
 800155c:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_hh,portMAX_DELAY);
 800155e:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <RTCTask+0x288>)
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001566:	2300      	movs	r3, #0
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	f005 f804 	bl	8006578 <xQueueGenericSend>
							break;
 8001570:	e034      	b.n	80015dc <RTCTask+0x150>
						case MONTH_CONFIG:
							currentProgramState = sRtcDateConfig;
 8001572:	4b69      	ldr	r3, [pc, #420]	; (8001718 <RTCTask+0x28c>)
 8001574:	2204      	movs	r2, #4
 8001576:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_dd,portMAX_DELAY);
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <RTCTask+0x288>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001580:	2300      	movs	r3, #0
 8001582:	f04f 32ff 	mov.w	r2, #4294967295
 8001586:	f004 fff7 	bl	8006578 <xQueueGenericSend>
							break;
 800158a:	e027      	b.n	80015dc <RTCTask+0x150>
						case YEAR_CONFIG:
							currentProgramState = sRtcReport;
 800158c:	4b62      	ldr	r3, [pc, #392]	; (8001718 <RTCTask+0x28c>)
 800158e:	2205      	movs	r2, #5
 8001590:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&msg_rtc_report,portMAX_DELAY);
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <RTCTask+0x288>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f107 0120 	add.w	r1, r7, #32
 800159a:	2300      	movs	r3, #0
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	f004 ffea 	bl	8006578 <xQueueGenericSend>
							break;
 80015a4:	e01a      	b.n	80015dc <RTCTask+0x150>
						case DAY_CONFIG:
							currentProgramState = sMainMenu;
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <RTCTask+0x28c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
							break;
 80015ac:	e016      	b.n	80015dc <RTCTask+0x150>
						default:
							currentProgramState = sMainMenu;
 80015ae:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <RTCTask+0x28c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
							xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <RTCTask+0x288>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	4957      	ldr	r1, [pc, #348]	; (800171c <RTCTask+0x290>)
 80015c0:	f004 ffda 	bl	8006578 <xQueueGenericSend>
 80015c4:	e083      	b.n	80016ce <RTCTask+0x242>
						}
					}
					else
					{
						currentProgramState = sMainMenu;
 80015c6:	4b54      	ldr	r3, [pc, #336]	; (8001718 <RTCTask+0x28c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80015cc:	4b51      	ldr	r3, [pc, #324]	; (8001714 <RTCTask+0x288>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	4951      	ldr	r1, [pc, #324]	; (800171c <RTCTask+0x290>)
 80015d8:	f004 ffce 	bl	8006578 <xQueueGenericSend>
					}


					break;}
 80015dc:	e077      	b.n	80016ce <RTCTask+0x242>

				case sRtcTimeConfig:{

					/* get hh, mm, ss infor and configure RTC */
					/* take care of invalid entries */
					switch(rtcState)
 80015de:	4b50      	ldr	r3, [pc, #320]	; (8001720 <RTCTask+0x294>)
 80015e0:	f993 3000 	ldrsb.w	r3, [r3]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d03a      	beq.n	800165e <RTCTask+0x1d2>
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	dc70      	bgt.n	80016ce <RTCTask+0x242>
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <RTCTask+0x16a>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d01a      	beq.n	800162a <RTCTask+0x19e>
 80015f4:	e06b      	b.n	80016ce <RTCTask+0x242>
					{
					case HH_CONFIG:{
						uint8_t hour = getNumber(command->payload, command->len);
 80015f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fa:	7a9b      	ldrb	r3, [r3, #10]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f000 f940 	bl	8001884 <getNumber>
 8001604:	4603      	mov	r3, r0
 8001606:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						time.Hours = hour;
 800160a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800160e:	723b      	strb	r3, [r7, #8]
						rtcState = MM_CONFIG;
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <RTCTask+0x294>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&msg_rtc_mm,portMAX_DELAY);
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <RTCTask+0x288>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800161e:	2300      	movs	r3, #0
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	f004 ffa8 	bl	8006578 <xQueueGenericSend>
						break;}
 8001628:	e04f      	b.n	80016ca <RTCTask+0x23e>

					case MM_CONFIG:{
						uint8_t minute = getNumber(command->payload, command->len);
 800162a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800162e:	7a9b      	ldrb	r3, [r3, #10]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f000 f926 	bl	8001884 <getNumber>
 8001638:	4603      	mov	r3, r0
 800163a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						time.Minutes = minute;
 800163e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001642:	727b      	strb	r3, [r7, #9]
						rtcState = SS_CONFIG;
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <RTCTask+0x294>)
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
						xQueueSend(hPrintQueue,&msg_rtc_ss,portMAX_DELAY);
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <RTCTask+0x288>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001652:	2300      	movs	r3, #0
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	f004 ff8e 	bl	8006578 <xQueueGenericSend>
						break;}
 800165c:	e035      	b.n	80016ca <RTCTask+0x23e>

					case SS_CONFIG:{
						uint8_t second = getNumber(command->payload, command->len);
 800165e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001662:	7a9b      	ldrb	r3, [r3, #10]
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f000 f90c 	bl	8001884 <getNumber>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						time.Seconds = second;
 8001672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001676:	72bb      	strb	r3, [r7, #10]
						if(! ValidateRtcInfo(&time,NULL) )
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbe2 	bl	8000e48 <ValidateRtcInfo>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d110      	bne.n	80016ac <RTCTask+0x220>
						{
							RtcConfigureTime(&time);
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fbc8 	bl	8000e24 <RtcConfigureTime>
							xQueueSend(hPrintQueue, &msg_conf, portMAX_DELAY);
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <RTCTask+0x288>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800169c:	2300      	movs	r3, #0
 800169e:	f04f 32ff 	mov.w	r2, #4294967295
 80016a2:	f004 ff69 	bl	8006578 <xQueueGenericSend>
							ShowTimeDate();
 80016a6:	f7ff fb53 	bl	8000d50 <ShowTimeDate>
 80016aa:	e007      	b.n	80016bc <RTCTask+0x230>
						}
						else
							xQueueSend(hPrintQueue,&invalid_message, portMAX_DELAY);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <RTCTask+0x288>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295
 80016b6:	4919      	ldr	r1, [pc, #100]	; (800171c <RTCTask+0x290>)
 80016b8:	f004 ff5e 	bl	8006578 <xQueueGenericSend>

						currentProgramState = sMainMenu;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <RTCTask+0x28c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
						rtcState = HH_CONFIG;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <RTCTask+0x294>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
						break;}
 80016c8:	bf00      	nop
					}

					break;}
 80016ca:	e000      	b.n	80016ce <RTCTask+0x242>

					break;

				case sRtcReport:
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;
 80016cc:	bf00      	nop
		while(currentProgramState != sMainMenu)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <RTCTask+0x28c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f47f af08 	bne.w	80014e8 <RTCTask+0x5c>
			}// switch end

		} //while end

		/* Notify menu task */
		xTaskNotify(hMenu,0,eNoAction);
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <RTCTask+0x298>)
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	f006 fa7f 	bl	8007be8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016ea:	e6e7      	b.n	80014bc <RTCTask+0x30>
 80016ec:	08009cb8 	.word	0x08009cb8
 80016f0:	08009da8 	.word	0x08009da8
 80016f4:	08009dbc 	.word	0x08009dbc
 80016f8:	08009dd4 	.word	0x08009dd4
 80016fc:	08009dec 	.word	0x08009dec
 8001700:	08009e00 	.word	0x08009e00
 8001704:	08009e14 	.word	0x08009e14
 8001708:	08009e2c 	.word	0x08009e2c
 800170c:	08009e40 	.word	0x08009e40
 8001710:	08009e5c 	.word	0x08009e5c
 8001714:	20000180 	.word	0x20000180
 8001718:	20000234 	.word	0x20000234
 800171c:	20000018 	.word	0x20000018
 8001720:	20000235 	.word	0x20000235
 8001724:	20000168 	.word	0x20000168

08001728 <printTask>:

		}//while super loop end
}

void printTask(void* parameters)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint32_t* message;
	while(1)
	{
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <printTask+0x38>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	4618      	mov	r0, r3
 800173e:	f005 f8c3 	bl	80068c8 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen((char*)message), HAL_MAX_DELAY);
 8001742:	68fc      	ldr	r4, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd1a 	bl	8000180 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	4621      	mov	r1, r4
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <printTask+0x3c>)
 8001758:	f002 fd6e 	bl	8004238 <HAL_UART_Transmit>
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 800175c:	e7e8      	b.n	8001730 <printTask+0x8>
 800175e:	bf00      	nop
 8001760:	20000180 	.word	0x20000180
 8001764:	200000d4 	.word	0x200000d4

08001768 <commandTask>:
	}
}

 void commandTask(void* parameters)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
	 //const TickType_t xFrequency = pdMS_TO_TICKS(1000);
	 Command_t command;
		while(1)
		{
			/* Implement notify wait */
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2000      	movs	r0, #0
 800177e:	f006 f9af 	bl	8007ae0 <xTaskGenericNotifyWait>
 8001782:	6178      	str	r0, [r7, #20]
			if(status == pdTRUE)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d1f2      	bne.n	8001770 <commandTask+0x8>
			{
				/* Process the user data(command) stored in input data queue */
				/* Notify the command to relevant task */
				processCommand(&command);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f802 	bl	8001798 <processCommand>
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001794:	e7ec      	b.n	8001770 <commandTask+0x8>
	...

08001798 <processCommand>:
/* The notification value of the target task is
 * unconditionally set to ulValue when eSetValueWithOverwrite
 * is used.   */

 void processCommand(Command_t* command)
 {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]
	 /* Extract the data bytes from the input data queue and form a command */
	 extract_command(command);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f835 	bl	8001810 <extract_command>

	 switch(currentProgramState)
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <processCommand+0x68>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	dc24      	bgt.n	80017f8 <processCommand+0x60>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	da18      	bge.n	80017e4 <processCommand+0x4c>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <processCommand+0x24>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d00a      	beq.n	80017d0 <processCommand+0x38>
		 /* Notify RTC task with the command */
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
		 break;

	 }
 }
 80017ba:	e01d      	b.n	80017f8 <processCommand+0x60>
		 xTaskNotify(hMenu, (uint32_t)command, eSetValueWithOverwrite);
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <processCommand+0x6c>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2303      	movs	r3, #3
 80017c8:	2100      	movs	r1, #0
 80017ca:	f006 fa0d 	bl	8007be8 <xTaskGenericNotify>
		 break;
 80017ce:	e013      	b.n	80017f8 <processCommand+0x60>
		 xTaskNotify(hLed, (uint32_t)command, eSetValueWithOverwrite);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <processCommand+0x70>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2303      	movs	r3, #3
 80017dc:	2100      	movs	r1, #0
 80017de:	f006 fa03 	bl	8007be8 <xTaskGenericNotify>
		 break;
 80017e2:	e009      	b.n	80017f8 <processCommand+0x60>
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <processCommand+0x74>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2303      	movs	r3, #3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f006 f9f9 	bl	8007be8 <xTaskGenericNotify>
		 break;
 80017f6:	bf00      	nop
 }
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000234 	.word	0x20000234
 8001804:	20000168 	.word	0x20000168
 8001808:	2000016c 	.word	0x2000016c
 800180c:	20000170 	.word	0x20000170

08001810 <extract_command>:

 int extract_command(Command_t* command)
 {
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	 uint8_t item;
	 BaseType_t status;

	 // Return the number of messages stored in a queue.
	 status = uxQueueMessagesWaiting(hInputDataQueue);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <extract_command+0x70>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f005 f9c2 	bl	8006ba6 <uxQueueMessagesWaiting>
 8001822:	4603      	mov	r3, r0
 8001824:	613b      	str	r3, [r7, #16]
	 if(!status) return -1;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <extract_command+0x22>
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e022      	b.n	8001878 <extract_command+0x68>

	 uint8_t i = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
	 do
	 {
		 // Received item into the hInputDataQueue will be copied to item buffer.
		 status = xQueueReceive(hInputDataQueue, (void*)&item, 0);
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <extract_command+0x70>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f107 010f 	add.w	r1, r7, #15
 800183e:	2200      	movs	r2, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 f841 	bl	80068c8 <xQueueReceive>
 8001846:	6138      	str	r0, [r7, #16]
		 if(status == pdTRUE) command -> payload[i++] = item;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <extract_command+0x4c>
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	75fa      	strb	r2, [r7, #23]
 8001854:	461a      	mov	r2, r3
 8001856:	7bf9      	ldrb	r1, [r7, #15]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	5499      	strb	r1, [r3, r2]
	 }while(item != '\n');
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b0a      	cmp	r3, #10
 8001860:	d1e9      	bne.n	8001836 <extract_command+0x26>

	 command -> payload[i-1] = '\0';
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	3b01      	subs	r3, #1
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	2100      	movs	r1, #0
 800186a:	54d1      	strb	r1, [r2, r3]
	 command -> len = i-1; /* Save length of the command excluding null char */
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	3b01      	subs	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	729a      	strb	r2, [r3, #10]

	 return 0;
 8001876:	2300      	movs	r3, #0
 }
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000017c 	.word	0x2000017c

08001884 <getNumber>:

 uint8_t getNumber(uint8_t * p, int len)
 {
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	 int value;

	 if(len > 1)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	dd0f      	ble.n	80018b4 <getNumber+0x30>
	 {
		 value = ( ( (p[0]-48) * 10 ) + (p[1] - 48 ) );
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3301      	adds	r3, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3b30      	subs	r3, #48	; 0x30
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e003      	b.n	80018bc <getNumber+0x38>
	 }
	 else
	 {
		 value = p[0] - 48;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3b30      	subs	r3, #48	; 0x30
 80018ba:	60fb      	str	r3, [r7, #12]
	 }

	 return value;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	b2db      	uxtb	r3, r3
 }
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018cc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d0:	3304      	adds	r3, #4

080018d2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018d6:	d3f9      	bcc.n	80018cc <CopyDataInit>
  bx lr
 80018d8:	4770      	bx	lr

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018da:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018dc:	3004      	adds	r0, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018de:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>
  bx lr
 80018e2:	4770      	bx	lr

080018e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e8:	f7ff fc82 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <LoopForever+0x6>)
 80018ee:	490c      	ldr	r1, [pc, #48]	; (8001920 <LoopForever+0xa>)
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <LoopForever+0xe>)
 80018f2:	2300      	movs	r3, #0
 80018f4:	f7ff ffed 	bl	80018d2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopForever+0x12>)
 80018fa:	490c      	ldr	r1, [pc, #48]	; (800192c <LoopForever+0x16>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <LoopForever+0x1a>)
 80018fe:	2300      	movs	r3, #0
 8001900:	f7ff ffe7 	bl	80018d2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <LoopForever+0x1e>)
 8001906:	490c      	ldr	r1, [pc, #48]	; (8001938 <LoopForever+0x22>)
 8001908:	2300      	movs	r3, #0
 800190a:	f7ff ffe8 	bl	80018de <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800190e:	f007 fc29 	bl	8009164 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001912:	f7fe ff79 	bl	8000808 <main>

08001916 <LoopForever>:

LoopForever:
  b LoopForever
 8001916:	e7fe      	b.n	8001916 <LoopForever>
  ldr   r0, =_estack
 8001918:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800191c:	20000008 	.word	0x20000008
 8001920:	20000090 	.word	0x20000090
 8001924:	08009fc4 	.word	0x08009fc4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001928:	20030000 	.word	0x20030000
 800192c:	20030000 	.word	0x20030000
 8001930:	0800a04c 	.word	0x0800a04c
  INIT_BSS _sbss, _ebss
 8001934:	20000090 	.word	0x20000090
 8001938:	200023f4 	.word	0x200023f4

0800193c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_Init+0x3c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_Init+0x3c>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f8eb 	bl	8001b32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195c:	200f      	movs	r0, #15
 800195e:	f7ff fb9b 	bl	8001098 <HAL_InitTick>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	e001      	b.n	8001972 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800196e:	f7ff faf9 	bl	8000f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001972:	79fb      	ldrb	r3, [r7, #7]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	58004000 	.word	0x58004000

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000020 	.word	0x20000020
 80019a4:	20000238 	.word	0x20000238

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000238 	.word	0x20000238

080019c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTickPrio+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2000001c 	.word	0x2000001c

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff4c 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b56:	f7ff ff63 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	6978      	ldr	r0, [r7, #20]
 8001b62:	f7ff ffb3 	bl	8001acc <NVIC_EncodePriority>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff82 	bl	8001a78 <__NVIC_SetPriority>
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff56 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e04f      	b.n	8001c4a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d008      	beq.n	8001bc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 020e 	bic.w	r2, r2, #14
 8001bd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f003 021c 	and.w	r2, r3, #28
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d005      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e047      	b.n	8001d0a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 020e 	bic.w	r2, r2, #14
 8001c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f003 021c 	and.w	r2, r3, #28
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00c      	beq.n	8001cea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ce8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
    }
  }
  return status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e146      	b.n	8001fb2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8138 	beq.w	8001fac <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x40>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 0201 	and.w	r2, r3, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	6939      	ldr	r1, [r7, #16]
 8001e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0203 	and.w	r2, r3, #3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8092 	beq.w	8001fac <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eb2:	d013      	beq.n	8001edc <HAL_GPIO_Init+0x1c8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2c0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00d      	beq.n	8001ed8 <HAL_GPIO_Init+0x1c4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <HAL_GPIO_Init+0x1c0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_GPIO_Init+0x1bc>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e006      	b.n	8001ede <HAL_GPIO_Init+0x1ca>
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	e004      	b.n	8001ede <HAL_GPIO_Init+0x1ca>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x1ca>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_GPIO_Init+0x1ca>
 8001edc:	2300      	movs	r3, #0
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eee:	4938      	ldr	r1, [pc, #224]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f aeb1 	bne.w	8001d24 <HAL_GPIO_Init+0x10>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48001000 	.word	0x48001000
 8001fe0:	58000800 	.word	0x58000800

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	58000400 	.word	0x58000400

08002034 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002046:	d101      	bne.n	800204c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_RCC_HSE_Enable>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_RCC_HSE_Disable>:
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_HSE_IsReady>:
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020a6:	d101      	bne.n	80020ac <LL_RCC_HSE_IsReady+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_RCC_HSE_IsReady+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_HSI_Enable>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_HSI_Disable>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_HSI_IsReady>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d101      	bne.n	800210c <LL_RCC_HSI_IsReady+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_HSI_IsReady+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_LSE_Enable>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_LSE_Disable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSE_EnableBypass>:
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_RCC_LSE_DisableBypass>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_LSE_IsReady>:
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d101      	bne.n	80021e2 <LL_RCC_LSE_IsReady+0x18>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_RCC_LSE_IsReady+0x1a>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSI1_Enable>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_LSI1_Disable>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_RCC_LSI1_IsReady>:
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d101      	bne.n	800224a <LL_RCC_LSI1_IsReady+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_RCC_LSI1_IsReady+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_LSI2_Enable>:
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_LSI2_Disable>:
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_LSI2_IsReady>:
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d101      	bne.n	80022b2 <LL_RCC_LSI2_IsReady+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_RCC_LSI2_IsReady+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_LSI2_SetTrimming>:
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_RCC_MSI_Enable>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_MSI_Disable>:
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6013      	str	r3, [r2, #0]
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_RCC_MSI_IsReady>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d101      	bne.n	800233e <LL_RCC_MSI_IsReady+0x16>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_RCC_MSI_IsReady+0x18>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_RCC_MSI_SetRange>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_RCC_MSI_GetRange>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002382:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2bb0      	cmp	r3, #176	; 0xb0
 8002388:	d901      	bls.n	800238e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800238a:	23b0      	movs	r3, #176	; 0xb0
 800238c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_MSI_SetCalibTrimming>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_SetSysClkSource>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 0203 	bic.w	r2, r3, #3
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_RCC_GetSysClkSource>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_RCC_SetAHBPrescaler>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_C2_RCC_SetAHBPrescaler>:
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800243e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_RCC_SetAHB4Prescaler>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_RCC_SetAPB1Prescaler>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_RCC_SetAPB2Prescaler>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_GetAHBPrescaler>:
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_C2_RCC_GetAHBPrescaler>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_RCC_GetAHB4Prescaler>:
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_RCC_GetAPB1Prescaler>:
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_RCC_GetAPB2Prescaler>:
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a4:	d101      	bne.n	80025aa <LL_RCC_PLL_IsReady+0x18>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_RCC_PLL_IsReady+0x1a>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d101      	bne.n	8002630 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002650:	d101      	bne.n	8002656 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002676:	d101      	bne.n	800267c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800269a:	d101      	bne.n	80026a0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026be:	d101      	bne.n	80026c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b08d      	sub	sp, #52	; 0x34
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e324      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 808d 	beq.w	800280a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f0:	f7ff fe7d 	bl	80023ee <LL_RCC_GetSysClkSource>
 80026f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f6:	f7ff ff83 	bl	8002600 <LL_RCC_PLL_GetMainSource>
 80026fa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x3e>
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d147      	bne.n	8002798 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	2b01      	cmp	r3, #1
 800270c:	d144      	bne.n	8002798 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e308      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800271e:	f7ff fe28 	bl	8002372 <LL_RCC_MSI_GetRange>
 8002722:	4603      	mov	r3, r0
 8002724:	429c      	cmp	r4, r3
 8002726:	d914      	bls.n	8002752 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fd23 	bl	8003178 <RCC_SetFlashLatencyFromMSIRange>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e2f7      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe02 	bl	800234a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fe26 	bl	800239c <LL_RCC_MSI_SetCalibTrimming>
 8002750:	e013      	b.n	800277a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fdf7 	bl	800234a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe1b 	bl	800239c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fd04 	bl	8003178 <RCC_SetFlashLatencyFromMSIRange>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e2d8      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800277a:	f000 fc8b 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 800277e:	4603      	mov	r3, r0
 8002780:	4aa4      	ldr	r2, [pc, #656]	; (8002a14 <HAL_RCC_OscConfig+0x344>)
 8002782:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002784:	4ba4      	ldr	r3, [pc, #656]	; (8002a18 <HAL_RCC_OscConfig+0x348>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fc85 	bl	8001098 <HAL_InitTick>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d039      	beq.n	8002808 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e2c9      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01e      	beq.n	80027de <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027a0:	f7ff fda4 	bl	80022ec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f900 	bl	80019a8 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ac:	f7ff f8fc 	bl	80019a8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2b6      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80027be:	f7ff fdb3 	bl	8002328 <LL_RCC_MSI_IsReady>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f1      	beq.n	80027ac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fdbc 	bl	800234a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fde0 	bl	800239c <LL_RCC_MSI_SetCalibTrimming>
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027de:	f7ff fd94 	bl	800230a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f8e1 	bl	80019a8 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ea:	f7ff f8dd 	bl	80019a8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e297      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027fc:	f7ff fd94 	bl	8002328 <LL_RCC_MSI_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f1      	bne.n	80027ea <HAL_RCC_OscConfig+0x11a>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002808:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d047      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	f7ff fdea 	bl	80023ee <LL_RCC_GetSysClkSource>
 800281a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	f7ff fef0 	bl	8002600 <LL_RCC_PLL_GetMainSource>
 8002820:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x164>
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d134      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e275      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x180>
 800284a:	f7ff fc05 	bl	8002058 <LL_RCC_HSE_Enable>
 800284e:	e001      	b.n	8002854 <HAL_RCC_OscConfig+0x184>
 8002850:	f7ff fc11 	bl	8002076 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff f8a4 	bl	80019a8 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f8a0 	bl	80019a8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e25a      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002876:	f7ff fc0d 	bl	8002094 <LL_RCC_HSE_IsReady>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f1      	beq.n	8002864 <HAL_RCC_OscConfig+0x194>
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7ff f891 	bl	80019a8 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288a:	f7ff f88d 	bl	80019a8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e247      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800289c:	f7ff fbfa 	bl	8002094 <LL_RCC_HSE_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f1      	bne.n	800288a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04c      	beq.n	800294c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b2:	f7ff fd9c 	bl	80023ee <LL_RCC_GetSysClkSource>
 80028b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b8:	f7ff fea2 	bl	8002600 <LL_RCC_PLL_GetMainSource>
 80028bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x200>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d10e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e227      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc19 	bl	8002118 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028e6:	e031      	b.n	800294c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	f7ff fbe2 	bl	80020b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff f858 	bl	80019a8 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fc:	f7ff f854 	bl	80019a8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e20e      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800290e:	f7ff fbf1 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f1      	beq.n	80028fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fbfb 	bl	8002118 <LL_RCC_HSI_SetCalibTrimming>
 8002922:	e013      	b.n	800294c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002924:	f7ff fbd7 	bl	80020d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff f83e 	bl	80019a8 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff f83a 	bl	80019a8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f4      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002942:	f7ff fbd7 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f1      	bne.n	8002930 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a3 	beq.w	8002aac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d076      	beq.n	8002a5c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d046      	beq.n	8002a08 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800297a:	f7ff fc5a 	bl	8002232 <LL_RCC_LSI1_IsReady>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d113      	bne.n	80029ac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002984:	f7ff fc33 	bl	80021ee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002988:	f7ff f80e 	bl	80019a8 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002990:	f7ff f80a 	bl	80019a8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1c4      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029a2:	f7ff fc46 	bl	8002232 <LL_RCC_LSI1_IsReady>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f1      	beq.n	8002990 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80029ac:	f7ff fc53 	bl	8002256 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fffa 	bl	80019a8 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029b8:	f7fe fff6 	bl	80019a8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1b0      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029ca:	f7ff fc66 	bl	800229a <LL_RCC_LSI2_IsReady>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f1      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fc70 	bl	80022be <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029de:	f7ff fc17 	bl	8002210 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe ffe1 	bl	80019a8 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029ea:	f7fe ffdd 	bl	80019a8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e197      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029fc:	f7ff fc19 	bl	8002232 <LL_RCC_LSI1_IsReady>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f1      	bne.n	80029ea <HAL_RCC_OscConfig+0x31a>
 8002a06:	e051      	b.n	8002aac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a08:	f7ff fbf1 	bl	80021ee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe ffcc 	bl	80019a8 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a12:	e00c      	b.n	8002a2e <HAL_RCC_OscConfig+0x35e>
 8002a14:	20000014 	.word	0x20000014
 8002a18:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a1c:	f7fe ffc4 	bl	80019a8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e17e      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a2e:	f7ff fc00 	bl	8002232 <LL_RCC_LSI1_IsReady>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f1      	beq.n	8002a1c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a38:	f7ff fc1e 	bl	8002278 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a3e:	f7fe ffb3 	bl	80019a8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e16d      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a50:	f7ff fc23 	bl	800229a <LL_RCC_LSI2_IsReady>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f1      	bne.n	8002a3e <HAL_RCC_OscConfig+0x36e>
 8002a5a:	e027      	b.n	8002aac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a5c:	f7ff fc0c 	bl	8002278 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe ffa2 	bl	80019a8 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a68:	f7fe ff9e 	bl	80019a8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e158      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a7a:	f7ff fc0e 	bl	800229a <LL_RCC_LSI2_IsReady>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f1      	bne.n	8002a68 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a84:	f7ff fbc4 	bl	8002210 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe ff8e 	bl	80019a8 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a90:	f7fe ff8a 	bl	80019a8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e144      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002aa2:	f7ff fbc6 	bl	8002232 <LL_RCC_LSI1_IsReady>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f1      	bne.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab8:	4b9e      	ldr	r3, [pc, #632]	; (8002d34 <HAL_RCC_OscConfig+0x664>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d114      	bne.n	8002aee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ac4:	f7ff faa6 	bl	8002014 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe ff6e 	bl	80019a8 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe ff6a 	bl	80019a8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e124      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <HAL_RCC_OscConfig+0x664>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x42c>
 8002af6:	f7ff fb24 	bl	8002142 <LL_RCC_LSE_Enable>
 8002afa:	e00c      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d104      	bne.n	8002b0e <HAL_RCC_OscConfig+0x43e>
 8002b04:	f7ff fb3f 	bl	8002186 <LL_RCC_LSE_EnableBypass>
 8002b08:	f7ff fb1b 	bl	8002142 <LL_RCC_LSE_Enable>
 8002b0c:	e003      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
 8002b0e:	f7ff fb29 	bl	8002164 <LL_RCC_LSE_Disable>
 8002b12:	f7ff fb49 	bl	80021a8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d014      	beq.n	8002b48 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fe ff43 	bl	80019a8 <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe ff3f 	bl	80019a8 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0f7      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b3c:	f7ff fb45 	bl	80021ca <LL_RCC_LSE_IsReady>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ef      	beq.n	8002b26 <HAL_RCC_OscConfig+0x456>
 8002b46:	e013      	b.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe ff2e 	bl	80019a8 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe ff2a 	bl	80019a8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0e2      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b66:	f7ff fb30 	bl	80021ca <LL_RCC_LSE_IsReady>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ef      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80d8 	beq.w	8002d2a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	f7ff fc38 	bl	80023ee <LL_RCC_GetSysClkSource>
 8002b7e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 80a6 	bne.w	8002cde <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d123      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d114      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d054      	beq.n	8002c92 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d04f      	beq.n	8002c8e <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bee:	f7ff fcc1 	bl	8002574 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf2:	f7fe fed9 	bl	80019a8 <HAL_GetTick>
 8002bf6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fed5 	bl	80019a8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e08f      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ef      	bne.n	8002bfa <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_RCC_OscConfig+0x668>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c32:	0212      	lsls	r2, r2, #8
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c46:	430a      	orrs	r2, r1
 8002c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c50:	f7ff fc81 	bl	8002556 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c64:	f7fe fea0 	bl	80019a8 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fe9c 	bl	80019a8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e056      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8c:	e04d      	b.n	8002d2a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e04c      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d144      	bne.n	8002d2a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ca0:	f7ff fc59 	bl	8002556 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb4:	f7fe fe78 	bl	80019a8 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fe74 	bl	80019a8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e02e      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCC_OscConfig+0x5ec>
 8002cdc:	e025      	b.n	8002d2a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	f7ff fc46 	bl	8002574 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fe5e 	bl	80019a8 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fe5a 	bl	80019a8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ef      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e001      	b.n	8002d2a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3734      	adds	r7, #52	; 0x34
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	58000400 	.word	0x58000400
 8002d38:	11c1808c 	.word	0x11c1808c

08002d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e12d      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b98      	ldr	r3, [pc, #608]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d91b      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b95      	ldr	r3, [pc, #596]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4993      	ldr	r1, [pc, #588]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fe1b 	bl	80019a8 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d76:	f7fe fe17 	bl	80019a8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e111      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d88:	4b8a      	ldr	r3, [pc, #552]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d1ef      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb2d 	bl	8002406 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fdfc 	bl	80019a8 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db4:	f7fe fdf8 	bl	80019a8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0f2      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dc6:	f7ff fc27 	bl	8002618 <LL_RCC_IsActiveFlag_HPRE>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f1      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fb24 	bl	800242e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002de6:	f7fe fddf 	bl	80019a8 <HAL_GetTick>
 8002dea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dee:	f7fe fddb 	bl	80019a8 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0d5      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e00:	f7ff fc1c 	bl	800263c <LL_RCC_IsActiveFlag_C2HPRE>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f1      	beq.n	8002dee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb1d 	bl	800245a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fdc2 	bl	80019a8 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e28:	f7fe fdbe 	bl	80019a8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e0b8      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e3a:	f7ff fc12 	bl	8002662 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f1      	beq.n	8002e28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d016      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fb17 	bl	8002488 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fda5 	bl	80019a8 <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e62:	f7fe fda1 	bl	80019a8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e09b      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e74:	f7ff fc08 	bl	8002688 <LL_RCC_IsActiveFlag_PPRE1>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f1      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fb0d 	bl	80024b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e96:	f7fe fd87 	bl	80019a8 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e9e:	f7fe fd83 	bl	80019a8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e07d      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eb0:	f7ff fbfc 	bl	80026ac <LL_RCC_IsActiveFlag_PPRE2>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f1      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d043      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ece:	f7ff f8e1 	bl	8002094 <LL_RCC_HSE_IsReady>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11e      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e067      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ee4:	f7ff fb55 	bl	8002592 <LL_RCC_PLL_IsReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d113      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e05c      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002efa:	f7ff fa15 	bl	8002328 <LL_RCC_MSI_IsReady>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e051      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f08:	f7ff f8f4 	bl	80020f4 <LL_RCC_HSI_IsReady>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e04a      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fa53 	bl	80023c6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe fd42 	bl	80019a8 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fd3e 	bl	80019a8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e036      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	f7ff fa56 	bl	80023ee <LL_RCC_GetSysClkSource>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d1ec      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d21b      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4913      	ldr	r1, [pc, #76]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fd1c 	bl	80019a8 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f74:	f7fe fd18 	bl	80019a8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e012      	b.n	8002fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x278>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1ef      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f94:	f000 f87e 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_RCC_ClockConfig+0x27c>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f9e:	f7fe fd0f 	bl	80019c0 <HAL_GetTickPrio>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe f877 	bl	8001098 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58004000 	.word	0x58004000
 8002fb8:	20000014 	.word	0x20000014

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	f7ff fa14 	bl	80023ee <LL_RCC_GetSysClkSource>
 8002fc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fce:	f7ff f9d0 	bl	8002372 <LL_RCC_MSI_GetRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e04b      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e045      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d10a      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ff6:	f7ff f81d 	bl	8002034 <LL_RCC_HSE_IsEnabledDiv2>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e03a      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e037      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800300c:	f7ff faf8 	bl	8002600 <LL_RCC_PLL_GetMainSource>
 8003010:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d003      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x64>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x6a>
 800301e:	e00d      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003022:	60bb      	str	r3, [r7, #8]
        break;
 8003024:	e015      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003026:	f7ff f805 	bl	8002034 <LL_RCC_HSE_IsEnabledDiv2>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d102      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003032:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003034:	e00d      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003038:	60bb      	str	r3, [r7, #8]
        break;
 800303a:	e00a      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800303c:	f7ff f999 	bl	8002372 <LL_RCC_MSI_GetRange>
 8003040:	4603      	mov	r3, r0
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	60bb      	str	r3, [r7, #8]
        break;
 8003050:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003052:	f7ff fab0 	bl	80025b6 <LL_RCC_PLL_GetN>
 8003056:	4602      	mov	r2, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	fb03 f402 	mul.w	r4, r3, r2
 800305e:	f7ff fac3 	bl	80025e8 <LL_RCC_PLL_GetDivider>
 8003062:	4603      	mov	r3, r0
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	3301      	adds	r3, #1
 8003068:	fbb4 f4f3 	udiv	r4, r4, r3
 800306c:	f7ff fab0 	bl	80025d0 <LL_RCC_PLL_GetR>
 8003070:	4603      	mov	r3, r0
 8003072:	0f5b      	lsrs	r3, r3, #29
 8003074:	3301      	adds	r3, #1
 8003076:	fbb4 f3f3 	udiv	r3, r4, r3
 800307a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	bf00      	nop
 8003088:	08009f18 	.word	0x08009f18
 800308c:	00f42400 	.word	0x00f42400
 8003090:	01e84800 	.word	0x01e84800

08003094 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b598      	push	{r3, r4, r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003098:	f7ff ff90 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 800309c:	4604      	mov	r4, r0
 800309e:	f7ff fa1b 	bl	80024d8 <LL_RCC_GetAHBPrescaler>
 80030a2:	4603      	mov	r3, r0
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd98      	pop	{r3, r4, r7, pc}
 80030b8:	08009eb8 	.word	0x08009eb8

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b598      	push	{r3, r4, r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030c0:	f7ff ffe8 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030c4:	4604      	mov	r4, r0
 80030c6:	f7ff fa2e 	bl	8002526 <LL_RCC_GetAPB1Prescaler>
 80030ca:	4603      	mov	r3, r0
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd98      	pop	{r3, r4, r7, pc}
 80030e4:	08009ef8 	.word	0x08009ef8

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b598      	push	{r3, r4, r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80030ec:	f7ff ffd2 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030f0:	4604      	mov	r4, r0
 80030f2:	f7ff fa24 	bl	800253e <LL_RCC_GetAPB2Prescaler>
 80030f6:	4603      	mov	r3, r0
 80030f8:	0adb      	lsrs	r3, r3, #11
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa24 f303 	lsr.w	r3, r4, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd98      	pop	{r3, r4, r7, pc}
 8003110:	08009ef8 	.word	0x08009ef8

08003114 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	226f      	movs	r2, #111	; 0x6f
 8003122:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003124:	f7ff f963 	bl	80023ee <LL_RCC_GetSysClkSource>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800312e:	f7ff f9d3 	bl	80024d8 <LL_RCC_GetAHBPrescaler>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003138:	f7ff f9f5 	bl	8002526 <LL_RCC_GetAPB1Prescaler>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003142:	f7ff f9fc 	bl	800253e <LL_RCC_GetAPB2Prescaler>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800314c:	f7ff f9d0 	bl	80024f0 <LL_C2_RCC_GetAHBPrescaler>
 8003150:	4602      	mov	r2, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003156:	f7ff f9d8 	bl	800250a <LL_RCC_GetAHB4Prescaler>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_GetClockConfig+0x60>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0207 	and.w	r2, r3, #7
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	601a      	str	r2, [r3, #0]
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	58004000 	.word	0x58004000

08003178 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2bb0      	cmp	r3, #176	; 0xb0
 8003184:	d903      	bls.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e007      	b.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800319e:	f7ff f9b4 	bl	800250a <LL_RCC_GetAHB4Prescaler>
 80031a2:	4603      	mov	r3, r0
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80031ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f80c 	bl	80031e4 <RCC_SetFlashLatency>
 80031cc:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	08009f18 	.word	0x08009f18
 80031dc:	08009eb8 	.word	0x08009eb8
 80031e0:	431bde83 	.word	0x431bde83

080031e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08f      	sub	sp, #60	; 0x3c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <RCC_SetFlashLatency+0x9c>)
 80031f0:	f107 041c 	add.w	r4, r7, #28
 80031f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <RCC_SetFlashLatency+0xa0>)
 80031fc:	f107 040c 	add.w	r4, r7, #12
 8003200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800320a:	2300      	movs	r3, #0
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
 800320e:	e013      	b.n	8003238 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3338      	adds	r3, #56	; 0x38
 8003216:	443b      	add	r3, r7
 8003218:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d807      	bhi.n	8003232 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	3338      	adds	r3, #56	; 0x38
 8003228:	443b      	add	r3, r7
 800322a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003230:	e005      	b.n	800323e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	3301      	adds	r3, #1
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2b03      	cmp	r3, #3
 800323c:	d9e8      	bls.n	8003210 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <RCC_SetFlashLatency+0xa4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4910      	ldr	r1, [pc, #64]	; (8003288 <RCC_SetFlashLatency+0xa4>)
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800324e:	f7fe fbab 	bl	80019a8 <HAL_GetTick>
 8003252:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003254:	e008      	b.n	8003268 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003256:	f7fe fba7 	bl	80019a8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e007      	b.n	8003278 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <RCC_SetFlashLatency+0xa4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003272:	429a      	cmp	r2, r3
 8003274:	d1ef      	bne.n	8003256 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	373c      	adds	r7, #60	; 0x3c
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	08009e80 	.word	0x08009e80
 8003284:	08009e90 	.word	0x08009e90
 8003288:	58004000 	.word	0x58004000

0800328c <LL_RCC_LSE_IsEnabled>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <LL_RCC_LSE_IsEnabled+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_RCC_LSE_IsReady>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d101      	bne.n	80032c8 <LL_RCC_LSE_IsReady+0x18>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_RCC_LSE_IsReady+0x1a>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_RCC_MSI_EnablePLLMode>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6013      	str	r3, [r2, #0]
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_SetRFWKPClockSource>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_RCC_SetSMPSClockSource>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f023 0203 	bic.w	r2, r3, #3
 8003330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4313      	orrs	r3, r2
 8003338:	624b      	str	r3, [r1, #36]	; 0x24
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_SetSMPSPrescaler>:
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_RCC_SetUSARTClockSource>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_RCC_SetLPUARTClockSource>:
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_SetI2CClockSource>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033de:	43db      	mvns	r3, r3
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_RCC_SetLPTIMClockSource>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_RCC_SetRNGClockSource>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_RCC_SetCLK48ClockSource>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_RCC_SetADCClockSource>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_RCC_SetRTCClockSource>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_RCC_GetRTCClockSource>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_RCC_ForceBackupDomainReset>:
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b088      	sub	sp, #32
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800354a:	2300      	movs	r3, #0
 800354c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800354e:	2300      	movs	r3, #0
 8003550:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355a:	2b00      	cmp	r3, #0
 800355c:	d046      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800355e:	f7ff ffc1 	bl	80034e4 <LL_RCC_GetRTCClockSource>
 8003562:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	429a      	cmp	r2, r3
 800356c:	d03c      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800356e:	f7fe fd51 	bl	8002014 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff9b 	bl	80034b8 <LL_RCC_SetRTCClockSource>
 8003582:	e02e      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800358e:	f7ff ffb6 	bl	80034fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003592:	f7ff ffc5 	bl	8003520 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80035a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80035ae:	f7ff fe6d 	bl	800328c <LL_RCC_LSE_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d114      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b8:	f7fe f9f6 	bl	80019a8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80035be:	e00b      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe f9f2 	bl	80019a8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d902      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	77fb      	strb	r3, [r7, #31]
              break;
 80035d6:	e004      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80035d8:	f7ff fe6a 	bl	80032b0 <LL_RCC_LSE_IsReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d1ee      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	77bb      	strb	r3, [r7, #30]
 80035e6:	e001      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff feb6 	bl	800336e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fec1 	bl	800339a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fee9 	bl	8003400 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fede 	bl	8003400 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff feb6 	bl	80033c6 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02b      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d008      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003678:	d003      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fed4 	bl	8003434 <LL_RCC_SetRNGClockSource>
 800368c:	e00a      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	2000      	movs	r0, #0
 800369a:	f7ff fecb 	bl	8003434 <LL_RCC_SetRNGClockSource>
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fede 	bl	8003460 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036ac:	d107      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d011      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fedc 	bl	800348c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036dc:	d107      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fdf7 	bl	80032f2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe16 	bl	8003346 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fdfd 	bl	800331e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003724:	7fbb      	ldrb	r3, [r7, #30]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003732:	f7ff fdcf 	bl	80032d4 <LL_RCC_MSI_EnablePLLMode>
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e09f      	b.n	800388e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fc04 	bl	8000f70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <HAL_RTC_Init+0x15c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d07e      	beq.n	800387a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	22ca      	movs	r2, #202	; 0xca
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2253      	movs	r2, #83	; 0x53
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa18 	bl	8003bc2 <RTC_EnterInitMode>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2204      	movs	r2, #4
 80037a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e067      	b.n	800387e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68d2      	ldr	r2, [r2, #12]
 80037e8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6919      	ldr	r1, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0202 	bic.w	r2, r2, #2
 800381c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d113      	bne.n	800386c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f996 	bl	8003b76 <HAL_RTC_WaitForSynchro>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e010      	b.n	800388e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e001      	b.n	800387e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d103      	bne.n	800388c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40002800 	.word	0x40002800

0800389c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RTC_SetTime+0x1a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0b2      	b.n	8003a1c <HAL_RTC_SetTime+0x180>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d126      	bne.n	800391a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f996 	bl	8003c16 <RTC_ByteToBcd2>
 80038ea:	4603      	mov	r3, r0
 80038ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f98f 	bl	8003c16 <RTC_ByteToBcd2>
 80038f8:	4603      	mov	r3, r0
 80038fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	789b      	ldrb	r3, [r3, #2]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f987 	bl	8003c16 <RTC_ByteToBcd2>
 8003908:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800390a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	78db      	ldrb	r3, [r3, #3]
 8003912:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e018      	b.n	800394c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800393a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003940:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	22ca      	movs	r2, #202	; 0xca
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2253      	movs	r2, #83	; 0x53
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f930 	bl	8003bc2 <RTC_EnterInitMode>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2204      	movs	r2, #4
 8003974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04b      	b.n	8003a1c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800398e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003992:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d113      	bne.n	8003a02 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8cb 	bl	8003b76 <HAL_RTC_WaitForSynchro>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2204      	movs	r2, #4
 80039f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00c      	b.n	8003a1c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11a      	bne.n	8003ad2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f8d8 	bl	8003c56 <RTC_Bcd2ToByte>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f8cf 	bl	8003c56 <RTC_Bcd2ToByte>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f8c6 	bl	8003c56 <RTC_Bcd2ToByte>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003af6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11a      	bne.n	8003b6c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	78db      	ldrb	r3, [r3, #3]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f88b 	bl	8003c56 <RTC_Bcd2ToByte>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f882 	bl	8003c56 <RTC_Bcd2ToByte>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	789b      	ldrb	r3, [r3, #2]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f879 	bl	8003c56 <RTC_Bcd2ToByte>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b8e:	f7fd ff0b 	bl	80019a8 <HAL_GetTick>
 8003b92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b94:	e009      	b.n	8003baa <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b96:	f7fd ff07 	bl	80019a8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	d901      	bls.n	8003baa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e007      	b.n	8003bba <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d119      	bne.n	8003c0c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003be2:	f7fd fee1 	bl	80019a8 <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003be8:	e009      	b.n	8003bfe <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003bea:	f7fd fedd 	bl	80019a8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf8:	d901      	bls.n	8003bfe <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e007      	b.n	8003c0e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003c28:	e005      	b.n	8003c36 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	3b0a      	subs	r3, #10
 8003c34:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d8f6      	bhi.n	8003c2a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b2db      	uxtb	r3, r3
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b2db      	uxtb	r3, r3
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e049      	b.n	8003d34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f841 	bl	8003d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 f9d5 	bl	800407c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e036      	b.n	8003dd6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_TIM_Base_Start_IT+0x94>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x44>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d115      	bne.n	8003dc0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_TIM_Base_Start_IT+0x98>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d015      	beq.n	8003dd2 <HAL_TIM_Base_Start_IT+0x82>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d011      	beq.n	8003dd2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	00010007 	.word	0x00010007

08003dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0202 	mvn.w	r2, #2
 8003e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f905 	bl	800403e <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8f7 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f908 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0204 	mvn.w	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8db 	bl	800403e <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8cd 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f8de 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0208 	mvn.w	r2, #8
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8b1 	bl	800403e <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f8a3 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8b4 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f887 	bl	800403e <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f879 	bl	800402a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f88a 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0201 	mvn.w	r2, #1
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fed8 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8ca 	bl	8004130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8bd 	bl	8004144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f838 	bl	8004066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d10e      	bne.n	8004022 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d107      	bne.n	8004022 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0220 	mvn.w	r2, #32
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f87d 	bl	800411c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a22      	ldr	r2, [pc, #136]	; (8004118 <TIM_Base_SetConfig+0x9c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x20>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409a:	d108      	bne.n	80040ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <TIM_Base_SetConfig+0x9c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x42>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <TIM_Base_SetConfig+0x9c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40012c00 	.word	0x40012c00

0800411c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_GetUSARTClockSource>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4013      	ands	r3, r2
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_GetLPUARTClockSource>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004184:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4013      	ands	r3, r2
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e042      	b.n	8004230 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fc ff03 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fc4a 	bl	8004a74 <UART_SetConfig>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e022      	b.n	8004230 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fe66 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 feed 	bl	8005008 <UART_CheckIdleState>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	2b20      	cmp	r3, #32
 8004250:	d17b      	bne.n	800434a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_UART_Transmit+0x26>
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e074      	b.n	800434c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004272:	f7fd fb99 	bl	80019a8 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Transmit+0x6c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ac:	e030      	b.n	8004310 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 ff4f 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e03d      	b.n	800434c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	3302      	adds	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e007      	b.n	80042fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3301      	adds	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1c8      	bne.n	80042ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	2140      	movs	r1, #64	; 0x40
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 ff18 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004368:	2b20      	cmp	r3, #32
 800436a:	d137      	bne.n	80043dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_UART_Receive_IT+0x24>
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e030      	b.n	80043de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_UART_Receive_IT+0x94>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01f      	beq.n	80043cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	613b      	str	r3, [r7, #16]
   return(result);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 ff2a 	bl	800522c <UART_Start_Receive_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	e000      	b.n	80043de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40008000 	.word	0x40008000

080043ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b0ba      	sub	sp, #232	; 0xe8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004416:	f640 030f 	movw	r3, #2063	; 0x80f
 800441a:	4013      	ands	r3, r2
 800441c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11b      	bne.n	8004460 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 82e3 	beq.w	8004a1c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      }
      return;
 800445e:	e2dd      	b.n	8004a1c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8123 	beq.w	80046b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800446a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800446e:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <HAL_UART_IRQHandler+0x2b8>)
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800447a:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <HAL_UART_IRQHandler+0x2bc>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8116 	beq.w	80046b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0xc8>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0xf8>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d011      	beq.n	8004514 <HAL_UART_IRQHandler+0x128>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2204      	movs	r2, #4
 8004502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800452c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004530:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_UART_IRQHandler+0x2b8>)
 8004532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <HAL_UART_IRQHandler+0x196>
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8249 	beq.w	8004a20 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d054      	beq.n	8004690 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 ff42 	bl	8005470 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d146      	bne.n	8004688 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800463e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1d9      	bne.n	80045fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <HAL_UART_IRQHandler+0x2c0>)
 8004658:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd faf8 	bl	8001c56 <HAL_DMA_Abort_IT>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d019      	beq.n	80046a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467e:	e00f      	b.n	80046a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9e1 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	e00b      	b.n	80046a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f9dd 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468e:	e007      	b.n	80046a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f9d9 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800469e:	e1bf      	b.n	8004a20 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	bf00      	nop
    return;
 80046a2:	e1bd      	b.n	8004a20 <HAL_UART_IRQHandler+0x634>
 80046a4:	10000001 	.word	0x10000001
 80046a8:	04000120 	.word	0x04000120
 80046ac:	0800553d 	.word	0x0800553d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 8153 	bne.w	8004960 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 814c 	beq.w	8004960 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8145 	beq.w	8004960 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2210      	movs	r2, #16
 80046dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	f040 80bb 	bne.w	8004864 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 818f 	beq.w	8004a24 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800470c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004710:	429a      	cmp	r2, r3
 8004712:	f080 8187 	bcs.w	8004a24 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800471c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 8087 	bne.w	8004842 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800475e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004762:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800476a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1da      	bne.n	8004734 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800478e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e1      	bne.n	800477e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e3      	bne.n	80047ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	f023 0310 	bic.w	r3, r3, #16
 8004814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004822:	65bb      	str	r3, [r7, #88]	; 0x58
 8004824:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e4      	bne.n	8004800 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd f9ab 	bl	8001b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004854:	b29b      	uxth	r3, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8fd 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004862:	e0df      	b.n	8004a24 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004870:	b29b      	uxth	r3, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80d1 	beq.w	8004a28 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80cc 	beq.w	8004a28 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048b2:	647b      	str	r3, [r7, #68]	; 0x44
 80048b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e4      	bne.n	8004890 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	623b      	str	r3, [r7, #32]
   return(result);
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e1      	bne.n	80048c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	617b      	str	r3, [r7, #20]
   return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e4      	bne.n	8004916 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f87f 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800495e:	e063      	b.n	8004a28 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <HAL_UART_IRQHandler+0x59e>
 800496c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fb38 	bl	8005ff8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004988:	e051      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d03a      	beq.n	8004a2c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
    }
    return;
 80049be:	e035      	b.n	8004a2c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5f4>
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fdc5 	bl	8005568 <UART_EndTransmit_IT>
    return;
 80049de:	e026      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_UART_IRQHandler+0x614>
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f001 fb11 	bl	8006020 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049fe:	e016      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_UART_IRQHandler+0x642>
 8004a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da0c      	bge.n	8004a2e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 faf9 	bl	800600c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a1a:	e008      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
      return;
 8004a1c:	bf00      	nop
 8004a1e:	e006      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
    return;
 8004a20:	bf00      	nop
 8004a22:	e004      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
      return;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
      return;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_IRQHandler+0x642>
    return;
 8004a2c:	bf00      	nop
  }
}
 8004a2e:	37e8      	adds	r7, #232	; 0xe8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b08c      	sub	sp, #48	; 0x30
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4baf      	ldr	r3, [pc, #700]	; (8004d60 <UART_SetConfig+0x2ec>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4aa4      	ldr	r2, [pc, #656]	; (8004d64 <UART_SetConfig+0x2f0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004adc:	4313      	orrs	r3, r2
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f023 010f 	bic.w	r1, r3, #15
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a95      	ldr	r2, [pc, #596]	; (8004d68 <UART_SetConfig+0x2f4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d125      	bne.n	8004b64 <UART_SetConfig+0xf0>
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f7ff fb1d 	bl	8004158 <LL_RCC_GetUSARTClockSource>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d81b      	bhi.n	8004b5c <UART_SetConfig+0xe8>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0xb8>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004b4d 	.word	0x08004b4d
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e042      	b.n	8004bca <UART_SetConfig+0x156>
 8004b44:	2302      	movs	r3, #2
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e03e      	b.n	8004bca <UART_SetConfig+0x156>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e03a      	b.n	8004bca <UART_SetConfig+0x156>
 8004b54:	2308      	movs	r3, #8
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e036      	b.n	8004bca <UART_SetConfig+0x156>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e032      	b.n	8004bca <UART_SetConfig+0x156>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <UART_SetConfig+0x2f0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d12a      	bne.n	8004bc4 <UART_SetConfig+0x150>
 8004b6e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b72:	f7ff fb01 	bl	8004178 <LL_RCC_GetLPUARTClockSource>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d01a      	beq.n	8004bb4 <UART_SetConfig+0x140>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d81b      	bhi.n	8004bbc <UART_SetConfig+0x148>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d00c      	beq.n	8004ba4 <UART_SetConfig+0x130>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d815      	bhi.n	8004bbc <UART_SetConfig+0x148>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x128>
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d008      	beq.n	8004bac <UART_SetConfig+0x138>
 8004b9a:	e00f      	b.n	8004bbc <UART_SetConfig+0x148>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	e012      	b.n	8004bca <UART_SetConfig+0x156>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e00e      	b.n	8004bca <UART_SetConfig+0x156>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e00a      	b.n	8004bca <UART_SetConfig+0x156>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e006      	b.n	8004bca <UART_SetConfig+0x156>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e002      	b.n	8004bca <UART_SetConfig+0x156>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a65      	ldr	r2, [pc, #404]	; (8004d64 <UART_SetConfig+0x2f0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	f040 8097 	bne.w	8004d04 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d823      	bhi.n	8004c26 <UART_SetConfig+0x1b2>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x170>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c17 	.word	0x08004c17
 8004bf8:	08004c27 	.word	0x08004c27
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c27 	.word	0x08004c27
 8004c04:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fa58 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0e:	e010      	b.n	8004c32 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b56      	ldr	r3, [pc, #344]	; (8004d6c <UART_SetConfig+0x2f8>)
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c14:	e00d      	b.n	8004c32 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe f9d1 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c24:	e005      	b.n	8004c32 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 812b 	beq.w	8004e90 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	4a4c      	ldr	r2, [pc, #304]	; (8004d70 <UART_SetConfig+0x2fc>)
 8004c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d305      	bcc.n	8004c6a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d903      	bls.n	8004c72 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c70:	e10e      	b.n	8004e90 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2200      	movs	r2, #0
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	60fa      	str	r2, [r7, #12]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <UART_SetConfig+0x2fc>)
 8004c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2200      	movs	r2, #0
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c94:	f7fb facc 	bl	8000230 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	020b      	lsls	r3, r1, #8
 8004caa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cae:	0202      	lsls	r2, r0, #8
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	6849      	ldr	r1, [r1, #4]
 8004cb4:	0849      	lsrs	r1, r1, #1
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	4605      	mov	r5, r0
 8004cbc:	eb12 0804 	adds.w	r8, r2, r4
 8004cc0:	eb43 0905 	adc.w	r9, r3, r5
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	469a      	mov	sl, r3
 8004ccc:	4693      	mov	fp, r2
 8004cce:	4652      	mov	r2, sl
 8004cd0:	465b      	mov	r3, fp
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	f7fb faab 	bl	8000230 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4613      	mov	r3, r2
 8004ce0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce8:	d308      	bcc.n	8004cfc <UART_SetConfig+0x288>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf0:	d204      	bcs.n	8004cfc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e0c9      	b.n	8004e90 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d02:	e0c5      	b.n	8004e90 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d16d      	bne.n	8004dea <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b07      	cmp	r3, #7
 8004d16:	d82d      	bhi.n	8004d74 <UART_SetConfig+0x300>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x2ac>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d41 	.word	0x08004d41
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d75 	.word	0x08004d75
 8004d2c:	08004d4f 	.word	0x08004d4f
 8004d30:	08004d75 	.word	0x08004d75
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d75 	.word	0x08004d75
 8004d3c:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7fe f9d2 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d46:	e01b      	b.n	8004d80 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <UART_SetConfig+0x2f8>)
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d4c:	e018      	b.n	8004d80 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe f935 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d54:	e014      	b.n	8004d80 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d5c:	e010      	b.n	8004d80 <UART_SetConfig+0x30c>
 8004d5e:	bf00      	nop
 8004d60:	cfff69f3 	.word	0xcfff69f3
 8004d64:	40008000 	.word	0x40008000
 8004d68:	40013800 	.word	0x40013800
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	08009f58 	.word	0x08009f58
      default:
        pclk = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8084 	beq.w	8004e90 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <UART_SetConfig+0x448>)
 8004d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	005a      	lsls	r2, r3, #1
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	441a      	add	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2b0f      	cmp	r3, #15
 8004db2:	d916      	bls.n	8004de2 <UART_SetConfig+0x36e>
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d212      	bcs.n	8004de2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	8bfa      	ldrh	r2, [r7, #30]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e056      	b.n	8004e90 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004de8:	e052      	b.n	8004e90 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dee:	3b01      	subs	r3, #1
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d822      	bhi.n	8004e3a <UART_SetConfig+0x3c6>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x388>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e2b 	.word	0x08004e2b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e3b 	.word	0x08004e3b
 8004e18:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe f964 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e22:	e010      	b.n	8004e46 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <UART_SetConfig+0x44c>)
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e28:	e00d      	b.n	8004e46 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe f8c7 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e30:	e009      	b.n	8004e46 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e38:	e005      	b.n	8004e46 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e44:	bf00      	nop
    }

    if (pclk != 0U)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d021      	beq.n	8004e90 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <UART_SetConfig+0x448>)
 8004e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	441a      	add	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d909      	bls.n	8004e8a <UART_SetConfig+0x416>
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d205      	bcs.n	8004e8a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e002      	b.n	8004e90 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3730      	adds	r7, #48	; 0x30
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	08009f58 	.word	0x08009f58
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	; 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc fcc6 	bl	80019a8 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12f      	bne.n	800508c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88e 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d022      	beq.n	800508c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e063      	b.n	8005154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b04      	cmp	r3, #4
 8005098:	d149      	bne.n	800512e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f857 	bl	800515c <UART_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03c      	beq.n	800512e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	623b      	str	r3, [r7, #32]
   return(result);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
 80050d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	617b      	str	r3, [r7, #20]
   return(result);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e012      	b.n	8005154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3758      	adds	r7, #88	; 0x58
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516c:	e049      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d045      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fc fc17 	bl	80019a8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <UART_WaitOnFlagUntilTimeout+0x30>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e048      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d031      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d110      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f95b 	bl	8005470 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2208      	movs	r2, #8
 80051be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e029      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051dc:	d111      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f941 	bl	8005470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e00f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0a6      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800522c:	b480      	push	{r7}
 800522e:	b0a3      	sub	sp, #140	; 0x8c
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d10e      	bne.n	800527e <UART_Start_Receive_IT+0x52>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <UART_Start_Receive_IT+0x48>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800526e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005272:	e02d      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800527c:	e028      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <UART_Start_Receive_IT+0x76>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <UART_Start_Receive_IT+0x6c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005296:	e01b      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	227f      	movs	r2, #127	; 0x7f
 800529c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052a0:	e016      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052aa:	d10d      	bne.n	80052c8 <UART_Start_Receive_IT+0x9c>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <UART_Start_Receive_IT+0x92>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	227f      	movs	r2, #127	; 0x7f
 80052b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052bc:	e008      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	223f      	movs	r2, #63	; 0x3f
 80052c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052c6:	e003      	b.n	80052d0 <UART_Start_Receive_IT+0xa4>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2222      	movs	r2, #34	; 0x22
 80052dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80052f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005304:	673a      	str	r2, [r7, #112]	; 0x70
 8005306:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800530a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e3      	bne.n	80052e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005320:	d14f      	bne.n	80053c2 <UART_Start_Receive_IT+0x196>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	429a      	cmp	r2, r3
 800532c:	d349      	bcc.n	80053c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	d107      	bne.n	8005348 <UART_Start_Receive_IT+0x11c>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a47      	ldr	r2, [pc, #284]	; (8005460 <UART_Start_Receive_IT+0x234>)
 8005344:	675a      	str	r2, [r3, #116]	; 0x74
 8005346:	e002      	b.n	800534e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a46      	ldr	r2, [pc, #280]	; (8005464 <UART_Start_Receive_IT+0x238>)
 800534c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01a      	beq.n	800538c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800537e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e4      	bne.n	8005356 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80053ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80053ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_Start_Receive_IT+0x160>
 80053c0:	e046      	b.n	8005450 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d107      	bne.n	80053dc <UART_Start_Receive_IT+0x1b0>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a24      	ldr	r2, [pc, #144]	; (8005468 <UART_Start_Receive_IT+0x23c>)
 80053d8:	675a      	str	r2, [r3, #116]	; 0x74
 80053da:	e002      	b.n	80053e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a23      	ldr	r2, [pc, #140]	; (800546c <UART_Start_Receive_IT+0x240>)
 80053e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d019      	beq.n	800541e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80053fe:	677b      	str	r3, [r7, #116]	; 0x74
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
 800540a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e6      	bne.n	80053ea <UART_Start_Receive_IT+0x1be>
 800541c:	e018      	b.n	8005450 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	613b      	str	r3, [r7, #16]
   return(result);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	67bb      	str	r3, [r7, #120]	; 0x78
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69f9      	ldr	r1, [r7, #28]
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	61bb      	str	r3, [r7, #24]
   return(result);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	378c      	adds	r7, #140	; 0x8c
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	08005c91 	.word	0x08005c91
 8005464:	08005931 	.word	0x08005931
 8005468:	08005779 	.word	0x08005779
 800546c:	080055c1 	.word	0x080055c1

08005470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b095      	sub	sp, #84	; 0x54
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
 8005498:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800549c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e3      	bne.n	80054aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d118      	bne.n	800551c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0310 	bic.w	r3, r3, #16
 80054fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005530:	bf00      	nop
 8005532:	3754      	adds	r7, #84	; 0x54
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fa74 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	60bb      	str	r3, [r7, #8]
   return(result);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	613b      	str	r3, [r7, #16]
   return(result);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fa3f 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b09c      	sub	sp, #112	; 0x70
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80055ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d8:	2b22      	cmp	r3, #34	; 0x22
 80055da:	f040 80be 	bne.w	800575a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	400a      	ands	r2, r1
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 80a1 	bne.w	800576a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005646:	65bb      	str	r3, [r7, #88]	; 0x58
 8005648:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800564c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	667b      	str	r3, [r7, #100]	; 0x64
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800567a:	647a      	str	r2, [r7, #68]	; 0x44
 800567c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a33      	ldr	r2, [pc, #204]	; (8005774 <UART_RxISR_8BIT+0x1b4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01f      	beq.n	80056ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d018      	beq.n	80056ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	623b      	str	r3, [r7, #32]
   return(result);
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ce:	663b      	str	r3, [r7, #96]	; 0x60
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
 80056da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d12e      	bne.n	8005752 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60fb      	str	r3, [r7, #12]
   return(result);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	69b9      	ldr	r1, [r7, #24]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	617b      	str	r3, [r7, #20]
   return(result);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d103      	bne.n	8005742 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2210      	movs	r2, #16
 8005740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff f986 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005750:	e00b      	b.n	800576a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fb fa9c 	bl	8000c90 <HAL_UART_RxCpltCallback>
}
 8005758:	e007      	b.n	800576a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0208 	orr.w	r2, r2, #8
 8005768:	619a      	str	r2, [r3, #24]
}
 800576a:	bf00      	nop
 800576c:	3770      	adds	r7, #112	; 0x70
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40008000 	.word	0x40008000

08005778 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b09c      	sub	sp, #112	; 0x70
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005786:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005790:	2b22      	cmp	r3, #34	; 0x22
 8005792:	f040 80be 	bne.w	8005912 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80057a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80057aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80057ae:	4013      	ands	r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 80a1 	bne.w	8005922 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005800:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005832:	643a      	str	r2, [r7, #64]	; 0x40
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a33      	ldr	r2, [pc, #204]	; (800592c <UART_RxISR_16BIT+0x1b4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d01f      	beq.n	80058a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005892:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d12e      	bne.n	800590a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	613b      	str	r3, [r7, #16]
   return(result);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d103      	bne.n	80058fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff f8aa 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005908:	e00b      	b.n	8005922 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb f9c0 	bl	8000c90 <HAL_UART_RxCpltCallback>
}
 8005910:	e007      	b.n	8005922 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0208 	orr.w	r2, r2, #8
 8005920:	619a      	str	r2, [r3, #24]
}
 8005922:	bf00      	nop
 8005924:	3770      	adds	r7, #112	; 0x70
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40008000 	.word	0x40008000

08005930 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b0ac      	sub	sp, #176	; 0xb0
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800593e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	f040 8182 	bne.w	8005c70 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005972:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005976:	e125      	b.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005982:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005986:	b2d9      	uxtb	r1, r3
 8005988:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800598c:	b2da      	uxtb	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	400a      	ands	r2, r1
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d053      	beq.n	8005a72 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80059d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f043 0201 	orr.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d011      	beq.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2202      	movs	r2, #2
 8005a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f043 0204 	orr.w	r2, r3, #4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d011      	beq.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2204      	movs	r2, #4
 8005a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fe ffef 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 80a2 	bne.w	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aa4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005aa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e4      	bne.n	8005a80 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ade:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ae0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005ae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e1      	bne.n	8005ab6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5f      	ldr	r2, [pc, #380]	; (8005c88 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d021      	beq.n	8005b54 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01a      	beq.n	8005b54 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b40:	657b      	str	r3, [r7, #84]	; 0x54
 8005b42:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e4      	bne.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d130      	bne.n	8005bbe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
 8005b86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e4      	bne.n	8005b62 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d103      	bne.n	8005bae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fe ff50 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
 8005bbc:	e002      	b.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb f866 	bl	8000c90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bc4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f aecf 	bne.w	8005978 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005be0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005be4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d049      	beq.n	8005c80 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bf2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d242      	bcs.n	8005c80 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e3      	bne.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005c36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f043 0320 	orr.w	r3, r3, #32
 8005c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	613b      	str	r3, [r7, #16]
   return(result);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e4      	bne.n	8005c38 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c6e:	e007      	b.n	8005c80 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0208 	orr.w	r2, r2, #8
 8005c7e:	619a      	str	r2, [r3, #24]
}
 8005c80:	bf00      	nop
 8005c82:	37b0      	adds	r7, #176	; 0xb0
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40008000 	.word	0x40008000
 8005c8c:	080055c1 	.word	0x080055c1

08005c90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b0ae      	sub	sp, #184	; 0xb8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc6:	2b22      	cmp	r3, #34	; 0x22
 8005cc8:	f040 8186 	bne.w	8005fd8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cd2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cd6:	e129      	b.n	8005f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005cea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005cee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d053      	beq.n	8005dd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d011      	beq.n	8005d5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8005d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d011      	beq.n	8005d8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2204      	movs	r2, #4
 8005dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f043 0202 	orr.w	r2, r3, #2
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fe fe3d 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80a4 	bne.w	8005f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e2      	bne.n	8005de4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e1      	bne.n	8005e1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5f      	ldr	r2, [pc, #380]	; (8005ff0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d021      	beq.n	8005ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01a      	beq.n	8005ebc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e4      	bne.n	8005e86 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d130      	bne.n	8005f26 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eec:	647b      	str	r3, [r7, #68]	; 0x44
 8005eee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e4      	bne.n	8005eca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d103      	bne.n	8005f16 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2210      	movs	r2, #16
 8005f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe fd9c 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
 8005f24:	e002      	b.n	8005f2c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fa feb2 	bl	8000c90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f2c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f aecb 	bne.w	8005cd8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d049      	beq.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f5a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d242      	bcs.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	623b      	str	r3, [r7, #32]
   return(result);
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005f86:	633a      	str	r2, [r7, #48]	; 0x30
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e3      	bne.n	8005f62 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005f9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	69b9      	ldr	r1, [r7, #24]
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e4      	bne.n	8005fa0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fd6:	e007      	b.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0208 	orr.w	r2, r2, #8
 8005fe6:	619a      	str	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	37b8      	adds	r7, #184	; 0xb8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40008000 	.word	0x40008000
 8005ff4:	08005779 	.word	0x08005779

08005ff8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_UARTEx_DisableFifoMode+0x16>
 8006046:	2302      	movs	r3, #2
 8006048:	e027      	b.n	800609a <HAL_UARTEx_DisableFifoMode+0x66>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2224      	movs	r2, #36	; 0x24
 8006056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006078:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e02d      	b.n	800611a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2224      	movs	r2, #36	; 0x24
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f850 	bl	80061a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006136:	2302      	movs	r3, #2
 8006138:	e02d      	b.n	8006196 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2224      	movs	r2, #36	; 0x24
 8006146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f812 	bl	80061a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d108      	bne.n	80061c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061c0:	e031      	b.n	8006226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061c2:	2308      	movs	r3, #8
 80061c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061c6:	2308      	movs	r3, #8
 80061c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	0e5b      	lsrs	r3, r3, #25
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	0f5b      	lsrs	r3, r3, #29
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	7b3a      	ldrb	r2, [r7, #12]
 80061ee:	4911      	ldr	r1, [pc, #68]	; (8006234 <UARTEx_SetNbDataToProcess+0x94>)
 80061f0:	5c8a      	ldrb	r2, [r1, r2]
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061f6:	7b3a      	ldrb	r2, [r7, #12]
 80061f8:	490f      	ldr	r1, [pc, #60]	; (8006238 <UARTEx_SetNbDataToProcess+0x98>)
 80061fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	7b7a      	ldrb	r2, [r7, #13]
 800620c:	4909      	ldr	r1, [pc, #36]	; (8006234 <UARTEx_SetNbDataToProcess+0x94>)
 800620e:	5c8a      	ldrb	r2, [r1, r2]
 8006210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006214:	7b7a      	ldrb	r2, [r7, #13]
 8006216:	4908      	ldr	r1, [pc, #32]	; (8006238 <UARTEx_SetNbDataToProcess+0x98>)
 8006218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800621a:	fb93 f3f2 	sdiv	r3, r3, r2
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	08009f70 	.word	0x08009f70
 8006238:	08009f78 	.word	0x08009f78

0800623c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0208 	add.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0208 	add.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 0208 	add.w	r2, r3, #8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d103      	bne.n	80062fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e00c      	b.n	8006318 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3308      	adds	r3, #8
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e002      	b.n	800630c <vListInsert+0x2e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	d2f6      	bcs.n	8006306 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6892      	ldr	r2, [r2, #8]
 8006366:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6852      	ldr	r2, [r2, #4]
 8006370:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	429a      	cmp	r2, r3
 800637a:	d103      	bne.n	8006384 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1e5a      	subs	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xQueueGenericReset+0x2a>
        __asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60bb      	str	r3, [r7, #8]
    }
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80063ce:	f002 fba1 	bl	8008b14 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	3b01      	subs	r3, #1
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	441a      	add	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	22ff      	movs	r2, #255	; 0xff
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d114      	bne.n	800644e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01a      	beq.n	8006462 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3310      	adds	r3, #16
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f921 	bl	8007678 <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <xQueueGenericReset+0xcc>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	e009      	b.n	8006462 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3310      	adds	r3, #16
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fef2 	bl	800623c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3324      	adds	r3, #36	; 0x24
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff feed 	bl	800623c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006462:	f002 fb87 	bl	8008b74 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006466:	2301      	movs	r3, #1
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <xQueueGenericCreate+0x2a>
        __asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	61bb      	str	r3, [r7, #24]
    }
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <xQueueGenericCreate+0x48>
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d101      	bne.n	80064c0 <xQueueGenericCreate+0x4c>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <xQueueGenericCreate+0x4e>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <xQueueGenericCreate+0x68>
        __asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
    }
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80064e2:	d90a      	bls.n	80064fa <xQueueGenericCreate+0x86>
        __asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	613b      	str	r3, [r7, #16]
    }
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	3350      	adds	r3, #80	; 0x50
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 fc2c 	bl	8008d5c <pvPortMalloc>
 8006504:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00d      	beq.n	8006528 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3350      	adds	r3, #80	; 0x50
 8006514:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006516:	79fa      	ldrb	r2, [r7, #7]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f805 	bl	8006532 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006528:	6a3b      	ldr	r3, [r7, #32]
    }
 800652a:	4618      	mov	r0, r3
 800652c:	3728      	adds	r7, #40	; 0x28
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e002      	b.n	8006554 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006560:	2101      	movs	r1, #1
 8006562:	69b8      	ldr	r0, [r7, #24]
 8006564:	f7ff ff1e 	bl	80063a4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueGenericSend+0x32>
        __asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <xQueueGenericSend+0x40>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <xQueueGenericSend+0x44>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <xQueueGenericSend+0x46>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <xQueueGenericSend+0x60>
        __asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d103      	bne.n	80065e6 <xQueueGenericSend+0x6e>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <xQueueGenericSend+0x72>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <xQueueGenericSend+0x74>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xQueueGenericSend+0x8e>
        __asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	623b      	str	r3, [r7, #32]
    }
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006606:	f001 f9d3 	bl	80079b0 <xTaskGetSchedulerState>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <xQueueGenericSend+0x9e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <xQueueGenericSend+0xa2>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <xQueueGenericSend+0xa4>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <xQueueGenericSend+0xbe>
        __asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	61fb      	str	r3, [r7, #28]
    }
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006636:	f002 fa6d 	bl	8008b14 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	429a      	cmp	r2, r3
 8006644:	d302      	bcc.n	800664c <xQueueGenericSend+0xd4>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d129      	bne.n	80066a0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006652:	f000 fac6 	bl	8006be2 <prvCopyDataToQueue>
 8006656:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d010      	beq.n	8006682 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f807 	bl	8007678 <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d013      	beq.n	8006698 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006670:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <xQueueGenericSend+0x1f8>)
 8006672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	e00a      	b.n	8006698 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006688:	4b39      	ldr	r3, [pc, #228]	; (8006770 <xQueueGenericSend+0x1f8>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006698:	f002 fa6c 	bl	8008b74 <vPortExitCritical>
                return pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	e063      	b.n	8006768 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80066a6:	f002 fa65 	bl	8008b74 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e05c      	b.n	8006768 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80066ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 f83f 	bl	800773c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80066be:	2301      	movs	r3, #1
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80066c2:	f002 fa57 	bl	8008b74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80066c6:	f000 fdb9 	bl	800723c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80066ca:	f002 fa23 	bl	8008b14 <vPortEnterCritical>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d103      	bne.n	80066e4 <xQueueGenericSend+0x16c>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d103      	bne.n	80066fa <xQueueGenericSend+0x182>
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066fa:	f002 fa3b 	bl	8008b74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066fe:	1d3a      	adds	r2, r7, #4
 8006700:	f107 0314 	add.w	r3, r7, #20
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f001 f82e 	bl	8007768 <xTaskCheckForTimeOut>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d124      	bne.n	800675c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006714:	f000 fb5d 	bl	8006dd2 <prvIsQueueFull>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	3310      	adds	r3, #16
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ff56 	bl	80075d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800672c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800672e:	f000 fae8 	bl	8006d02 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006732:	f000 fd91 	bl	8007258 <xTaskResumeAll>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f af7c 	bne.w	8006636 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <xQueueGenericSend+0x1f8>)
 8006740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	e772      	b.n	8006636 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006752:	f000 fad6 	bl	8006d02 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006756:	f000 fd7f 	bl	8007258 <xTaskResumeAll>
 800675a:	e76c      	b.n	8006636 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800675c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675e:	f000 fad0 	bl	8006d02 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006762:	f000 fd79 	bl	8007258 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006766:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006768:	4618      	mov	r0, r3
 800676a:	3738      	adds	r7, #56	; 0x38
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b090      	sub	sp, #64	; 0x40
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <xQueueGenericSendFromISR+0x3c>
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueGenericSendFromISR+0x40>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xQueueGenericSendFromISR+0x42>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d103      	bne.n	80067de <xQueueGenericSendFromISR+0x6a>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <xQueueGenericSendFromISR+0x6e>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueGenericSendFromISR+0x70>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	623b      	str	r3, [r7, #32]
    }
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067fe:	f002 fa6d 	bl	8008cdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006802:	f3ef 8211 	mrs	r2, BASEPRI
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	61fa      	str	r2, [r7, #28]
 8006818:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800681a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	429a      	cmp	r2, r3
 8006828:	d302      	bcc.n	8006830 <xQueueGenericSendFromISR+0xbc>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d13e      	bne.n	80068ae <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006846:	f000 f9cc 	bl	8006be2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800684a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d112      	bne.n	800687a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d025      	beq.n	80068a8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	4618      	mov	r0, r3
 8006862:	f000 ff09 	bl	8007678 <xTaskRemoveFromEventList>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01d      	beq.n	80068a8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01a      	beq.n	80068a8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e016      	b.n	80068a8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800687a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800687e:	2b7f      	cmp	r3, #127	; 0x7f
 8006880:	d10a      	bne.n	8006898 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	617b      	str	r3, [r7, #20]
    }
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800689c:	3301      	adds	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	b25a      	sxtb	r2, r3
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80068a8:	2301      	movs	r3, #1
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80068ac:	e001      	b.n	80068b2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80068bc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3740      	adds	r7, #64	; 0x40
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	; 0x30
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <xQueueReceive+0x30>
        __asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	623b      	str	r3, [r7, #32]
    }
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <xQueueReceive+0x3e>
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <xQueueReceive+0x42>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueReceive+0x44>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <xQueueReceive+0x5e>
        __asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	61fb      	str	r3, [r7, #28]
    }
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006926:	f001 f843 	bl	80079b0 <xTaskGetSchedulerState>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xQueueReceive+0x6e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueReceive+0x72>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueReceive+0x74>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueReceive+0x8e>
        __asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61bb      	str	r3, [r7, #24]
    }
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006956:	f002 f8dd 	bl	8008b14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01f      	beq.n	80069a6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f000 f9a4 	bl	8006cb6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	3310      	adds	r3, #16
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fe78 	bl	8007678 <xTaskRemoveFromEventList>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800698e:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <xQueueReceive+0x1bc>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800699e:	f002 f8e9 	bl	8008b74 <vPortExitCritical>
                return pdPASS;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e069      	b.n	8006a7a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80069ac:	f002 f8e2 	bl	8008b74 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e062      	b.n	8006a7a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80069ba:	f107 0310 	add.w	r3, r7, #16
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 febc 	bl	800773c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80069c8:	f002 f8d4 	bl	8008b74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80069cc:	f000 fc36 	bl	800723c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80069d0:	f002 f8a0 	bl	8008b14 <vPortEnterCritical>
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <xQueueReceive+0x122>
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d103      	bne.n	8006a00 <xQueueReceive+0x138>
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a00:	f002 f8b8 	bl	8008b74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a04:	1d3a      	adds	r2, r7, #4
 8006a06:	f107 0310 	add.w	r3, r7, #16
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 feab 	bl	8007768 <xTaskCheckForTimeOut>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d123      	bne.n	8006a60 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f000 f9c4 	bl	8006da6 <prvIsQueueEmpty>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fdd3 	bl	80075d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a34:	f000 f965 	bl	8006d02 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a38:	f000 fc0e 	bl	8007258 <xTaskResumeAll>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d189      	bne.n	8006956 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <xQueueReceive+0x1bc>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	e780      	b.n	8006956 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a56:	f000 f954 	bl	8006d02 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006a5a:	f000 fbfd 	bl	8007258 <xTaskResumeAll>
 8006a5e:	e77a      	b.n	8006956 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a62:	f000 f94e 	bl	8006d02 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006a66:	f000 fbf7 	bl	8007258 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6c:	f000 f99b 	bl	8006da6 <prvIsQueueEmpty>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f43f af6f 	beq.w	8006956 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006a78:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3730      	adds	r7, #48	; 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b090      	sub	sp, #64	; 0x40
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <xQueueReceiveFromISR+0x3a>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <xQueueReceiveFromISR+0x3e>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueReceiveFromISR+0x40>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ae2:	f002 f8fb 	bl	8008cdc <vPortValidateInterruptPriority>
        __asm volatile
 8006ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	623a      	str	r2, [r7, #32]
 8006afc:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006afe:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03e      	beq.n	8006b8c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b1c:	f000 f8cb 	bl	8006cb6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d112      	bne.n	8006b58 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d025      	beq.n	8006b86 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fd9a 	bl	8007678 <xTaskRemoveFromEventList>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01a      	beq.n	8006b86 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e016      	b.n	8006b86 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8006b58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5e:	d10a      	bne.n	8006b76 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61bb      	str	r3, [r7, #24]
    }
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	b25a      	sxtb	r2, r3
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8006b86:	2301      	movs	r3, #1
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8a:	e001      	b.n	8006b90 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f383 8811 	msr	BASEPRI, r3
    }
 8006b9a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3740      	adds	r7, #64	; 0x40
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60bb      	str	r3, [r7, #8]
    }
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8006bca:	f001 ffa3 	bl	8008b14 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8006bd4:	f001 ffce 	bl	8008b74 <vPortExitCritical>

    return uxReturn;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d14d      	bne.n	8006ca4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 feed 	bl	80079ec <xTaskPriorityDisinherit>
 8006c12:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	e043      	b.n	8006ca4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d119      	bne.n	8006c56 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6858      	ldr	r0, [r3, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	f002 fabd 	bl	80091ac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	441a      	add	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d32b      	bcc.n	8006ca4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
 8006c54:	e026      	b.n	8006ca4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68d8      	ldr	r0, [r3, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	f002 faa3 	bl	80091ac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	425b      	negs	r3, r3
 8006c70:	441a      	add	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d207      	bcs.n	8006c92 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	441a      	add	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d105      	bne.n	8006ca4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006cac:	697b      	ldr	r3, [r7, #20]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d018      	beq.n	8006cfa <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d303      	bcc.n	8006cea <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6838      	ldr	r0, [r7, #0]
 8006cf6:	f002 fa59 	bl	80091ac <memcpy>
    }
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006d0a:	f001 ff03 	bl	8008b14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d14:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d16:	e011      	b.n	8006d3c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3324      	adds	r3, #36	; 0x24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fca7 	bl	8007678 <xTaskRemoveFromEventList>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006d30:	f000 fd80 	bl	8007834 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dce9      	bgt.n	8006d18 <prvUnlockQueue+0x16>
 8006d44:	e000      	b.n	8006d48 <prvUnlockQueue+0x46>
                        break;
 8006d46:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	22ff      	movs	r2, #255	; 0xff
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006d50:	f001 ff10 	bl	8008b74 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006d54:	f001 fede 	bl	8008b14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d5e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d60:	e011      	b.n	8006d86 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d012      	beq.n	8006d90 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3310      	adds	r3, #16
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fc82 	bl	8007678 <xTaskRemoveFromEventList>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006d7a:	f000 fd5b 	bl	8007834 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dce9      	bgt.n	8006d62 <prvUnlockQueue+0x60>
 8006d8e:	e000      	b.n	8006d92 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006d90:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006d9a:	f001 feeb 	bl	8008b74 <vPortExitCritical>
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006dae:	f001 feb1 	bl	8008b14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e001      	b.n	8006dc4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006dc4:	f001 fed6 	bl	8008b74 <vPortExitCritical>

    return xReturn;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006dda:	f001 fe9b 	bl	8008b14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d102      	bne.n	8006df0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e001      	b.n	8006df4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006df4:	f001 febe 	bl	8008b74 <vPortExitCritical>

    return xReturn;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
    }
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d102      	bne.n	8006e3c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e001      	b.n	8006e40 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006e40:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e42:	4618      	mov	r0, r3
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	e014      	b.n	8006e8a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <vQueueAddToRegistry+0x50>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10b      	bne.n	8006e84 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e6c:	490c      	ldr	r1, [pc, #48]	; (8006ea0 <vQueueAddToRegistry+0x50>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006e76:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <vQueueAddToRegistry+0x50>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006e82:	e006      	b.n	8006e92 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d9e7      	bls.n	8006e60 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2000023c 	.word	0x2000023c

08006ea4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006eb4:	f001 fe2e 	bl	8008b14 <vPortEnterCritical>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ebe:	b25b      	sxtb	r3, r3
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d103      	bne.n	8006ece <vQueueWaitForMessageRestricted+0x2a>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <vQueueWaitForMessageRestricted+0x40>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee4:	f001 fe46 	bl	8008b74 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fb91 	bl	8007620 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f7ff feff 	bl	8006d02 <prvUnlockQueue>
    }
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08c      	sub	sp, #48	; 0x30
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 ff1b 	bl	8008d5c <pvPortMalloc>
 8006f26:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00e      	beq.n	8006f4c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f2e:	205c      	movs	r0, #92	; 0x5c
 8006f30:	f001 ff14 	bl	8008d5c <pvPortMalloc>
 8006f34:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
 8006f42:	e005      	b.n	8006f50 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006f44:	6978      	ldr	r0, [r7, #20]
 8006f46:	f001 ffe9 	bl	8008f1c <vPortFree>
 8006f4a:	e001      	b.n	8006f50 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d013      	beq.n	8006f7e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f80e 	bl	8006f8e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006f72:	69f8      	ldr	r0, [r7, #28]
 8006f74:	f000 f8a2 	bl	80070bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e002      	b.n	8006f84 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f82:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006f84:	69bb      	ldr	r3, [r7, #24]
    }
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b088      	sub	sp, #32
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	21a5      	movs	r1, #165	; 0xa5
 8006fa8:	f002 f90e 	bl	80091c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	f023 0307 	bic.w	r3, r3, #7
 8006fc4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	617b      	str	r3, [r7, #20]
    }
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01f      	beq.n	800702c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e012      	b.n	8007018 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	7819      	ldrb	r1, [r3, #0]
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	3334      	adds	r3, #52	; 0x34
 8007002:	460a      	mov	r2, r1
 8007004:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3301      	adds	r3, #1
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	2b0f      	cmp	r3, #15
 800701c:	d9e9      	bls.n	8006ff2 <prvInitialiseNewTask+0x64>
 800701e:	e000      	b.n	8007022 <prvInitialiseNewTask+0x94>
            {
                break;
 8007020:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800702a:	e003      	b.n	8007034 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b04      	cmp	r3, #4
 8007038:	d901      	bls.n	800703e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800703a:	2304      	movs	r3, #4
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007048:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	2200      	movs	r2, #0
 800704e:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff f911 	bl	800627c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	3318      	adds	r3, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff f90c 	bl	800627c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007068:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	f1c3 0205 	rsb	r2, r3, #5
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007078:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	3354      	adds	r3, #84	; 0x54
 800707e:	2204      	movs	r2, #4
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f002 f8a0 	bl	80091c8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	3358      	adds	r3, #88	; 0x58
 800708c:	2201      	movs	r2, #1
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f002 f899 	bl	80091c8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	68f9      	ldr	r1, [r7, #12]
 800709a:	69b8      	ldr	r0, [r7, #24]
 800709c:	f001 fb8a 	bl	80087b4 <pxPortInitialiseStack>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80070b2:	bf00      	nop
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80070c4:	f001 fd26 	bl	8008b14 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <prvAddNewTaskToReadyList+0xc0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	4a2b      	ldr	r2, [pc, #172]	; (800717c <prvAddNewTaskToReadyList+0xc0>)
 80070d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80070d2:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <prvAddNewTaskToReadyList+0xc4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80070da:	4a29      	ldr	r2, [pc, #164]	; (8007180 <prvAddNewTaskToReadyList+0xc4>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070e0:	4b26      	ldr	r3, [pc, #152]	; (800717c <prvAddNewTaskToReadyList+0xc0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d110      	bne.n	800710a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80070e8:	f000 fbc8 	bl	800787c <prvInitialiseTaskLists>
 80070ec:	e00d      	b.n	800710a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <prvAddNewTaskToReadyList+0xc8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070f6:	4b22      	ldr	r3, [pc, #136]	; (8007180 <prvAddNewTaskToReadyList+0xc4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d802      	bhi.n	800710a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007104:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <prvAddNewTaskToReadyList+0xc4>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800710a:	4b1f      	ldr	r3, [pc, #124]	; (8007188 <prvAddNewTaskToReadyList+0xcc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3301      	adds	r3, #1
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <prvAddNewTaskToReadyList+0xcc>)
 8007112:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <prvAddNewTaskToReadyList+0xcc>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	2201      	movs	r2, #1
 8007122:	409a      	lsls	r2, r3
 8007124:	4b19      	ldr	r3, [pc, #100]	; (800718c <prvAddNewTaskToReadyList+0xd0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4313      	orrs	r3, r2
 800712a:	4a18      	ldr	r2, [pc, #96]	; (800718c <prvAddNewTaskToReadyList+0xd0>)
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <prvAddNewTaskToReadyList+0xd4>)
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7ff f8a6 	bl	8006296 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800714a:	f001 fd13 	bl	8008b74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800714e:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <prvAddNewTaskToReadyList+0xc8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00e      	beq.n	8007174 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <prvAddNewTaskToReadyList+0xc4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	429a      	cmp	r2, r3
 8007162:	d207      	bcs.n	8007174 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <prvAddNewTaskToReadyList+0xd8>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000354 	.word	0x20000354
 8007180:	2000027c 	.word	0x2000027c
 8007184:	20000360 	.word	0x20000360
 8007188:	20000370 	.word	0x20000370
 800718c:	2000035c 	.word	0x2000035c
 8007190:	20000280 	.word	0x20000280
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800719e:	4b20      	ldr	r3, [pc, #128]	; (8007220 <vTaskStartScheduler+0x88>)
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2300      	movs	r3, #0
 80071a8:	2280      	movs	r2, #128	; 0x80
 80071aa:	491e      	ldr	r1, [pc, #120]	; (8007224 <vTaskStartScheduler+0x8c>)
 80071ac:	481e      	ldr	r0, [pc, #120]	; (8007228 <vTaskStartScheduler+0x90>)
 80071ae:	f7ff fead 	bl	8006f0c <xTaskCreate>
 80071b2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d102      	bne.n	80071c0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80071ba:	f000 ff6d 	bl	8008098 <xTimerCreateTimerTask>
 80071be:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d116      	bne.n	80071f4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
    }
 80071d8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <vTaskStartScheduler+0x94>)
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <vTaskStartScheduler+0x98>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <vTaskStartScheduler+0x9c>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80071ee:	f001 fb71 	bl	80088d4 <xPortStartScheduler>
 80071f2:	e00e      	b.n	8007212 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d10a      	bne.n	8007212 <vTaskStartScheduler+0x7a>
        __asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	607b      	str	r3, [r7, #4]
    }
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <vTaskStartScheduler+0xa0>)
 8007214:	681b      	ldr	r3, [r3, #0]
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000378 	.word	0x20000378
 8007224:	08009ea0 	.word	0x08009ea0
 8007228:	0800784d 	.word	0x0800784d
 800722c:	20000374 	.word	0x20000374
 8007230:	20000360 	.word	0x20000360
 8007234:	20000358 	.word	0x20000358
 8007238:	20000024 	.word	0x20000024

0800723c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <vTaskSuspendAll+0x18>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a03      	ldr	r2, [pc, #12]	; (8007254 <vTaskSuspendAll+0x18>)
 8007248:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800724a:	bf00      	nop
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	2000037c 	.word	0x2000037c

08007258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <xTaskResumeAll+0x114>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <xTaskResumeAll+0x2c>
        __asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	603b      	str	r3, [r7, #0]
    }
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007284:	f001 fc46 	bl	8008b14 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007288:	4b38      	ldr	r3, [pc, #224]	; (800736c <xTaskResumeAll+0x114>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3b01      	subs	r3, #1
 800728e:	4a37      	ldr	r2, [pc, #220]	; (800736c <xTaskResumeAll+0x114>)
 8007290:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007292:	4b36      	ldr	r3, [pc, #216]	; (800736c <xTaskResumeAll+0x114>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d161      	bne.n	800735e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800729a:	4b35      	ldr	r3, [pc, #212]	; (8007370 <xTaskResumeAll+0x118>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d05d      	beq.n	800735e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072a2:	e02e      	b.n	8007302 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a4:	4b33      	ldr	r3, [pc, #204]	; (8007374 <xTaskResumeAll+0x11c>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3318      	adds	r3, #24
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff f84d 	bl	8006350 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff f848 	bl	8006350 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	2201      	movs	r2, #1
 80072c6:	409a      	lsls	r2, r3
 80072c8:	4b2b      	ldr	r3, [pc, #172]	; (8007378 <xTaskResumeAll+0x120>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <xTaskResumeAll+0x120>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a27      	ldr	r2, [pc, #156]	; (800737c <xTaskResumeAll+0x124>)
 80072e0:	441a      	add	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fe ffd4 	bl	8006296 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4b23      	ldr	r3, [pc, #140]	; (8007380 <xTaskResumeAll+0x128>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d302      	bcc.n	8007302 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <xTaskResumeAll+0x12c>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007302:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <xTaskResumeAll+0x11c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1cc      	bne.n	80072a4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007310:	f000 fb32 	bl	8007978 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007314:	4b1c      	ldr	r3, [pc, #112]	; (8007388 <xTaskResumeAll+0x130>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007320:	f000 f846 	bl	80073b0 <xTaskIncrementTick>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800732a:	4b16      	ldr	r3, [pc, #88]	; (8007384 <xTaskResumeAll+0x12c>)
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3b01      	subs	r3, #1
 8007334:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f1      	bne.n	8007320 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800733c:	4b12      	ldr	r3, [pc, #72]	; (8007388 <xTaskResumeAll+0x130>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <xTaskResumeAll+0x12c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <xTaskResumeAll+0x134>)
 8007350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800735e:	f001 fc09 	bl	8008b74 <vPortExitCritical>

    return xAlreadyYielded;
 8007362:	68bb      	ldr	r3, [r7, #8]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	2000037c 	.word	0x2000037c
 8007370:	20000354 	.word	0x20000354
 8007374:	20000314 	.word	0x20000314
 8007378:	2000035c 	.word	0x2000035c
 800737c:	20000280 	.word	0x20000280
 8007380:	2000027c 	.word	0x2000027c
 8007384:	20000368 	.word	0x20000368
 8007388:	20000364 	.word	0x20000364
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <xTaskGetTickCount+0x1c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800739c:	687b      	ldr	r3, [r7, #4]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000358 	.word	0x20000358

080073b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ba:	4b4e      	ldr	r3, [pc, #312]	; (80074f4 <xTaskIncrementTick+0x144>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 808e 	bne.w	80074e0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c4:	4b4c      	ldr	r3, [pc, #304]	; (80074f8 <xTaskIncrementTick+0x148>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80073cc:	4a4a      	ldr	r2, [pc, #296]	; (80074f8 <xTaskIncrementTick+0x148>)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d120      	bne.n	800741a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80073d8:	4b48      	ldr	r3, [pc, #288]	; (80074fc <xTaskIncrementTick+0x14c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	603b      	str	r3, [r7, #0]
    }
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskIncrementTick+0x46>
 80073f8:	4b40      	ldr	r3, [pc, #256]	; (80074fc <xTaskIncrementTick+0x14c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b40      	ldr	r3, [pc, #256]	; (8007500 <xTaskIncrementTick+0x150>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <xTaskIncrementTick+0x14c>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4a3e      	ldr	r2, [pc, #248]	; (8007500 <xTaskIncrementTick+0x150>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	4b3d      	ldr	r3, [pc, #244]	; (8007504 <xTaskIncrementTick+0x154>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <xTaskIncrementTick+0x154>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f000 faaf 	bl	8007978 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <xTaskIncrementTick+0x158>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d348      	bcc.n	80074b6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007424:	4b35      	ldr	r3, [pc, #212]	; (80074fc <xTaskIncrementTick+0x14c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <xTaskIncrementTick+0x158>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	601a      	str	r2, [r3, #0]
                    break;
 8007436:	e03e      	b.n	80074b6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b30      	ldr	r3, [pc, #192]	; (80074fc <xTaskIncrementTick+0x14c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d203      	bcs.n	8007458 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007450:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <xTaskIncrementTick+0x158>)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007456:	e02e      	b.n	80074b6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	3304      	adds	r3, #4
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe ff77 	bl	8006350 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3318      	adds	r3, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe ff6e 	bl	8006350 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	2201      	movs	r2, #1
 800747a:	409a      	lsls	r2, r3
 800747c:	4b23      	ldr	r3, [pc, #140]	; (800750c <xTaskIncrementTick+0x15c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4313      	orrs	r3, r2
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <xTaskIncrementTick+0x15c>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <xTaskIncrementTick+0x160>)
 8007494:	441a      	add	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fe fefa 	bl	8006296 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <xTaskIncrementTick+0x164>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3b9      	bcc.n	8007424 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b4:	e7b6      	b.n	8007424 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <xTaskIncrementTick+0x164>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4914      	ldr	r1, [pc, #80]	; (8007510 <xTaskIncrementTick+0x160>)
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d901      	bls.n	80074d2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <xTaskIncrementTick+0x168>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e004      	b.n	80074ea <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <xTaskIncrementTick+0x16c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <xTaskIncrementTick+0x16c>)
 80074e8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	2000037c 	.word	0x2000037c
 80074f8:	20000358 	.word	0x20000358
 80074fc:	2000030c 	.word	0x2000030c
 8007500:	20000310 	.word	0x20000310
 8007504:	2000036c 	.word	0x2000036c
 8007508:	20000374 	.word	0x20000374
 800750c:	2000035c 	.word	0x2000035c
 8007510:	20000280 	.word	0x20000280
 8007514:	2000027c 	.word	0x2000027c
 8007518:	20000368 	.word	0x20000368
 800751c:	20000364 	.word	0x20000364

08007520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007526:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <vTaskSwitchContext+0xa4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800752e:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <vTaskSwitchContext+0xa8>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007534:	e03f      	b.n	80075b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <vTaskSwitchContext+0xa8>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b23      	ldr	r3, [pc, #140]	; (80075cc <vTaskSwitchContext+0xac>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f1c3 031f 	rsb	r3, r3, #31
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	491f      	ldr	r1, [pc, #124]	; (80075d0 <vTaskSwitchContext+0xb0>)
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <vTaskSwitchContext+0x5c>
        __asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	607b      	str	r3, [r7, #4]
    }
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <vTaskSwitchContext+0x5a>
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <vTaskSwitchContext+0xb0>)
 8007588:	4413      	add	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	3308      	adds	r3, #8
 800759e:	429a      	cmp	r2, r3
 80075a0:	d104      	bne.n	80075ac <vTaskSwitchContext+0x8c>
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <vTaskSwitchContext+0xb4>)
 80075b4:	6013      	str	r3, [r2, #0]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2000037c 	.word	0x2000037c
 80075c8:	20000368 	.word	0x20000368
 80075cc:	2000035c 	.word	0x2000035c
 80075d0:	20000280 	.word	0x20000280
 80075d4:	2000027c 	.word	0x2000027c

080075d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	60fb      	str	r3, [r7, #12]
    }
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <vTaskPlaceOnEventList+0x44>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3318      	adds	r3, #24
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe fe69 	bl	80062de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800760c:	2101      	movs	r1, #1
 800760e:	6838      	ldr	r0, [r7, #0]
 8007610:	f000 fcdc 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000027c 	.word	0x2000027c

08007620 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	617b      	str	r3, [r7, #20]
    }
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <vTaskPlaceOnEventListRestricted+0x54>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3318      	adds	r3, #24
 800764e:	4619      	mov	r1, r3
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fe fe20 	bl	8006296 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295
 8007660:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	68b8      	ldr	r0, [r7, #8]
 8007666:	f000 fcb1 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
    }
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000027c 	.word	0x2000027c

08007678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
    }
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe fe51 	bl	8006350 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ae:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <xTaskRemoveFromEventList+0xac>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d11c      	bne.n	80076f0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe fe48 	bl	8006350 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	2201      	movs	r2, #1
 80076c6:	409a      	lsls	r2, r3
 80076c8:	4b17      	ldr	r3, [pc, #92]	; (8007728 <xTaskRemoveFromEventList+0xb0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	4a16      	ldr	r2, [pc, #88]	; (8007728 <xTaskRemoveFromEventList+0xb0>)
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4a13      	ldr	r2, [pc, #76]	; (800772c <xTaskRemoveFromEventList+0xb4>)
 80076e0:	441a      	add	r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7fe fdd4 	bl	8006296 <vListInsertEnd>
 80076ee:	e005      	b.n	80076fc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3318      	adds	r3, #24
 80076f4:	4619      	mov	r1, r3
 80076f6:	480e      	ldr	r0, [pc, #56]	; (8007730 <xTaskRemoveFromEventList+0xb8>)
 80076f8:	f7fe fdcd 	bl	8006296 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <xTaskRemoveFromEventList+0xbc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	429a      	cmp	r2, r3
 8007708:	d905      	bls.n	8007716 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <xTaskRemoveFromEventList+0xc0>)
 8007710:	2201      	movs	r2, #1
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e001      	b.n	800771a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	2000037c 	.word	0x2000037c
 8007728:	2000035c 	.word	0x2000035c
 800772c:	20000280 	.word	0x20000280
 8007730:	20000314 	.word	0x20000314
 8007734:	2000027c 	.word	0x2000027c
 8007738:	20000368 	.word	0x20000368

0800773c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <vTaskInternalSetTimeOutState+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <vTaskInternalSetTimeOutState+0x28>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	605a      	str	r2, [r3, #4]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	2000036c 	.word	0x2000036c
 8007764:	20000358 	.word	0x20000358

08007768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
    }
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
    }
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80077aa:	f001 f9b3 	bl	8008b14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <xTaskCheckForTimeOut+0xc4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d102      	bne.n	80077ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e026      	b.n	800781c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <xTaskCheckForTimeOut+0xc8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d00a      	beq.n	80077f0 <xTaskCheckForTimeOut+0x88>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d305      	bcc.n	80077f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e015      	b.n	800781c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d20b      	bcs.n	8007812 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff ff98 	bl	800773c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e004      	b.n	800781c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800781c:	f001 f9aa 	bl	8008b74 <vPortExitCritical>

    return xReturn;
 8007820:	69fb      	ldr	r3, [r7, #28]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3720      	adds	r7, #32
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000358 	.word	0x20000358
 8007830:	2000036c 	.word	0x2000036c

08007834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007838:	4b03      	ldr	r3, [pc, #12]	; (8007848 <vTaskMissedYield+0x14>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
}
 800783e:	bf00      	nop
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	20000368 	.word	0x20000368

0800784c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007854:	f000 f852 	bl	80078fc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <prvIdleTask+0x28>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d9f9      	bls.n	8007854 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <prvIdleTask+0x2c>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007870:	e7f0      	b.n	8007854 <prvIdleTask+0x8>
 8007872:	bf00      	nop
 8007874:	20000280 	.word	0x20000280
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	e00c      	b.n	80078a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a12      	ldr	r2, [pc, #72]	; (80078dc <prvInitialiseTaskLists+0x60>)
 8007894:	4413      	add	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fcd0 	bl	800623c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3301      	adds	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d9ef      	bls.n	8007888 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80078a8:	480d      	ldr	r0, [pc, #52]	; (80078e0 <prvInitialiseTaskLists+0x64>)
 80078aa:	f7fe fcc7 	bl	800623c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80078ae:	480d      	ldr	r0, [pc, #52]	; (80078e4 <prvInitialiseTaskLists+0x68>)
 80078b0:	f7fe fcc4 	bl	800623c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80078b4:	480c      	ldr	r0, [pc, #48]	; (80078e8 <prvInitialiseTaskLists+0x6c>)
 80078b6:	f7fe fcc1 	bl	800623c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80078ba:	480c      	ldr	r0, [pc, #48]	; (80078ec <prvInitialiseTaskLists+0x70>)
 80078bc:	f7fe fcbe 	bl	800623c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80078c0:	480b      	ldr	r0, [pc, #44]	; (80078f0 <prvInitialiseTaskLists+0x74>)
 80078c2:	f7fe fcbb 	bl	800623c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <prvInitialiseTaskLists+0x78>)
 80078c8:	4a05      	ldr	r2, [pc, #20]	; (80078e0 <prvInitialiseTaskLists+0x64>)
 80078ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <prvInitialiseTaskLists+0x7c>)
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <prvInitialiseTaskLists+0x68>)
 80078d0:	601a      	str	r2, [r3, #0]
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000280 	.word	0x20000280
 80078e0:	200002e4 	.word	0x200002e4
 80078e4:	200002f8 	.word	0x200002f8
 80078e8:	20000314 	.word	0x20000314
 80078ec:	20000328 	.word	0x20000328
 80078f0:	20000340 	.word	0x20000340
 80078f4:	2000030c 	.word	0x2000030c
 80078f8:	20000310 	.word	0x20000310

080078fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007902:	e019      	b.n	8007938 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007904:	f001 f906 	bl	8008b14 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <prvCheckTasksWaitingTermination+0x50>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fd1b 	bl	8006350 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800791a:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <prvCheckTasksWaitingTermination+0x54>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3b01      	subs	r3, #1
 8007920:	4a0b      	ldr	r2, [pc, #44]	; (8007950 <prvCheckTasksWaitingTermination+0x54>)
 8007922:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvCheckTasksWaitingTermination+0x58>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3b01      	subs	r3, #1
 800792a:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <prvCheckTasksWaitingTermination+0x58>)
 800792c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800792e:	f001 f921 	bl	8008b74 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f810 	bl	8007958 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <prvCheckTasksWaitingTermination+0x58>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e1      	bne.n	8007904 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000328 	.word	0x20000328
 8007950:	20000354 	.word	0x20000354
 8007954:	2000033c 	.word	0x2000033c

08007958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fad9 	bl	8008f1c <vPortFree>
                vPortFree( pxTCB );
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fad6 	bl	8008f1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <prvResetNextTaskUnblockTime+0x30>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <prvResetNextTaskUnblockTime+0x34>)
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800798e:	e005      	b.n	800799c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007990:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <prvResetNextTaskUnblockTime+0x30>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a04      	ldr	r2, [pc, #16]	; (80079ac <prvResetNextTaskUnblockTime+0x34>)
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	2000030c 	.word	0x2000030c
 80079ac:	20000374 	.word	0x20000374

080079b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <xTaskGetSchedulerState+0x34>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80079be:	2301      	movs	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	e008      	b.n	80079d6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c4:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <xTaskGetSchedulerState+0x38>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80079cc:	2302      	movs	r3, #2
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	e001      	b.n	80079d6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80079d2:	2300      	movs	r3, #0
 80079d4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80079d6:	687b      	ldr	r3, [r7, #4]
    }
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20000360 	.word	0x20000360
 80079e8:	2000037c 	.word	0x2000037c

080079ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d063      	beq.n	8007aca <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007a02:	4b34      	ldr	r3, [pc, #208]	; (8007ad4 <xTaskPriorityDisinherit+0xe8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d00a      	beq.n	8007a22 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60fb      	str	r3, [r7, #12]
    }
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60bb      	str	r3, [r7, #8]
    }
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	1e5a      	subs	r2, r3, #1
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d039      	beq.n	8007aca <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d135      	bne.n	8007aca <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fc74 	bl	8006350 <uxListRemove>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	43da      	mvns	r2, r3
 8007a7a:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <xTaskPriorityDisinherit+0xec>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <xTaskPriorityDisinherit+0xec>)
 8007a82:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	f1c3 0205 	rsb	r2, r3, #5
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <xTaskPriorityDisinherit+0xec>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	4a0c      	ldr	r2, [pc, #48]	; (8007ad8 <xTaskPriorityDisinherit+0xec>)
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <xTaskPriorityDisinherit+0xf0>)
 8007ab8:	441a      	add	r2, r3
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fe fbe8 	bl	8006296 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007aca:	697b      	ldr	r3, [r7, #20]
    }
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	2000027c 	.word	0x2000027c
 8007ad8:	2000035c 	.word	0x2000035c
 8007adc:	20000280 	.word	0x20000280

08007ae0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
    }
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007b0a:	f001 f803 	bl	8008b14 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007b0e:	4b34      	ldr	r3, [pc, #208]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	3358      	adds	r3, #88	; 0x58
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d024      	beq.n	8007b6a <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007b20:	4b2f      	ldr	r3, [pc, #188]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3314      	adds	r3, #20
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	6859      	ldr	r1, [r3, #4]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	4019      	ands	r1, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3314      	adds	r3, #20
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007b3e:	4b28      	ldr	r3, [pc, #160]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	3358      	adds	r3, #88	; 0x58
 8007b48:	2201      	movs	r2, #1
 8007b4a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b52:	2101      	movs	r1, #1
 8007b54:	6a38      	ldr	r0, [r7, #32]
 8007b56:	f000 fa39 	bl	8007fcc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007b5a:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <xTaskGenericNotifyWait+0x104>)
 8007b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007b6a:	f001 f803 	bl	8008b74 <vPortExitCritical>

        taskENTER_CRITICAL();
 8007b6e:	f000 ffd1 	bl	8008b14 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007b78:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007b8a:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	3358      	adds	r3, #88	; 0x58
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d002      	beq.n	8007ba2 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e010      	b.n	8007bc4 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	6859      	ldr	r1, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	4019      	ands	r1, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3314      	adds	r3, #20
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <xTaskGenericNotifyWait+0x100>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	3358      	adds	r3, #88	; 0x58
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007bd2:	f000 ffcf 	bl	8008b74 <vPortExitCritical>

        return xReturn;
 8007bd6:	697b      	ldr	r3, [r7, #20]
    }
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	2000027c 	.word	0x2000027c
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08c      	sub	sp, #48	; 0x30
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <xTaskGenericNotify+0x2e>
        __asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	623b      	str	r3, [r7, #32]
    }
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <xTaskGenericNotify+0x4a>
        __asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	61fb      	str	r3, [r7, #28]
    }
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8007c36:	f000 ff6d 	bl	8008b14 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	3314      	adds	r3, #20
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	3358      	adds	r3, #88	; 0x58
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	3358      	adds	r3, #88	; 0x58
 8007c66:	2202      	movs	r2, #2
 8007c68:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d841      	bhi.n	8007cf4 <xTaskGenericNotify+0x10c>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <xTaskGenericNotify+0x90>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007d13 	.word	0x08007d13
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007cab 	.word	0x08007cab
 8007c84:	08007cc7 	.word	0x08007cc7
 8007c88:	08007cd7 	.word	0x08007cd7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	3314      	adds	r3, #20
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	605a      	str	r2, [r3, #4]
                    break;
 8007ca8:	e036      	b.n	8007d18 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3314      	adds	r3, #20
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	605a      	str	r2, [r3, #4]
                    break;
 8007cc4:	e028      	b.n	8007d18 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
                    break;
 8007cd4:	e020      	b.n	8007d18 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d007      	beq.n	8007cee <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3314      	adds	r3, #20
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007cec:	e014      	b.n	8007d18 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8007cf2:	e011      	b.n	8007d18 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <xTaskGenericNotify+0x1bc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <xTaskGenericNotify+0x12e>
        __asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	61bb      	str	r3, [r7, #24]
    }
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xTaskGenericNotify+0x128>
                    break;
 8007d12:	bf00      	nop
 8007d14:	e000      	b.n	8007d18 <xTaskGenericNotify+0x130>

                    break;
 8007d16:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d139      	bne.n	8007d94 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fb13 	bl	8006350 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	2201      	movs	r2, #1
 8007d30:	409a      	lsls	r2, r3
 8007d32:	4b1d      	ldr	r3, [pc, #116]	; (8007da8 <xTaskGenericNotify+0x1c0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <xTaskGenericNotify+0x1c0>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a18      	ldr	r2, [pc, #96]	; (8007dac <xTaskGenericNotify+0x1c4>)
 8007d4a:	441a      	add	r2, r3
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fa9f 	bl	8006296 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <xTaskGenericNotify+0x18e>
        __asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	617b      	str	r3, [r7, #20]
    }
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <xTaskGenericNotify+0x1c8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d907      	bls.n	8007d94 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <xTaskGenericNotify+0x1cc>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007d94:	f000 feee 	bl	8008b74 <vPortExitCritical>

        return xReturn;
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000358 	.word	0x20000358
 8007da8:	2000035c 	.word	0x2000035c
 8007dac:	20000280 	.word	0x20000280
 8007db0:	2000027c 	.word	0x2000027c
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b090      	sub	sp, #64	; 0x40
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e02:	f000 ff6b 	bl	8008cdc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8007e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8007e20:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8007e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3314      	adds	r3, #20
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e3a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	3358      	adds	r3, #88	; 0x58
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	3358      	adds	r3, #88	; 0x58
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d841      	bhi.n	8007ee0 <xTaskGenericNotifyFromISR+0x128>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <xTaskGenericNotifyFromISR+0xac>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007eff 	.word	0x08007eff
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e97 	.word	0x08007e97
 8007e70:	08007eb3 	.word	0x08007eb3
 8007e74:	08007ec3 	.word	0x08007ec3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	605a      	str	r2, [r3, #4]
                    break;
 8007e94:	e036      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3314      	adds	r3, #20
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	605a      	str	r2, [r3, #4]
                    break;
 8007eb0:	e028      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3314      	adds	r3, #20
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
                    break;
 8007ec0:	e020      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d007      	beq.n	8007eda <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007ed8:	e014      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8007ede:	e011      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007ee0:	4b33      	ldr	r3, [pc, #204]	; (8007fb0 <xTaskGenericNotifyFromISR+0x1f8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	61fb      	str	r3, [r7, #28]
    }
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xTaskGenericNotifyFromISR+0x144>
                    break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8007f02:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d145      	bne.n	8007f98 <xTaskGenericNotifyFromISR+0x1e0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <xTaskGenericNotifyFromISR+0x172>
        __asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61bb      	str	r3, [r7, #24]
    }
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskGenericNotifyFromISR+0x170>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <xTaskGenericNotifyFromISR+0x1fc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11c      	bne.n	8007f6c <xTaskGenericNotifyFromISR+0x1b4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	3304      	adds	r3, #4
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fa0a 	bl	8006350 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <xTaskGenericNotifyFromISR+0x200>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	4a1b      	ldr	r2, [pc, #108]	; (8007fb8 <xTaskGenericNotifyFromISR+0x200>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <xTaskGenericNotifyFromISR+0x204>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fe f996 	bl	8006296 <vListInsertEnd>
 8007f6a:	e005      	b.n	8007f78 <xTaskGenericNotifyFromISR+0x1c0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	3318      	adds	r3, #24
 8007f70:	4619      	mov	r1, r3
 8007f72:	4813      	ldr	r0, [pc, #76]	; (8007fc0 <xTaskGenericNotifyFromISR+0x208>)
 8007f74:	f7fe f98f 	bl	8006296 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <xTaskGenericNotifyFromISR+0x20c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d908      	bls.n	8007f98 <xTaskGenericNotifyFromISR+0x1e0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <xTaskGenericNotifyFromISR+0x1da>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	2201      	movs	r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007f92:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <xTaskGenericNotifyFromISR+0x210>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9a:	617b      	str	r3, [r7, #20]
        __asm volatile
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
    }
 8007fa2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3740      	adds	r7, #64	; 0x40
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000358 	.word	0x20000358
 8007fb4:	2000037c 	.word	0x2000037c
 8007fb8:	2000035c 	.word	0x2000035c
 8007fbc:	20000280 	.word	0x20000280
 8007fc0:	20000314 	.word	0x20000314
 8007fc4:	2000027c 	.word	0x2000027c
 8007fc8:	20000368 	.word	0x20000368

08007fcc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007fd6:	4b29      	ldr	r3, [pc, #164]	; (800807c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fdc:	4b28      	ldr	r3, [pc, #160]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe f9b4 	bl	8006350 <uxListRemove>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fee:	4b24      	ldr	r3, [pc, #144]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43da      	mvns	r2, r3
 8007ffc:	4b21      	ldr	r3, [pc, #132]	; (8008084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4013      	ands	r3, r2
 8008002:	4a20      	ldr	r2, [pc, #128]	; (8008084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008004:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d10a      	bne.n	8008024 <prvAddCurrentTaskToDelayedList+0x58>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008014:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	481a      	ldr	r0, [pc, #104]	; (8008088 <prvAddCurrentTaskToDelayedList+0xbc>)
 800801e:	f7fe f93a 	bl	8006296 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008022:	e026      	b.n	8008072 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	429a      	cmp	r2, r3
 800803a:	d209      	bcs.n	8008050 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803c:	4b13      	ldr	r3, [pc, #76]	; (800808c <prvAddCurrentTaskToDelayedList+0xc0>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7fe f948 	bl	80062de <vListInsert>
}
 800804e:	e010      	b.n	8008072 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3304      	adds	r3, #4
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f7fe f93e 	bl	80062de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	d202      	bcs.n	8008072 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800806c:	4a09      	ldr	r2, [pc, #36]	; (8008094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6013      	str	r3, [r2, #0]
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000358 	.word	0x20000358
 8008080:	2000027c 	.word	0x2000027c
 8008084:	2000035c 	.word	0x2000035c
 8008088:	20000340 	.word	0x20000340
 800808c:	20000310 	.word	0x20000310
 8008090:	2000030c 	.word	0x2000030c
 8008094:	20000374 	.word	0x20000374

08008098 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80080a2:	f000 fb31 	bl	8008708 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <xTimerCreateTimerTask+0x54>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80080ae:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <xTimerCreateTimerTask+0x58>)
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2302      	movs	r3, #2
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080bc:	490d      	ldr	r1, [pc, #52]	; (80080f4 <xTimerCreateTimerTask+0x5c>)
 80080be:	480e      	ldr	r0, [pc, #56]	; (80080f8 <xTimerCreateTimerTask+0x60>)
 80080c0:	f7fe ff24 	bl	8006f0c <xTaskCreate>
 80080c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	603b      	str	r3, [r7, #0]
    }
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80080e2:	687b      	ldr	r3, [r7, #4]
    }
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200003b0 	.word	0x200003b0
 80080f0:	200003b4 	.word	0x200003b4
 80080f4:	08009ea8 	.word	0x08009ea8
 80080f8:	080082e9 	.word	0x080082e9

080080fc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800810a:	202c      	movs	r0, #44	; 0x2c
 800810c:	f000 fe26 	bl	8008d5c <pvPortMalloc>
 8008110:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f805 	bl	800813e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008134:	697b      	ldr	r3, [r7, #20]
        }
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800813e:	b580      	push	{r7, lr}
 8008140:	b086      	sub	sp, #24
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
 800814a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	617b      	str	r3, [r7, #20]
    }
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01e      	beq.n	80081ac <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800816e:	f000 facb 	bl	8008708 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	6a3a      	ldr	r2, [r7, #32]
 8008188:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	3304      	adds	r3, #4
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe f874 	bl	800627c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a0:	f043 0304 	orr.w	r3, r3, #4
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80081ac:	bf00      	nop
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08a      	sub	sp, #40	; 0x28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	623b      	str	r3, [r7, #32]
    }
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80081e2:	4b1a      	ldr	r3, [pc, #104]	; (800824c <xTimerGenericCommand+0x98>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d02a      	beq.n	8008240 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	dc18      	bgt.n	800822e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081fc:	f7ff fbd8 	bl	80079b0 <xTaskGetSchedulerState>
 8008200:	4603      	mov	r3, r0
 8008202:	2b02      	cmp	r3, #2
 8008204:	d109      	bne.n	800821a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <xTimerGenericCommand+0x98>)
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f107 0114 	add.w	r1, r7, #20
 800820e:	2300      	movs	r3, #0
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	f7fe f9b1 	bl	8006578 <xQueueGenericSend>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24
 8008218:	e012      	b.n	8008240 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <xTimerGenericCommand+0x98>)
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f107 0114 	add.w	r1, r7, #20
 8008222:	2300      	movs	r3, #0
 8008224:	2200      	movs	r2, #0
 8008226:	f7fe f9a7 	bl	8006578 <xQueueGenericSend>
 800822a:	6278      	str	r0, [r7, #36]	; 0x24
 800822c:	e008      	b.n	8008240 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <xTimerGenericCommand+0x98>)
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f107 0114 	add.w	r1, r7, #20
 8008236:	2300      	movs	r3, #0
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	f7fe fa9b 	bl	8006774 <xQueueGenericSendFromISR>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008242:	4618      	mov	r0, r3
 8008244:	3728      	adds	r7, #40	; 0x28
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	200003b0 	.word	0x200003b0

08008250 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825a:	4b22      	ldr	r3, [pc, #136]	; (80082e4 <prvProcessExpiredTimer+0x94>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe f871 	bl	8006350 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d022      	beq.n	80082c2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	18d1      	adds	r1, r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	6978      	ldr	r0, [r7, #20]
 800828a:	f000 f8d1 	bl	8008430 <prvInsertTimerInActiveList>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01f      	beq.n	80082d4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008294:	2300      	movs	r3, #0
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2300      	movs	r3, #0
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	2100      	movs	r1, #0
 800829e:	6978      	ldr	r0, [r7, #20]
 80082a0:	f7ff ff88 	bl	80081b4 <xTimerGenericCommand>
 80082a4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d113      	bne.n	80082d4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60fb      	str	r3, [r7, #12]
    }
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	6978      	ldr	r0, [r7, #20]
 80082da:	4798      	blx	r3
    }
 80082dc:	bf00      	nop
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	200003a8 	.word	0x200003a8

080082e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082f0:	f107 0308 	add.w	r3, r7, #8
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f857 	bl	80083a8 <prvGetNextExpireTime>
 80082fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f803 	bl	800830c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008306:	f000 f8d5 	bl	80084b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800830a:	e7f1      	b.n	80082f0 <prvTimerTask+0x8>

0800830c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008316:	f7fe ff91 	bl	800723c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f866 	bl	80083f0 <prvSampleTimeNow>
 8008324:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d130      	bne.n	800838e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <prvProcessTimerOrBlockTask+0x3c>
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	429a      	cmp	r2, r3
 8008338:	d806      	bhi.n	8008348 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800833a:	f7fe ff8d 	bl	8007258 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ff85 	bl	8008250 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008346:	e024      	b.n	8008392 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <prvProcessTimerOrBlockTask+0x90>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <prvProcessTimerOrBlockTask+0x50>
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <prvProcessTimerOrBlockTask+0x52>
 800835c:	2300      	movs	r3, #0
 800835e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <prvProcessTimerOrBlockTask+0x94>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	f7fe fd99 	bl	8006ea4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008372:	f7fe ff71 	bl	8007258 <xTaskResumeAll>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800837c:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <prvProcessTimerOrBlockTask+0x98>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
    }
 800838c:	e001      	b.n	8008392 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800838e:	f7fe ff63 	bl	8007258 <xTaskResumeAll>
    }
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200003ac 	.word	0x200003ac
 80083a0:	200003b0 	.word	0x200003b0
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083b0:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <prvGetNextExpireTime+0x44>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <prvGetNextExpireTime+0x16>
 80083ba:	2201      	movs	r2, #1
 80083bc:	e000      	b.n	80083c0 <prvGetNextExpireTime+0x18>
 80083be:	2200      	movs	r2, #0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083cc:	4b07      	ldr	r3, [pc, #28]	; (80083ec <prvGetNextExpireTime+0x44>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e001      	b.n	80083dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80083dc:	68fb      	ldr	r3, [r7, #12]
    }
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	200003a8 	.word	0x200003a8

080083f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80083f8:	f7fe ffca 	bl	8007390 <xTaskGetTickCount>
 80083fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80083fe:	4b0b      	ldr	r3, [pc, #44]	; (800842c <prvSampleTimeNow+0x3c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d205      	bcs.n	8008414 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008408:	f000 f91a 	bl	8008640 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e002      	b.n	800841a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800841a:	4a04      	ldr	r2, [pc, #16]	; (800842c <prvSampleTimeNow+0x3c>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008420:	68fb      	ldr	r3, [r7, #12]
    }
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200003b8 	.word	0x200003b8

08008430 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d812      	bhi.n	800847c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	1ad2      	subs	r2, r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e01b      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800846a:	4b10      	ldr	r3, [pc, #64]	; (80084ac <prvInsertTimerInActiveList+0x7c>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fd ff32 	bl	80062de <vListInsert>
 800847a:	e012      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d206      	bcs.n	8008492 <prvInsertTimerInActiveList+0x62>
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d302      	bcc.n	8008492 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800848c:	2301      	movs	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e007      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <prvInsertTimerInActiveList+0x80>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3304      	adds	r3, #4
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7fd ff1e 	bl	80062de <vListInsert>
            }
        }

        return xProcessTimerNow;
 80084a2:	697b      	ldr	r3, [r7, #20]
    }
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200003ac 	.word	0x200003ac
 80084b0:	200003a8 	.word	0x200003a8

080084b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ba:	e0ae      	b.n	800861a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f2c0 80aa 	blt.w	8008618 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	3304      	adds	r3, #4
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd ff3b 	bl	8006350 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084da:	1d3b      	adds	r3, r7, #4
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ff87 	bl	80083f0 <prvSampleTimeNow>
 80084e2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	f200 8097 	bhi.w	800861a <prvProcessReceivedCommands+0x166>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <prvProcessReceivedCommands+0x40>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	0800851d 	.word	0x0800851d
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	0800851d 	.word	0x0800851d
 8008500:	08008591 	.word	0x08008591
 8008504:	080085a5 	.word	0x080085a5
 8008508:	080085ef 	.word	0x080085ef
 800850c:	0800851d 	.word	0x0800851d
 8008510:	0800851d 	.word	0x0800851d
 8008514:	08008591 	.word	0x08008591
 8008518:	080085a5 	.word	0x080085a5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	b2da      	uxtb	r2, r3
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	18d1      	adds	r1, r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a3a      	ldr	r2, [r7, #32]
 800853a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800853c:	f7ff ff78 	bl	8008430 <prvInsertTimerInActiveList>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d069      	beq.n	800861a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800854c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d05e      	beq.n	800861a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	441a      	add	r2, r3
 8008564:	2300      	movs	r3, #0
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	2300      	movs	r3, #0
 800856a:	2100      	movs	r1, #0
 800856c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800856e:	f7ff fe21 	bl	80081b4 <xTimerGenericCommand>
 8008572:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d14f      	bne.n	800861a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	61bb      	str	r3, [r7, #24]
    }
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80085a2:	e03a      	b.n	800861a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <prvProcessReceivedCommands+0x126>
        __asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	617b      	str	r3, [r7, #20]
    }
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	18d1      	adds	r1, r2, r3
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085e8:	f7ff ff22 	bl	8008430 <prvInsertTimerInActiveList>
                        break;
 80085ec:	e015      	b.n	800861a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f000 fc8d 	bl	8008f1c <vPortFree>
 8008602:	e00a      	b.n	800861a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860a:	f023 0301 	bic.w	r3, r3, #1
 800860e:	b2da      	uxtb	r2, r3
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008616:	e000      	b.n	800861a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008618:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <prvProcessReceivedCommands+0x188>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f107 0108 	add.w	r1, r7, #8
 8008622:	2200      	movs	r2, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe f94f 	bl	80068c8 <xQueueReceive>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f af45 	bne.w	80084bc <prvProcessReceivedCommands+0x8>
        }
    }
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	3728      	adds	r7, #40	; 0x28
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200003b0 	.word	0x200003b0

08008640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008646:	e048      	b.n	80086da <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008648:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <prvSwitchTimerLists+0xc0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008652:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <prvSwitchTimerLists+0xc0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd fe75 	bl	8006350 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02e      	beq.n	80086da <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	429a      	cmp	r2, r3
 800868c:	d90e      	bls.n	80086ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <prvSwitchTimerLists+0xc0>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7fd fe1a 	bl	80062de <vListInsert>
 80086aa:	e016      	b.n	80086da <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086ac:	2300      	movs	r3, #0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2300      	movs	r3, #0
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	2100      	movs	r1, #0
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd7c 	bl	80081b4 <xTimerGenericCommand>
 80086bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvSwitchTimerLists+0x9a>
        __asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	603b      	str	r3, [r7, #0]
    }
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1b1      	bne.n	8008648 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80086e4:	4b06      	ldr	r3, [pc, #24]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <prvSwitchTimerLists+0xc4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a04      	ldr	r2, [pc, #16]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086f0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80086f2:	4a04      	ldr	r2, [pc, #16]	; (8008704 <prvSwitchTimerLists+0xc4>)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	6013      	str	r3, [r2, #0]
    }
 80086f8:	bf00      	nop
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200003a8 	.word	0x200003a8
 8008704:	200003ac 	.word	0x200003ac

08008708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800870c:	f000 fa02 	bl	8008b14 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008710:	4b12      	ldr	r3, [pc, #72]	; (800875c <prvCheckForValidListAndQueue+0x54>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11d      	bne.n	8008754 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008718:	4811      	ldr	r0, [pc, #68]	; (8008760 <prvCheckForValidListAndQueue+0x58>)
 800871a:	f7fd fd8f 	bl	800623c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800871e:	4811      	ldr	r0, [pc, #68]	; (8008764 <prvCheckForValidListAndQueue+0x5c>)
 8008720:	f7fd fd8c 	bl	800623c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <prvCheckForValidListAndQueue+0x60>)
 8008726:	4a0e      	ldr	r2, [pc, #56]	; (8008760 <prvCheckForValidListAndQueue+0x58>)
 8008728:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800872a:	4b10      	ldr	r3, [pc, #64]	; (800876c <prvCheckForValidListAndQueue+0x64>)
 800872c:	4a0d      	ldr	r2, [pc, #52]	; (8008764 <prvCheckForValidListAndQueue+0x5c>)
 800872e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008730:	2200      	movs	r2, #0
 8008732:	210c      	movs	r1, #12
 8008734:	200a      	movs	r0, #10
 8008736:	f7fd fe9d 	bl	8006474 <xQueueGenericCreate>
 800873a:	4603      	mov	r3, r0
 800873c:	4a07      	ldr	r2, [pc, #28]	; (800875c <prvCheckForValidListAndQueue+0x54>)
 800873e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <prvCheckForValidListAndQueue+0x54>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <prvCheckForValidListAndQueue+0x54>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4908      	ldr	r1, [pc, #32]	; (8008770 <prvCheckForValidListAndQueue+0x68>)
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fb7e 	bl	8006e50 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008754:	f000 fa0e 	bl	8008b74 <vPortExitCritical>
    }
 8008758:	bf00      	nop
 800875a:	bd80      	pop	{r7, pc}
 800875c:	200003b0 	.word	0x200003b0
 8008760:	20000380 	.word	0x20000380
 8008764:	20000394 	.word	0x20000394
 8008768:	200003a8 	.word	0x200003a8
 800876c:	200003ac 	.word	0x200003ac
 8008770:	08009eb0 	.word	0x08009eb0

08008774 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10a      	bne.n	800879c <pvTimerGetTimerID+0x28>
        __asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
    }
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800879c:	f000 f9ba 	bl	8008b14 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80087a6:	f000 f9e5 	bl	8008b74 <vPortExitCritical>

        return pvReturn;
 80087aa:	693b      	ldr	r3, [r7, #16]
    }
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3b04      	subs	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80087e4:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <pxPortInitialiseStack+0x64>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b14      	subs	r3, #20
 80087ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f06f 0202 	mvn.w	r2, #2
 8008802:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b20      	subs	r3, #32
 8008808:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	0800881d 	.word	0x0800881d

0800881c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <prvTaskExitError+0x54>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d00a      	beq.n	8008846 <prvTaskExitError+0x2a>
        __asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
    }
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <prvTaskExitError+0x28>
        __asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
    }
 8008858:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800885a:	bf00      	nop
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0fc      	beq.n	800885c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000028 	.word	0x20000028
	...

08008880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <pxCurrentTCBConst2>)
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	f380 8809 	msr	PSP, r0
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	4770      	bx	lr
 800889c:	f3af 8000 	nop.w

080088a0 <pxCurrentTCBConst2>:
 80088a0:	2000027c 	.word	0x2000027c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop

080088a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80088a8:	4808      	ldr	r0, [pc, #32]	; (80088cc <prvPortStartFirstTask+0x24>)
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f380 8808 	msr	MSP, r0
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8814 	msr	CONTROL, r0
 80088ba:	b662      	cpsie	i
 80088bc:	b661      	cpsie	f
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	df00      	svc	0
 80088c8:	bf00      	nop
 80088ca:	0000      	.short	0x0000
 80088cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop

080088d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088da:	4b46      	ldr	r3, [pc, #280]	; (80089f4 <xPortStartScheduler+0x120>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a46      	ldr	r2, [pc, #280]	; (80089f8 <xPortStartScheduler+0x124>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10a      	bne.n	80088fa <xPortStartScheduler+0x26>
        __asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	613b      	str	r3, [r7, #16]
    }
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088fa:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <xPortStartScheduler+0x120>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a3f      	ldr	r2, [pc, #252]	; (80089fc <xPortStartScheduler+0x128>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10a      	bne.n	800891a <xPortStartScheduler+0x46>
        __asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60fb      	str	r3, [r7, #12]
    }
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800891a:	4b39      	ldr	r3, [pc, #228]	; (8008a00 <xPortStartScheduler+0x12c>)
 800891c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	22ff      	movs	r2, #255	; 0xff
 800892a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4b31      	ldr	r3, [pc, #196]	; (8008a04 <xPortStartScheduler+0x130>)
 8008940:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008942:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <xPortStartScheduler+0x134>)
 8008944:	2207      	movs	r2, #7
 8008946:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008948:	e009      	b.n	800895e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800894a:	4b2f      	ldr	r3, [pc, #188]	; (8008a08 <xPortStartScheduler+0x134>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a2d      	ldr	r2, [pc, #180]	; (8008a08 <xPortStartScheduler+0x134>)
 8008952:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d0ef      	beq.n	800894a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800896a:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <xPortStartScheduler+0x134>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1c3 0307 	rsb	r3, r3, #7
 8008972:	2b04      	cmp	r3, #4
 8008974:	d00a      	beq.n	800898c <xPortStartScheduler+0xb8>
        __asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60bb      	str	r3, [r7, #8]
    }
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800898c:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <xPortStartScheduler+0x134>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	4a1d      	ldr	r2, [pc, #116]	; (8008a08 <xPortStartScheduler+0x134>)
 8008994:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008996:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <xPortStartScheduler+0x134>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800899e:	4a1a      	ldr	r2, [pc, #104]	; (8008a08 <xPortStartScheduler+0x134>)
 80089a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <xPortStartScheduler+0x138>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <xPortStartScheduler+0x138>)
 80089b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <xPortStartScheduler+0x138>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a14      	ldr	r2, [pc, #80]	; (8008a0c <xPortStartScheduler+0x138>)
 80089bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80089c2:	f000 f95b 	bl	8008c7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <xPortStartScheduler+0x13c>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80089cc:	f000 f97a 	bl	8008cc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089d0:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <xPortStartScheduler+0x140>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a0f      	ldr	r2, [pc, #60]	; (8008a14 <xPortStartScheduler+0x140>)
 80089d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80089dc:	f7ff ff64 	bl	80088a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80089e0:	f7fe fd9e 	bl	8007520 <vTaskSwitchContext>
    prvTaskExitError();
 80089e4:	f7ff ff1a 	bl	800881c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	e000ed00 	.word	0xe000ed00
 80089f8:	410fc271 	.word	0x410fc271
 80089fc:	410fc270 	.word	0x410fc270
 8008a00:	e000e400 	.word	0xe000e400
 8008a04:	200003bc 	.word	0x200003bc
 8008a08:	200003c0 	.word	0x200003c0
 8008a0c:	e000ed20 	.word	0xe000ed20
 8008a10:	20000028 	.word	0x20000028
 8008a14:	e000ef34 	.word	0xe000ef34

08008a18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a1e:	4b37      	ldr	r3, [pc, #220]	; (8008afc <vInitPrioGroupValue+0xe4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a37      	ldr	r2, [pc, #220]	; (8008b00 <vInitPrioGroupValue+0xe8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d10a      	bne.n	8008a3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	613b      	str	r3, [r7, #16]
    }
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a3e:	4b2f      	ldr	r3, [pc, #188]	; (8008afc <vInitPrioGroupValue+0xe4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a30      	ldr	r2, [pc, #192]	; (8008b04 <vInitPrioGroupValue+0xec>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10a      	bne.n	8008a5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60fb      	str	r3, [r7, #12]
    }
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a5e:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <vInitPrioGroupValue+0xf0>)
 8008a60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <vInitPrioGroupValue+0xf4>)
 8008a84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a86:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008a88:	2207      	movs	r2, #7
 8008a8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a8c:	e009      	b.n	8008aa2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008a96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aaa:	2b80      	cmp	r3, #128	; 0x80
 8008aac:	d0ef      	beq.n	8008a8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f1c3 0307 	rsb	r3, r3, #7
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d00a      	beq.n	8008ad0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60bb      	str	r3, [r7, #8]
    }
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008ad8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ae2:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <vInitPrioGroupValue+0xf8>)
 8008ae4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	e000ed00 	.word	0xe000ed00
 8008b00:	410fc271 	.word	0x410fc271
 8008b04:	410fc270 	.word	0x410fc270
 8008b08:	e000e400 	.word	0xe000e400
 8008b0c:	200003bc 	.word	0x200003bc
 8008b10:	200003c0 	.word	0x200003c0

08008b14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
        __asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	607b      	str	r3, [r7, #4]
    }
 8008b2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <vPortEnterCritical+0x58>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d10f      	bne.n	8008b60 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <vPortEnterCritical+0x5c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <vPortEnterCritical+0x4c>
        __asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	603b      	str	r3, [r7, #0]
    }
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <vPortEnterCritical+0x4a>
    }
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000028 	.word	0x20000028
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <vPortExitCritical+0x50>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <vPortExitCritical+0x24>
        __asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	607b      	str	r3, [r7, #4]
    }
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <vPortExitCritical+0x50>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4a09      	ldr	r2, [pc, #36]	; (8008bc4 <vPortExitCritical+0x50>)
 8008ba0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008ba2:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <vPortExitCritical+0x50>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <vPortExitCritical+0x42>
 8008baa:	2300      	movs	r3, #0
 8008bac:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	f383 8811 	msr	BASEPRI, r3
    }
 8008bb4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20000028 	.word	0x20000028
	...

08008bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008bd0:	f3ef 8009 	mrs	r0, PSP
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <pxCurrentTCBConst>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f01e 0f10 	tst.w	lr, #16
 8008be0:	bf08      	it	eq
 8008be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	6010      	str	r0, [r2, #0]
 8008bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bf4:	f380 8811 	msr	BASEPRI, r0
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f7fe fc8e 	bl	8007520 <vTaskSwitchContext>
 8008c04:	f04f 0000 	mov.w	r0, #0
 8008c08:	f380 8811 	msr	BASEPRI, r0
 8008c0c:	bc09      	pop	{r0, r3}
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c16:	f01e 0f10 	tst.w	lr, #16
 8008c1a:	bf08      	it	eq
 8008c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c20:	f380 8809 	msr	PSP, r0
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst>:
 8008c30:	2000027c 	.word	0x2000027c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
        __asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
    }
 8008c50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008c52:	f7fe fbad 	bl	80073b0 <xTaskIncrementTick>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <SysTick_Handler+0x40>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f383 8811 	msr	BASEPRI, r3
    }
 8008c6e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <vPortSetupTimerInterrupt+0x34>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <vPortSetupTimerInterrupt+0x38>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <vPortSetupTimerInterrupt+0x3c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <vPortSetupTimerInterrupt+0x40>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	099b      	lsrs	r3, r3, #6
 8008c98:	4a09      	ldr	r2, [pc, #36]	; (8008cc0 <vPortSetupTimerInterrupt+0x44>)
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c9e:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <vPortSetupTimerInterrupt+0x34>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	e000e010 	.word	0xe000e010
 8008cb4:	e000e018 	.word	0xe000e018
 8008cb8:	20000014 	.word	0x20000014
 8008cbc:	10624dd3 	.word	0x10624dd3
 8008cc0:	e000e014 	.word	0xe000e014

08008cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cd4 <vPortEnableVFP+0x10>
 8008cc8:	6801      	ldr	r1, [r0, #0]
 8008cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cce:	6001      	str	r1, [r0, #0]
 8008cd0:	4770      	bx	lr
 8008cd2:	0000      	.short	0x0000
 8008cd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop

08008cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008ce2:	f3ef 8305 	mrs	r3, IPSR
 8008ce6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d914      	bls.n	8008d18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cee:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <vPortValidateInterruptPriority+0x70>)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <vPortValidateInterruptPriority+0x74>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	7afa      	ldrb	r2, [r7, #11]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d20a      	bcs.n	8008d18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	607b      	str	r3, [r7, #4]
    }
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d18:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <vPortValidateInterruptPriority+0x78>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <vPortValidateInterruptPriority+0x7c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d90a      	bls.n	8008d3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	603b      	str	r3, [r7, #0]
    }
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <vPortValidateInterruptPriority+0x60>
    }
 8008d3e:	bf00      	nop
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	e000e3f0 	.word	0xe000e3f0
 8008d50:	200003bc 	.word	0x200003bc
 8008d54:	e000ed0c 	.word	0xe000ed0c
 8008d58:	200003c0 	.word	0x200003c0

08008d5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	; 0x28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008d68:	f7fe fa68 	bl	800723c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008d6c:	4b65      	ldr	r3, [pc, #404]	; (8008f04 <pvPortMalloc+0x1a8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008d74:	f000 f934 	bl	8008fe0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d78:	4b63      	ldr	r3, [pc, #396]	; (8008f08 <pvPortMalloc+0x1ac>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f040 80a7 	bne.w	8008ed4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02d      	beq.n	8008de8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008d8c:	2208      	movs	r2, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d227      	bcs.n	8008de8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008d98:	2208      	movs	r2, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d021      	beq.n	8008dee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d214      	bcs.n	8008de2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <pvPortMalloc+0x92>
        __asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	617b      	str	r3, [r7, #20]
    }
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008de6:	e002      	b.n	8008dee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	e000      	b.n	8008df0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d06e      	beq.n	8008ed4 <pvPortMalloc+0x178>
 8008df6:	4b45      	ldr	r3, [pc, #276]	; (8008f0c <pvPortMalloc+0x1b0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d869      	bhi.n	8008ed4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008e00:	4b43      	ldr	r3, [pc, #268]	; (8008f10 <pvPortMalloc+0x1b4>)
 8008e02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008e04:	4b42      	ldr	r3, [pc, #264]	; (8008f10 <pvPortMalloc+0x1b4>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e0a:	e004      	b.n	8008e16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d903      	bls.n	8008e28 <pvPortMalloc+0xcc>
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f1      	bne.n	8008e0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008e28:	4b36      	ldr	r3, [pc, #216]	; (8008f04 <pvPortMalloc+0x1a8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d050      	beq.n	8008ed4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2208      	movs	r2, #8
 8008e38:	4413      	add	r3, r2
 8008e3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	1ad2      	subs	r2, r2, r3
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d91f      	bls.n	8008e94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <pvPortMalloc+0x120>
        __asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	613b      	str	r3, [r7, #16]
    }
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	1ad2      	subs	r2, r2, r3
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e8e:	69b8      	ldr	r0, [r7, #24]
 8008e90:	f000 f908 	bl	80090a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e94:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <pvPortMalloc+0x1b0>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	4a1b      	ldr	r2, [pc, #108]	; (8008f0c <pvPortMalloc+0x1b0>)
 8008ea0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <pvPortMalloc+0x1b0>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <pvPortMalloc+0x1b8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d203      	bcs.n	8008eb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eae:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <pvPortMalloc+0x1b0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a18      	ldr	r2, [pc, #96]	; (8008f14 <pvPortMalloc+0x1b8>)
 8008eb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <pvPortMalloc+0x1ac>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <pvPortMalloc+0x1bc>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	4a11      	ldr	r2, [pc, #68]	; (8008f18 <pvPortMalloc+0x1bc>)
 8008ed2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008ed4:	f7fe f9c0 	bl	8007258 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <pvPortMalloc+0x19c>
        __asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
    }
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <pvPortMalloc+0x19a>
    return pvReturn;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3728      	adds	r7, #40	; 0x28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	200023cc 	.word	0x200023cc
 8008f08:	200023e0 	.word	0x200023e0
 8008f0c:	200023d0 	.word	0x200023d0
 8008f10:	200023c4 	.word	0x200023c4
 8008f14:	200023d4 	.word	0x200023d4
 8008f18:	200023d8 	.word	0x200023d8

08008f1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d04d      	beq.n	8008fca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008f2e:	2308      	movs	r3, #8
 8008f30:	425b      	negs	r3, r3
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <vPortFree+0xb8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <vPortFree+0x44>
        __asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60fb      	str	r3, [r7, #12]
    }
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <vPortFree+0x62>
        __asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60bb      	str	r3, [r7, #8]
    }
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	4b14      	ldr	r3, [pc, #80]	; (8008fd4 <vPortFree+0xb8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4013      	ands	r3, r2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01e      	beq.n	8008fca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11a      	bne.n	8008fca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <vPortFree+0xb8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008fa4:	f7fe f94a 	bl	800723c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <vPortFree+0xbc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <vPortFree+0xbc>)
 8008fb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fb6:	6938      	ldr	r0, [r7, #16]
 8008fb8:	f000 f874 	bl	80090a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008fbc:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <vPortFree+0xc0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a06      	ldr	r2, [pc, #24]	; (8008fdc <vPortFree+0xc0>)
 8008fc4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008fc6:	f7fe f947 	bl	8007258 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008fca:	bf00      	nop
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200023e0 	.word	0x200023e0
 8008fd8:	200023d0 	.word	0x200023d0
 8008fdc:	200023dc 	.word	0x200023dc

08008fe0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008fec:	4b27      	ldr	r3, [pc, #156]	; (800908c <prvHeapInit+0xac>)
 8008fee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00c      	beq.n	8009014 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3307      	adds	r3, #7
 8008ffe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0307 	bic.w	r3, r3, #7
 8009006:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	4a1f      	ldr	r2, [pc, #124]	; (800908c <prvHeapInit+0xac>)
 8009010:	4413      	add	r3, r2
 8009012:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009018:	4a1d      	ldr	r2, [pc, #116]	; (8009090 <prvHeapInit+0xb0>)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800901e:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <prvHeapInit+0xb0>)
 8009020:	2200      	movs	r2, #0
 8009022:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4413      	add	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800902c:	2208      	movs	r2, #8
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4a15      	ldr	r2, [pc, #84]	; (8009094 <prvHeapInit+0xb4>)
 8009040:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009042:	4b14      	ldr	r3, [pc, #80]	; (8009094 <prvHeapInit+0xb4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2200      	movs	r2, #0
 8009048:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800904a:	4b12      	ldr	r3, [pc, #72]	; (8009094 <prvHeapInit+0xb4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <prvHeapInit+0xb4>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a0a      	ldr	r2, [pc, #40]	; (8009098 <prvHeapInit+0xb8>)
 800906e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4a09      	ldr	r2, [pc, #36]	; (800909c <prvHeapInit+0xbc>)
 8009076:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <prvHeapInit+0xc0>)
 800907a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800907e:	601a      	str	r2, [r3, #0]
}
 8009080:	bf00      	nop
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	200003c4 	.word	0x200003c4
 8009090:	200023c4 	.word	0x200023c4
 8009094:	200023cc 	.word	0x200023cc
 8009098:	200023d4 	.word	0x200023d4
 800909c:	200023d0 	.word	0x200023d0
 80090a0:	200023e0 	.word	0x200023e0

080090a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090ac:	4b28      	ldr	r3, [pc, #160]	; (8009150 <prvInsertBlockIntoFreeList+0xac>)
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	e002      	b.n	80090b8 <prvInsertBlockIntoFreeList+0x14>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d8f7      	bhi.n	80090b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d108      	bne.n	80090e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	441a      	add	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d118      	bne.n	800912c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b15      	ldr	r3, [pc, #84]	; (8009154 <prvInsertBlockIntoFreeList+0xb0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d00d      	beq.n	8009122 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	441a      	add	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e008      	b.n	8009134 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009122:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e003      	b.n	8009134 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d002      	beq.n	8009142 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	200023c4 	.word	0x200023c4
 8009154:	200023cc 	.word	0x200023cc

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	; (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	2000002c 	.word	0x2000002c

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	; (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	; (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	; (80091a8 <__libc_init_array+0x44>)
 8009178:	f000 fca2 	bl	8009ac0 <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	08009fbc 	.word	0x08009fbc
 80091a0:	08009fbc 	.word	0x08009fbc
 80091a4:	08009fbc 	.word	0x08009fbc
 80091a8:	08009fc0 	.word	0x08009fc0

080091ac <memcpy>:
 80091ac:	440a      	add	r2, r1
 80091ae:	4291      	cmp	r1, r2
 80091b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091b4:	d100      	bne.n	80091b8 <memcpy+0xc>
 80091b6:	4770      	bx	lr
 80091b8:	b510      	push	{r4, lr}
 80091ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c2:	4291      	cmp	r1, r2
 80091c4:	d1f9      	bne.n	80091ba <memcpy+0xe>
 80091c6:	bd10      	pop	{r4, pc}

080091c8 <memset>:
 80091c8:	4402      	add	r2, r0
 80091ca:	4603      	mov	r3, r0
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d100      	bne.n	80091d2 <memset+0xa>
 80091d0:	4770      	bx	lr
 80091d2:	f803 1b01 	strb.w	r1, [r3], #1
 80091d6:	e7f9      	b.n	80091cc <memset+0x4>

080091d8 <siprintf>:
 80091d8:	b40e      	push	{r1, r2, r3}
 80091da:	b500      	push	{lr}
 80091dc:	b09c      	sub	sp, #112	; 0x70
 80091de:	ab1d      	add	r3, sp, #116	; 0x74
 80091e0:	9002      	str	r0, [sp, #8]
 80091e2:	9006      	str	r0, [sp, #24]
 80091e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091e8:	4809      	ldr	r0, [pc, #36]	; (8009210 <siprintf+0x38>)
 80091ea:	9107      	str	r1, [sp, #28]
 80091ec:	9104      	str	r1, [sp, #16]
 80091ee:	4909      	ldr	r1, [pc, #36]	; (8009214 <siprintf+0x3c>)
 80091f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f4:	9105      	str	r1, [sp, #20]
 80091f6:	6800      	ldr	r0, [r0, #0]
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	a902      	add	r1, sp, #8
 80091fc:	f000 f87c 	bl	80092f8 <_svfiprintf_r>
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
 8009206:	b01c      	add	sp, #112	; 0x70
 8009208:	f85d eb04 	ldr.w	lr, [sp], #4
 800920c:	b003      	add	sp, #12
 800920e:	4770      	bx	lr
 8009210:	2000002c 	.word	0x2000002c
 8009214:	ffff0208 	.word	0xffff0208

08009218 <strncmp>:
 8009218:	b510      	push	{r4, lr}
 800921a:	b17a      	cbz	r2, 800923c <strncmp+0x24>
 800921c:	4603      	mov	r3, r0
 800921e:	3901      	subs	r1, #1
 8009220:	1884      	adds	r4, r0, r2
 8009222:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009226:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800922a:	4290      	cmp	r0, r2
 800922c:	d101      	bne.n	8009232 <strncmp+0x1a>
 800922e:	42a3      	cmp	r3, r4
 8009230:	d101      	bne.n	8009236 <strncmp+0x1e>
 8009232:	1a80      	subs	r0, r0, r2
 8009234:	bd10      	pop	{r4, pc}
 8009236:	2800      	cmp	r0, #0
 8009238:	d1f3      	bne.n	8009222 <strncmp+0xa>
 800923a:	e7fa      	b.n	8009232 <strncmp+0x1a>
 800923c:	4610      	mov	r0, r2
 800923e:	e7f9      	b.n	8009234 <strncmp+0x1c>

08009240 <__ssputs_r>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	688e      	ldr	r6, [r1, #8]
 8009246:	429e      	cmp	r6, r3
 8009248:	4682      	mov	sl, r0
 800924a:	460c      	mov	r4, r1
 800924c:	4690      	mov	r8, r2
 800924e:	461f      	mov	r7, r3
 8009250:	d838      	bhi.n	80092c4 <__ssputs_r+0x84>
 8009252:	898a      	ldrh	r2, [r1, #12]
 8009254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009258:	d032      	beq.n	80092c0 <__ssputs_r+0x80>
 800925a:	6825      	ldr	r5, [r4, #0]
 800925c:	6909      	ldr	r1, [r1, #16]
 800925e:	eba5 0901 	sub.w	r9, r5, r1
 8009262:	6965      	ldr	r5, [r4, #20]
 8009264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800926c:	3301      	adds	r3, #1
 800926e:	444b      	add	r3, r9
 8009270:	106d      	asrs	r5, r5, #1
 8009272:	429d      	cmp	r5, r3
 8009274:	bf38      	it	cc
 8009276:	461d      	movcc	r5, r3
 8009278:	0553      	lsls	r3, r2, #21
 800927a:	d531      	bpl.n	80092e0 <__ssputs_r+0xa0>
 800927c:	4629      	mov	r1, r5
 800927e:	f000 fb55 	bl	800992c <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b950      	cbnz	r0, 800929c <__ssputs_r+0x5c>
 8009286:	230c      	movs	r3, #12
 8009288:	f8ca 3000 	str.w	r3, [sl]
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	464a      	mov	r2, r9
 80092a0:	f7ff ff84 	bl	80091ac <memcpy>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	6126      	str	r6, [r4, #16]
 80092b2:	6165      	str	r5, [r4, #20]
 80092b4:	444e      	add	r6, r9
 80092b6:	eba5 0509 	sub.w	r5, r5, r9
 80092ba:	6026      	str	r6, [r4, #0]
 80092bc:	60a5      	str	r5, [r4, #8]
 80092be:	463e      	mov	r6, r7
 80092c0:	42be      	cmp	r6, r7
 80092c2:	d900      	bls.n	80092c6 <__ssputs_r+0x86>
 80092c4:	463e      	mov	r6, r7
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	4632      	mov	r2, r6
 80092ca:	4641      	mov	r1, r8
 80092cc:	f000 faa8 	bl	8009820 <memmove>
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	1b9b      	subs	r3, r3, r6
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	4433      	add	r3, r6
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	2000      	movs	r0, #0
 80092de:	e7db      	b.n	8009298 <__ssputs_r+0x58>
 80092e0:	462a      	mov	r2, r5
 80092e2:	f000 fb97 	bl	8009a14 <_realloc_r>
 80092e6:	4606      	mov	r6, r0
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d1e1      	bne.n	80092b0 <__ssputs_r+0x70>
 80092ec:	6921      	ldr	r1, [r4, #16]
 80092ee:	4650      	mov	r0, sl
 80092f0:	f000 fab0 	bl	8009854 <_free_r>
 80092f4:	e7c7      	b.n	8009286 <__ssputs_r+0x46>
	...

080092f8 <_svfiprintf_r>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4698      	mov	r8, r3
 80092fe:	898b      	ldrh	r3, [r1, #12]
 8009300:	061b      	lsls	r3, r3, #24
 8009302:	b09d      	sub	sp, #116	; 0x74
 8009304:	4607      	mov	r7, r0
 8009306:	460d      	mov	r5, r1
 8009308:	4614      	mov	r4, r2
 800930a:	d50e      	bpl.n	800932a <_svfiprintf_r+0x32>
 800930c:	690b      	ldr	r3, [r1, #16]
 800930e:	b963      	cbnz	r3, 800932a <_svfiprintf_r+0x32>
 8009310:	2140      	movs	r1, #64	; 0x40
 8009312:	f000 fb0b 	bl	800992c <_malloc_r>
 8009316:	6028      	str	r0, [r5, #0]
 8009318:	6128      	str	r0, [r5, #16]
 800931a:	b920      	cbnz	r0, 8009326 <_svfiprintf_r+0x2e>
 800931c:	230c      	movs	r3, #12
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	e0d1      	b.n	80094ca <_svfiprintf_r+0x1d2>
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	616b      	str	r3, [r5, #20]
 800932a:	2300      	movs	r3, #0
 800932c:	9309      	str	r3, [sp, #36]	; 0x24
 800932e:	2320      	movs	r3, #32
 8009330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009334:	f8cd 800c 	str.w	r8, [sp, #12]
 8009338:	2330      	movs	r3, #48	; 0x30
 800933a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094e4 <_svfiprintf_r+0x1ec>
 800933e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009342:	f04f 0901 	mov.w	r9, #1
 8009346:	4623      	mov	r3, r4
 8009348:	469a      	mov	sl, r3
 800934a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934e:	b10a      	cbz	r2, 8009354 <_svfiprintf_r+0x5c>
 8009350:	2a25      	cmp	r2, #37	; 0x25
 8009352:	d1f9      	bne.n	8009348 <_svfiprintf_r+0x50>
 8009354:	ebba 0b04 	subs.w	fp, sl, r4
 8009358:	d00b      	beq.n	8009372 <_svfiprintf_r+0x7a>
 800935a:	465b      	mov	r3, fp
 800935c:	4622      	mov	r2, r4
 800935e:	4629      	mov	r1, r5
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ff6d 	bl	8009240 <__ssputs_r>
 8009366:	3001      	adds	r0, #1
 8009368:	f000 80aa 	beq.w	80094c0 <_svfiprintf_r+0x1c8>
 800936c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936e:	445a      	add	r2, fp
 8009370:	9209      	str	r2, [sp, #36]	; 0x24
 8009372:	f89a 3000 	ldrb.w	r3, [sl]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80a2 	beq.w	80094c0 <_svfiprintf_r+0x1c8>
 800937c:	2300      	movs	r3, #0
 800937e:	f04f 32ff 	mov.w	r2, #4294967295
 8009382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009386:	f10a 0a01 	add.w	sl, sl, #1
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	9307      	str	r3, [sp, #28]
 800938e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009392:	931a      	str	r3, [sp, #104]	; 0x68
 8009394:	4654      	mov	r4, sl
 8009396:	2205      	movs	r2, #5
 8009398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939c:	4851      	ldr	r0, [pc, #324]	; (80094e4 <_svfiprintf_r+0x1ec>)
 800939e:	f7f6 fef7 	bl	8000190 <memchr>
 80093a2:	9a04      	ldr	r2, [sp, #16]
 80093a4:	b9d8      	cbnz	r0, 80093de <_svfiprintf_r+0xe6>
 80093a6:	06d0      	lsls	r0, r2, #27
 80093a8:	bf44      	itt	mi
 80093aa:	2320      	movmi	r3, #32
 80093ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b0:	0711      	lsls	r1, r2, #28
 80093b2:	bf44      	itt	mi
 80093b4:	232b      	movmi	r3, #43	; 0x2b
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	f89a 3000 	ldrb.w	r3, [sl]
 80093be:	2b2a      	cmp	r3, #42	; 0x2a
 80093c0:	d015      	beq.n	80093ee <_svfiprintf_r+0xf6>
 80093c2:	9a07      	ldr	r2, [sp, #28]
 80093c4:	4654      	mov	r4, sl
 80093c6:	2000      	movs	r0, #0
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	4621      	mov	r1, r4
 80093ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d2:	3b30      	subs	r3, #48	; 0x30
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d94e      	bls.n	8009476 <_svfiprintf_r+0x17e>
 80093d8:	b1b0      	cbz	r0, 8009408 <_svfiprintf_r+0x110>
 80093da:	9207      	str	r2, [sp, #28]
 80093dc:	e014      	b.n	8009408 <_svfiprintf_r+0x110>
 80093de:	eba0 0308 	sub.w	r3, r0, r8
 80093e2:	fa09 f303 	lsl.w	r3, r9, r3
 80093e6:	4313      	orrs	r3, r2
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	46a2      	mov	sl, r4
 80093ec:	e7d2      	b.n	8009394 <_svfiprintf_r+0x9c>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	1d19      	adds	r1, r3, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	9103      	str	r1, [sp, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfbb      	ittet	lt
 80093fa:	425b      	neglt	r3, r3
 80093fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009400:	9307      	strge	r3, [sp, #28]
 8009402:	9307      	strlt	r3, [sp, #28]
 8009404:	bfb8      	it	lt
 8009406:	9204      	strlt	r2, [sp, #16]
 8009408:	7823      	ldrb	r3, [r4, #0]
 800940a:	2b2e      	cmp	r3, #46	; 0x2e
 800940c:	d10c      	bne.n	8009428 <_svfiprintf_r+0x130>
 800940e:	7863      	ldrb	r3, [r4, #1]
 8009410:	2b2a      	cmp	r3, #42	; 0x2a
 8009412:	d135      	bne.n	8009480 <_svfiprintf_r+0x188>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	1d1a      	adds	r2, r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	9203      	str	r2, [sp, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	bfb8      	it	lt
 8009420:	f04f 33ff 	movlt.w	r3, #4294967295
 8009424:	3402      	adds	r4, #2
 8009426:	9305      	str	r3, [sp, #20]
 8009428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094f4 <_svfiprintf_r+0x1fc>
 800942c:	7821      	ldrb	r1, [r4, #0]
 800942e:	2203      	movs	r2, #3
 8009430:	4650      	mov	r0, sl
 8009432:	f7f6 fead 	bl	8000190 <memchr>
 8009436:	b140      	cbz	r0, 800944a <_svfiprintf_r+0x152>
 8009438:	2340      	movs	r3, #64	; 0x40
 800943a:	eba0 000a 	sub.w	r0, r0, sl
 800943e:	fa03 f000 	lsl.w	r0, r3, r0
 8009442:	9b04      	ldr	r3, [sp, #16]
 8009444:	4303      	orrs	r3, r0
 8009446:	3401      	adds	r4, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944e:	4826      	ldr	r0, [pc, #152]	; (80094e8 <_svfiprintf_r+0x1f0>)
 8009450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009454:	2206      	movs	r2, #6
 8009456:	f7f6 fe9b 	bl	8000190 <memchr>
 800945a:	2800      	cmp	r0, #0
 800945c:	d038      	beq.n	80094d0 <_svfiprintf_r+0x1d8>
 800945e:	4b23      	ldr	r3, [pc, #140]	; (80094ec <_svfiprintf_r+0x1f4>)
 8009460:	bb1b      	cbnz	r3, 80094aa <_svfiprintf_r+0x1b2>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	3307      	adds	r3, #7
 8009466:	f023 0307 	bic.w	r3, r3, #7
 800946a:	3308      	adds	r3, #8
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	4433      	add	r3, r6
 8009472:	9309      	str	r3, [sp, #36]	; 0x24
 8009474:	e767      	b.n	8009346 <_svfiprintf_r+0x4e>
 8009476:	fb0c 3202 	mla	r2, ip, r2, r3
 800947a:	460c      	mov	r4, r1
 800947c:	2001      	movs	r0, #1
 800947e:	e7a5      	b.n	80093cc <_svfiprintf_r+0xd4>
 8009480:	2300      	movs	r3, #0
 8009482:	3401      	adds	r4, #1
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	4619      	mov	r1, r3
 8009488:	f04f 0c0a 	mov.w	ip, #10
 800948c:	4620      	mov	r0, r4
 800948e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009492:	3a30      	subs	r2, #48	; 0x30
 8009494:	2a09      	cmp	r2, #9
 8009496:	d903      	bls.n	80094a0 <_svfiprintf_r+0x1a8>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0c5      	beq.n	8009428 <_svfiprintf_r+0x130>
 800949c:	9105      	str	r1, [sp, #20]
 800949e:	e7c3      	b.n	8009428 <_svfiprintf_r+0x130>
 80094a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a4:	4604      	mov	r4, r0
 80094a6:	2301      	movs	r3, #1
 80094a8:	e7f0      	b.n	800948c <_svfiprintf_r+0x194>
 80094aa:	ab03      	add	r3, sp, #12
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	462a      	mov	r2, r5
 80094b0:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <_svfiprintf_r+0x1f8>)
 80094b2:	a904      	add	r1, sp, #16
 80094b4:	4638      	mov	r0, r7
 80094b6:	f3af 8000 	nop.w
 80094ba:	1c42      	adds	r2, r0, #1
 80094bc:	4606      	mov	r6, r0
 80094be:	d1d6      	bne.n	800946e <_svfiprintf_r+0x176>
 80094c0:	89ab      	ldrh	r3, [r5, #12]
 80094c2:	065b      	lsls	r3, r3, #25
 80094c4:	f53f af2c 	bmi.w	8009320 <_svfiprintf_r+0x28>
 80094c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ca:	b01d      	add	sp, #116	; 0x74
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <_svfiprintf_r+0x1f8>)
 80094d8:	a904      	add	r1, sp, #16
 80094da:	4638      	mov	r0, r7
 80094dc:	f000 f87a 	bl	80095d4 <_printf_i>
 80094e0:	e7eb      	b.n	80094ba <_svfiprintf_r+0x1c2>
 80094e2:	bf00      	nop
 80094e4:	08009f80 	.word	0x08009f80
 80094e8:	08009f8a 	.word	0x08009f8a
 80094ec:	00000000 	.word	0x00000000
 80094f0:	08009241 	.word	0x08009241
 80094f4:	08009f86 	.word	0x08009f86

080094f8 <_printf_common>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	4616      	mov	r6, r2
 80094fe:	4699      	mov	r9, r3
 8009500:	688a      	ldr	r2, [r1, #8]
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009508:	4293      	cmp	r3, r2
 800950a:	bfb8      	it	lt
 800950c:	4613      	movlt	r3, r2
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009514:	4607      	mov	r7, r0
 8009516:	460c      	mov	r4, r1
 8009518:	b10a      	cbz	r2, 800951e <_printf_common+0x26>
 800951a:	3301      	adds	r3, #1
 800951c:	6033      	str	r3, [r6, #0]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	0699      	lsls	r1, r3, #26
 8009522:	bf42      	ittt	mi
 8009524:	6833      	ldrmi	r3, [r6, #0]
 8009526:	3302      	addmi	r3, #2
 8009528:	6033      	strmi	r3, [r6, #0]
 800952a:	6825      	ldr	r5, [r4, #0]
 800952c:	f015 0506 	ands.w	r5, r5, #6
 8009530:	d106      	bne.n	8009540 <_printf_common+0x48>
 8009532:	f104 0a19 	add.w	sl, r4, #25
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	6832      	ldr	r2, [r6, #0]
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	42ab      	cmp	r3, r5
 800953e:	dc26      	bgt.n	800958e <_printf_common+0x96>
 8009540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009544:	1e13      	subs	r3, r2, #0
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	bf18      	it	ne
 800954a:	2301      	movne	r3, #1
 800954c:	0692      	lsls	r2, r2, #26
 800954e:	d42b      	bmi.n	80095a8 <_printf_common+0xb0>
 8009550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009554:	4649      	mov	r1, r9
 8009556:	4638      	mov	r0, r7
 8009558:	47c0      	blx	r8
 800955a:	3001      	adds	r0, #1
 800955c:	d01e      	beq.n	800959c <_printf_common+0xa4>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	68e5      	ldr	r5, [r4, #12]
 8009562:	6832      	ldr	r2, [r6, #0]
 8009564:	f003 0306 	and.w	r3, r3, #6
 8009568:	2b04      	cmp	r3, #4
 800956a:	bf08      	it	eq
 800956c:	1aad      	subeq	r5, r5, r2
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	6922      	ldr	r2, [r4, #16]
 8009572:	bf0c      	ite	eq
 8009574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009578:	2500      	movne	r5, #0
 800957a:	4293      	cmp	r3, r2
 800957c:	bfc4      	itt	gt
 800957e:	1a9b      	subgt	r3, r3, r2
 8009580:	18ed      	addgt	r5, r5, r3
 8009582:	2600      	movs	r6, #0
 8009584:	341a      	adds	r4, #26
 8009586:	42b5      	cmp	r5, r6
 8009588:	d11a      	bne.n	80095c0 <_printf_common+0xc8>
 800958a:	2000      	movs	r0, #0
 800958c:	e008      	b.n	80095a0 <_printf_common+0xa8>
 800958e:	2301      	movs	r3, #1
 8009590:	4652      	mov	r2, sl
 8009592:	4649      	mov	r1, r9
 8009594:	4638      	mov	r0, r7
 8009596:	47c0      	blx	r8
 8009598:	3001      	adds	r0, #1
 800959a:	d103      	bne.n	80095a4 <_printf_common+0xac>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	3501      	adds	r5, #1
 80095a6:	e7c6      	b.n	8009536 <_printf_common+0x3e>
 80095a8:	18e1      	adds	r1, r4, r3
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	2030      	movs	r0, #48	; 0x30
 80095ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095b2:	4422      	add	r2, r4
 80095b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095bc:	3302      	adds	r3, #2
 80095be:	e7c7      	b.n	8009550 <_printf_common+0x58>
 80095c0:	2301      	movs	r3, #1
 80095c2:	4622      	mov	r2, r4
 80095c4:	4649      	mov	r1, r9
 80095c6:	4638      	mov	r0, r7
 80095c8:	47c0      	blx	r8
 80095ca:	3001      	adds	r0, #1
 80095cc:	d0e6      	beq.n	800959c <_printf_common+0xa4>
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7d9      	b.n	8009586 <_printf_common+0x8e>
	...

080095d4 <_printf_i>:
 80095d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	7e0f      	ldrb	r7, [r1, #24]
 80095da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095dc:	2f78      	cmp	r7, #120	; 0x78
 80095de:	4691      	mov	r9, r2
 80095e0:	4680      	mov	r8, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	469a      	mov	sl, r3
 80095e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095ea:	d807      	bhi.n	80095fc <_printf_i+0x28>
 80095ec:	2f62      	cmp	r7, #98	; 0x62
 80095ee:	d80a      	bhi.n	8009606 <_printf_i+0x32>
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	f000 80d8 	beq.w	80097a6 <_printf_i+0x1d2>
 80095f6:	2f58      	cmp	r7, #88	; 0x58
 80095f8:	f000 80a3 	beq.w	8009742 <_printf_i+0x16e>
 80095fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009604:	e03a      	b.n	800967c <_printf_i+0xa8>
 8009606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800960a:	2b15      	cmp	r3, #21
 800960c:	d8f6      	bhi.n	80095fc <_printf_i+0x28>
 800960e:	a101      	add	r1, pc, #4	; (adr r1, 8009614 <_printf_i+0x40>)
 8009610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009614:	0800966d 	.word	0x0800966d
 8009618:	08009681 	.word	0x08009681
 800961c:	080095fd 	.word	0x080095fd
 8009620:	080095fd 	.word	0x080095fd
 8009624:	080095fd 	.word	0x080095fd
 8009628:	080095fd 	.word	0x080095fd
 800962c:	08009681 	.word	0x08009681
 8009630:	080095fd 	.word	0x080095fd
 8009634:	080095fd 	.word	0x080095fd
 8009638:	080095fd 	.word	0x080095fd
 800963c:	080095fd 	.word	0x080095fd
 8009640:	0800978d 	.word	0x0800978d
 8009644:	080096b1 	.word	0x080096b1
 8009648:	0800976f 	.word	0x0800976f
 800964c:	080095fd 	.word	0x080095fd
 8009650:	080095fd 	.word	0x080095fd
 8009654:	080097af 	.word	0x080097af
 8009658:	080095fd 	.word	0x080095fd
 800965c:	080096b1 	.word	0x080096b1
 8009660:	080095fd 	.word	0x080095fd
 8009664:	080095fd 	.word	0x080095fd
 8009668:	08009777 	.word	0x08009777
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	1d1a      	adds	r2, r3, #4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	602a      	str	r2, [r5, #0]
 8009674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800967c:	2301      	movs	r3, #1
 800967e:	e0a3      	b.n	80097c8 <_printf_i+0x1f4>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	6829      	ldr	r1, [r5, #0]
 8009684:	0606      	lsls	r6, r0, #24
 8009686:	f101 0304 	add.w	r3, r1, #4
 800968a:	d50a      	bpl.n	80096a2 <_printf_i+0xce>
 800968c:	680e      	ldr	r6, [r1, #0]
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	2e00      	cmp	r6, #0
 8009692:	da03      	bge.n	800969c <_printf_i+0xc8>
 8009694:	232d      	movs	r3, #45	; 0x2d
 8009696:	4276      	negs	r6, r6
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969c:	485e      	ldr	r0, [pc, #376]	; (8009818 <_printf_i+0x244>)
 800969e:	230a      	movs	r3, #10
 80096a0:	e019      	b.n	80096d6 <_printf_i+0x102>
 80096a2:	680e      	ldr	r6, [r1, #0]
 80096a4:	602b      	str	r3, [r5, #0]
 80096a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096aa:	bf18      	it	ne
 80096ac:	b236      	sxthne	r6, r6
 80096ae:	e7ef      	b.n	8009690 <_printf_i+0xbc>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	6820      	ldr	r0, [r4, #0]
 80096b4:	1d19      	adds	r1, r3, #4
 80096b6:	6029      	str	r1, [r5, #0]
 80096b8:	0601      	lsls	r1, r0, #24
 80096ba:	d501      	bpl.n	80096c0 <_printf_i+0xec>
 80096bc:	681e      	ldr	r6, [r3, #0]
 80096be:	e002      	b.n	80096c6 <_printf_i+0xf2>
 80096c0:	0646      	lsls	r6, r0, #25
 80096c2:	d5fb      	bpl.n	80096bc <_printf_i+0xe8>
 80096c4:	881e      	ldrh	r6, [r3, #0]
 80096c6:	4854      	ldr	r0, [pc, #336]	; (8009818 <_printf_i+0x244>)
 80096c8:	2f6f      	cmp	r7, #111	; 0x6f
 80096ca:	bf0c      	ite	eq
 80096cc:	2308      	moveq	r3, #8
 80096ce:	230a      	movne	r3, #10
 80096d0:	2100      	movs	r1, #0
 80096d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096d6:	6865      	ldr	r5, [r4, #4]
 80096d8:	60a5      	str	r5, [r4, #8]
 80096da:	2d00      	cmp	r5, #0
 80096dc:	bfa2      	ittt	ge
 80096de:	6821      	ldrge	r1, [r4, #0]
 80096e0:	f021 0104 	bicge.w	r1, r1, #4
 80096e4:	6021      	strge	r1, [r4, #0]
 80096e6:	b90e      	cbnz	r6, 80096ec <_printf_i+0x118>
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	d04d      	beq.n	8009788 <_printf_i+0x1b4>
 80096ec:	4615      	mov	r5, r2
 80096ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80096f2:	fb03 6711 	mls	r7, r3, r1, r6
 80096f6:	5dc7      	ldrb	r7, [r0, r7]
 80096f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096fc:	4637      	mov	r7, r6
 80096fe:	42bb      	cmp	r3, r7
 8009700:	460e      	mov	r6, r1
 8009702:	d9f4      	bls.n	80096ee <_printf_i+0x11a>
 8009704:	2b08      	cmp	r3, #8
 8009706:	d10b      	bne.n	8009720 <_printf_i+0x14c>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	07de      	lsls	r6, r3, #31
 800970c:	d508      	bpl.n	8009720 <_printf_i+0x14c>
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	6861      	ldr	r1, [r4, #4]
 8009712:	4299      	cmp	r1, r3
 8009714:	bfde      	ittt	le
 8009716:	2330      	movle	r3, #48	; 0x30
 8009718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800971c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009720:	1b52      	subs	r2, r2, r5
 8009722:	6122      	str	r2, [r4, #16]
 8009724:	f8cd a000 	str.w	sl, [sp]
 8009728:	464b      	mov	r3, r9
 800972a:	aa03      	add	r2, sp, #12
 800972c:	4621      	mov	r1, r4
 800972e:	4640      	mov	r0, r8
 8009730:	f7ff fee2 	bl	80094f8 <_printf_common>
 8009734:	3001      	adds	r0, #1
 8009736:	d14c      	bne.n	80097d2 <_printf_i+0x1fe>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	b004      	add	sp, #16
 800973e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009742:	4835      	ldr	r0, [pc, #212]	; (8009818 <_printf_i+0x244>)
 8009744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009748:	6829      	ldr	r1, [r5, #0]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009750:	6029      	str	r1, [r5, #0]
 8009752:	061d      	lsls	r5, r3, #24
 8009754:	d514      	bpl.n	8009780 <_printf_i+0x1ac>
 8009756:	07df      	lsls	r7, r3, #31
 8009758:	bf44      	itt	mi
 800975a:	f043 0320 	orrmi.w	r3, r3, #32
 800975e:	6023      	strmi	r3, [r4, #0]
 8009760:	b91e      	cbnz	r6, 800976a <_printf_i+0x196>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	f023 0320 	bic.w	r3, r3, #32
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	2310      	movs	r3, #16
 800976c:	e7b0      	b.n	80096d0 <_printf_i+0xfc>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f043 0320 	orr.w	r3, r3, #32
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	2378      	movs	r3, #120	; 0x78
 8009778:	4828      	ldr	r0, [pc, #160]	; (800981c <_printf_i+0x248>)
 800977a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800977e:	e7e3      	b.n	8009748 <_printf_i+0x174>
 8009780:	0659      	lsls	r1, r3, #25
 8009782:	bf48      	it	mi
 8009784:	b2b6      	uxthmi	r6, r6
 8009786:	e7e6      	b.n	8009756 <_printf_i+0x182>
 8009788:	4615      	mov	r5, r2
 800978a:	e7bb      	b.n	8009704 <_printf_i+0x130>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	6826      	ldr	r6, [r4, #0]
 8009790:	6961      	ldr	r1, [r4, #20]
 8009792:	1d18      	adds	r0, r3, #4
 8009794:	6028      	str	r0, [r5, #0]
 8009796:	0635      	lsls	r5, r6, #24
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	d501      	bpl.n	80097a0 <_printf_i+0x1cc>
 800979c:	6019      	str	r1, [r3, #0]
 800979e:	e002      	b.n	80097a6 <_printf_i+0x1d2>
 80097a0:	0670      	lsls	r0, r6, #25
 80097a2:	d5fb      	bpl.n	800979c <_printf_i+0x1c8>
 80097a4:	8019      	strh	r1, [r3, #0]
 80097a6:	2300      	movs	r3, #0
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	4615      	mov	r5, r2
 80097ac:	e7ba      	b.n	8009724 <_printf_i+0x150>
 80097ae:	682b      	ldr	r3, [r5, #0]
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	602a      	str	r2, [r5, #0]
 80097b4:	681d      	ldr	r5, [r3, #0]
 80097b6:	6862      	ldr	r2, [r4, #4]
 80097b8:	2100      	movs	r1, #0
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7f6 fce8 	bl	8000190 <memchr>
 80097c0:	b108      	cbz	r0, 80097c6 <_printf_i+0x1f2>
 80097c2:	1b40      	subs	r0, r0, r5
 80097c4:	6060      	str	r0, [r4, #4]
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	2300      	movs	r3, #0
 80097cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d0:	e7a8      	b.n	8009724 <_printf_i+0x150>
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4649      	mov	r1, r9
 80097d8:	4640      	mov	r0, r8
 80097da:	47d0      	blx	sl
 80097dc:	3001      	adds	r0, #1
 80097de:	d0ab      	beq.n	8009738 <_printf_i+0x164>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	079b      	lsls	r3, r3, #30
 80097e4:	d413      	bmi.n	800980e <_printf_i+0x23a>
 80097e6:	68e0      	ldr	r0, [r4, #12]
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	4298      	cmp	r0, r3
 80097ec:	bfb8      	it	lt
 80097ee:	4618      	movlt	r0, r3
 80097f0:	e7a4      	b.n	800973c <_printf_i+0x168>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4632      	mov	r2, r6
 80097f6:	4649      	mov	r1, r9
 80097f8:	4640      	mov	r0, r8
 80097fa:	47d0      	blx	sl
 80097fc:	3001      	adds	r0, #1
 80097fe:	d09b      	beq.n	8009738 <_printf_i+0x164>
 8009800:	3501      	adds	r5, #1
 8009802:	68e3      	ldr	r3, [r4, #12]
 8009804:	9903      	ldr	r1, [sp, #12]
 8009806:	1a5b      	subs	r3, r3, r1
 8009808:	42ab      	cmp	r3, r5
 800980a:	dcf2      	bgt.n	80097f2 <_printf_i+0x21e>
 800980c:	e7eb      	b.n	80097e6 <_printf_i+0x212>
 800980e:	2500      	movs	r5, #0
 8009810:	f104 0619 	add.w	r6, r4, #25
 8009814:	e7f5      	b.n	8009802 <_printf_i+0x22e>
 8009816:	bf00      	nop
 8009818:	08009f91 	.word	0x08009f91
 800981c:	08009fa2 	.word	0x08009fa2

08009820 <memmove>:
 8009820:	4288      	cmp	r0, r1
 8009822:	b510      	push	{r4, lr}
 8009824:	eb01 0402 	add.w	r4, r1, r2
 8009828:	d902      	bls.n	8009830 <memmove+0x10>
 800982a:	4284      	cmp	r4, r0
 800982c:	4623      	mov	r3, r4
 800982e:	d807      	bhi.n	8009840 <memmove+0x20>
 8009830:	1e43      	subs	r3, r0, #1
 8009832:	42a1      	cmp	r1, r4
 8009834:	d008      	beq.n	8009848 <memmove+0x28>
 8009836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800983a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800983e:	e7f8      	b.n	8009832 <memmove+0x12>
 8009840:	4402      	add	r2, r0
 8009842:	4601      	mov	r1, r0
 8009844:	428a      	cmp	r2, r1
 8009846:	d100      	bne.n	800984a <memmove+0x2a>
 8009848:	bd10      	pop	{r4, pc}
 800984a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800984e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009852:	e7f7      	b.n	8009844 <memmove+0x24>

08009854 <_free_r>:
 8009854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009856:	2900      	cmp	r1, #0
 8009858:	d044      	beq.n	80098e4 <_free_r+0x90>
 800985a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985e:	9001      	str	r0, [sp, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f1a1 0404 	sub.w	r4, r1, #4
 8009866:	bfb8      	it	lt
 8009868:	18e4      	addlt	r4, r4, r3
 800986a:	f000 f913 	bl	8009a94 <__malloc_lock>
 800986e:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <_free_r+0x94>)
 8009870:	9801      	ldr	r0, [sp, #4]
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	b933      	cbnz	r3, 8009884 <_free_r+0x30>
 8009876:	6063      	str	r3, [r4, #4]
 8009878:	6014      	str	r4, [r2, #0]
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009880:	f000 b90e 	b.w	8009aa0 <__malloc_unlock>
 8009884:	42a3      	cmp	r3, r4
 8009886:	d908      	bls.n	800989a <_free_r+0x46>
 8009888:	6825      	ldr	r5, [r4, #0]
 800988a:	1961      	adds	r1, r4, r5
 800988c:	428b      	cmp	r3, r1
 800988e:	bf01      	itttt	eq
 8009890:	6819      	ldreq	r1, [r3, #0]
 8009892:	685b      	ldreq	r3, [r3, #4]
 8009894:	1949      	addeq	r1, r1, r5
 8009896:	6021      	streq	r1, [r4, #0]
 8009898:	e7ed      	b.n	8009876 <_free_r+0x22>
 800989a:	461a      	mov	r2, r3
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	b10b      	cbz	r3, 80098a4 <_free_r+0x50>
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	d9fa      	bls.n	800989a <_free_r+0x46>
 80098a4:	6811      	ldr	r1, [r2, #0]
 80098a6:	1855      	adds	r5, r2, r1
 80098a8:	42a5      	cmp	r5, r4
 80098aa:	d10b      	bne.n	80098c4 <_free_r+0x70>
 80098ac:	6824      	ldr	r4, [r4, #0]
 80098ae:	4421      	add	r1, r4
 80098b0:	1854      	adds	r4, r2, r1
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	6011      	str	r1, [r2, #0]
 80098b6:	d1e0      	bne.n	800987a <_free_r+0x26>
 80098b8:	681c      	ldr	r4, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	6053      	str	r3, [r2, #4]
 80098be:	4421      	add	r1, r4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	e7da      	b.n	800987a <_free_r+0x26>
 80098c4:	d902      	bls.n	80098cc <_free_r+0x78>
 80098c6:	230c      	movs	r3, #12
 80098c8:	6003      	str	r3, [r0, #0]
 80098ca:	e7d6      	b.n	800987a <_free_r+0x26>
 80098cc:	6825      	ldr	r5, [r4, #0]
 80098ce:	1961      	adds	r1, r4, r5
 80098d0:	428b      	cmp	r3, r1
 80098d2:	bf04      	itt	eq
 80098d4:	6819      	ldreq	r1, [r3, #0]
 80098d6:	685b      	ldreq	r3, [r3, #4]
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	bf04      	itt	eq
 80098dc:	1949      	addeq	r1, r1, r5
 80098de:	6021      	streq	r1, [r4, #0]
 80098e0:	6054      	str	r4, [r2, #4]
 80098e2:	e7ca      	b.n	800987a <_free_r+0x26>
 80098e4:	b003      	add	sp, #12
 80098e6:	bd30      	pop	{r4, r5, pc}
 80098e8:	200023e4 	.word	0x200023e4

080098ec <sbrk_aligned>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4e0e      	ldr	r6, [pc, #56]	; (8009928 <sbrk_aligned+0x3c>)
 80098f0:	460c      	mov	r4, r1
 80098f2:	6831      	ldr	r1, [r6, #0]
 80098f4:	4605      	mov	r5, r0
 80098f6:	b911      	cbnz	r1, 80098fe <sbrk_aligned+0x12>
 80098f8:	f000 f8bc 	bl	8009a74 <_sbrk_r>
 80098fc:	6030      	str	r0, [r6, #0]
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f000 f8b7 	bl	8009a74 <_sbrk_r>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d00a      	beq.n	8009920 <sbrk_aligned+0x34>
 800990a:	1cc4      	adds	r4, r0, #3
 800990c:	f024 0403 	bic.w	r4, r4, #3
 8009910:	42a0      	cmp	r0, r4
 8009912:	d007      	beq.n	8009924 <sbrk_aligned+0x38>
 8009914:	1a21      	subs	r1, r4, r0
 8009916:	4628      	mov	r0, r5
 8009918:	f000 f8ac 	bl	8009a74 <_sbrk_r>
 800991c:	3001      	adds	r0, #1
 800991e:	d101      	bne.n	8009924 <sbrk_aligned+0x38>
 8009920:	f04f 34ff 	mov.w	r4, #4294967295
 8009924:	4620      	mov	r0, r4
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	200023e8 	.word	0x200023e8

0800992c <_malloc_r>:
 800992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	1ccd      	adds	r5, r1, #3
 8009932:	f025 0503 	bic.w	r5, r5, #3
 8009936:	3508      	adds	r5, #8
 8009938:	2d0c      	cmp	r5, #12
 800993a:	bf38      	it	cc
 800993c:	250c      	movcc	r5, #12
 800993e:	2d00      	cmp	r5, #0
 8009940:	4607      	mov	r7, r0
 8009942:	db01      	blt.n	8009948 <_malloc_r+0x1c>
 8009944:	42a9      	cmp	r1, r5
 8009946:	d905      	bls.n	8009954 <_malloc_r+0x28>
 8009948:	230c      	movs	r3, #12
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	2600      	movs	r6, #0
 800994e:	4630      	mov	r0, r6
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	4e2e      	ldr	r6, [pc, #184]	; (8009a10 <_malloc_r+0xe4>)
 8009956:	f000 f89d 	bl	8009a94 <__malloc_lock>
 800995a:	6833      	ldr	r3, [r6, #0]
 800995c:	461c      	mov	r4, r3
 800995e:	bb34      	cbnz	r4, 80099ae <_malloc_r+0x82>
 8009960:	4629      	mov	r1, r5
 8009962:	4638      	mov	r0, r7
 8009964:	f7ff ffc2 	bl	80098ec <sbrk_aligned>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	4604      	mov	r4, r0
 800996c:	d14d      	bne.n	8009a0a <_malloc_r+0xde>
 800996e:	6834      	ldr	r4, [r6, #0]
 8009970:	4626      	mov	r6, r4
 8009972:	2e00      	cmp	r6, #0
 8009974:	d140      	bne.n	80099f8 <_malloc_r+0xcc>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	4631      	mov	r1, r6
 800997a:	4638      	mov	r0, r7
 800997c:	eb04 0803 	add.w	r8, r4, r3
 8009980:	f000 f878 	bl	8009a74 <_sbrk_r>
 8009984:	4580      	cmp	r8, r0
 8009986:	d13a      	bne.n	80099fe <_malloc_r+0xd2>
 8009988:	6821      	ldr	r1, [r4, #0]
 800998a:	3503      	adds	r5, #3
 800998c:	1a6d      	subs	r5, r5, r1
 800998e:	f025 0503 	bic.w	r5, r5, #3
 8009992:	3508      	adds	r5, #8
 8009994:	2d0c      	cmp	r5, #12
 8009996:	bf38      	it	cc
 8009998:	250c      	movcc	r5, #12
 800999a:	4629      	mov	r1, r5
 800999c:	4638      	mov	r0, r7
 800999e:	f7ff ffa5 	bl	80098ec <sbrk_aligned>
 80099a2:	3001      	adds	r0, #1
 80099a4:	d02b      	beq.n	80099fe <_malloc_r+0xd2>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	442b      	add	r3, r5
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	e00e      	b.n	80099cc <_malloc_r+0xa0>
 80099ae:	6822      	ldr	r2, [r4, #0]
 80099b0:	1b52      	subs	r2, r2, r5
 80099b2:	d41e      	bmi.n	80099f2 <_malloc_r+0xc6>
 80099b4:	2a0b      	cmp	r2, #11
 80099b6:	d916      	bls.n	80099e6 <_malloc_r+0xba>
 80099b8:	1961      	adds	r1, r4, r5
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	6025      	str	r5, [r4, #0]
 80099be:	bf18      	it	ne
 80099c0:	6059      	strne	r1, [r3, #4]
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	bf08      	it	eq
 80099c6:	6031      	streq	r1, [r6, #0]
 80099c8:	5162      	str	r2, [r4, r5]
 80099ca:	604b      	str	r3, [r1, #4]
 80099cc:	4638      	mov	r0, r7
 80099ce:	f104 060b 	add.w	r6, r4, #11
 80099d2:	f000 f865 	bl	8009aa0 <__malloc_unlock>
 80099d6:	f026 0607 	bic.w	r6, r6, #7
 80099da:	1d23      	adds	r3, r4, #4
 80099dc:	1af2      	subs	r2, r6, r3
 80099de:	d0b6      	beq.n	800994e <_malloc_r+0x22>
 80099e0:	1b9b      	subs	r3, r3, r6
 80099e2:	50a3      	str	r3, [r4, r2]
 80099e4:	e7b3      	b.n	800994e <_malloc_r+0x22>
 80099e6:	6862      	ldr	r2, [r4, #4]
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	bf0c      	ite	eq
 80099ec:	6032      	streq	r2, [r6, #0]
 80099ee:	605a      	strne	r2, [r3, #4]
 80099f0:	e7ec      	b.n	80099cc <_malloc_r+0xa0>
 80099f2:	4623      	mov	r3, r4
 80099f4:	6864      	ldr	r4, [r4, #4]
 80099f6:	e7b2      	b.n	800995e <_malloc_r+0x32>
 80099f8:	4634      	mov	r4, r6
 80099fa:	6876      	ldr	r6, [r6, #4]
 80099fc:	e7b9      	b.n	8009972 <_malloc_r+0x46>
 80099fe:	230c      	movs	r3, #12
 8009a00:	603b      	str	r3, [r7, #0]
 8009a02:	4638      	mov	r0, r7
 8009a04:	f000 f84c 	bl	8009aa0 <__malloc_unlock>
 8009a08:	e7a1      	b.n	800994e <_malloc_r+0x22>
 8009a0a:	6025      	str	r5, [r4, #0]
 8009a0c:	e7de      	b.n	80099cc <_malloc_r+0xa0>
 8009a0e:	bf00      	nop
 8009a10:	200023e4 	.word	0x200023e4

08009a14 <_realloc_r>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	b921      	cbnz	r1, 8009a2a <_realloc_r+0x16>
 8009a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	4611      	mov	r1, r2
 8009a26:	f7ff bf81 	b.w	800992c <_malloc_r>
 8009a2a:	b92a      	cbnz	r2, 8009a38 <_realloc_r+0x24>
 8009a2c:	f7ff ff12 	bl	8009854 <_free_r>
 8009a30:	4625      	mov	r5, r4
 8009a32:	4628      	mov	r0, r5
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	f000 f838 	bl	8009aac <_malloc_usable_size_r>
 8009a3c:	4284      	cmp	r4, r0
 8009a3e:	4607      	mov	r7, r0
 8009a40:	d802      	bhi.n	8009a48 <_realloc_r+0x34>
 8009a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a46:	d812      	bhi.n	8009a6e <_realloc_r+0x5a>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff ff6e 	bl	800992c <_malloc_r>
 8009a50:	4605      	mov	r5, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0ed      	beq.n	8009a32 <_realloc_r+0x1e>
 8009a56:	42bc      	cmp	r4, r7
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	bf28      	it	cs
 8009a5e:	463a      	movcs	r2, r7
 8009a60:	f7ff fba4 	bl	80091ac <memcpy>
 8009a64:	4631      	mov	r1, r6
 8009a66:	4640      	mov	r0, r8
 8009a68:	f7ff fef4 	bl	8009854 <_free_r>
 8009a6c:	e7e1      	b.n	8009a32 <_realloc_r+0x1e>
 8009a6e:	4635      	mov	r5, r6
 8009a70:	e7df      	b.n	8009a32 <_realloc_r+0x1e>
	...

08009a74 <_sbrk_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d06      	ldr	r5, [pc, #24]	; (8009a90 <_sbrk_r+0x1c>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f7f7 fb80 	bl	8001184 <_sbrk>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_sbrk_r+0x1a>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_sbrk_r+0x1a>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200023ec 	.word	0x200023ec

08009a94 <__malloc_lock>:
 8009a94:	4801      	ldr	r0, [pc, #4]	; (8009a9c <__malloc_lock+0x8>)
 8009a96:	f000 b811 	b.w	8009abc <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	200023f0 	.word	0x200023f0

08009aa0 <__malloc_unlock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__malloc_unlock+0x8>)
 8009aa2:	f000 b80c 	b.w	8009abe <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	200023f0 	.word	0x200023f0

08009aac <_malloc_usable_size_r>:
 8009aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab0:	1f18      	subs	r0, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bfbc      	itt	lt
 8009ab6:	580b      	ldrlt	r3, [r1, r0]
 8009ab8:	18c0      	addlt	r0, r0, r3
 8009aba:	4770      	bx	lr

08009abc <__retarget_lock_acquire_recursive>:
 8009abc:	4770      	bx	lr

08009abe <__retarget_lock_release_recursive>:
 8009abe:	4770      	bx	lr

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr
