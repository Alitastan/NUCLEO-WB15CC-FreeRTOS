
QueuesnTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087dc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000008  08008ba4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002300  20000024  08008bc0  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002324  08008bc0  00022324  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d18e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ced  00000000  00000000  0003d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a90  00000000  00000000  00040ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001928  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020840  00000000  00000000  00044288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c52c  00000000  00000000  00064ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cbb49  00000000  00000000  00080ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014cb3d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f98  00000000  00000000  0014cb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000024 	.word	0x20000024
 800015c:	00000000 	.word	0x00000000
 8000160:	08008904 	.word	0x08008904

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000028 	.word	0x20000028
 800017c:	08008904 	.word	0x08008904

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b974 	b.w	8000490 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9d08      	ldr	r5, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	468e      	mov	lr, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14d      	bne.n	800026a <__udivmoddi4+0xaa>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4694      	mov	ip, r2
 80001d2:	d969      	bls.n	80002a8 <__udivmoddi4+0xe8>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b152      	cbz	r2, 80001f0 <__udivmoddi4+0x30>
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	f1c2 0120 	rsb	r1, r2, #32
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ea:	ea41 0e03 	orr.w	lr, r1, r3
 80001ee:	4094      	lsls	r4, r2
 80001f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001f4:	0c21      	lsrs	r1, r4, #16
 80001f6:	fbbe f6f8 	udiv	r6, lr, r8
 80001fa:	fa1f f78c 	uxth.w	r7, ip
 80001fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000202:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000206:	fb06 f107 	mul.w	r1, r6, r7
 800020a:	4299      	cmp	r1, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x64>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f106 30ff 	add.w	r0, r6, #4294967295
 8000216:	f080 811f 	bcs.w	8000458 <__udivmoddi4+0x298>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 811c 	bls.w	8000458 <__udivmoddi4+0x298>
 8000220:	3e02      	subs	r6, #2
 8000222:	4463      	add	r3, ip
 8000224:	1a5b      	subs	r3, r3, r1
 8000226:	b2a4      	uxth	r4, r4
 8000228:	fbb3 f0f8 	udiv	r0, r3, r8
 800022c:	fb08 3310 	mls	r3, r8, r0, r3
 8000230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000234:	fb00 f707 	mul.w	r7, r0, r7
 8000238:	42a7      	cmp	r7, r4
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x92>
 800023c:	eb1c 0404 	adds.w	r4, ip, r4
 8000240:	f100 33ff 	add.w	r3, r0, #4294967295
 8000244:	f080 810a 	bcs.w	800045c <__udivmoddi4+0x29c>
 8000248:	42a7      	cmp	r7, r4
 800024a:	f240 8107 	bls.w	800045c <__udivmoddi4+0x29c>
 800024e:	4464      	add	r4, ip
 8000250:	3802      	subs	r0, #2
 8000252:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000256:	1be4      	subs	r4, r4, r7
 8000258:	2600      	movs	r6, #0
 800025a:	b11d      	cbz	r5, 8000264 <__udivmoddi4+0xa4>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	e9c5 4300 	strd	r4, r3, [r5]
 8000264:	4631      	mov	r1, r6
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0xc2>
 800026e:	2d00      	cmp	r5, #0
 8000270:	f000 80ef 	beq.w	8000452 <__udivmoddi4+0x292>
 8000274:	2600      	movs	r6, #0
 8000276:	e9c5 0100 	strd	r0, r1, [r5]
 800027a:	4630      	mov	r0, r6
 800027c:	4631      	mov	r1, r6
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f683 	clz	r6, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d14a      	bne.n	8000320 <__udivmoddi4+0x160>
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd4>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80f9 	bhi.w	8000486 <__udivmoddi4+0x2c6>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb61 0303 	sbc.w	r3, r1, r3
 800029a:	2001      	movs	r0, #1
 800029c:	469e      	mov	lr, r3
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e0      	beq.n	8000264 <__udivmoddi4+0xa4>
 80002a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002a6:	e7dd      	b.n	8000264 <__udivmoddi4+0xa4>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xec>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 8092 	bne.w	80003da <__udivmoddi4+0x21a>
 80002b6:	eba1 010c 	sub.w	r1, r1, ip
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f fe8c 	uxth.w	lr, ip
 80002c2:	2601      	movs	r6, #1
 80002c4:	0c20      	lsrs	r0, r4, #16
 80002c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ca:	fb07 1113 	mls	r1, r7, r3, r1
 80002ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002d2:	fb0e f003 	mul.w	r0, lr, r3
 80002d6:	4288      	cmp	r0, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x12c>
 80002da:	eb1c 0101 	adds.w	r1, ip, r1
 80002de:	f103 38ff 	add.w	r8, r3, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x12a>
 80002e4:	4288      	cmp	r0, r1
 80002e6:	f200 80cb 	bhi.w	8000480 <__udivmoddi4+0x2c0>
 80002ea:	4643      	mov	r3, r8
 80002ec:	1a09      	subs	r1, r1, r0
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002f4:	fb07 1110 	mls	r1, r7, r0, r1
 80002f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000300:	45a6      	cmp	lr, r4
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x156>
 8000304:	eb1c 0404 	adds.w	r4, ip, r4
 8000308:	f100 31ff 	add.w	r1, r0, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x154>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f200 80bb 	bhi.w	800048a <__udivmoddi4+0x2ca>
 8000314:	4608      	mov	r0, r1
 8000316:	eba4 040e 	sub.w	r4, r4, lr
 800031a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031e:	e79c      	b.n	800025a <__udivmoddi4+0x9a>
 8000320:	f1c6 0720 	rsb	r7, r6, #32
 8000324:	40b3      	lsls	r3, r6
 8000326:	fa22 fc07 	lsr.w	ip, r2, r7
 800032a:	ea4c 0c03 	orr.w	ip, ip, r3
 800032e:	fa20 f407 	lsr.w	r4, r0, r7
 8000332:	fa01 f306 	lsl.w	r3, r1, r6
 8000336:	431c      	orrs	r4, r3
 8000338:	40f9      	lsrs	r1, r7
 800033a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800033e:	fa00 f306 	lsl.w	r3, r0, r6
 8000342:	fbb1 f8f9 	udiv	r8, r1, r9
 8000346:	0c20      	lsrs	r0, r4, #16
 8000348:	fa1f fe8c 	uxth.w	lr, ip
 800034c:	fb09 1118 	mls	r1, r9, r8, r1
 8000350:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000354:	fb08 f00e 	mul.w	r0, r8, lr
 8000358:	4288      	cmp	r0, r1
 800035a:	fa02 f206 	lsl.w	r2, r2, r6
 800035e:	d90b      	bls.n	8000378 <__udivmoddi4+0x1b8>
 8000360:	eb1c 0101 	adds.w	r1, ip, r1
 8000364:	f108 3aff 	add.w	sl, r8, #4294967295
 8000368:	f080 8088 	bcs.w	800047c <__udivmoddi4+0x2bc>
 800036c:	4288      	cmp	r0, r1
 800036e:	f240 8085 	bls.w	800047c <__udivmoddi4+0x2bc>
 8000372:	f1a8 0802 	sub.w	r8, r8, #2
 8000376:	4461      	add	r1, ip
 8000378:	1a09      	subs	r1, r1, r0
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000380:	fb09 1110 	mls	r1, r9, r0, r1
 8000384:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	458e      	cmp	lr, r1
 800038e:	d908      	bls.n	80003a2 <__udivmoddi4+0x1e2>
 8000390:	eb1c 0101 	adds.w	r1, ip, r1
 8000394:	f100 34ff 	add.w	r4, r0, #4294967295
 8000398:	d26c      	bcs.n	8000474 <__udivmoddi4+0x2b4>
 800039a:	458e      	cmp	lr, r1
 800039c:	d96a      	bls.n	8000474 <__udivmoddi4+0x2b4>
 800039e:	3802      	subs	r0, #2
 80003a0:	4461      	add	r1, ip
 80003a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a6:	fba0 9402 	umull	r9, r4, r0, r2
 80003aa:	eba1 010e 	sub.w	r1, r1, lr
 80003ae:	42a1      	cmp	r1, r4
 80003b0:	46c8      	mov	r8, r9
 80003b2:	46a6      	mov	lr, r4
 80003b4:	d356      	bcc.n	8000464 <__udivmoddi4+0x2a4>
 80003b6:	d053      	beq.n	8000460 <__udivmoddi4+0x2a0>
 80003b8:	b15d      	cbz	r5, 80003d2 <__udivmoddi4+0x212>
 80003ba:	ebb3 0208 	subs.w	r2, r3, r8
 80003be:	eb61 010e 	sbc.w	r1, r1, lr
 80003c2:	fa01 f707 	lsl.w	r7, r1, r7
 80003c6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ca:	40f1      	lsrs	r1, r6
 80003cc:	431f      	orrs	r7, r3
 80003ce:	e9c5 7100 	strd	r7, r1, [r5]
 80003d2:	2600      	movs	r6, #0
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	40d8      	lsrs	r0, r3
 80003e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e4:	fa21 f303 	lsr.w	r3, r1, r3
 80003e8:	4091      	lsls	r1, r2
 80003ea:	4301      	orrs	r1, r0
 80003ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003f8:	fb07 3610 	mls	r6, r7, r0, r3
 80003fc:	0c0b      	lsrs	r3, r1, #16
 80003fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000402:	fb00 f60e 	mul.w	r6, r0, lr
 8000406:	429e      	cmp	r6, r3
 8000408:	fa04 f402 	lsl.w	r4, r4, r2
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x260>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 38ff 	add.w	r8, r0, #4294967295
 8000416:	d22f      	bcs.n	8000478 <__udivmoddi4+0x2b8>
 8000418:	429e      	cmp	r6, r3
 800041a:	d92d      	bls.n	8000478 <__udivmoddi4+0x2b8>
 800041c:	3802      	subs	r0, #2
 800041e:	4463      	add	r3, ip
 8000420:	1b9b      	subs	r3, r3, r6
 8000422:	b289      	uxth	r1, r1
 8000424:	fbb3 f6f7 	udiv	r6, r3, r7
 8000428:	fb07 3316 	mls	r3, r7, r6, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb06 f30e 	mul.w	r3, r6, lr
 8000434:	428b      	cmp	r3, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x28a>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000440:	d216      	bcs.n	8000470 <__udivmoddi4+0x2b0>
 8000442:	428b      	cmp	r3, r1
 8000444:	d914      	bls.n	8000470 <__udivmoddi4+0x2b0>
 8000446:	3e02      	subs	r6, #2
 8000448:	4461      	add	r1, ip
 800044a:	1ac9      	subs	r1, r1, r3
 800044c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000450:	e738      	b.n	80002c4 <__udivmoddi4+0x104>
 8000452:	462e      	mov	r6, r5
 8000454:	4628      	mov	r0, r5
 8000456:	e705      	b.n	8000264 <__udivmoddi4+0xa4>
 8000458:	4606      	mov	r6, r0
 800045a:	e6e3      	b.n	8000224 <__udivmoddi4+0x64>
 800045c:	4618      	mov	r0, r3
 800045e:	e6f8      	b.n	8000252 <__udivmoddi4+0x92>
 8000460:	454b      	cmp	r3, r9
 8000462:	d2a9      	bcs.n	80003b8 <__udivmoddi4+0x1f8>
 8000464:	ebb9 0802 	subs.w	r8, r9, r2
 8000468:	eb64 0e0c 	sbc.w	lr, r4, ip
 800046c:	3801      	subs	r0, #1
 800046e:	e7a3      	b.n	80003b8 <__udivmoddi4+0x1f8>
 8000470:	4646      	mov	r6, r8
 8000472:	e7ea      	b.n	800044a <__udivmoddi4+0x28a>
 8000474:	4620      	mov	r0, r4
 8000476:	e794      	b.n	80003a2 <__udivmoddi4+0x1e2>
 8000478:	4640      	mov	r0, r8
 800047a:	e7d1      	b.n	8000420 <__udivmoddi4+0x260>
 800047c:	46d0      	mov	r8, sl
 800047e:	e77b      	b.n	8000378 <__udivmoddi4+0x1b8>
 8000480:	3b02      	subs	r3, #2
 8000482:	4461      	add	r1, ip
 8000484:	e732      	b.n	80002ec <__udivmoddi4+0x12c>
 8000486:	4630      	mov	r0, r6
 8000488:	e709      	b.n	800029e <__udivmoddi4+0xde>
 800048a:	4464      	add	r4, ip
 800048c:	3802      	subs	r0, #2
 800048e:	e742      	b.n	8000316 <__udivmoddi4+0x156>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <LedStartTimer>:

#include "led_effect.h"


void LedStartTimer(uint8_t n)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b085      	sub	sp, #20
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	LedEffectStop();
 800049e:	f000 f817 	bl	80004d0 <LedEffectStop>
	xTimerStart(hLedTimer[n-1], portMAX_DELAY);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	4a09      	ldr	r2, [pc, #36]	; (80004cc <LedStartTimer+0x38>)
 80004a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80004ac:	f006 fafe 	bl	8006aac <xTaskGetTickCount>
 80004b0:	4602      	mov	r2, r0
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	4620      	mov	r0, r4
 80004be:	f007 fa07 	bl	80078d0 <xTimerGenericCommand>


}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000118 	.word	0x20000118

080004d0 <LedEffectStop>:

void LedEffectStop(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af02      	add	r7, sp, #8
	for(uint8_t i = 0; i < 3 ; i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	e00e      	b.n	80004fa <LedEffectStop+0x2a>
		xTimerStop(hLedTimer[i],portMAX_DELAY);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <LedEffectStop+0x3c>)
 80004e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2103      	movs	r1, #3
 80004f0:	f007 f9ee 	bl	80078d0 <xTimerGenericCommand>
	for(uint8_t i = 0; i < 3 ; i++)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3301      	adds	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d9ed      	bls.n	80004dc <LedEffectStop+0xc>
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000118 	.word	0x20000118

08000510 <LedEffect1>:

void LedEffect1(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <LedEffect1+0x28>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	f083 0301 	eor.w	r3, r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LedEffect1+0x28>)
 8000520:	801a      	strh	r2, [r3, #0]
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <LedEffect1+0x28>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <LedEffect1+0x20>
 800052a:	f000 f889 	bl	8000640 <TurnOffAllLeds>
}
 800052e:	e001      	b.n	8000534 <LedEffect1+0x24>
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 8000530:	f000 f870 	bl	8000614 <TurnOnAllLeds>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000008 	.word	0x20000008

0800053c <LedEffect2>:

void LedEffect2(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	static uint16_t flag = 1;
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LedEffect2+0x28>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LedEffect2+0x28>)
 800054c:	801a      	strh	r2, [r3, #0]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LedEffect2+0x28>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <LedEffect2+0x20>
 8000556:	f000 f889 	bl	800066c <TurnOnOddLeds>
}
 800055a:	e001      	b.n	8000560 <LedEffect2+0x24>
	(flag ^= 1) ? TurnOnOddLeds() : TurnOnEvenLeds();
 800055c:	f000 f89c 	bl	8000698 <TurnOnEvenLeds>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000000a 	.word	0x2000000a

08000568 <LedEffect3>:

/* TODO: Try to fix the order of blinking. It starts blinking
 * with BLUE LED and goes in reverse direction. */

void LedEffect3(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	// 1 << 2 : 4	(0x4)
	// 1 << 3 : 8	(0x8)
	// 1 << 4 : 16	(0x10)
	// 1 << 5 : 32	(0x20)
	// 1 << 6 : 64	(0x40)
	LedControl( 0x1 << (i++ % 6) );
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <LedEffect3+0x58>)
 800056e:	881a      	ldrh	r2, [r3, #0]
 8000570:	1c53      	adds	r3, r2, #1
 8000572:	b299      	uxth	r1, r3
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <LedEffect3+0x58>)
 8000576:	8019      	strh	r1, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <LedEffect3+0x5c>)
 800057a:	fba3 1302 	umull	r1, r3, r3, r2
 800057e:	0899      	lsrs	r1, r3, #2
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	b29b      	uxth	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	2301      	movs	r3, #1
 8000590:	4093      	lsls	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f817 	bl	80005c8 <LedControl>

	if (i % 6 == 0)
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <LedEffect3+0x58>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <LedEffect3+0x5c>)
 80005a0:	fba3 1302 	umull	r1, r3, r3, r2
 80005a4:	0899      	lsrs	r1, r3, #2
 80005a6:	460b      	mov	r3, r1
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	440b      	add	r3, r1
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <LedEffect3+0x54>
	{
		// Reset i
		i = 0;
 80005b6:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <LedEffect3+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		// Do nothing.
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000040 	.word	0x20000040
 80005c4:	aaaaaaab 	.word	0xaaaaaaab

080005c8 <LedControl>:

void LedControl(uint8_t value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	for( uint8_t i = 0; i < 6; i++ )
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	e013      	b.n	8000600 <LedControl+0x38>
		HAL_GPIO_WritePin( GPIOB, ( BLUE_LED >> i), ((value >> i))& 0x1 );
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2220      	movs	r2, #32
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	b299      	uxth	r1, r3
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	fa42 f303 	asr.w	r3, r2, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <LedControl+0x48>)
 80005f6:	f001 fa2b 	bl	8001a50 <HAL_GPIO_WritePin>
	for( uint8_t i = 0; i < 6; i++ )
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	3301      	adds	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b05      	cmp	r3, #5
 8000604:	d9e8      	bls.n	80005d8 <LedControl+0x10>
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	48000400 	.word	0x48000400

08000614 <TurnOnAllLeds>:


void TurnOnAllLeds(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2120      	movs	r1, #32
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <TurnOnAllLeds+0x28>)
 800061e:	f001 fa17 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <TurnOnAllLeds+0x28>)
 8000628:	f001 fa12 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2101      	movs	r1, #1
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <TurnOnAllLeds+0x28>)
 8000632:	f001 fa0d 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	48000400 	.word	0x48000400

08000640 <TurnOffAllLeds>:

void TurnOffAllLeds(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <TurnOffAllLeds+0x28>)
 800064a:	f001 fa01 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <TurnOffAllLeds+0x28>)
 8000654:	f001 f9fc 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <TurnOffAllLeds+0x28>)
 800065e:	f001 f9f7 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	48000400 	.word	0x48000400

0800066c <TurnOnOddLeds>:

void TurnOnOddLeds(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <TurnOnOddLeds+0x28>)
 8000676:	f001 f9eb 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <TurnOnOddLeds+0x28>)
 8000680:	f001 f9e6 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2102      	movs	r1, #2
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <TurnOnOddLeds+0x28>)
 800068a:	f001 f9e1 	bl	8001a50 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	48000400 	.word	0x48000400

08000698 <TurnOnEvenLeds>:

void TurnOnEvenLeds(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2120      	movs	r1, #32
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <TurnOnEvenLeds+0x28>)
 80006a2:	f001 f9d5 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <TurnOnEvenLeds+0x28>)
 80006ac:	f001 f9d0 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TurnOnEvenLeds+0x28>)
 80006b6:	f001 f9cb 	bl	8001a50 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	48000400 	.word	0x48000400

080006c4 <LedEffectCbx>:

/* Timer callback function. It is called whenever a timer ends */
void LedEffectCbx(TimerHandle_t xTimer)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	uint32_t id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f007 fbdf 	bl	8007e90 <pvTimerGetTimerID>
 80006d2:	4603      	mov	r3, r0
 80006d4:	60fb      	str	r3, [r7, #12]

	switch(id)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d00f      	beq.n	80006fc <LedEffectCbx+0x38>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d80f      	bhi.n	8000702 <LedEffectCbx+0x3e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d003      	beq.n	80006f0 <LedEffectCbx+0x2c>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d003      	beq.n	80006f6 <LedEffectCbx+0x32>
	case LED_EFFECT3:
		LedEffect3();
		break;
	}

}
 80006ee:	e008      	b.n	8000702 <LedEffectCbx+0x3e>
		LedEffect1();
 80006f0:	f7ff ff0e 	bl	8000510 <LedEffect1>
		break;
 80006f4:	e005      	b.n	8000702 <LedEffectCbx+0x3e>
		LedEffect2();
 80006f6:	f7ff ff21 	bl	800053c <LedEffect2>
		break;
 80006fa:	e002      	b.n	8000702 <LedEffectCbx+0x3e>
		LedEffect3();
 80006fc:	f7ff ff34 	bl	8000568 <LedEffect3>
		break;
 8000700:	bf00      	nop
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800071a:	f023 0218 	bic.w	r2, r3, #24
 800071e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800073e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4313      	orrs	r3, r2
 800074c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b08b      	sub	sp, #44	; 0x2c
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fe1d 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8eb 	bl	800094c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000776:	f000 f93f 	bl	80009f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f9cd 	bl	8000b18 <MX_GPIO_Init>
  MX_RTC_Init();
 800077e:	f000 f959 	bl	8000a34 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000782:	f000 f97d 	bl	8000a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <main+0x194>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a5c      	ldr	r2, [pc, #368]	; (80008fc <main+0x194>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6013      	str	r3, [r2, #0]

  BaseType_t status;

  status = xTaskCreate(menuTask, "Menu-Task", 250, NULL, 2, &hMenu);
 8000792:	4b5b      	ldr	r3, [pc, #364]	; (8000900 <main+0x198>)
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	22fa      	movs	r2, #250	; 0xfa
 800079e:	4959      	ldr	r1, [pc, #356]	; (8000904 <main+0x19c>)
 80007a0:	4859      	ldr	r0, [pc, #356]	; (8000908 <main+0x1a0>)
 80007a2:	f005 ff41 	bl	8006628 <xTaskCreate>
 80007a6:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d00a      	beq.n	80007c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b2:	f383 8811 	msr	BASEPRI, r3
 80007b6:	f3bf 8f6f 	isb	sy
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007c0:	bf00      	nop
 80007c2:	e7fe      	b.n	80007c2 <main+0x5a>

  status = xTaskCreate(ledTask, "Led-Task", 250, NULL, 2, &hLed);
 80007c4:	4b51      	ldr	r3, [pc, #324]	; (800090c <main+0x1a4>)
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2302      	movs	r3, #2
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	22fa      	movs	r2, #250	; 0xfa
 80007d0:	494f      	ldr	r1, [pc, #316]	; (8000910 <main+0x1a8>)
 80007d2:	4850      	ldr	r0, [pc, #320]	; (8000914 <main+0x1ac>)
 80007d4:	f005 ff28 	bl	8006628 <xTaskCreate>
 80007d8:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d00a      	beq.n	80007f6 <main+0x8e>
        __asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	613b      	str	r3, [r7, #16]
    }
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <main+0x8c>

  //status = xTaskCreate(RTCTask, "RTC-Task", 250, NULL, 2, &hRTC);
  //configASSERT(status == pdPASS);

  status = xTaskCreate(printTask, "Print-Task", 250, NULL, 2, &hPrint);
 80007f6:	4b48      	ldr	r3, [pc, #288]	; (8000918 <main+0x1b0>)
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2302      	movs	r3, #2
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	22fa      	movs	r2, #250	; 0xfa
 8000802:	4946      	ldr	r1, [pc, #280]	; (800091c <main+0x1b4>)
 8000804:	4846      	ldr	r0, [pc, #280]	; (8000920 <main+0x1b8>)
 8000806:	f005 ff0f 	bl	8006628 <xTaskCreate>
 800080a:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d00a      	beq.n	8000828 <main+0xc0>
        __asm volatile
 8000812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000816:	f383 8811 	msr	BASEPRI, r3
 800081a:	f3bf 8f6f 	isb	sy
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	60fb      	str	r3, [r7, #12]
    }
 8000824:	bf00      	nop
 8000826:	e7fe      	b.n	8000826 <main+0xbe>

  status = xTaskCreate(commandTask, "Command-Task", 250, NULL, 2, &hCommand);
 8000828:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <main+0x1bc>)
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	2302      	movs	r3, #2
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	22fa      	movs	r2, #250	; 0xfa
 8000834:	493c      	ldr	r1, [pc, #240]	; (8000928 <main+0x1c0>)
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <main+0x1c4>)
 8000838:	f005 fef6 	bl	8006628 <xTaskCreate>
 800083c:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d00a      	beq.n	800085a <main+0xf2>
        __asm volatile
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	60bb      	str	r3, [r7, #8]
    }
 8000856:	bf00      	nop
 8000858:	e7fe      	b.n	8000858 <main+0xf0>

  hInputDataQueue = xQueueCreate(10, sizeof(char));
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	200a      	movs	r0, #10
 8000860:	f005 f996 	bl	8005b90 <xQueueGenericCreate>
 8000864:	4603      	mov	r3, r0
 8000866:	4a32      	ldr	r2, [pc, #200]	; (8000930 <main+0x1c8>)
 8000868:	6013      	str	r3, [r2, #0]
  configASSERT(hInputDataQueue != NULL);
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <main+0x1c8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10a      	bne.n	8000888 <main+0x120>
        __asm volatile
 8000872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000876:	f383 8811 	msr	BASEPRI, r3
 800087a:	f3bf 8f6f 	isb	sy
 800087e:	f3bf 8f4f 	dsb	sy
 8000882:	607b      	str	r3, [r7, #4]
    }
 8000884:	bf00      	nop
 8000886:	e7fe      	b.n	8000886 <main+0x11e>

  /* We pass a string (a reference to char) to the queue API
   * Since a pointer is unsigned long int we used sizeof(unsigned long int) */
  hPrintQueue = xQueueCreate(10, sizeof(size_t));
 8000888:	2200      	movs	r2, #0
 800088a:	2104      	movs	r1, #4
 800088c:	200a      	movs	r0, #10
 800088e:	f005 f97f 	bl	8005b90 <xQueueGenericCreate>
 8000892:	4603      	mov	r3, r0
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <main+0x1cc>)
 8000896:	6013      	str	r3, [r2, #0]
  configASSERT(hPrintQueue != NULL);
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <main+0x1cc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10a      	bne.n	80008b6 <main+0x14e>
        __asm volatile
 80008a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a4:	f383 8811 	msr	BASEPRI, r3
 80008a8:	f3bf 8f6f 	isb	sy
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	603b      	str	r3, [r7, #0]
    }
 80008b2:	bf00      	nop
 80008b4:	e7fe      	b.n	80008b4 <main+0x14c>

  // Create timers for LED effects
  for(uint8_t i = 0; i < 3; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	77fb      	strb	r3, [r7, #31]
 80008ba:	e013      	b.n	80008e4 <main+0x17c>
	  hLedTimer[i] = xTimerCreate("Led Timer",pdMS_TO_TICKS(500),pdTRUE,(void*)(i+1),LedEffectCbx);
 80008bc:	7ffb      	ldrb	r3, [r7, #31]
 80008be:	3301      	adds	r3, #1
 80008c0:	461a      	mov	r2, r3
 80008c2:	7ffc      	ldrb	r4, [r7, #31]
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <main+0x1d0>)
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <main+0x1d4>)
 80008d2:	f006 ffa1 	bl	8007818 <xTimerCreate>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <main+0x1d8>)
 80008da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(uint8_t i = 0; i < 3; i++)
 80008de:	7ffb      	ldrb	r3, [r7, #31]
 80008e0:	3301      	adds	r3, #1
 80008e2:	77fb      	strb	r3, [r7, #31]
 80008e4:	7ffb      	ldrb	r3, [r7, #31]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d9e8      	bls.n	80008bc <main+0x154>



  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 80008ea:	2201      	movs	r2, #1
 80008ec:	4915      	ldr	r1, [pc, #84]	; (8000944 <main+0x1dc>)
 80008ee:	4816      	ldr	r0, [pc, #88]	; (8000948 <main+0x1e0>)
 80008f0:	f003 f8be 	bl	8003a70 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80008f4:	f005 ffde 	bl	80068b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x190>
 80008fa:	bf00      	nop
 80008fc:	e0001000 	.word	0xe0001000
 8000900:	200000fc 	.word	0x200000fc
 8000904:	0800891c 	.word	0x0800891c
 8000908:	08000fdd 	.word	0x08000fdd
 800090c:	20000100 	.word	0x20000100
 8000910:	08008928 	.word	0x08008928
 8000914:	080010c5 	.word	0x080010c5
 8000918:	20000108 	.word	0x20000108
 800091c:	08008934 	.word	0x08008934
 8000920:	080011dd 	.word	0x080011dd
 8000924:	2000010c 	.word	0x2000010c
 8000928:	08008940 	.word	0x08008940
 800092c:	0800121d 	.word	0x0800121d
 8000930:	20000110 	.word	0x20000110
 8000934:	20000114 	.word	0x20000114
 8000938:	080006c5 	.word	0x080006c5
 800093c:	08008950 	.word	0x08008950
 8000940:	20000118 	.word	0x20000118
 8000944:	20000124 	.word	0x20000124
 8000948:	20000068 	.word	0x20000068

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b098      	sub	sp, #96	; 0x60
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2244      	movs	r2, #68	; 0x44
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 ffb6 	bl	80088cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000972:	f001 f885 	bl	8001a80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fec7 	bl	800070a <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800097c:	232f      	movs	r3, #47	; 0x2f
 800097e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000984:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009a0:	2305      	movs	r3, #5
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fbc5 	bl	800213c <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80009b8:	f000 f950 	bl	8000c5c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009bc:	236f      	movs	r3, #111	; 0x6f
 80009be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fee3 	bl	80027a8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009e8:	f000 f938 	bl	8000c5c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009ec:	f002 fbd5 	bl	800319a <HAL_RCCEx_EnableMSIPLLMode>
}
 80009f0:	bf00      	nop
 80009f2:	3760      	adds	r7, #96	; 0x60
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2230      	movs	r2, #48	; 0x30
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 ff61 	bl	80088cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a14:	2310      	movs	r3, #16
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fac7 	bl	8002fae <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a26:	f000 f919 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <MX_RTC_Init+0x48>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a46:	227f      	movs	r2, #127	; 0x7f
 8000a48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a4c:	22ff      	movs	r2, #255	; 0xff
 8000a4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_RTC_Init+0x44>)
 8000a64:	f002 fba0 	bl	80031a8 <HAL_RTC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a6e:	f000 f8f5 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	40002800 	.word	0x40002800

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART1_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aca:	f002 fef3 	bl	80038b4 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f8c2 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000adc:	f004 fe71 	bl	80057c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f8b9 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aee:	f004 fea6 	bl	800583e <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f8b0 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000afe:	f004 fe27 	bl	8005750 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f8a8 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000068 	.word	0x20000068
 8000b14:	40013800 	.word	0x40013800

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f7ff fe02 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fdff 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fdfc 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f7ff fdf9 	bl	8000736 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2123      	movs	r1, #35	; 0x23
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <MX_GPIO_Init+0x88>)
 8000b4a:	f000 ff81 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fe0d 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b66:	2323      	movs	r3, #35	; 0x23
 8000b68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <MX_GPIO_Init+0x88>)
 8000b7c:	f000 fe00 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b92:	f000 fdf5 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48001000 	.word	0x48001000

08000ba8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	BaseType_t isQueueFull;
	// return pdFALSE if the queue is not full, or pdTRUE if the queue is full.
	isQueueFull = xQueueIsQueueFullFromISR(hInputDataQueue);
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_UART_RxCpltCallback+0x80>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fcb2 	bl	800651e <xQueueIsQueueFullFromISR>
 8000bba:	60f8      	str	r0, [r7, #12]
	if(isQueueFull == pdFALSE)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d107      	bne.n	8000bd2 <HAL_UART_RxCpltCallback+0x2a>
	{
		/* Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_UART_RxCpltCallback+0x80>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4918      	ldr	r1, [pc, #96]	; (8000c2c <HAL_UART_RxCpltCallback+0x84>)
 8000bcc:	f005 f960 	bl	8005e90 <xQueueGenericSendFromISR>
 8000bd0:	e012      	b.n	8000bf8 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_UART_RxCpltCallback+0x84>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b0a      	cmp	r3, #10
 8000bd8:	d10e      	bne.n	8000bf8 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* make sure that last data byte of the queue is '\n' */
			// Copy the last received item to the queue into dummy and delete it
			xQueueReceiveFromISR(hInputDataQueue, (void*)&dummy, NULL);
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_UART_RxCpltCallback+0x80>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f107 010b 	add.w	r1, r7, #11
 8000be2:	2200      	movs	r2, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fadd 	bl	80061a4 <xQueueReceiveFromISR>

			// Keep '\n' on the back of the queue
			xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_UART_RxCpltCallback+0x80>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <HAL_UART_RxCpltCallback+0x84>)
 8000bf4:	f005 f94c 	bl	8005e90 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
			if(user_data == '\n')
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_UART_RxCpltCallback+0x84>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b0a      	cmp	r3, #10
 8000bfe:	d10a      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x6e>
			{
				xTaskNotifyFromISR(hCommand,0,eNoAction,NULL);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_UART_RxCpltCallback+0x88>)
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	f006 fc5f 	bl	80074d4 <xTaskGenericNotifyFromISR>
			}



	/* Enable UART data byte reception again in IT mode */
	  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 8000c16:	2201      	movs	r2, #1
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <HAL_UART_RxCpltCallback+0x84>)
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_UART_RxCpltCallback+0x8c>)
 8000c1c:	f002 ff28 	bl	8003a70 <HAL_UART_Receive_IT>



}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000110 	.word	0x20000110
 8000c2c:	20000124 	.word	0x20000124
 8000c30:	2000010c 	.word	0x2000010c
 8000c34:	20000068 	.word	0x20000068

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 fbcf 	bl	80013ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40012c00 	.word	0x40012c00

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>

08000c66 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_AHB2_GRP1_EnableClock>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cac:	68fb      	ldr	r3, [r7, #12]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d10:	68fb      	ldr	r3, [r7, #12]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8000d22:	f007 fa01 	bl	8008128 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2230      	movs	r2, #48	; 0x30
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 fdc5 	bl	80088cc <memset>
  if(hrtc->Instance==RTC)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_RTC_MspInit+0x54>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d115      	bne.n	8000d78 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 f926 	bl	8002fae <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d68:	f7ff ff78 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d6c:	f7ff ff7b 	bl	8000c66 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d74:	f7ff ffa1 	bl	8000cba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	; 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40002800 	.word	0x40002800

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2230      	movs	r2, #48	; 0x30
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f007 fd91 	bl	80088cc <memset>
  if(huart->Instance==USART1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <HAL_UART_MspInit+0x98>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d12e      	bne.n	8000e12 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f8f4 	bl	8002fae <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff ff46 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dd4:	f7ff ff8a 	bl	8000cec <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff55 	bl	8000c88 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df0:	2307      	movs	r3, #7
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f000 fcbf 	bl	8001780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2106      	movs	r1, #6
 8000e06:	2024      	movs	r0, #36	; 0x24
 8000e08:	f000 fbd4 	bl	80015b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0c:	2024      	movs	r0, #36	; 0x24
 8000e0e:	f000 fbeb 	bl	80015e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40013800 	.word	0x40013800

08000e20 <LL_APB2_GRP1_EnableClock>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2019      	movs	r0, #25
 8000e6a:	f000 fba3 	bl	80015b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e6e:	2019      	movs	r0, #25
 8000e70:	f000 fbba 	bl	80015e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e78:	f7ff ffd2 	bl	8000e20 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7c:	f107 0208 	add.w	r2, r7, #8
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fe7a 	bl	8002b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e8c:	f001 fe62 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8000e90:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_InitTick+0x8c>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	0c9b      	lsrs	r3, r3, #18
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_InitTick+0x90>)
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <HAL_InitTick+0x94>)
 8000ea4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_InitTick+0x90>)
 8000ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_InitTick+0x90>)
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_InitTick+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_InitTick+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <HAL_InitTick+0x90>)
 8000ec2:	f002 fa71 	bl	80033a8 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d104      	bne.n	8000ed6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_InitTick+0x90>)
 8000ece:	f002 facd 	bl	800346c <HAL_TIM_Base_Start_IT>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3730      	adds	r7, #48	; 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	20000128 	.word	0x20000128
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM1_UP_IRQHandler+0x10>)
 8000f1e:	f002 faf3 	bl	8003508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000128 	.word	0x20000128

08000f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART1_IRQHandler+0x10>)
 8000f32:	f002 fde9 	bl	8003b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000068 	.word	0x20000068

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemInit+0x90>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemInit+0x90>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <SystemInit+0x94>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f8a:	f023 0305 	bic.w	r3, r3, #5
 8000f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <SystemInit+0x98>)
 8000fac:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	faf6fefb 	.word	0xfaf6fefb
 8000fd8:	22041000 	.word	0x22041000

08000fdc <menuTask>:
State_t currentProgramState = sMainMenu;

const char* invalid_message = "~~Invalid Message~~\n";

void menuTask(void* parameters)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	int8_t option;

	const char* entry_message = "======================\n"
 8000fe4:	4b31      	ldr	r3, [pc, #196]	; (80010ac <menuTask+0xd0>)
 8000fe6:	60bb      	str	r3, [r7, #8]
									"DATE & TIME	--->	1\n"
									"EXIT	--->	2\n"
									"ENTER YOUR CHOICE HERE... : ";
	while(1)
	{
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <menuTask+0xd4>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 0108 	add.w	r1, r7, #8
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff6:	f004 fe4d 	bl	8005c94 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f006 f8f7 	bl	80071fc <xTaskGenericNotifyWait>

		// Wait for menu commands
		command = (Command_t*)command_adr;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	617b      	str	r3, [r7, #20]
		if(command -> len == 1)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	7a9b      	ldrb	r3, [r3, #10]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d133      	bne.n	8001082 <menuTask+0xa6>
		{
			// Converting ASCII to number by subtracting 48
			option = command->payload[0] - 48;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3b30      	subs	r3, #48	; 0x30
 8001020:	b2db      	uxtb	r3, r3
 8001022:	74fb      	strb	r3, [r7, #19]

			switch(option)
 8001024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d033      	beq.n	8001094 <menuTask+0xb8>
 800102c:	2b02      	cmp	r3, #2
 800102e:	dc1e      	bgt.n	800106e <menuTask+0x92>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <menuTask+0x5e>
 8001034:	2b01      	cmp	r3, #1
 8001036:	d00d      	beq.n	8001054 <menuTask+0x78>
 8001038:	e019      	b.n	800106e <menuTask+0x92>
			{
			case LED_EFFECT:
				currentProgramState = sLedEffect;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <menuTask+0xd8>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hLed,0,eNoAction);
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <menuTask+0xdc>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	f006 f959 	bl	8007304 <xTaskGenericNotify>
				break;
 8001052:	e020      	b.n	8001096 <menuTask+0xba>
			case DATE_TIME:
				currentProgramState = sRtcMenu;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <menuTask+0xd8>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hRTC,0,eNoAction);
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <menuTask+0xe0>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	f006 f94c 	bl	8007304 <xTaskGenericNotify>
				break;
 800106c:	e013      	b.n	8001096 <menuTask+0xba>
			case EXIT_MENU:
				/* Todo: implement exit */
				break;
			default:
				xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <menuTask+0xd4>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f107 0108 	add.w	r1, r7, #8
 8001076:	2300      	movs	r3, #0
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	f004 fe0a 	bl	8005c94 <xQueueGenericSend>
				continue;
 8001080:	e012      	b.n	80010a8 <menuTask+0xcc>
			}
		}
		else
		{
			// Invalid entry
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <menuTask+0xd4>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <menuTask+0xe4>)
 800108e:	f004 fe01 	bl	8005c94 <xQueueGenericSend>
			continue;
 8001092:	e009      	b.n	80010a8 <menuTask+0xcc>
				break;
 8001094:	bf00      	nop
		}

		// Wait to run again when some other task notifies menu task.
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2300      	movs	r3, #0
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2000      	movs	r0, #0
 80010a4:	f006 f8aa 	bl	80071fc <xTaskGenericNotifyWait>
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 80010a8:	e79e      	b.n	8000fe8 <menuTask+0xc>
 80010aa:	bf00      	nop
 80010ac:	08008974 	.word	0x08008974
 80010b0:	20000114 	.word	0x20000114
 80010b4:	20000174 	.word	0x20000174
 80010b8:	20000100 	.word	0x20000100
 80010bc:	20000104 	.word	0x20000104
 80010c0:	20000010 	.word	0x20000010

080010c4 <ledTask>:
	} // End of while loop

}

void ledTask(void* parameters)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	const char* led_message = 	"=====================\n"
 80010cc:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <ledTask+0xf4>)
 80010ce:	60fb      	str	r3, [r7, #12]
								"OPTIONS: Please type none, e1, e2 or e3.\n"
								"ENTER YOUR CHOICE HERE... :\n ";
	while(1)
	{
		/* Wait for notification */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2000      	movs	r0, #0
 80010de:	f006 f88d 	bl	80071fc <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(hPrintQueue,&led_message,portMAX_DELAY);
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <ledTask+0xf8>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f107 010c 	add.w	r1, r7, #12
 80010ea:	2300      	movs	r3, #0
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	f004 fdd0 	bl	8005c94 <xQueueGenericSend>

		/* Wait for LED commands */
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f006 f87a 	bl	80071fc <xTaskGenericNotifyWait>

		command = (Command_t*)command_adr;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	617b      	str	r3, [r7, #20]

		if( (command->len) <= 4)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	7a9b      	ldrb	r3, [r3, #10]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d83b      	bhi.n	800118c <ledTask+0xc8>
		{
			if(! strncmp((char*)command->payload, "none", strlen("none")) )
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2204      	movs	r2, #4
 8001118:	4929      	ldr	r1, [pc, #164]	; (80011c0 <ledTask+0xfc>)
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fbde 	bl	80088dc <strncmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <ledTask+0x68>
				LedEffectStop();
 8001126:	f7ff f9d3 	bl	80004d0 <LedEffectStop>
 800112a:	e037      	b.n	800119c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e1", strlen("e1")) )
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2202      	movs	r2, #2
 8001130:	4924      	ldr	r1, [pc, #144]	; (80011c4 <ledTask+0x100>)
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fbd2 	bl	80088dc <strncmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d103      	bne.n	8001146 <ledTask+0x82>
				LedStartTimer(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff f9a8 	bl	8000494 <LedStartTimer>
 8001144:	e02a      	b.n	800119c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e2", strlen("e2")) )
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2202      	movs	r2, #2
 800114a:	491f      	ldr	r1, [pc, #124]	; (80011c8 <ledTask+0x104>)
 800114c:	4618      	mov	r0, r3
 800114e:	f007 fbc5 	bl	80088dc <strncmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <ledTask+0x9c>
				LedStartTimer(2);
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff f99b 	bl	8000494 <LedStartTimer>
 800115e:	e01d      	b.n	800119c <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e3", strlen("e3")) )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2202      	movs	r2, #2
 8001164:	4919      	ldr	r1, [pc, #100]	; (80011cc <ledTask+0x108>)
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fbb8 	bl	80088dc <strncmp>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <ledTask+0xb6>
				LedStartTimer(3);
 8001172:	2003      	movs	r0, #3
 8001174:	f7ff f98e 	bl	8000494 <LedStartTimer>
 8001178:	e010      	b.n	800119c <ledTask+0xd8>
			else
				// Print invalid message
				xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <ledTask+0xf8>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	4912      	ldr	r1, [pc, #72]	; (80011d0 <ledTask+0x10c>)
 8001186:	f004 fd85 	bl	8005c94 <xQueueGenericSend>
 800118a:	e007      	b.n	800119c <ledTask+0xd8>
		}
		else
			// Print invalid message
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <ledTask+0xf8>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	490e      	ldr	r1, [pc, #56]	; (80011d0 <ledTask+0x10c>)
 8001198:	f004 fd7c 	bl	8005c94 <xQueueGenericSend>

		// Update the state variable
		currentProgramState = sMainMenu;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <ledTask+0x110>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]

		// Notify menu task
		xTaskNotify(hMenu,0,eNoAction);
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <ledTask+0x114>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	f006 f8a8 	bl	8007304 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011b4:	e78c      	b.n	80010d0 <ledTask+0xc>
 80011b6:	bf00      	nop
 80011b8:	080089fc 	.word	0x080089fc
 80011bc:	20000114 	.word	0x20000114
 80011c0:	08008a80 	.word	0x08008a80
 80011c4:	08008a88 	.word	0x08008a88
 80011c8:	08008a8c 	.word	0x08008a8c
 80011cc:	08008a90 	.word	0x08008a90
 80011d0:	20000010 	.word	0x20000010
 80011d4:	20000174 	.word	0x20000174
 80011d8:	200000fc 	.word	0x200000fc

080011dc <printTask>:

	}
}

void printTask(void* parameters)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint32_t* message;
	while(1)
	{
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <printTask+0x38>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fef7 	bl	8005fe4 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen((char*)message), HAL_MAX_DELAY);
 80011f6:	68fc      	ldr	r4, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7fe ffc0 	bl	8000180 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	4621      	mov	r1, r4
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <printTask+0x3c>)
 800120c:	f002 fba2 	bl	8003954 <HAL_UART_Transmit>
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 8001210:	e7e8      	b.n	80011e4 <printTask+0x8>
 8001212:	bf00      	nop
 8001214:	20000114 	.word	0x20000114
 8001218:	20000068 	.word	0x20000068

0800121c <commandTask>:
	}
}

 void commandTask(void* parameters)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	 //const TickType_t xFrequency = pdMS_TO_TICKS(1000);
	 Command_t command;
		while(1)
		{
			/* Implement notify wait */
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f005 ffe3 	bl	80071fc <xTaskGenericNotifyWait>
 8001236:	6178      	str	r0, [r7, #20]
			if(status == pdTRUE)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d1f2      	bne.n	8001224 <commandTask+0x8>
			{
				/* Process the user data(command) stored in input data queue */
				/* Notify the command to relevant task */
				processCommand(&command);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f802 	bl	800124c <processCommand>
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001248:	e7ec      	b.n	8001224 <commandTask+0x8>
	...

0800124c <processCommand>:
/* The notification value of the target task is
 * unconditionally set to ulValue when eSetValueWithOverwrite
 * is used.   */

 void processCommand(Command_t* command)
 {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	 /* Extract the data bytes from the input data queue and form a command */
	 extract_command(command);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f835 	bl	80012c4 <extract_command>

	 switch(currentProgramState)
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <processCommand+0x68>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	dc24      	bgt.n	80012ac <processCommand+0x60>
 8001262:	2b02      	cmp	r3, #2
 8001264:	da18      	bge.n	8001298 <processCommand+0x4c>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <processCommand+0x24>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d00a      	beq.n	8001284 <processCommand+0x38>
		 /* Notify RTC task with the command */
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
		 break;

	 }
 }
 800126e:	e01d      	b.n	80012ac <processCommand+0x60>
		 xTaskNotify(hMenu, (uint32_t)command, eSetValueWithOverwrite);
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <processCommand+0x6c>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2303      	movs	r3, #3
 800127c:	2100      	movs	r1, #0
 800127e:	f006 f841 	bl	8007304 <xTaskGenericNotify>
		 break;
 8001282:	e013      	b.n	80012ac <processCommand+0x60>
		 xTaskNotify(hLed, (uint32_t)command, eSetValueWithOverwrite);
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <processCommand+0x70>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2303      	movs	r3, #3
 8001290:	2100      	movs	r1, #0
 8001292:	f006 f837 	bl	8007304 <xTaskGenericNotify>
		 break;
 8001296:	e009      	b.n	80012ac <processCommand+0x60>
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <processCommand+0x74>)
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2303      	movs	r3, #3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f006 f82d 	bl	8007304 <xTaskGenericNotify>
		 break;
 80012aa:	bf00      	nop
 }
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000174 	.word	0x20000174
 80012b8:	200000fc 	.word	0x200000fc
 80012bc:	20000100 	.word	0x20000100
 80012c0:	20000104 	.word	0x20000104

080012c4 <extract_command>:

 int extract_command(Command_t* command)
 {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	 uint8_t item;
	 BaseType_t status;

	 // Return the number of messages stored in a queue.
	 status = uxQueueMessagesWaiting(hInputDataQueue);
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <extract_command+0x70>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fff6 	bl	80062c2 <uxQueueMessagesWaiting>
 80012d6:	4603      	mov	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]
	 if(!status) return -1;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <extract_command+0x22>
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	e022      	b.n	800132c <extract_command+0x68>

	 uint8_t i = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
	 do
	 {
		 // Received item into the hInputDataQueue will be copied to item buffer.
		 status = xQueueReceive(hInputDataQueue, (void*)&item, 0);
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <extract_command+0x70>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f107 010f 	add.w	r1, r7, #15
 80012f2:	2200      	movs	r2, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fe75 	bl	8005fe4 <xQueueReceive>
 80012fa:	6138      	str	r0, [r7, #16]
		 if(status == pdTRUE) command -> payload[i++] = item;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <extract_command+0x4c>
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	75fa      	strb	r2, [r7, #23]
 8001308:	461a      	mov	r2, r3
 800130a:	7bf9      	ldrb	r1, [r7, #15]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	5499      	strb	r1, [r3, r2]
	 }while(item != '\n');
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d1e9      	bne.n	80012ea <extract_command+0x26>

	 command -> payload[i-1] = '\0';
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	3b01      	subs	r3, #1
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	2100      	movs	r1, #0
 800131e:	54d1      	strb	r1, [r2, r3]
	 command -> len = i-1; /* Save length of the command excluding null char */
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	3b01      	subs	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	729a      	strb	r2, [r3, #10]

	 return 0;
 800132a:	2300      	movs	r3, #0
 }
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000110 	.word	0x20000110

08001338 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001338:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133c:	3304      	adds	r3, #4

0800133e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001340:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001342:	d3f9      	bcc.n	8001338 <CopyDataInit>
  bx lr
 8001344:	4770      	bx	lr

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001346:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001348:	3004      	adds	r0, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800134a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>
  bx lr
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001354:	f7ff fdf4 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopForever+0x6>)
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <LoopForever+0xa>)
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <LoopForever+0xe>)
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff ffed 	bl	800133e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <LoopForever+0x12>)
 8001366:	490c      	ldr	r1, [pc, #48]	; (8001398 <LoopForever+0x16>)
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <LoopForever+0x1a>)
 800136a:	2300      	movs	r3, #0
 800136c:	f7ff ffe7 	bl	800133e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopForever+0x1e>)
 8001372:	490c      	ldr	r1, [pc, #48]	; (80013a4 <LoopForever+0x22>)
 8001374:	2300      	movs	r3, #0
 8001376:	f7ff ffe8 	bl	800134a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137a:	f007 fa75 	bl	8008868 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800137e:	f7ff f9f3 	bl	8000768 <main>

08001382 <LoopForever>:

LoopForever:
  b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001388:	20000008 	.word	0x20000008
 800138c:	20000024 	.word	0x20000024
 8001390:	08008ba4 	.word	0x08008ba4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001394:	20030000 	.word	0x20030000
 8001398:	20030000 	.word	0x20030000
 800139c:	08008bc0 	.word	0x08008bc0
  INIT_BSS _sbss, _ebss
 80013a0:	20000024 	.word	0x20000024
 80013a4:	20002324 	.word	0x20002324

080013a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_Init+0x3c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_Init+0x3c>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f8eb 	bl	800159e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff fd43 	bl	8000e54 <HAL_InitTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	e001      	b.n	80013de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013da:	f7ff fca0 	bl	8000d1e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013de:	79fb      	ldrb	r3, [r7, #7]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58004000 	.word	0x58004000

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000018 	.word	0x20000018
 8001410:	20000178 	.word	0x20000178

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000178 	.word	0x20000178

0800142c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTickPrio+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000014 	.word	0x20000014

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff4c 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c2:	f7ff ff63 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f7ff ffb3 	bl	8001538 <NVIC_EncodePriority>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff82 	bl	80014e4 <__NVIC_SetPriority>
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff56 	bl	80014a8 <__NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e04f      	b.n	80016b6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d008      	beq.n	8001634 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e040      	b.n	80016b6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020e 	bic.w	r2, r2, #14
 8001642:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021c 	and.w	r2, r3, #28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001680:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d005      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2204      	movs	r2, #4
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e047      	b.n	8001776 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 020e 	bic.w	r2, r2, #14
 80016f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 021c 	and.w	r2, r3, #28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001732:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800174a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001754:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    }
  }
  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e146      	b.n	8001a1e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8138 	beq.w	8001a18 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_GPIO_Init+0x40>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 0201 	and.w	r2, r3, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b03      	cmp	r3, #3
 800182c:	d017      	beq.n	800185e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d123      	bne.n	80018b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	6939      	ldr	r1, [r7, #16]
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0203 	and.w	r2, r3, #3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8092 	beq.w	8001a18 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018f4:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x2bc>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1c8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_GPIO_Init+0x2c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1c4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <HAL_GPIO_Init+0x2c4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1c0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1bc>
 8001938:	2304      	movs	r3, #4
 800193a:	e006      	b.n	800194a <HAL_GPIO_Init+0x1ca>
 800193c:	2307      	movs	r3, #7
 800193e:	e004      	b.n	800194a <HAL_GPIO_Init+0x1ca>
 8001940:	2302      	movs	r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x1ca>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_GPIO_Init+0x1ca>
 8001948:	2300      	movs	r3, #0
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	f002 0203 	and.w	r2, r2, #3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	4093      	lsls	r3, r2
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195a:	4938      	ldr	r1, [pc, #224]	; (8001a3c <HAL_GPIO_Init+0x2bc>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e2:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80019ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f aeb1 	bne.w	8001790 <HAL_GPIO_Init+0x10>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	58000800 	.word	0x58000800

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	58000400 	.word	0x58000400

08001aa0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab2:	d101      	bne.n	8001ab8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_HSE_Enable>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_RCC_HSE_Disable>:
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_HSE_IsReady>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b12:	d101      	bne.n	8001b18 <LL_RCC_HSE_IsReady+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_RCC_HSE_IsReady+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_RCC_HSI_Enable>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_RCC_HSI_Disable>:
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_HSI_IsReady>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	d101      	bne.n	8001b78 <LL_RCC_HSI_IsReady+0x18>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <LL_RCC_HSI_IsReady+0x1a>
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_RCC_LSE_Enable>:
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_LSE_Disable>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_LSE_EnableBypass>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_RCC_LSE_DisableBypass>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_LSE_IsReady>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d101      	bne.n	8001c4e <LL_RCC_LSE_IsReady+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_RCC_LSE_IsReady+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_RCC_LSI1_Enable>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_LSI1_Disable>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_RCC_LSI1_IsReady>:
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d101      	bne.n	8001cb6 <LL_RCC_LSI1_IsReady+0x18>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_RCC_LSI1_IsReady+0x1a>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_RCC_LSI2_Enable>:
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_RCC_LSI2_Disable>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_LSI2_IsReady>:
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d101      	bne.n	8001d1e <LL_RCC_LSI2_IsReady+0x18>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_RCC_LSI2_IsReady+0x1a>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_RCC_LSI2_SetTrimming>:
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_MSI_Enable>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_MSI_Disable>:
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_MSI_IsReady>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d101      	bne.n	8001daa <LL_RCC_MSI_IsReady+0x16>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_RCC_MSI_IsReady+0x18>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_MSI_SetRange>:
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_RCC_MSI_GetRange>:
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2bb0      	cmp	r3, #176	; 0xb0
 8001df4:	d901      	bls.n	8001dfa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001df6:	23b0      	movs	r3, #176	; 0xb0
 8001df8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_SetSysClkSource>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 0203 	bic.w	r2, r3, #3
 8001e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_GetSysClkSource>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030c 	and.w	r3, r3, #12
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_RCC_SetAHBPrescaler>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_SetAHB4Prescaler>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_SetAPB1Prescaler>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_SetAPB2Prescaler>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_GetAHBPrescaler>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_C2_RCC_GetAHBPrescaler>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_GetAHB4Prescaler>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_GetAPB1Prescaler>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_GetAPB2Prescaler>:
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002010:	d101      	bne.n	8002016 <LL_RCC_PLL_IsReady+0x18>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_RCC_PLL_IsReady+0x1a>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d101      	bne.n	800209c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020bc:	d101      	bne.n	80020c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d101      	bne.n	80020e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002106:	d101      	bne.n	800210c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800212a:	d101      	bne.n	8002130 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08d      	sub	sp, #52	; 0x34
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e324      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 808d 	beq.w	8002276 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215c:	f7ff fe7d 	bl	8001e5a <LL_RCC_GetSysClkSource>
 8002160:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002162:	f7ff ff83 	bl	800206c <LL_RCC_PLL_GetMainSource>
 8002166:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x3e>
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d147      	bne.n	8002204 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2b01      	cmp	r3, #1
 8002178:	d144      	bne.n	8002204 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e308      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800218a:	f7ff fe28 	bl	8001dde <LL_RCC_MSI_GetRange>
 800218e:	4603      	mov	r3, r0
 8002190:	429c      	cmp	r4, r3
 8002192:	d914      	bls.n	80021be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fd23 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e2f7      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fe02 	bl	8001db6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe26 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>
 80021bc:	e013      	b.n	80021e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fdf7 	bl	8001db6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe1b 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd04 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e2d8      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021e6:	f000 fc8b 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4aa4      	ldr	r2, [pc, #656]	; (8002480 <HAL_RCC_OscConfig+0x344>)
 80021ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021f0:	4ba4      	ldr	r3, [pc, #656]	; (8002484 <HAL_RCC_OscConfig+0x348>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fe2d 	bl	8000e54 <HAL_InitTick>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d039      	beq.n	8002274 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e2c9      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220c:	f7ff fda4 	bl	8001d58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002210:	f7ff f900 	bl	8001414 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7ff f8fc 	bl	8001414 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2b6      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800222a:	f7ff fdb3 	bl	8001d94 <LL_RCC_MSI_IsReady>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f1      	beq.n	8002218 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdbc 	bl	8001db6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fde0 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800224a:	f7ff fd94 	bl	8001d76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800224e:	f7ff f8e1 	bl	8001414 <HAL_GetTick>
 8002252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002256:	f7ff f8dd 	bl	8001414 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e297      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002268:	f7ff fd94 	bl	8001d94 <LL_RCC_MSI_IsReady>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f1      	bne.n	8002256 <HAL_RCC_OscConfig+0x11a>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002274:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d047      	beq.n	8002312 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002282:	f7ff fdea 	bl	8001e5a <LL_RCC_GetSysClkSource>
 8002286:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	f7ff fef0 	bl	800206c <LL_RCC_PLL_GetMainSource>
 800228c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x164>
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d134      	bne.n	8002312 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e275      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x180>
 80022b6:	f7ff fc05 	bl	8001ac4 <LL_RCC_HSE_Enable>
 80022ba:	e001      	b.n	80022c0 <HAL_RCC_OscConfig+0x184>
 80022bc:	f7ff fc11 	bl	8001ae2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f8a4 	bl	8001414 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff f8a0 	bl	8001414 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e25a      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022e2:	f7ff fc0d 	bl	8001b00 <LL_RCC_HSE_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x194>
 80022ec:	e011      	b.n	8002312 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff f891 	bl	8001414 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f6:	f7ff f88d 	bl	8001414 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e247      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002308:	f7ff fbfa 	bl	8001b00 <LL_RCC_HSE_IsReady>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	f7ff fd9c 	bl	8001e5a <LL_RCC_GetSysClkSource>
 8002322:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	f7ff fea2 	bl	800206c <LL_RCC_PLL_GetMainSource>
 8002328:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d10e      	bne.n	8002354 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e227      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fc19 	bl	8001b84 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002352:	e031      	b.n	80023b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	f7ff fbe2 	bl	8001b24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f858 	bl	8001414 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff f854 	bl	8001414 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e20e      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800237a:	f7ff fbf1 	bl	8001b60 <LL_RCC_HSI_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fbfb 	bl	8001b84 <LL_RCC_HSI_SetCalibTrimming>
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	f7ff fbd7 	bl	8001b42 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f83e 	bl	8001414 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff f83a 	bl	8001414 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1f4      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023ae:	f7ff fbd7 	bl	8001b60 <LL_RCC_HSI_IsReady>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f1      	bne.n	800239c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a3 	beq.w	8002518 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d076      	beq.n	80024c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d046      	beq.n	8002474 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80023e6:	f7ff fc5a 	bl	8001c9e <LL_RCC_LSI1_IsReady>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80023f0:	f7ff fc33 	bl	8001c5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f4:	f7ff f80e 	bl	8001414 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023fc:	f7ff f80a 	bl	8001414 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1c4      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800240e:	f7ff fc46 	bl	8001c9e <LL_RCC_LSI1_IsReady>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002418:	f7ff fc53 	bl	8001cc2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fffa 	bl	8001414 <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002424:	f7fe fff6 	bl	8001414 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1b0      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002436:	f7ff fc66 	bl	8001d06 <LL_RCC_LSI2_IsReady>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc70 	bl	8001d2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800244a:	f7ff fc17 	bl	8001c7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe ffe1 	bl	8001414 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002456:	f7fe ffdd 	bl	8001414 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e197      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002468:	f7ff fc19 	bl	8001c9e <LL_RCC_LSI1_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f1      	bne.n	8002456 <HAL_RCC_OscConfig+0x31a>
 8002472:	e051      	b.n	8002518 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002474:	f7ff fbf1 	bl	8001c5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe ffcc 	bl	8001414 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800247e:	e00c      	b.n	800249a <HAL_RCC_OscConfig+0x35e>
 8002480:	2000000c 	.word	0x2000000c
 8002484:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002488:	f7fe ffc4 	bl	8001414 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e17e      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800249a:	f7ff fc00 	bl	8001c9e <LL_RCC_LSI1_IsReady>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f1      	beq.n	8002488 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024a4:	f7ff fc1e 	bl	8001ce4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024aa:	f7fe ffb3 	bl	8001414 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e16d      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024bc:	f7ff fc23 	bl	8001d06 <LL_RCC_LSI2_IsReady>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f1      	bne.n	80024aa <HAL_RCC_OscConfig+0x36e>
 80024c6:	e027      	b.n	8002518 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80024c8:	f7ff fc0c 	bl	8001ce4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe ffa2 	bl	8001414 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024d4:	f7fe ff9e 	bl	8001414 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e158      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80024e6:	f7ff fc0e 	bl	8001d06 <LL_RCC_LSI2_IsReady>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f1      	bne.n	80024d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80024f0:	f7ff fbc4 	bl	8001c7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe ff8e 	bl	8001414 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024fc:	f7fe ff8a 	bl	8001414 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e144      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800250e:	f7ff fbc6 	bl	8001c9e <LL_RCC_LSI1_IsReady>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f1      	bne.n	80024fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b9e      	ldr	r3, [pc, #632]	; (80027a0 <HAL_RCC_OscConfig+0x664>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d114      	bne.n	800255a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002530:	f7ff faa6 	bl	8001a80 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002534:	f7fe ff6e 	bl	8001414 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe ff6a 	bl	8001414 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e124      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	4b94      	ldr	r3, [pc, #592]	; (80027a0 <HAL_RCC_OscConfig+0x664>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x42c>
 8002562:	f7ff fb24 	bl	8001bae <LL_RCC_LSE_Enable>
 8002566:	e00c      	b.n	8002582 <HAL_RCC_OscConfig+0x446>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d104      	bne.n	800257a <HAL_RCC_OscConfig+0x43e>
 8002570:	f7ff fb3f 	bl	8001bf2 <LL_RCC_LSE_EnableBypass>
 8002574:	f7ff fb1b 	bl	8001bae <LL_RCC_LSE_Enable>
 8002578:	e003      	b.n	8002582 <HAL_RCC_OscConfig+0x446>
 800257a:	f7ff fb29 	bl	8001bd0 <LL_RCC_LSE_Disable>
 800257e:	f7ff fb49 	bl	8001c14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe ff43 	bl	8001414 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe ff3f 	bl	8001414 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0f7      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025a8:	f7ff fb45 	bl	8001c36 <LL_RCC_LSE_IsReady>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <HAL_RCC_OscConfig+0x456>
 80025b2:	e013      	b.n	80025dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe ff2e 	bl	8001414 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe ff2a 	bl	8001414 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0e2      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80025d2:	f7ff fb30 	bl	8001c36 <LL_RCC_LSE_IsReady>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ef      	bne.n	80025bc <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80d8 	beq.w	8002796 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	f7ff fc38 	bl	8001e5a <LL_RCC_GetSysClkSource>
 80025ea:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f040 80a6 	bne.w	800274a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	429a      	cmp	r2, r3
 800260a:	d123      	bne.n	8002654 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d114      	bne.n	8002654 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d10d      	bne.n	8002654 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d054      	beq.n	80026fe <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d04f      	beq.n	80026fa <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800265a:	f7ff fcc1 	bl	8001fe0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800265e:	f7fe fed9 	bl	8001414 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fed5 	bl	8001414 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e08f      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b45      	ldr	r3, [pc, #276]	; (80027a4 <HAL_RCC_OscConfig+0x668>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800269e:	0212      	lsls	r2, r2, #8
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026b2:	430a      	orrs	r2, r1
 80026b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026bc:	f7ff fc81 	bl	8001fc2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d0:	f7fe fea0 	bl	8001414 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fe9c 	bl	8001414 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e056      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	e04d      	b.n	8002796 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e04c      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d144      	bne.n	8002796 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800270c:	f7ff fc59 	bl	8001fc2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7fe fe78 	bl	8001414 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fe74 	bl	8001414 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e02e      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <HAL_RCC_OscConfig+0x5ec>
 8002748:	e025      	b.n	8002796 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	f7ff fc46 	bl	8001fe0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe5e 	bl	8001414 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fe5a 	bl	8001414 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ef      	bne.n	800275c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e001      	b.n	8002796 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3734      	adds	r7, #52	; 0x34
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	58000400 	.word	0x58000400
 80027a4:	11c1808c 	.word	0x11c1808c

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e12d      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b98      	ldr	r3, [pc, #608]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d91b      	bls.n	8002802 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b95      	ldr	r3, [pc, #596]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4993      	ldr	r1, [pc, #588]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027da:	f7fe fe1b 	bl	8001414 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027e2:	f7fe fe17 	bl	8001414 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e111      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f4:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d1ef      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fb2d 	bl	8001e72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002818:	f7fe fdfc 	bl	8001414 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002820:	f7fe fdf8 	bl	8001414 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0f2      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002832:	f7ff fc27 	bl	8002084 <LL_RCC_IsActiveFlag_HPRE>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f1      	beq.n	8002820 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d016      	beq.n	8002876 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb24 	bl	8001e9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002852:	f7fe fddf 	bl	8001414 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800285a:	f7fe fddb 	bl	8001414 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0d5      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800286c:	f7ff fc1c 	bl	80020a8 <LL_RCC_IsActiveFlag_C2HPRE>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f1      	beq.n	800285a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fb1d 	bl	8001ec6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800288c:	f7fe fdc2 	bl	8001414 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002894:	f7fe fdbe 	bl	8001414 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0b8      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028a6:	f7ff fc12 	bl	80020ce <LL_RCC_IsActiveFlag_SHDHPRE>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f1      	beq.n	8002894 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d016      	beq.n	80028ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fb17 	bl	8001ef4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028c6:	f7fe fda5 	bl	8001414 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028ce:	f7fe fda1 	bl	8001414 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e09b      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028e0:	f7ff fc08 	bl	80020f4 <LL_RCC_IsActiveFlag_PPRE1>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f1      	beq.n	80028ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d017      	beq.n	8002926 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fb0d 	bl	8001f1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002902:	f7fe fd87 	bl	8001414 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800290a:	f7fe fd83 	bl	8001414 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e07d      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800291c:	f7ff fbfc 	bl	8002118 <LL_RCC_IsActiveFlag_PPRE2>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f1      	beq.n	800290a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d043      	beq.n	80029ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d106      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800293a:	f7ff f8e1 	bl	8001b00 <LL_RCC_HSE_IsReady>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11e      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e067      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d106      	bne.n	800295e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002950:	f7ff fb55 	bl	8001ffe <LL_RCC_PLL_IsReady>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e05c      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002966:	f7ff fa15 	bl	8001d94 <LL_RCC_MSI_IsReady>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e051      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002974:	f7ff f8f4 	bl	8001b60 <LL_RCC_HSI_IsReady>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e04a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa53 	bl	8001e32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe fd42 	bl	8001414 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7fe fd3e 	bl	8001414 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e036      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	f7ff fa56 	bl	8001e5a <LL_RCC_GetSysClkSource>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d1ec      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d21b      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 0207 	bic.w	r2, r3, #7
 80029d0:	4913      	ldr	r1, [pc, #76]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe fd1c 	bl	8001414 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029e0:	f7fe fd18 	bl	8001414 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e012      	b.n	8002a18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x278>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1ef      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a00:	f000 f87e 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_RCC_ClockConfig+0x27c>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002a0a:	f7fe fd0f 	bl	800142c <HAL_GetTickPrio>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fa1f 	bl	8000e54 <HAL_InitTick>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58004000 	.word	0x58004000
 8002a24:	2000000c 	.word	0x2000000c

08002a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	f7ff fa14 	bl	8001e5a <LL_RCC_GetSysClkSource>
 8002a32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a3a:	f7ff f9d0 	bl	8001dde <LL_RCC_MSI_GetRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e04b      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d102      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e045      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a62:	f7ff f81d 	bl	8001aa0 <LL_RCC_HSE_IsEnabledDiv2>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e03a      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e037      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a78:	f7ff faf8 	bl	800206c <LL_RCC_PLL_GetMainSource>
 8002a7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d003      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x64>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a8a:	e00d      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a8e:	60bb      	str	r3, [r7, #8]
        break;
 8002a90:	e015      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a92:	f7ff f805 	bl	8001aa0 <LL_RCC_HSE_IsEnabledDiv2>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002aa0:	e00d      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002aa4:	60bb      	str	r3, [r7, #8]
        break;
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002aa8:	f7ff f999 	bl	8001dde <LL_RCC_MSI_GetRange>
 8002aac:	4603      	mov	r3, r0
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	60bb      	str	r3, [r7, #8]
        break;
 8002abc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002abe:	f7ff fab0 	bl	8002022 <LL_RCC_PLL_GetN>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	fb03 f402 	mul.w	r4, r3, r2
 8002aca:	f7ff fac3 	bl	8002054 <LL_RCC_PLL_GetDivider>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ad8:	f7ff fab0 	bl	800203c <LL_RCC_PLL_GetR>
 8002adc:	4603      	mov	r3, r0
 8002ade:	0f5b      	lsrs	r3, r3, #29
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08008b2c 	.word	0x08008b2c
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	01e84800 	.word	0x01e84800

08002b00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b598      	push	{r3, r4, r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b04:	f7ff ff90 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	f7ff fa1b 	bl	8001f44 <LL_RCC_GetAHBPrescaler>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd98      	pop	{r3, r4, r7, pc}
 8002b24:	08008acc 	.word	0x08008acc

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b598      	push	{r3, r4, r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b2c:	f7ff ffe8 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b30:	4604      	mov	r4, r0
 8002b32:	f7ff fa2e 	bl	8001f92 <LL_RCC_GetAPB1Prescaler>
 8002b36:	4603      	mov	r3, r0
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd98      	pop	{r3, r4, r7, pc}
 8002b50:	08008b0c 	.word	0x08008b0c

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b598      	push	{r3, r4, r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b58:	f7ff ffd2 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	f7ff fa24 	bl	8001faa <LL_RCC_GetAPB2Prescaler>
 8002b62:	4603      	mov	r3, r0
 8002b64:	0adb      	lsrs	r3, r3, #11
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd98      	pop	{r3, r4, r7, pc}
 8002b7c:	08008b0c 	.word	0x08008b0c

08002b80 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	226f      	movs	r2, #111	; 0x6f
 8002b8e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002b90:	f7ff f963 	bl	8001e5a <LL_RCC_GetSysClkSource>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002b9a:	f7ff f9d3 	bl	8001f44 <LL_RCC_GetAHBPrescaler>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002ba4:	f7ff f9f5 	bl	8001f92 <LL_RCC_GetAPB1Prescaler>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002bae:	f7ff f9fc 	bl	8001faa <LL_RCC_GetAPB2Prescaler>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002bb8:	f7ff f9d0 	bl	8001f5c <LL_C2_RCC_GetAHBPrescaler>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002bc2:	f7ff f9d8 	bl	8001f76 <LL_RCC_GetAHB4Prescaler>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCC_GetClockConfig+0x60>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0207 	and.w	r2, r3, #7
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	58004000 	.word	0x58004000

08002be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2bb0      	cmp	r3, #176	; 0xb0
 8002bf0:	d903      	bls.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e007      	b.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002c0a:	f7ff f9b4 	bl	8001f76 <LL_RCC_GetAHB4Prescaler>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f80c 	bl	8002c50 <RCC_SetFlashLatency>
 8002c38:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	08008b2c 	.word	0x08008b2c
 8002c48:	08008acc 	.word	0x08008acc
 8002c4c:	431bde83 	.word	0x431bde83

08002c50 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08f      	sub	sp, #60	; 0x3c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <RCC_SetFlashLatency+0x9c>)
 8002c5c:	f107 041c 	add.w	r4, r7, #28
 8002c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <RCC_SetFlashLatency+0xa0>)
 8002c68:	f107 040c 	add.w	r4, r7, #12
 8002c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7a:	e013      	b.n	8002ca4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	443b      	add	r3, r7
 8002c84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d807      	bhi.n	8002c9e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	443b      	add	r3, r7
 8002c96:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002c9c:	e005      	b.n	8002caa <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d9e8      	bls.n	8002c7c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <RCC_SetFlashLatency+0xa4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <RCC_SetFlashLatency+0xa4>)
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cba:	f7fe fbab 	bl	8001414 <HAL_GetTick>
 8002cbe:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cc0:	e008      	b.n	8002cd4 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cc2:	f7fe fba7 	bl	8001414 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e007      	b.n	8002ce4 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <RCC_SetFlashLatency+0xa4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d1ef      	bne.n	8002cc2 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	373c      	adds	r7, #60	; 0x3c
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd90      	pop	{r4, r7, pc}
 8002cec:	08008a94 	.word	0x08008a94
 8002cf0:	08008aa4 	.word	0x08008aa4
 8002cf4:	58004000 	.word	0x58004000

08002cf8 <LL_RCC_LSE_IsEnabled>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <LL_RCC_LSE_IsEnabled+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_RCC_LSE_IsEnabled+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_LSE_IsReady>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d101      	bne.n	8002d34 <LL_RCC_LSE_IsReady+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_RCC_LSE_IsReady+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_SetRFWKPClockSource>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_SetSMPSClockSource>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_RCC_SetSMPSPrescaler>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_SetUSARTClockSource>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_SetLPUARTClockSource>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_RCC_SetI2CClockSource>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetLPTIMClockSource>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	43db      	mvns	r3, r3
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_SetRNGClockSource>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_SetCLK48ClockSource>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_SetADCClockSource>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_RCC_SetRTCClockSource>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_GetRTCClockSource>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_ForceBackupDomainReset>:
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b088      	sub	sp, #32
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d046      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002fca:	f7ff ffc1 	bl	8002f50 <LL_RCC_GetRTCClockSource>
 8002fce:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d03c      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fda:	f7fe fd51 	bl	8001a80 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff9b 	bl	8002f24 <LL_RCC_SetRTCClockSource>
 8002fee:	e02e      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ffa:	f7ff ffb6 	bl	8002f6a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ffe:	f7ff ffc5 	bl	8002f8c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800301a:	f7ff fe6d 	bl	8002cf8 <LL_RCC_LSE_IsEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d114      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003024:	f7fe f9f6 	bl	8001414 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800302a:	e00b      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe f9f2 	bl	8001414 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d902      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	77fb      	strb	r3, [r7, #31]
              break;
 8003042:	e004      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003044:	f7ff fe6a 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d1ee      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	77bb      	strb	r3, [r7, #30]
 8003052:	e001      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff feb6 	bl	8002dda <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fec1 	bl	8002e06 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fee9 	bl	8002e6c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fede 	bl	8002e6c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff feb6 	bl	8002e32 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02b      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x140>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e4:	d003      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x140>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fed4 	bl	8002ea0 <LL_RCC_SetRNGClockSource>
 80030f8:	e00a      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	2000      	movs	r0, #0
 8003106:	f7ff fecb 	bl	8002ea0 <LL_RCC_SetRNGClockSource>
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fede 	bl	8002ecc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003118:	d107      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003128:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fedc 	bl	8002ef8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d107      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fdf7 	bl	8002d5e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fe16 	bl	8002db2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fdfd 	bl	8002d8a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003190:	7fbb      	ldrb	r3, [r7, #30]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800319e:	f7ff fdcf 	bl	8002d40 <LL_RCC_MSI_EnablePLLMode>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09f      	b.n	80032fa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fdac 	bl	8000d2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031dc:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RTC_Init+0x15c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d07e      	beq.n	80032e6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	22ca      	movs	r2, #202	; 0xca
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2253      	movs	r2, #83	; 0x53
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8ab 	bl	8003354 <RTC_EnterInitMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2204      	movs	r2, #4
 8003210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e067      	b.n	80032ea <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68d2      	ldr	r2, [r2, #12]
 8003254:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6919      	ldr	r1, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003278:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0202 	bic.w	r2, r2, #2
 8003288:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f829 	bl	8003308 <HAL_RTC_WaitForSynchro>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2204      	movs	r2, #4
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e010      	b.n	80032fa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40002800 	.word	0x40002800

08003308 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800331e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003320:	f7fe f878 	bl	8001414 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003326:	e009      	b.n	800333c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003328:	f7fe f874 	bl	8001414 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003336:	d901      	bls.n	800333c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e007      	b.n	800334c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d119      	bne.n	800339e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003374:	f7fe f84e 	bl	8001414 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800337a:	e009      	b.n	8003390 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800337c:	f7fe f84a 	bl	8001414 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338a:	d901      	bls.n	8003390 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e007      	b.n	80033a0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ee      	beq.n	800337c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e049      	b.n	800344e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f841 	bl	8003456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 f9d6 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e036      	b.n	80034f2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_TIM_Base_Start_IT+0x94>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x44>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d115      	bne.n	80034dc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_TIM_Base_Start_IT+0x98>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d015      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x82>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d011      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	e008      	b.n	80034ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00
 8003504:	00010007 	.word	0x00010007

08003508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0202 	mvn.w	r2, #2
 8003534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f905 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8f7 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f908 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0204 	mvn.w	r2, #4
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8db 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8cd 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8de 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0208 	mvn.w	r2, #8
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8b1 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8a3 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8b4 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b10      	cmp	r3, #16
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0210 	mvn.w	r2, #16
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2208      	movs	r2, #8
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f887 	bl	800375a <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f879 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f88a 	bl	800376e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10e      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0201 	mvn.w	r2, #1
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fad6 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8ca 	bl	800384c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8bd 	bl	8003860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f838 	bl	8003782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0220 	mvn.w	r2, #32
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f87d 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_Base_SetConfig+0x9c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x20>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <TIM_Base_SetConfig+0x9c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x42>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <TIM_Base_SetConfig+0x9c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_RCC_GetUSARTClockSource>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4013      	ands	r3, r2
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_RCC_GetLPUARTClockSource>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4013      	ands	r3, r2
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e042      	b.n	800394c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fa53 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2224      	movs	r2, #36	; 0x24
 80038e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc4a 	bl	8004190 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fe66 	bl	80045e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 feed 	bl	8004724 <UART_CheckIdleState>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	2b20      	cmp	r3, #32
 800396c:	d17b      	bne.n	8003a66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit+0x26>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e074      	b.n	8003a68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd fd41 	bl	8001414 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e030      	b.n	8003a2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 ff4f 	bl	8004878 <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03d      	b.n	8003a68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e007      	b.n	8003a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1c8      	bne.n	80039ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 ff18 	bl	8004878 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e006      	b.n	8003a68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d137      	bne.n	8003af8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Receive_IT+0x24>
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e030      	b.n	8003afa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_UART_Receive_IT+0x94>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	69f9      	ldr	r1, [r7, #28]
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e6      	bne.n	8003ab6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 ff2a 	bl	8004948 <UART_Start_Receive_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40008000 	.word	0x40008000

08003b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b0ba      	sub	sp, #232	; 0xe8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b32:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b36:	4013      	ands	r3, r2
 8003b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11b      	bne.n	8003b7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 82e3 	beq.w	8004138 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
      }
      return;
 8003b7a:	e2dd      	b.n	8004138 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8123 	beq.w	8003dcc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003b8a:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_UART_IRQHandler+0x2b8>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b96:	4b8b      	ldr	r3, [pc, #556]	; (8003dc4 <HAL_UART_IRQHandler+0x2bc>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8116 	beq.w	8003dcc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xc8>
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_UART_IRQHandler+0xf8>
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2202      	movs	r2, #2
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_UART_IRQHandler+0x128>
 8003c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f043 0202 	orr.w	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d017      	beq.n	8003c6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c4c:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <HAL_UART_IRQHandler+0x2b8>)
 8003c4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f043 0208 	orr.w	r2, r3, #8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <HAL_UART_IRQHandler+0x196>
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8249 	beq.w	800413c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d054      	beq.n	8003dac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 ff42 	bl	8004b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d146      	bne.n	8003da4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1d9      	bne.n	8003d16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_UART_IRQHandler+0x2c0>)
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd fca0 	bl	80016c2 <HAL_DMA_Abort_IT>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d019      	beq.n	8003dbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003d96:	4610      	mov	r0, r2
 8003d98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9a:	e00f      	b.n	8003dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f9e1 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da2:	e00b      	b.n	8003dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9dd 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003daa:	e007      	b.n	8003dbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f9d9 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003dba:	e1bf      	b.n	800413c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	bf00      	nop
    return;
 8003dbe:	e1bd      	b.n	800413c <HAL_UART_IRQHandler+0x634>
 8003dc0:	10000001 	.word	0x10000001
 8003dc4:	04000120 	.word	0x04000120
 8003dc8:	08004c59 	.word	0x08004c59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 8153 	bne.w	800407c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 814c 	beq.w	800407c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8145 	beq.w	800407c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2210      	movs	r2, #16
 8003df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	f040 80bb 	bne.w	8003f80 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 818f 	beq.w	8004140 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f080 8187 	bcs.w	8004140 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 8087 	bne.w	8003f5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1da      	bne.n	8003e50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ebe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e1      	bne.n	8003e9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e3      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	f023 0310 	bic.w	r3, r3, #16
 8003f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e4      	bne.n	8003f1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fd fb53 	bl	8001604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8fd 	bl	8004178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f7e:	e0df      	b.n	8004140 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80d1 	beq.w	8004144 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80cc 	beq.w	8004144 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e4      	bne.n	8003fac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400a:	633a      	str	r2, [r7, #48]	; 0x30
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e1      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	617b      	str	r3, [r7, #20]
   return(result);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f87f 	bl	8004178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800407a:	e063      	b.n	8004144 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800407c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <HAL_UART_IRQHandler+0x59e>
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800409c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f001 fb38 	bl	8005714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a4:	e051      	b.n	800414a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d014      	beq.n	80040dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03a      	beq.n	8004148 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
    }
    return;
 80040da:	e035      	b.n	8004148 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_UART_IRQHandler+0x5f4>
 80040e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fdc5 	bl	8004c84 <UART_EndTransmit_IT>
    return;
 80040fa:	e026      	b.n	800414a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <HAL_UART_IRQHandler+0x614>
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f001 fb11 	bl	800573c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800411a:	e016      	b.n	800414a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_UART_IRQHandler+0x642>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	2b00      	cmp	r3, #0
 800412e:	da0c      	bge.n	800414a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f001 faf9 	bl	8005728 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004136:	e008      	b.n	800414a <HAL_UART_IRQHandler+0x642>
      return;
 8004138:	bf00      	nop
 800413a:	e006      	b.n	800414a <HAL_UART_IRQHandler+0x642>
    return;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_UART_IRQHandler+0x642>
      return;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_UART_IRQHandler+0x642>
      return;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_UART_IRQHandler+0x642>
    return;
 8004148:	bf00      	nop
  }
}
 800414a:	37e8      	adds	r7, #232	; 0xe8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b08c      	sub	sp, #48	; 0x30
 8004196:	af00      	add	r7, sp, #0
 8004198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4baf      	ldr	r3, [pc, #700]	; (800447c <UART_SetConfig+0x2ec>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4aa4      	ldr	r2, [pc, #656]	; (8004480 <UART_SetConfig+0x2f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004206:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004210:	430b      	orrs	r3, r1
 8004212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f023 010f 	bic.w	r1, r3, #15
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a95      	ldr	r2, [pc, #596]	; (8004484 <UART_SetConfig+0x2f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d125      	bne.n	8004280 <UART_SetConfig+0xf0>
 8004234:	2003      	movs	r0, #3
 8004236:	f7ff fb1d 	bl	8003874 <LL_RCC_GetUSARTClockSource>
 800423a:	4603      	mov	r3, r0
 800423c:	2b03      	cmp	r3, #3
 800423e:	d81b      	bhi.n	8004278 <UART_SetConfig+0xe8>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0xb8>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	08004269 	.word	0x08004269
 8004250:	08004261 	.word	0x08004261
 8004254:	08004271 	.word	0x08004271
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e042      	b.n	80042e6 <UART_SetConfig+0x156>
 8004260:	2302      	movs	r3, #2
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e03e      	b.n	80042e6 <UART_SetConfig+0x156>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426e:	e03a      	b.n	80042e6 <UART_SetConfig+0x156>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004276:	e036      	b.n	80042e6 <UART_SetConfig+0x156>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427e:	e032      	b.n	80042e6 <UART_SetConfig+0x156>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7e      	ldr	r2, [pc, #504]	; (8004480 <UART_SetConfig+0x2f0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12a      	bne.n	80042e0 <UART_SetConfig+0x150>
 800428a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800428e:	f7ff fb01 	bl	8003894 <LL_RCC_GetLPUARTClockSource>
 8004292:	4603      	mov	r3, r0
 8004294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004298:	d01a      	beq.n	80042d0 <UART_SetConfig+0x140>
 800429a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800429e:	d81b      	bhi.n	80042d8 <UART_SetConfig+0x148>
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a4:	d00c      	beq.n	80042c0 <UART_SetConfig+0x130>
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	d815      	bhi.n	80042d8 <UART_SetConfig+0x148>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <UART_SetConfig+0x128>
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d008      	beq.n	80042c8 <UART_SetConfig+0x138>
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x148>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e012      	b.n	80042e6 <UART_SetConfig+0x156>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c6:	e00e      	b.n	80042e6 <UART_SetConfig+0x156>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ce:	e00a      	b.n	80042e6 <UART_SetConfig+0x156>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d6:	e006      	b.n	80042e6 <UART_SetConfig+0x156>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042de:	e002      	b.n	80042e6 <UART_SetConfig+0x156>
 80042e0:	2310      	movs	r3, #16
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a65      	ldr	r2, [pc, #404]	; (8004480 <UART_SetConfig+0x2f0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	f040 8097 	bne.w	8004420 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d823      	bhi.n	8004342 <UART_SetConfig+0x1b2>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x170>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004325 	.word	0x08004325
 8004304:	08004343 	.word	0x08004343
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004343 	.word	0x08004343
 8004310:	08004333 	.word	0x08004333
 8004314:	08004343 	.word	0x08004343
 8004318:	08004343 	.word	0x08004343
 800431c:	08004343 	.word	0x08004343
 8004320:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7fe fc00 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800432a:	e010      	b.n	800434e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b56      	ldr	r3, [pc, #344]	; (8004488 <UART_SetConfig+0x2f8>)
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004330:	e00d      	b.n	800434e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe fb79 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004338:	e009      	b.n	800434e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004340:	e005      	b.n	800434e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800434c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 812b 	beq.w	80045ac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	4a4c      	ldr	r2, [pc, #304]	; (800448c <UART_SetConfig+0x2fc>)
 800435c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004360:	461a      	mov	r2, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	fbb3 f3f2 	udiv	r3, r3, r2
 8004368:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	429a      	cmp	r2, r3
 8004378:	d305      	bcc.n	8004386 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	429a      	cmp	r2, r3
 8004384:	d903      	bls.n	800438e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800438c:	e10e      	b.n	80045ac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2200      	movs	r2, #0
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	60fa      	str	r2, [r7, #12]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	4a3c      	ldr	r2, [pc, #240]	; (800448c <UART_SetConfig+0x2fc>)
 800439c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2200      	movs	r2, #0
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043b0:	f7fb feee 	bl	8000190 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	020b      	lsls	r3, r1, #8
 80043c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ca:	0202      	lsls	r2, r0, #8
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	6849      	ldr	r1, [r1, #4]
 80043d0:	0849      	lsrs	r1, r1, #1
 80043d2:	2000      	movs	r0, #0
 80043d4:	460c      	mov	r4, r1
 80043d6:	4605      	mov	r5, r0
 80043d8:	eb12 0804 	adds.w	r8, r2, r4
 80043dc:	eb43 0905 	adc.w	r9, r3, r5
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	469a      	mov	sl, r3
 80043e8:	4693      	mov	fp, r2
 80043ea:	4652      	mov	r2, sl
 80043ec:	465b      	mov	r3, fp
 80043ee:	4640      	mov	r0, r8
 80043f0:	4649      	mov	r1, r9
 80043f2:	f7fb fecd 	bl	8000190 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4613      	mov	r3, r2
 80043fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004404:	d308      	bcc.n	8004418 <UART_SetConfig+0x288>
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d204      	bcs.n	8004418 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e0c9      	b.n	80045ac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800441e:	e0c5      	b.n	80045ac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	d16d      	bne.n	8004506 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800442a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800442e:	3b01      	subs	r3, #1
 8004430:	2b07      	cmp	r3, #7
 8004432:	d82d      	bhi.n	8004490 <UART_SetConfig+0x300>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x2ac>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	0800445d 	.word	0x0800445d
 8004440:	08004465 	.word	0x08004465
 8004444:	08004491 	.word	0x08004491
 8004448:	0800446b 	.word	0x0800446b
 800444c:	08004491 	.word	0x08004491
 8004450:	08004491 	.word	0x08004491
 8004454:	08004491 	.word	0x08004491
 8004458:	08004473 	.word	0x08004473
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7fe fb7a 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8004460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004462:	e01b      	b.n	800449c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <UART_SetConfig+0x2f8>)
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004468:	e018      	b.n	800449c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446a:	f7fe fadd 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004470:	e014      	b.n	800449c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004478:	e010      	b.n	800449c <UART_SetConfig+0x30c>
 800447a:	bf00      	nop
 800447c:	cfff69f3 	.word	0xcfff69f3
 8004480:	40008000 	.word	0x40008000
 8004484:	40013800 	.word	0x40013800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	08008b6c 	.word	0x08008b6c
      default:
        pclk = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800449a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8084 	beq.w	80045ac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <UART_SetConfig+0x448>)
 80044aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ae:	461a      	mov	r2, r3
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b6:	005a      	lsls	r2, r3, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	441a      	add	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d916      	bls.n	80044fe <UART_SetConfig+0x36e>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d212      	bcs.n	80044fe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	8bfb      	ldrh	r3, [r7, #30]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	8bfa      	ldrh	r2, [r7, #30]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	e056      	b.n	80045ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004504:	e052      	b.n	80045ac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800450a:	3b01      	subs	r3, #1
 800450c:	2b07      	cmp	r3, #7
 800450e:	d822      	bhi.n	8004556 <UART_SetConfig+0x3c6>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x388>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004539 	.word	0x08004539
 800451c:	08004541 	.word	0x08004541
 8004520:	08004557 	.word	0x08004557
 8004524:	08004547 	.word	0x08004547
 8004528:	08004557 	.word	0x08004557
 800452c:	08004557 	.word	0x08004557
 8004530:	08004557 	.word	0x08004557
 8004534:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe fb0c 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <UART_SetConfig+0x44c>)
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe fa6f 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 800454a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800454c:	e009      	b.n	8004562 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004554:	e005      	b.n	8004562 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004560:	bf00      	nop
    }

    if (pclk != 0U)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <UART_SetConfig+0x448>)
 800456e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004572:	461a      	mov	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	fbb3 f2f2 	udiv	r2, r3, r2
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	441a      	add	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d909      	bls.n	80045a6 <UART_SetConfig+0x416>
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d205      	bcs.n	80045a6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	b29a      	uxth	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	e002      	b.n	80045ac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3730      	adds	r7, #48	; 0x30
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	08008b6c 	.word	0x08008b6c
 80045dc:	00f42400 	.word	0x00f42400

080045e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d10a      	bne.n	80046f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b098      	sub	sp, #96	; 0x60
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fc fe6e 	bl	8001414 <HAL_GetTick>
 8004738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d12f      	bne.n	80047a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f88e 	bl	8004878 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d022      	beq.n	80047a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
 8004782:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e063      	b.n	8004870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d149      	bne.n	800484a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047be:	2200      	movs	r2, #0
 80047c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f857 	bl	8004878 <UART_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03c      	beq.n	800484a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	623b      	str	r3, [r7, #32]
   return(result);
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
 80047f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e6      	bne.n	80047d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	60fb      	str	r3, [r7, #12]
   return(result);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	64bb      	str	r3, [r7, #72]	; 0x48
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3308      	adds	r3, #8
 8004820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004822:	61fa      	str	r2, [r7, #28]
 8004824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	617b      	str	r3, [r7, #20]
   return(result);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e5      	bne.n	8004802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e012      	b.n	8004870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3758      	adds	r7, #88	; 0x58
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004888:	e049      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d045      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fc fdbf 	bl	8001414 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e048      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d031      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d110      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2208      	movs	r2, #8
 80048ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f95b 	bl	8004b8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2208      	movs	r2, #8
 80048da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e029      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f8:	d111      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f941 	bl	8004b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00f      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d0a6      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004948:	b480      	push	{r7}
 800494a:	b0a3      	sub	sp, #140	; 0x8c
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d10e      	bne.n	800499a <UART_Start_Receive_IT+0x52>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <UART_Start_Receive_IT+0x48>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f240 12ff 	movw	r2, #511	; 0x1ff
 800498a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800498e:	e02d      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004998:	e028      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <UART_Start_Receive_IT+0x76>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <UART_Start_Receive_IT+0x6c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	22ff      	movs	r2, #255	; 0xff
 80049ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049b2:	e01b      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	227f      	movs	r2, #127	; 0x7f
 80049b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049bc:	e016      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c6:	d10d      	bne.n	80049e4 <UART_Start_Receive_IT+0x9c>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <UART_Start_Receive_IT+0x92>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	227f      	movs	r2, #127	; 0x7f
 80049d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049d8:	e008      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	223f      	movs	r2, #63	; 0x3f
 80049de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e2:	e003      	b.n	80049ec <UART_Start_Receive_IT+0xa4>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2222      	movs	r2, #34	; 0x22
 80049f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a20:	673a      	str	r2, [r7, #112]	; 0x70
 8004a22:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004a26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e3      	bne.n	80049fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d14f      	bne.n	8004ade <UART_Start_Receive_IT+0x196>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d349      	bcc.n	8004ade <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d107      	bne.n	8004a64 <UART_Start_Receive_IT+0x11c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a47      	ldr	r2, [pc, #284]	; (8004b7c <UART_Start_Receive_IT+0x234>)
 8004a60:	675a      	str	r2, [r3, #116]	; 0x74
 8004a62:	e002      	b.n	8004a6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a46      	ldr	r2, [pc, #280]	; (8004b80 <UART_Start_Receive_IT+0x238>)
 8004a68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01a      	beq.n	8004aa8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e4      	bne.n	8004a72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ac8:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_Start_Receive_IT+0x160>
 8004adc:	e046      	b.n	8004b6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d107      	bne.n	8004af8 <UART_Start_Receive_IT+0x1b0>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <UART_Start_Receive_IT+0x23c>)
 8004af4:	675a      	str	r2, [r3, #116]	; 0x74
 8004af6:	e002      	b.n	8004afe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <UART_Start_Receive_IT+0x240>)
 8004afc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d019      	beq.n	8004b3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_Start_Receive_IT+0x1be>
 8004b38:	e018      	b.n	8004b6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	613b      	str	r3, [r7, #16]
   return(result);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f043 0320 	orr.w	r3, r3, #32
 8004b4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	378c      	adds	r7, #140	; 0x8c
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	080053ad 	.word	0x080053ad
 8004b80:	0800504d 	.word	0x0800504d
 8004b84:	08004e95 	.word	0x08004e95
 8004b88:	08004cdd 	.word	0x08004cdd

08004b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b095      	sub	sp, #84	; 0x54
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e6      	bne.n	8004b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3308      	adds	r3, #8
 8004be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d118      	bne.n	8004c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0310 	bic.w	r3, r3, #16
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c4c:	bf00      	nop
 8004c4e:	3754      	adds	r7, #84	; 0x54
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fa74 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e6      	bne.n	8004c8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fa3f 	bl	8004150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd2:	bf00      	nop
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b09c      	sub	sp, #112	; 0x70
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf4:	2b22      	cmp	r3, #34	; 0x22
 8004cf6:	f040 80be 	bne.w	8004e76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d08:	b2d9      	uxtb	r1, r3
 8004d0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	400a      	ands	r2, r1
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f040 80a1 	bne.w	8004e86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e6      	bne.n	8004d44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3308      	adds	r3, #8
 8004d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d96:	647a      	str	r2, [r7, #68]	; 0x44
 8004d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e5      	bne.n	8004d76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a33      	ldr	r2, [pc, #204]	; (8004e90 <UART_RxISR_8BIT+0x1b4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01f      	beq.n	8004e08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	623b      	str	r3, [r7, #32]
   return(result);
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dea:	663b      	str	r3, [r7, #96]	; 0x60
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
 8004df6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e6      	bne.n	8004dd6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d12e      	bne.n	8004e6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	617b      	str	r3, [r7, #20]
   return(result);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e6      	bne.n	8004e16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d103      	bne.n	8004e5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff f986 	bl	8004178 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e6c:	e00b      	b.n	8004e86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb fe9a 	bl	8000ba8 <HAL_UART_RxCpltCallback>
}
 8004e74:	e007      	b.n	8004e86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0208 	orr.w	r2, r2, #8
 8004e84:	619a      	str	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	3770      	adds	r7, #112	; 0x70
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40008000 	.word	0x40008000

08004e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b09c      	sub	sp, #112	; 0x70
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	2b22      	cmp	r3, #34	; 0x22
 8004eae:	f040 80be 	bne.w	800502e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ec2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004ec6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	1c9a      	adds	r2, r3, #2
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 80a1 	bne.w	800503e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f10:	667b      	str	r3, [r7, #100]	; 0x64
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	663b      	str	r3, [r7, #96]	; 0x60
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a33      	ldr	r2, [pc, #204]	; (8005048 <UART_RxISR_16BIT+0x1b4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01f      	beq.n	8004fc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d12e      	bne.n	8005026 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d103      	bne.n	8005016 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2210      	movs	r2, #16
 8005014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff f8aa 	bl	8004178 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005024:	e00b      	b.n	800503e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fdbe 	bl	8000ba8 <HAL_UART_RxCpltCallback>
}
 800502c:	e007      	b.n	800503e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0208 	orr.w	r2, r2, #8
 800503c:	619a      	str	r2, [r3, #24]
}
 800503e:	bf00      	nop
 8005040:	3770      	adds	r7, #112	; 0x70
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40008000 	.word	0x40008000

0800504c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b0ac      	sub	sp, #176	; 0xb0
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800505a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005082:	2b22      	cmp	r3, #34	; 0x22
 8005084:	f040 8182 	bne.w	800538c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800508e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005092:	e125      	b.n	80052e0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800509e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80050a2:	b2d9      	uxtb	r1, r3
 80050a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	400a      	ands	r2, r1
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d053      	beq.n	800518e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <UART_RxISR_8BIT_FIFOEN+0xca>
 80050f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f043 0201 	orr.w	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2202      	movs	r2, #2
 8005134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2204      	movs	r2, #4
 8005164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f043 0202 	orr.w	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	2b00      	cmp	r3, #0
 800517e:	d006      	beq.n	800518e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fe ffef 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 80a2 	bne.w	80052e0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80051c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80051cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e4      	bne.n	800519c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80051e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80051fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e1      	bne.n	80051d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5f      	ldr	r2, [pc, #380]	; (80053a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d021      	beq.n	8005270 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01a      	beq.n	8005270 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800525c:	657b      	str	r3, [r7, #84]	; 0x54
 800525e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005262:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e4      	bne.n	800523a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d130      	bne.n	80052da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	f023 0310 	bic.w	r3, r3, #16
 8005292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
 80052a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e4      	bne.n	800527e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d103      	bne.n	80052ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2210      	movs	r2, #16
 80052c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fe ff50 	bl	8004178 <HAL_UARTEx_RxEventCallback>
 80052d8:	e002      	b.n	80052e0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb fc64 	bl	8000ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80052e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f47f aecf 	bne.w	8005094 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005304:	2b00      	cmp	r3, #0
 8005306:	d049      	beq.n	800539c <UART_RxISR_8BIT_FIFOEN+0x350>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800530e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005312:	429a      	cmp	r2, r3
 8005314:	d242      	bcs.n	800539c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	61fb      	str	r3, [r7, #28]
   return(result);
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800533a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e3      	bne.n	8005316 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005352:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	60bb      	str	r3, [r7, #8]
   return(result);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f043 0320 	orr.w	r3, r3, #32
 8005368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	613b      	str	r3, [r7, #16]
   return(result);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e4      	bne.n	8005354 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800538a:	e007      	b.n	800539c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	619a      	str	r2, [r3, #24]
}
 800539c:	bf00      	nop
 800539e:	37b0      	adds	r7, #176	; 0xb0
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40008000 	.word	0x40008000
 80053a8:	08004cdd 	.word	0x08004cdd

080053ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b0ae      	sub	sp, #184	; 0xb8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80053ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	f040 8186 	bne.w	80056f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053f2:	e129      	b.n	8005648 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005406:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800540a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800540e:	4013      	ands	r3, r2
 8005410:	b29a      	uxth	r2, r3
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005416:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800543e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d053      	beq.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800544a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d011      	beq.n	800547a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800547a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2202      	movs	r2, #2
 8005498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80054b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2204      	movs	r2, #4
 80054c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f043 0202 	orr.w	r2, r3, #2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d006      	beq.n	80054f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fe fe3d 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 80a4 	bne.w	8005648 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800550e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005526:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800552a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e2      	bne.n	8005500 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800554a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800554c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5f      	ldr	r2, [pc, #380]	; (800570c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d021      	beq.n	80055d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01a      	beq.n	80055d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e4      	bne.n	80055a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d130      	bne.n	8005642 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	f023 0310 	bic.w	r3, r3, #16
 80055fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
 800560a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800560e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e4      	bne.n	80055e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d103      	bne.n	8005632 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2210      	movs	r2, #16
 8005630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe fd9c 	bl	8004178 <HAL_UARTEx_RxEventCallback>
 8005640:	e002      	b.n	8005648 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb fab0 	bl	8000ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005648:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800564c:	2b00      	cmp	r3, #0
 800564e:	d006      	beq.n	800565e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f aecb 	bne.w	80053f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005664:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005668:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800566c:	2b00      	cmp	r3, #0
 800566e:	d049      	beq.n	8005704 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005676:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800567a:	429a      	cmp	r2, r3
 800567c:	d242      	bcs.n	8005704 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	623b      	str	r3, [r7, #32]
   return(result);
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80056a2:	633a      	str	r2, [r7, #48]	; 0x30
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e3      	bne.n	800567e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80056ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f043 0320 	orr.w	r3, r3, #32
 80056d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	617b      	str	r3, [r7, #20]
   return(result);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e4      	bne.n	80056bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056f2:	e007      	b.n	8005704 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0208 	orr.w	r2, r2, #8
 8005702:	619a      	str	r2, [r3, #24]
}
 8005704:	bf00      	nop
 8005706:	37b8      	adds	r7, #184	; 0xb8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40008000 	.word	0x40008000
 8005710:	08004e95 	.word	0x08004e95

08005714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_UARTEx_DisableFifoMode+0x16>
 8005762:	2302      	movs	r3, #2
 8005764:	e027      	b.n	80057b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2224      	movs	r2, #36	; 0x24
 8005772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005794:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e02d      	b.n	8005836 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2224      	movs	r2, #36	; 0x24
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f850 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005852:	2302      	movs	r3, #2
 8005854:	e02d      	b.n	80058b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	; 0x24
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f812 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058dc:	e031      	b.n	8005942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058de:	2308      	movs	r3, #8
 80058e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058e2:	2308      	movs	r3, #8
 80058e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	0e5b      	lsrs	r3, r3, #25
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	0f5b      	lsrs	r3, r3, #29
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	7b3a      	ldrb	r2, [r7, #12]
 800590a:	4911      	ldr	r1, [pc, #68]	; (8005950 <UARTEx_SetNbDataToProcess+0x94>)
 800590c:	5c8a      	ldrb	r2, [r1, r2]
 800590e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005912:	7b3a      	ldrb	r2, [r7, #12]
 8005914:	490f      	ldr	r1, [pc, #60]	; (8005954 <UARTEx_SetNbDataToProcess+0x98>)
 8005916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005918:	fb93 f3f2 	sdiv	r3, r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	7b7a      	ldrb	r2, [r7, #13]
 8005928:	4909      	ldr	r1, [pc, #36]	; (8005950 <UARTEx_SetNbDataToProcess+0x94>)
 800592a:	5c8a      	ldrb	r2, [r1, r2]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005930:	7b7a      	ldrb	r2, [r7, #13]
 8005932:	4908      	ldr	r1, [pc, #32]	; (8005954 <UARTEx_SetNbDataToProcess+0x98>)
 8005934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005936:	fb93 f3f2 	sdiv	r3, r3, r2
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	08008b84 	.word	0x08008b84
 8005954:	08008b8c 	.word	0x08008b8c

08005958 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f103 0208 	add.w	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d103      	bne.n	8005a1a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e00c      	b.n	8005a34 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <vListInsert+0x2e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d2f6      	bcs.n	8005a22 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d103      	bne.n	8005aa0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericReset+0x2a>
        __asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60bb      	str	r3, [r7, #8]
    }
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005aea:	f002 fb9b 	bl	8008224 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	68f9      	ldr	r1, [r7, #12]
 8005b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	22ff      	movs	r2, #255	; 0xff
 8005b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d114      	bne.n	8005b6a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01a      	beq.n	8005b7e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f921 	bl	8006d94 <xTaskRemoveFromEventList>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d012      	beq.n	8005b7e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <xQueueGenericReset+0xcc>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	e009      	b.n	8005b7e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fef2 	bl	8005958 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff feed 	bl	8005958 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005b7e:	f002 fb81 	bl	8008284 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005b82:	2301      	movs	r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08c      	sub	sp, #48	; 0x30
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xQueueGenericCreate+0x2a>
        __asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	61bb      	str	r3, [r7, #24]
    }
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <xQueueGenericCreate+0x48>
 8005bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d101      	bne.n	8005bdc <xQueueGenericCreate+0x4c>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <xQueueGenericCreate+0x4e>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xQueueGenericCreate+0x68>
        __asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	617b      	str	r3, [r7, #20]
    }
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005bfe:	d90a      	bls.n	8005c16 <xQueueGenericCreate+0x86>
        __asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	613b      	str	r3, [r7, #16]
    }
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	3350      	adds	r3, #80	; 0x50
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 fc26 	bl	800846c <pvPortMalloc>
 8005c20:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00d      	beq.n	8005c44 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3350      	adds	r3, #80	; 0x50
 8005c30:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c32:	79fa      	ldrb	r2, [r7, #7]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f805 	bl	8005c4e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
    }
 8005c46:	4618      	mov	r0, r3
 8005c48:	3728      	adds	r7, #40	; 0x28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	69b8      	ldr	r0, [r7, #24]
 8005c80:	f7ff ff1e 	bl	8005ac0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08e      	sub	sp, #56	; 0x38
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xQueueGenericSend+0x32>
        __asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueGenericSend+0x40>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueGenericSend+0x44>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueGenericSend+0x46>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <xQueueGenericSend+0x60>
        __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d103      	bne.n	8005d02 <xQueueGenericSend+0x6e>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <xQueueGenericSend+0x72>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <xQueueGenericSend+0x74>
 8005d06:	2300      	movs	r3, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xQueueGenericSend+0x8e>
        __asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	623b      	str	r3, [r7, #32]
    }
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d22:	f001 f9d3 	bl	80070cc <xTaskGetSchedulerState>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <xQueueGenericSend+0x9e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueGenericSend+0xa2>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueGenericSend+0xa4>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xQueueGenericSend+0xbe>
        __asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61fb      	str	r3, [r7, #28]
    }
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005d52:	f002 fa67 	bl	8008224 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <xQueueGenericSend+0xd4>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d129      	bne.n	8005dbc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6e:	f000 fac6 	bl	80062fe <prvCopyDataToQueue>
 8005d72:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 f807 	bl	8006d94 <xTaskRemoveFromEventList>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005d8c:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <xQueueGenericSend+0x1f8>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	e00a      	b.n	8005db4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005da4:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <xQueueGenericSend+0x1f8>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005db4:	f002 fa66 	bl	8008284 <vPortExitCritical>
                return pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e063      	b.n	8005e84 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005dc2:	f002 fa5f 	bl	8008284 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e05c      	b.n	8005e84 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 f83f 	bl	8006e58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005dde:	f002 fa51 	bl	8008284 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005de2:	f000 fdb9 	bl	8006958 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005de6:	f002 fa1d 	bl	8008224 <vPortEnterCritical>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d103      	bne.n	8005e00 <xQueueGenericSend+0x16c>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d103      	bne.n	8005e16 <xQueueGenericSend+0x182>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e16:	f002 fa35 	bl	8008284 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e1a:	1d3a      	adds	r2, r7, #4
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 f82e 	bl	8006e84 <xTaskCheckForTimeOut>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d124      	bne.n	8005e78 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e30:	f000 fb5d 	bl	80064ee <prvIsQueueFull>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d018      	beq.n	8005e6c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	3310      	adds	r3, #16
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 ff56 	bl	8006cf4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e4a:	f000 fae8 	bl	800641e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005e4e:	f000 fd91 	bl	8006974 <xTaskResumeAll>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f47f af7c 	bne.w	8005d52 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <xQueueGenericSend+0x1f8>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	e772      	b.n	8005d52 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6e:	f000 fad6 	bl	800641e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e72:	f000 fd7f 	bl	8006974 <xTaskResumeAll>
 8005e76:	e76c      	b.n	8005d52 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7a:	f000 fad0 	bl	800641e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e7e:	f000 fd79 	bl	8006974 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005e82:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3738      	adds	r7, #56	; 0x38
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b090      	sub	sp, #64	; 0x40
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <xQueueGenericSendFromISR+0x3c>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <xQueueGenericSendFromISR+0x40>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <xQueueGenericSendFromISR+0x42>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSendFromISR+0x6a>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSendFromISR+0x6e>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <xQueueGenericSendFromISR+0x70>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
    }
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f1a:	f002 fa67 	bl	80083ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	61fa      	str	r2, [r7, #28]
 8005f34:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005f36:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <xQueueGenericSendFromISR+0xbc>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d13e      	bne.n	8005fca <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f62:	f000 f9cc 	bl	80062fe <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005f66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d112      	bne.n	8005f96 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d025      	beq.n	8005fc4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 ff09 	bl	8006d94 <xTaskRemoveFromEventList>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01d      	beq.n	8005fc4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01a      	beq.n	8005fc4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e016      	b.n	8005fc4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005f96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9c:	d10a      	bne.n	8005fb4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	617b      	str	r3, [r7, #20]
    }
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fb8:	3301      	adds	r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b25a      	sxtb	r2, r3
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005fc8:	e001      	b.n	8005fce <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005fd8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3740      	adds	r7, #64	; 0x40
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08c      	sub	sp, #48	; 0x30
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <xQueueReceive+0x30>
        __asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	623b      	str	r3, [r7, #32]
    }
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <xQueueReceive+0x3e>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <xQueueReceive+0x42>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <xQueueReceive+0x44>
 8006026:	2300      	movs	r3, #0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueReceive+0x5e>
        __asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	61fb      	str	r3, [r7, #28]
    }
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006042:	f001 f843 	bl	80070cc <xTaskGetSchedulerState>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <xQueueReceive+0x6e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <xQueueReceive+0x72>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueReceive+0x74>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xQueueReceive+0x8e>
        __asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61bb      	str	r3, [r7, #24]
    }
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006072:	f002 f8d7 	bl	8008224 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01f      	beq.n	80060c2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006086:	f000 f9a4 	bl	80063d2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	1e5a      	subs	r2, r3, #1
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00f      	beq.n	80060ba <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fe78 	bl	8006d94 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80060aa:	4b3d      	ldr	r3, [pc, #244]	; (80061a0 <xQueueReceive+0x1bc>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80060ba:	f002 f8e3 	bl	8008284 <vPortExitCritical>
                return pdPASS;
 80060be:	2301      	movs	r3, #1
 80060c0:	e069      	b.n	8006196 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80060c8:	f002 f8dc 	bl	8008284 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e062      	b.n	8006196 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80060d6:	f107 0310 	add.w	r3, r7, #16
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 febc 	bl	8006e58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80060e0:	2301      	movs	r3, #1
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80060e4:	f002 f8ce 	bl	8008284 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80060e8:	f000 fc36 	bl	8006958 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80060ec:	f002 f89a 	bl	8008224 <vPortEnterCritical>
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <xQueueReceive+0x122>
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800610c:	b25b      	sxtb	r3, r3
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d103      	bne.n	800611c <xQueueReceive+0x138>
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800611c:	f002 f8b2 	bl	8008284 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006120:	1d3a      	adds	r2, r7, #4
 8006122:	f107 0310 	add.w	r3, r7, #16
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f000 feab 	bl	8006e84 <xTaskCheckForTimeOut>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d123      	bne.n	800617c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006136:	f000 f9c4 	bl	80064c2 <prvIsQueueEmpty>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d017      	beq.n	8006170 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	3324      	adds	r3, #36	; 0x24
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4611      	mov	r1, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fdd3 	bl	8006cf4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800614e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006150:	f000 f965 	bl	800641e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006154:	f000 fc0e 	bl	8006974 <xTaskResumeAll>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d189      	bne.n	8006072 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xQueueReceive+0x1bc>)
 8006160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	e780      	b.n	8006072 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006172:	f000 f954 	bl	800641e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006176:	f000 fbfd 	bl	8006974 <xTaskResumeAll>
 800617a:	e77a      	b.n	8006072 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800617c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617e:	f000 f94e 	bl	800641e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006182:	f000 fbf7 	bl	8006974 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006188:	f000 f99b 	bl	80064c2 <prvIsQueueEmpty>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f af6f 	beq.w	8006072 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006194:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006196:	4618      	mov	r0, r3
 8006198:	3730      	adds	r7, #48	; 0x30
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed04 	.word	0xe000ed04

080061a4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b090      	sub	sp, #64	; 0x40
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <xQueueReceiveFromISR+0x3a>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueReceiveFromISR+0x3e>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueReceiveFromISR+0x40>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061fe:	f002 f8f5 	bl	80083ec <vPortValidateInterruptPriority>
        __asm volatile
 8006202:	f3ef 8211 	mrs	r2, BASEPRI
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	623a      	str	r2, [r7, #32]
 8006218:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800621a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d03e      	beq.n	80062a8 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006238:	f000 f8cb 	bl	80063d2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006244:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d112      	bne.n	8006274 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d025      	beq.n	80062a2 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	3310      	adds	r3, #16
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fd9a 	bl	8006d94 <xTaskRemoveFromEventList>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01d      	beq.n	80062a2 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01a      	beq.n	80062a2 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e016      	b.n	80062a2 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8006274:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006278:	2b7f      	cmp	r3, #127	; 0x7f
 800627a:	d10a      	bne.n	8006292 <xQueueReceiveFromISR+0xee>
        __asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61bb      	str	r3, [r7, #24]
    }
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006296:	3301      	adds	r3, #1
 8006298:	b2db      	uxtb	r3, r3
 800629a:	b25a      	sxtb	r2, r3
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80062a2:	2301      	movs	r3, #1
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a6:	e001      	b.n	80062ac <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	617b      	str	r3, [r7, #20]
        __asm volatile
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f383 8811 	msr	BASEPRI, r3
    }
 80062b6:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80062b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3740      	adds	r7, #64	; 0x40
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60bb      	str	r3, [r7, #8]
    }
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80062e6:	f001 ff9d 	bl	8008224 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80062f0:	f001 ffc8 	bl	8008284 <vPortExitCritical>

    return uxReturn;
 80062f4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d14d      	bne.n	80063c0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 feed 	bl	8007108 <xTaskPriorityDisinherit>
 800632e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	609a      	str	r2, [r3, #8]
 8006336:	e043      	b.n	80063c0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d119      	bne.n	8006372 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6858      	ldr	r0, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	461a      	mov	r2, r3
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	f002 fab1 	bl	80088b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	441a      	add	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	d32b      	bcc.n	80063c0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	e026      	b.n	80063c0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68d8      	ldr	r0, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	461a      	mov	r2, r3
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	f002 fa97 	bl	80088b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	425b      	negs	r3, r3
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d207      	bcs.n	80063ae <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	425b      	negs	r3, r3
 80063a8:	441a      	add	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d105      	bne.n	80063c0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3b01      	subs	r3, #1
 80063be:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80063c8:	697b      	ldr	r3, [r7, #20]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d018      	beq.n	8006416 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d303      	bcc.n	8006406 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68d9      	ldr	r1, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	461a      	mov	r2, r3
 8006410:	6838      	ldr	r0, [r7, #0]
 8006412:	f002 fa4d 	bl	80088b0 <memcpy>
    }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006426:	f001 fefd 	bl	8008224 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006430:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006432:	e011      	b.n	8006458 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3324      	adds	r3, #36	; 0x24
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fca7 	bl	8006d94 <xTaskRemoveFromEventList>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800644c:	f000 fd80 	bl	8006f50 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	3b01      	subs	r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dce9      	bgt.n	8006434 <prvUnlockQueue+0x16>
 8006460:	e000      	b.n	8006464 <prvUnlockQueue+0x46>
                        break;
 8006462:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	22ff      	movs	r2, #255	; 0xff
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800646c:	f001 ff0a 	bl	8008284 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006470:	f001 fed8 	bl	8008224 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800647a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800647c:	e011      	b.n	80064a2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d012      	beq.n	80064ac <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3310      	adds	r3, #16
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fc82 	bl	8006d94 <xTaskRemoveFromEventList>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006496:	f000 fd5b 	bl	8006f50 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	3b01      	subs	r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dce9      	bgt.n	800647e <prvUnlockQueue+0x60>
 80064aa:	e000      	b.n	80064ae <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80064ac:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	22ff      	movs	r2, #255	; 0xff
 80064b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80064b6:	f001 fee5 	bl	8008284 <vPortExitCritical>
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80064ca:	f001 feab 	bl	8008224 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e001      	b.n	80064e0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80064e0:	f001 fed0 	bl	8008284 <vPortExitCritical>

    return xReturn;
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80064f6:	f001 fe95 	bl	8008224 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	429a      	cmp	r2, r3
 8006504:	d102      	bne.n	800650c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006506:	2301      	movs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e001      	b.n	8006510 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006510:	f001 feb8 	bl	8008284 <vPortExitCritical>

    return xReturn;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800651e:	b480      	push	{r7}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
    }
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	429a      	cmp	r2, r3
 8006550:	d102      	bne.n	8006558 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e001      	b.n	800655c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800655c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e014      	b.n	80065a6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800657c:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <vQueueAddToRegistry+0x50>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006588:	490c      	ldr	r1, [pc, #48]	; (80065bc <vQueueAddToRegistry+0x50>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <vQueueAddToRegistry+0x50>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800659e:	e006      	b.n	80065ae <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b07      	cmp	r3, #7
 80065aa:	d9e7      	bls.n	800657c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	2000017c 	.word	0x2000017c

080065c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80065d0:	f001 fe28 	bl	8008224 <vPortEnterCritical>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <vQueueWaitForMessageRestricted+0x2a>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d103      	bne.n	8006600 <vQueueWaitForMessageRestricted+0x40>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006600:	f001 fe40 	bl	8008284 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fb91 	bl	8006d3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800661a:	6978      	ldr	r0, [r7, #20]
 800661c:	f7ff feff 	bl	800641e <prvUnlockQueue>
    }
 8006620:	bf00      	nop
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af04      	add	r7, sp, #16
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 ff15 	bl	800846c <pvPortMalloc>
 8006642:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800664a:	205c      	movs	r0, #92	; 0x5c
 800664c:	f001 ff0e 	bl	800846c <pvPortMalloc>
 8006650:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
 800665e:	e005      	b.n	800666c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006660:	6978      	ldr	r0, [r7, #20]
 8006662:	f001 ffe3 	bl	800862c <vPortFree>
 8006666:	e001      	b.n	800666c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d013      	beq.n	800669a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	2300      	movs	r3, #0
 8006676:	9303      	str	r3, [sp, #12]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	9302      	str	r3, [sp, #8]
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f80e 	bl	80066aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800668e:	69f8      	ldr	r0, [r7, #28]
 8006690:	f000 f8a2 	bl	80067d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006694:	2301      	movs	r3, #1
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	e002      	b.n	80066a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80066a0:	69bb      	ldr	r3, [r7, #24]
    }
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b088      	sub	sp, #32
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	461a      	mov	r2, r3
 80066c2:	21a5      	movs	r1, #165	; 0xa5
 80066c4:	f002 f902 	bl	80088cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066d2:	3b01      	subs	r3, #1
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <prvInitialiseNewTask+0x58>
        __asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	617b      	str	r3, [r7, #20]
    }
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01f      	beq.n	8006748 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006708:	2300      	movs	r3, #0
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e012      	b.n	8006734 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	7819      	ldrb	r1, [r3, #0]
 8006716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	3334      	adds	r3, #52	; 0x34
 800671e:	460a      	mov	r2, r1
 8006720:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3301      	adds	r3, #1
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d9e9      	bls.n	800670e <prvInitialiseNewTask+0x64>
 800673a:	e000      	b.n	800673e <prvInitialiseNewTask+0x94>
            {
                break;
 800673c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006746:	e003      	b.n	8006750 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b04      	cmp	r3, #4
 8006754:	d901      	bls.n	800675a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006756:	2304      	movs	r3, #4
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006764:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2200      	movs	r2, #0
 800676a:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	3304      	adds	r3, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff f911 	bl	8005998 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	3318      	adds	r3, #24
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f90c 	bl	8005998 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006784:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	f1c3 0205 	rsb	r2, r3, #5
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006794:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	3354      	adds	r3, #84	; 0x54
 800679a:	2204      	movs	r2, #4
 800679c:	2100      	movs	r1, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	f002 f894 	bl	80088cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	3358      	adds	r3, #88	; 0x58
 80067a8:	2201      	movs	r2, #1
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f002 f88d 	bl	80088cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	69b8      	ldr	r0, [r7, #24]
 80067b8:	f001 fb8a 	bl	8007ed0 <pxPortInitialiseStack>
 80067bc:	4602      	mov	r2, r0
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80067ce:	bf00      	nop
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80067e0:	f001 fd20 	bl	8008224 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <prvAddNewTaskToReadyList+0xc0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <prvAddNewTaskToReadyList+0xc0>)
 80067ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80067ee:	4b2b      	ldr	r3, [pc, #172]	; (800689c <prvAddNewTaskToReadyList+0xc4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80067f6:	4a29      	ldr	r2, [pc, #164]	; (800689c <prvAddNewTaskToReadyList+0xc4>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067fc:	4b26      	ldr	r3, [pc, #152]	; (8006898 <prvAddNewTaskToReadyList+0xc0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d110      	bne.n	8006826 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006804:	f000 fbc8 	bl	8006f98 <prvInitialiseTaskLists>
 8006808:	e00d      	b.n	8006826 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800680a:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <prvAddNewTaskToReadyList+0xc8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006812:	4b22      	ldr	r3, [pc, #136]	; (800689c <prvAddNewTaskToReadyList+0xc4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	429a      	cmp	r2, r3
 800681e:	d802      	bhi.n	8006826 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006820:	4a1e      	ldr	r2, [pc, #120]	; (800689c <prvAddNewTaskToReadyList+0xc4>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006826:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <prvAddNewTaskToReadyList+0xcc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <prvAddNewTaskToReadyList+0xcc>)
 800682e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006830:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvAddNewTaskToReadyList+0xcc>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	2201      	movs	r2, #1
 800683e:	409a      	lsls	r2, r3
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <prvAddNewTaskToReadyList+0xd0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <prvAddNewTaskToReadyList+0xd0>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4a15      	ldr	r2, [pc, #84]	; (80068ac <prvAddNewTaskToReadyList+0xd4>)
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7ff f8a6 	bl	80059b2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006866:	f001 fd0d 	bl	8008284 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <prvAddNewTaskToReadyList+0xc8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00e      	beq.n	8006890 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006872:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvAddNewTaskToReadyList+0xc4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	429a      	cmp	r2, r3
 800687e:	d207      	bcs.n	8006890 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <prvAddNewTaskToReadyList+0xd8>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000294 	.word	0x20000294
 800689c:	200001bc 	.word	0x200001bc
 80068a0:	200002a0 	.word	0x200002a0
 80068a4:	200002b0 	.word	0x200002b0
 80068a8:	2000029c 	.word	0x2000029c
 80068ac:	200001c0 	.word	0x200001c0
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80068ba:	4b20      	ldr	r3, [pc, #128]	; (800693c <vTaskStartScheduler+0x88>)
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	491e      	ldr	r1, [pc, #120]	; (8006940 <vTaskStartScheduler+0x8c>)
 80068c8:	481e      	ldr	r0, [pc, #120]	; (8006944 <vTaskStartScheduler+0x90>)
 80068ca:	f7ff fead 	bl	8006628 <xTaskCreate>
 80068ce:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d102      	bne.n	80068dc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80068d6:	f000 ff6d 	bl	80077b4 <xTimerCreateTimerTask>
 80068da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d116      	bne.n	8006910 <vTaskStartScheduler+0x5c>
        __asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60bb      	str	r3, [r7, #8]
    }
 80068f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80068f6:	4b14      	ldr	r3, [pc, #80]	; (8006948 <vTaskStartScheduler+0x94>)
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <vTaskStartScheduler+0x98>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006904:	4b12      	ldr	r3, [pc, #72]	; (8006950 <vTaskStartScheduler+0x9c>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800690a:	f001 fb6b 	bl	8007fe4 <xPortStartScheduler>
 800690e:	e00e      	b.n	800692e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d10a      	bne.n	800692e <vTaskStartScheduler+0x7a>
        __asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	607b      	str	r3, [r7, #4]
    }
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <vTaskStartScheduler+0xa0>)
 8006930:	681b      	ldr	r3, [r3, #0]
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200002b8 	.word	0x200002b8
 8006940:	08008ab4 	.word	0x08008ab4
 8006944:	08006f69 	.word	0x08006f69
 8006948:	200002b4 	.word	0x200002b4
 800694c:	200002a0 	.word	0x200002a0
 8006950:	20000298 	.word	0x20000298
 8006954:	2000001c 	.word	0x2000001c

08006958 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <vTaskSuspendAll+0x18>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a03      	ldr	r2, [pc, #12]	; (8006970 <vTaskSuspendAll+0x18>)
 8006964:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	200002bc 	.word	0x200002bc

08006974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006982:	4b41      	ldr	r3, [pc, #260]	; (8006a88 <xTaskResumeAll+0x114>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	603b      	str	r3, [r7, #0]
    }
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80069a0:	f001 fc40 	bl	8008224 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80069a4:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <xTaskResumeAll+0x114>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4a37      	ldr	r2, [pc, #220]	; (8006a88 <xTaskResumeAll+0x114>)
 80069ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ae:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <xTaskResumeAll+0x114>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d161      	bne.n	8006a7a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b6:	4b35      	ldr	r3, [pc, #212]	; (8006a8c <xTaskResumeAll+0x118>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d05d      	beq.n	8006a7a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069be:	e02e      	b.n	8006a1e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c0:	4b33      	ldr	r3, [pc, #204]	; (8006a90 <xTaskResumeAll+0x11c>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff f84d 	bl	8005a6c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff f848 	bl	8005a6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	2201      	movs	r2, #1
 80069e2:	409a      	lsls	r2, r3
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <xTaskResumeAll+0x120>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	4a2a      	ldr	r2, [pc, #168]	; (8006a94 <xTaskResumeAll+0x120>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a27      	ldr	r2, [pc, #156]	; (8006a98 <xTaskResumeAll+0x124>)
 80069fc:	441a      	add	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fe ffd4 	bl	80059b2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4b23      	ldr	r3, [pc, #140]	; (8006a9c <xTaskResumeAll+0x128>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d302      	bcc.n	8006a1e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006a18:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <xTaskResumeAll+0x12c>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <xTaskResumeAll+0x11c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cc      	bne.n	80069c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006a2c:	f000 fb32 	bl	8007094 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a30:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <xTaskResumeAll+0x130>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006a3c:	f000 f846 	bl	8006acc <xTaskIncrementTick>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8006a46:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <xTaskResumeAll+0x12c>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f1      	bne.n	8006a3c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <xTaskResumeAll+0x130>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006a5e:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <xTaskResumeAll+0x12c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <xTaskResumeAll+0x134>)
 8006a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006a7a:	f001 fc03 	bl	8008284 <vPortExitCritical>

    return xAlreadyYielded;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	200002bc 	.word	0x200002bc
 8006a8c:	20000294 	.word	0x20000294
 8006a90:	20000254 	.word	0x20000254
 8006a94:	2000029c 	.word	0x2000029c
 8006a98:	200001c0 	.word	0x200001c0
 8006a9c:	200001bc 	.word	0x200001bc
 8006aa0:	200002a8 	.word	0x200002a8
 8006aa4:	200002a4 	.word	0x200002a4
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <xTaskGetTickCount+0x1c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006ab8:	687b      	ldr	r3, [r7, #4]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000298 	.word	0x20000298

08006acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad6:	4b4e      	ldr	r3, [pc, #312]	; (8006c10 <xTaskIncrementTick+0x144>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 808e 	bne.w	8006bfc <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae0:	4b4c      	ldr	r3, [pc, #304]	; (8006c14 <xTaskIncrementTick+0x148>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006ae8:	4a4a      	ldr	r2, [pc, #296]	; (8006c14 <xTaskIncrementTick+0x148>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d120      	bne.n	8006b36 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006af4:	4b48      	ldr	r3, [pc, #288]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <xTaskIncrementTick+0x48>
        __asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	603b      	str	r3, [r7, #0]
    }
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <xTaskIncrementTick+0x46>
 8006b14:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	4b40      	ldr	r3, [pc, #256]	; (8006c1c <xTaskIncrementTick+0x150>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3e      	ldr	r2, [pc, #248]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4a3e      	ldr	r2, [pc, #248]	; (8006c1c <xTaskIncrementTick+0x150>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <xTaskIncrementTick+0x154>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4a3c      	ldr	r2, [pc, #240]	; (8006c20 <xTaskIncrementTick+0x154>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	f000 faaf 	bl	8007094 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006b36:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d348      	bcc.n	8006bd2 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b40:	4b35      	ldr	r3, [pc, #212]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	4b36      	ldr	r3, [pc, #216]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	601a      	str	r2, [r3, #0]
                    break;
 8006b52:	e03e      	b.n	8006bd2 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b54:	4b30      	ldr	r3, [pc, #192]	; (8006c18 <xTaskIncrementTick+0x14c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d203      	bcs.n	8006b74 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <xTaskIncrementTick+0x158>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b72:	e02e      	b.n	8006bd2 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe ff77 	bl	8005a6c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	3318      	adds	r3, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe ff6e 	bl	8005a6c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <xTaskIncrementTick+0x15c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <xTaskIncrementTick+0x15c>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <xTaskIncrementTick+0x160>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe fefa 	bl	80059b2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <xTaskIncrementTick+0x164>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b9      	bcc.n	8006b40 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd0:	e7b6      	b.n	8006b40 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd2:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <xTaskIncrementTick+0x164>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd8:	4914      	ldr	r1, [pc, #80]	; (8006c2c <xTaskIncrementTick+0x160>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d901      	bls.n	8006bee <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <xTaskIncrementTick+0x168>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	e004      	b.n	8006c06 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <xTaskIncrementTick+0x16c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <xTaskIncrementTick+0x16c>)
 8006c04:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200002bc 	.word	0x200002bc
 8006c14:	20000298 	.word	0x20000298
 8006c18:	2000024c 	.word	0x2000024c
 8006c1c:	20000250 	.word	0x20000250
 8006c20:	200002ac 	.word	0x200002ac
 8006c24:	200002b4 	.word	0x200002b4
 8006c28:	2000029c 	.word	0x2000029c
 8006c2c:	200001c0 	.word	0x200001c0
 8006c30:	200001bc 	.word	0x200001bc
 8006c34:	200002a8 	.word	0x200002a8
 8006c38:	200002a4 	.word	0x200002a4

08006c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <vTaskSwitchContext+0xa4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006c50:	e03f      	b.n	8006cd2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <vTaskSwitchContext+0xa8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <vTaskSwitchContext+0xac>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	fab3 f383 	clz	r3, r3
 8006c64:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	f1c3 031f 	rsb	r3, r3, #31
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	491f      	ldr	r1, [pc, #124]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	607b      	str	r3, [r7, #4]
    }
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <vTaskSwitchContext+0x5a>
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4a12      	ldr	r2, [pc, #72]	; (8006cec <vTaskSwitchContext+0xb0>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d104      	bne.n	8006cc8 <vTaskSwitchContext+0x8c>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <vTaskSwitchContext+0xb4>)
 8006cd0:	6013      	str	r3, [r2, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	200002bc 	.word	0x200002bc
 8006ce4:	200002a8 	.word	0x200002a8
 8006ce8:	2000029c 	.word	0x2000029c
 8006cec:	200001c0 	.word	0x200001c0
 8006cf0:	200001bc 	.word	0x200001bc

08006cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
    }
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <vTaskPlaceOnEventList+0x44>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3318      	adds	r3, #24
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe fe69 	bl	80059fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6838      	ldr	r0, [r7, #0]
 8006d2c:	f000 fcdc 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200001bc 	.word	0x200001bc

08006d3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
    }
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3318      	adds	r3, #24
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7fe fe20 	bl	80059b2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68b8      	ldr	r0, [r7, #8]
 8006d82:	f000 fcb1 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
    }
 8006d86:	bf00      	nop
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200001bc 	.word	0x200001bc

08006d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60fb      	str	r3, [r7, #12]
    }
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fe51 	bl	8005a6c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <xTaskRemoveFromEventList+0xac>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11c      	bne.n	8006e0c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fe48 	bl	8005a6c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <xTaskRemoveFromEventList+0xb0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <xTaskRemoveFromEventList+0xb0>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <xTaskRemoveFromEventList+0xb4>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe fdd4 	bl	80059b2 <vListInsertEnd>
 8006e0a:	e005      	b.n	8006e18 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3318      	adds	r3, #24
 8006e10:	4619      	mov	r1, r3
 8006e12:	480e      	ldr	r0, [pc, #56]	; (8006e4c <xTaskRemoveFromEventList+0xb8>)
 8006e14:	f7fe fdcd 	bl	80059b2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <xTaskRemoveFromEventList+0xbc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d905      	bls.n	8006e32 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <xTaskRemoveFromEventList+0xc0>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e001      	b.n	8006e36 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006e36:	697b      	ldr	r3, [r7, #20]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200002bc 	.word	0x200002bc
 8006e44:	2000029c 	.word	0x2000029c
 8006e48:	200001c0 	.word	0x200001c0
 8006e4c:	20000254 	.word	0x20000254
 8006e50:	200001bc 	.word	0x200001bc
 8006e54:	200002a8 	.word	0x200002a8

08006e58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <vTaskInternalSetTimeOutState+0x24>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <vTaskInternalSetTimeOutState+0x28>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200002ac 	.word	0x200002ac
 8006e80:	20000298 	.word	0x20000298

08006e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	613b      	str	r3, [r7, #16]
    }
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
    }
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006ec6:	f001 f9ad 	bl	8008224 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006eca:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <xTaskCheckForTimeOut+0xc4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d102      	bne.n	8006eea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e026      	b.n	8006f38 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <xTaskCheckForTimeOut+0xc8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d00a      	beq.n	8006f0c <xTaskCheckForTimeOut+0x88>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d305      	bcc.n	8006f0c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e015      	b.n	8006f38 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d20b      	bcs.n	8006f2e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	1ad2      	subs	r2, r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff ff98 	bl	8006e58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e004      	b.n	8006f38 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f34:	2301      	movs	r3, #1
 8006f36:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006f38:	f001 f9a4 	bl	8008284 <vPortExitCritical>

    return xReturn;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000298 	.word	0x20000298
 8006f4c:	200002ac 	.word	0x200002ac

08006f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <vTaskMissedYield+0x14>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	200002a8 	.word	0x200002a8

08006f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006f70:	f000 f852 	bl	8007018 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <prvIdleTask+0x28>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d9f9      	bls.n	8006f70 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <prvIdleTask+0x2c>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006f8c:	e7f0      	b.n	8006f70 <prvIdleTask+0x8>
 8006f8e:	bf00      	nop
 8006f90:	200001c0 	.word	0x200001c0
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	e00c      	b.n	8006fbe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <prvInitialiseTaskLists+0x60>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fcd0 	bl	8005958 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d9ef      	bls.n	8006fa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006fc4:	480d      	ldr	r0, [pc, #52]	; (8006ffc <prvInitialiseTaskLists+0x64>)
 8006fc6:	f7fe fcc7 	bl	8005958 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006fca:	480d      	ldr	r0, [pc, #52]	; (8007000 <prvInitialiseTaskLists+0x68>)
 8006fcc:	f7fe fcc4 	bl	8005958 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006fd0:	480c      	ldr	r0, [pc, #48]	; (8007004 <prvInitialiseTaskLists+0x6c>)
 8006fd2:	f7fe fcc1 	bl	8005958 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006fd6:	480c      	ldr	r0, [pc, #48]	; (8007008 <prvInitialiseTaskLists+0x70>)
 8006fd8:	f7fe fcbe 	bl	8005958 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006fdc:	480b      	ldr	r0, [pc, #44]	; (800700c <prvInitialiseTaskLists+0x74>)
 8006fde:	f7fe fcbb 	bl	8005958 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <prvInitialiseTaskLists+0x78>)
 8006fe4:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <prvInitialiseTaskLists+0x64>)
 8006fe6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <prvInitialiseTaskLists+0x7c>)
 8006fea:	4a05      	ldr	r2, [pc, #20]	; (8007000 <prvInitialiseTaskLists+0x68>)
 8006fec:	601a      	str	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200001c0 	.word	0x200001c0
 8006ffc:	20000224 	.word	0x20000224
 8007000:	20000238 	.word	0x20000238
 8007004:	20000254 	.word	0x20000254
 8007008:	20000268 	.word	0x20000268
 800700c:	20000280 	.word	0x20000280
 8007010:	2000024c 	.word	0x2000024c
 8007014:	20000250 	.word	0x20000250

08007018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800701e:	e019      	b.n	8007054 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007020:	f001 f900 	bl	8008224 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <prvCheckTasksWaitingTermination+0x50>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe fd1b 	bl	8005a6c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007036:	4b0d      	ldr	r3, [pc, #52]	; (800706c <prvCheckTasksWaitingTermination+0x54>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b01      	subs	r3, #1
 800703c:	4a0b      	ldr	r2, [pc, #44]	; (800706c <prvCheckTasksWaitingTermination+0x54>)
 800703e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <prvCheckTasksWaitingTermination+0x58>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3b01      	subs	r3, #1
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <prvCheckTasksWaitingTermination+0x58>)
 8007048:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800704a:	f001 f91b 	bl	8008284 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f810 	bl	8007074 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvCheckTasksWaitingTermination+0x58>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e1      	bne.n	8007020 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000268 	.word	0x20000268
 800706c:	20000294 	.word	0x20000294
 8007070:	2000027c 	.word	0x2000027c

08007074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fad3 	bl	800862c <vPortFree>
                vPortFree( pxTCB );
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 fad0 	bl	800862c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvResetNextTaskUnblockTime+0x30>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <prvResetNextTaskUnblockTime+0x34>)
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80070aa:	e005      	b.n	80070b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <prvResetNextTaskUnblockTime+0x30>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <prvResetNextTaskUnblockTime+0x34>)
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	2000024c 	.word	0x2000024c
 80070c8:	200002b4 	.word	0x200002b4

080070cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <xTaskGetSchedulerState+0x34>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d102      	bne.n	80070e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80070da:	2301      	movs	r3, #1
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	e008      	b.n	80070f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <xTaskGetSchedulerState+0x38>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80070e8:	2302      	movs	r3, #2
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	e001      	b.n	80070f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80070f2:	687b      	ldr	r3, [r7, #4]
    }
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	200002a0 	.word	0x200002a0
 8007104:	200002bc 	.word	0x200002bc

08007108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d063      	beq.n	80071e6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800711e:	4b34      	ldr	r3, [pc, #208]	; (80071f0 <xTaskPriorityDisinherit+0xe8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d00a      	beq.n	800713e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
    }
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60bb      	str	r3, [r7, #8]
    }
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	429a      	cmp	r2, r3
 8007170:	d039      	beq.n	80071e6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007176:	2b00      	cmp	r3, #0
 8007178:	d135      	bne.n	80071e6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3304      	adds	r3, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc74 	bl	8005a6c <uxListRemove>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	2201      	movs	r2, #1
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	43da      	mvns	r2, r3
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <xTaskPriorityDisinherit+0xec>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4013      	ands	r3, r2
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <xTaskPriorityDisinherit+0xec>)
 800719e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	f1c3 0205 	rsb	r2, r3, #5
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <xTaskPriorityDisinherit+0xec>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	4a0c      	ldr	r2, [pc, #48]	; (80071f4 <xTaskPriorityDisinherit+0xec>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <xTaskPriorityDisinherit+0xf0>)
 80071d4:	441a      	add	r2, r3
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f7fe fbe8 	bl	80059b2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80071e2:	2301      	movs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80071e6:	697b      	ldr	r3, [r7, #20]
    }
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200001bc 	.word	0x200001bc
 80071f4:	2000029c 	.word	0x2000029c
 80071f8:	200001c0 	.word	0x200001c0

080071fc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
    }
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007226:	f000 fffd 	bl	8008224 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	3358      	adds	r3, #88	; 0x58
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d024      	beq.n	8007286 <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800723c:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3314      	adds	r3, #20
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	6859      	ldr	r1, [r3, #4]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	43db      	mvns	r3, r3
 800724e:	4019      	ands	r1, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3314      	adds	r3, #20
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800725a:	4b28      	ldr	r3, [pc, #160]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	3358      	adds	r3, #88	; 0x58
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800726e:	2101      	movs	r1, #1
 8007270:	6a38      	ldr	r0, [r7, #32]
 8007272:	f000 fa39 	bl	80076e8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007276:	4b22      	ldr	r3, [pc, #136]	; (8007300 <xTaskGenericNotifyWait+0x104>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007286:	f000 fffd 	bl	8008284 <vPortExitCritical>

        taskENTER_CRITICAL();
 800728a:	f000 ffcb 	bl	8008224 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3314      	adds	r3, #20
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	3358      	adds	r3, #88	; 0x58
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d002      	beq.n	80072be <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e010      	b.n	80072e0 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3314      	adds	r3, #20
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	6859      	ldr	r1, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	4019      	ands	r1, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3314      	adds	r3, #20
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <xTaskGenericNotifyWait+0x100>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	3358      	adds	r3, #88	; 0x58
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80072ee:	f000 ffc9 	bl	8008284 <vPortExitCritical>

        return xReturn;
 80072f2:	697b      	ldr	r3, [r7, #20]
    }
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200001bc 	.word	0x200001bc
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007304:	b580      	push	{r7, lr}
 8007306:	b08c      	sub	sp, #48	; 0x30
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8007312:	2301      	movs	r3, #1
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <xTaskGenericNotify+0x2e>
        __asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	623b      	str	r3, [r7, #32]
    }
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xTaskGenericNotify+0x4a>
        __asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61fb      	str	r3, [r7, #28]
    }
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8007352:	f000 ff67 	bl	8008224 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3314      	adds	r3, #20
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800736c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4413      	add	r3, r2
 8007372:	3358      	adds	r3, #88	; 0x58
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4413      	add	r3, r2
 8007380:	3358      	adds	r3, #88	; 0x58
 8007382:	2202      	movs	r2, #2
 8007384:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d841      	bhi.n	8007410 <xTaskGenericNotify+0x10c>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <xTaskGenericNotify+0x90>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	0800742f 	.word	0x0800742f
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073e3 	.word	0x080073e3
 80073a4:	080073f3 	.word	0x080073f3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80073a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3314      	adds	r3, #20
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3314      	adds	r3, #20
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	605a      	str	r2, [r3, #4]
                    break;
 80073c4:	e036      	b.n	8007434 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3314      	adds	r3, #20
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3314      	adds	r3, #20
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	605a      	str	r2, [r3, #4]
                    break;
 80073e0:	e028      	b.n	8007434 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80073e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3314      	adds	r3, #20
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
                    break;
 80073f0:	e020      	b.n	8007434 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d007      	beq.n	800740a <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80073fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3314      	adds	r3, #20
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007408:	e014      	b.n	8007434 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 800740a:	2300      	movs	r3, #0
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800740e:	e011      	b.n	8007434 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007410:	4b2b      	ldr	r3, [pc, #172]	; (80074c0 <xTaskGenericNotify+0x1bc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <xTaskGenericNotify+0x12e>
        __asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	61bb      	str	r3, [r7, #24]
    }
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xTaskGenericNotify+0x128>
                    break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <xTaskGenericNotify+0x130>

                    break;
 8007432:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007438:	2b01      	cmp	r3, #1
 800743a:	d139      	bne.n	80074b0 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fb13 	bl	8005a6c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	2201      	movs	r2, #1
 800744c:	409a      	lsls	r2, r3
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <xTaskGenericNotify+0x1c0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <xTaskGenericNotify+0x1c0>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <xTaskGenericNotify+0x1c4>)
 8007466:	441a      	add	r2, r3
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe fa9f 	bl	80059b2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <xTaskGenericNotify+0x18e>
        __asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	617b      	str	r3, [r7, #20]
    }
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <xTaskGenericNotify+0x1c8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d907      	bls.n	80074b0 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <xTaskGenericNotify+0x1cc>)
 80074a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074b0:	f000 fee8 	bl	8008284 <vPortExitCritical>

        return xReturn;
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80074b6:	4618      	mov	r0, r3
 80074b8:	3730      	adds	r7, #48	; 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000298 	.word	0x20000298
 80074c4:	2000029c 	.word	0x2000029c
 80074c8:	200001c0 	.word	0x200001c0
 80074cc:	200001bc 	.word	0x200001bc
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b090      	sub	sp, #64	; 0x40
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80074e2:	2301      	movs	r3, #1
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800751e:	f000 ff65 	bl	80083ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8007526:	f3ef 8211 	mrs	r2, BASEPRI
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	627a      	str	r2, [r7, #36]	; 0x24
 800753c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8007542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3314      	adds	r3, #20
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007556:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4413      	add	r3, r2
 800755e:	3358      	adds	r3, #88	; 0x58
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4413      	add	r3, r2
 800756c:	3358      	adds	r3, #88	; 0x58
 800756e:	2202      	movs	r2, #2
 8007570:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d841      	bhi.n	80075fc <xTaskGenericNotifyFromISR+0x128>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <xTaskGenericNotifyFromISR+0xac>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	0800761b 	.word	0x0800761b
 8007584:	08007595 	.word	0x08007595
 8007588:	080075b3 	.word	0x080075b3
 800758c:	080075cf 	.word	0x080075cf
 8007590:	080075df 	.word	0x080075df
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3314      	adds	r3, #20
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3314      	adds	r3, #20
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	605a      	str	r2, [r3, #4]
                    break;
 80075b0:	e036      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80075b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3314      	adds	r3, #20
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3314      	adds	r3, #20
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	605a      	str	r2, [r3, #4]
                    break;
 80075cc:	e028      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80075ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3314      	adds	r3, #20
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	605a      	str	r2, [r3, #4]
                    break;
 80075dc:	e020      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80075de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d007      	beq.n	80075f6 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80075e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3314      	adds	r3, #20
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80075f4:	e014      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80075fa:	e011      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80075fc:	4b33      	ldr	r3, [pc, #204]	; (80076cc <xTaskGenericNotifyFromISR+0x1f8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fb      	str	r3, [r7, #28]
    }
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 800761e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007624:	2b01      	cmp	r3, #1
 8007626:	d145      	bne.n	80076b4 <xTaskGenericNotifyFromISR+0x1e0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <xTaskGenericNotifyFromISR+0x172>
        __asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	61bb      	str	r3, [r7, #24]
    }
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskGenericNotifyFromISR+0x170>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007646:	4b22      	ldr	r3, [pc, #136]	; (80076d0 <xTaskGenericNotifyFromISR+0x1fc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d11c      	bne.n	8007688 <xTaskGenericNotifyFromISR+0x1b4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fa0a 	bl	8005a6c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <xTaskGenericNotifyFromISR+0x200>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4313      	orrs	r3, r2
 8007666:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <xTaskGenericNotifyFromISR+0x200>)
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <xTaskGenericNotifyFromISR+0x204>)
 8007678:	441a      	add	r2, r3
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	3304      	adds	r3, #4
 800767e:	4619      	mov	r1, r3
 8007680:	4610      	mov	r0, r2
 8007682:	f7fe f996 	bl	80059b2 <vListInsertEnd>
 8007686:	e005      	b.n	8007694 <xTaskGenericNotifyFromISR+0x1c0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	3318      	adds	r3, #24
 800768c:	4619      	mov	r1, r3
 800768e:	4813      	ldr	r0, [pc, #76]	; (80076dc <xTaskGenericNotifyFromISR+0x208>)
 8007690:	f7fe f98f 	bl	80059b2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <xTaskGenericNotifyFromISR+0x20c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d908      	bls.n	80076b4 <xTaskGenericNotifyFromISR+0x1e0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <xTaskGenericNotifyFromISR+0x1da>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80076a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <xTaskGenericNotifyFromISR+0x210>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f383 8811 	msr	BASEPRI, r3
    }
 80076be:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80076c2:	4618      	mov	r0, r3
 80076c4:	3740      	adds	r7, #64	; 0x40
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000298 	.word	0x20000298
 80076d0:	200002bc 	.word	0x200002bc
 80076d4:	2000029c 	.word	0x2000029c
 80076d8:	200001c0 	.word	0x200001c0
 80076dc:	20000254 	.word	0x20000254
 80076e0:	200001bc 	.word	0x200001bc
 80076e4:	200002a8 	.word	0x200002a8

080076e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80076f2:	4b29      	ldr	r3, [pc, #164]	; (8007798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f8:	4b28      	ldr	r3, [pc, #160]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe f9b4 	bl	8005a6c <uxListRemove>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	2201      	movs	r2, #1
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43da      	mvns	r2, r3
 8007718:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4013      	ands	r3, r2
 800771e:	4a20      	ldr	r2, [pc, #128]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007720:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d10a      	bne.n	8007740 <prvAddCurrentTaskToDelayedList+0x58>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007730:	4b1a      	ldr	r3, [pc, #104]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	481a      	ldr	r0, [pc, #104]	; (80077a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800773a:	f7fe f93a 	bl	80059b2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800773e:	e026      	b.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007748:	4b14      	ldr	r3, [pc, #80]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	429a      	cmp	r2, r3
 8007756:	d209      	bcs.n	800776c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fe f948 	bl	80059fa <vListInsert>
}
 800776a:	e010      	b.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7fe f93e 	bl	80059fa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800777e:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d202      	bcs.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007788:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6013      	str	r3, [r2, #0]
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000298 	.word	0x20000298
 800779c:	200001bc 	.word	0x200001bc
 80077a0:	2000029c 	.word	0x2000029c
 80077a4:	20000280 	.word	0x20000280
 80077a8:	20000250 	.word	0x20000250
 80077ac:	2000024c 	.word	0x2000024c
 80077b0:	200002b4 	.word	0x200002b4

080077b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80077be:	f000 fb31 	bl	8007e24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80077c2:	4b11      	ldr	r3, [pc, #68]	; (8007808 <xTimerCreateTimerTask+0x54>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <xTimerCreateTimerTask+0x58>)
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	2302      	movs	r3, #2
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d8:	490d      	ldr	r1, [pc, #52]	; (8007810 <xTimerCreateTimerTask+0x5c>)
 80077da:	480e      	ldr	r0, [pc, #56]	; (8007814 <xTimerCreateTimerTask+0x60>)
 80077dc:	f7fe ff24 	bl	8006628 <xTaskCreate>
 80077e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	603b      	str	r3, [r7, #0]
    }
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80077fe:	687b      	ldr	r3, [r7, #4]
    }
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200002f0 	.word	0x200002f0
 800780c:	200002f4 	.word	0x200002f4
 8007810:	08008abc 	.word	0x08008abc
 8007814:	08007a05 	.word	0x08007a05

08007818 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007826:	202c      	movs	r0, #44	; 0x2c
 8007828:	f000 fe20 	bl	800846c <pvPortMalloc>
 800782c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f805 	bl	800785a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007850:	697b      	ldr	r3, [r7, #20]
        }
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800785a:	b580      	push	{r7, lr}
 800785c:	b086      	sub	sp, #24
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	617b      	str	r3, [r7, #20]
    }
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01e      	beq.n	80078c8 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800788a:	f000 facb 	bl	8007e24 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe f874 	bl	8005998 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078bc:	f043 0304 	orr.w	r3, r3, #4
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80078de:	2300      	movs	r3, #0
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <xTimerGenericCommand+0x2e>
        __asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	623b      	str	r3, [r7, #32]
    }
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80078fe:	4b1a      	ldr	r3, [pc, #104]	; (8007968 <xTimerGenericCommand+0x98>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d02a      	beq.n	800795c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b05      	cmp	r3, #5
 8007916:	dc18      	bgt.n	800794a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007918:	f7ff fbd8 	bl	80070cc <xTaskGetSchedulerState>
 800791c:	4603      	mov	r3, r0
 800791e:	2b02      	cmp	r3, #2
 8007920:	d109      	bne.n	8007936 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <xTimerGenericCommand+0x98>)
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f107 0114 	add.w	r1, r7, #20
 800792a:	2300      	movs	r3, #0
 800792c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792e:	f7fe f9b1 	bl	8005c94 <xQueueGenericSend>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24
 8007934:	e012      	b.n	800795c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <xTimerGenericCommand+0x98>)
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f107 0114 	add.w	r1, r7, #20
 800793e:	2300      	movs	r3, #0
 8007940:	2200      	movs	r2, #0
 8007942:	f7fe f9a7 	bl	8005c94 <xQueueGenericSend>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24
 8007948:	e008      	b.n	800795c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800794a:	4b07      	ldr	r3, [pc, #28]	; (8007968 <xTimerGenericCommand+0x98>)
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f107 0114 	add.w	r1, r7, #20
 8007952:	2300      	movs	r3, #0
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	f7fe fa9b 	bl	8005e90 <xQueueGenericSendFromISR>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	; 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	200002f0 	.word	0x200002f0

0800796c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007976:	4b22      	ldr	r3, [pc, #136]	; (8007a00 <prvProcessExpiredTimer+0x94>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe f871 	bl	8005a6c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d022      	beq.n	80079de <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	18d1      	adds	r1, r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	6978      	ldr	r0, [r7, #20]
 80079a6:	f000 f8d1 	bl	8007b4c <prvInsertTimerInActiveList>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01f      	beq.n	80079f0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b0:	2300      	movs	r3, #0
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	2300      	movs	r3, #0
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	2100      	movs	r1, #0
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f7ff ff88 	bl	80078d0 <xTimerGenericCommand>
 80079c0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d113      	bne.n	80079f0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
    }
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	6978      	ldr	r0, [r7, #20]
 80079f6:	4798      	blx	r3
    }
 80079f8:	bf00      	nop
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	200002e8 	.word	0x200002e8

08007a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f857 	bl	8007ac4 <prvGetNextExpireTime>
 8007a16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f803 	bl	8007a28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007a22:	f000 f8d5 	bl	8007bd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a26:	e7f1      	b.n	8007a0c <prvTimerTask+0x8>

08007a28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007a32:	f7fe ff91 	bl	8006958 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a36:	f107 0308 	add.w	r3, r7, #8
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f866 	bl	8007b0c <prvSampleTimeNow>
 8007a40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d130      	bne.n	8007aaa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <prvProcessTimerOrBlockTask+0x3c>
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d806      	bhi.n	8007a64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007a56:	f7fe ff8d 	bl	8006974 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ff85 	bl	800796c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007a62:	e024      	b.n	8007aae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <prvProcessTimerOrBlockTask+0x90>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <prvProcessTimerOrBlockTask+0x50>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x52>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <prvProcessTimerOrBlockTask+0x94>)
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f7fe fd99 	bl	80065c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007a8e:	f7fe ff71 	bl	8006974 <xTaskResumeAll>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <prvProcessTimerOrBlockTask+0x98>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
    }
 8007aa8:	e001      	b.n	8007aae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007aaa:	f7fe ff63 	bl	8006974 <xTaskResumeAll>
    }
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	200002ec 	.word	0x200002ec
 8007abc:	200002f0 	.word	0x200002f0
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <prvGetNextExpireTime+0x44>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <prvGetNextExpireTime+0x16>
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	e000      	b.n	8007adc <prvGetNextExpireTime+0x18>
 8007ada:	2200      	movs	r2, #0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <prvGetNextExpireTime+0x44>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e001      	b.n	8007af8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007af8:	68fb      	ldr	r3, [r7, #12]
    }
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	200002e8 	.word	0x200002e8

08007b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007b14:	f7fe ffca 	bl	8006aac <xTaskGetTickCount>
 8007b18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <prvSampleTimeNow+0x3c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d205      	bcs.n	8007b30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007b24:	f000 f91a 	bl	8007d5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007b36:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <prvSampleTimeNow+0x3c>)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
    }
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200002f8 	.word	0x200002f8

08007b4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d812      	bhi.n	8007b98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d302      	bcc.n	8007b86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e01b      	b.n	8007bbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <prvInsertTimerInActiveList+0x7c>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7fd ff32 	bl	80059fa <vListInsert>
 8007b96:	e012      	b.n	8007bbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d206      	bcs.n	8007bae <prvInsertTimerInActiveList+0x62>
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e007      	b.n	8007bbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <prvInsertTimerInActiveList+0x80>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f7fd ff1e 	bl	80059fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007bbe:	697b      	ldr	r3, [r7, #20]
    }
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	200002ec 	.word	0x200002ec
 8007bcc:	200002e8 	.word	0x200002e8

08007bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08c      	sub	sp, #48	; 0x30
 8007bd4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bd6:	e0ae      	b.n	8007d36 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f2c0 80aa 	blt.w	8007d34 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd ff3b 	bl	8005a6c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf6:	1d3b      	adds	r3, r7, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff ff87 	bl	8007b0c <prvSampleTimeNow>
 8007bfe:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	f200 8097 	bhi.w	8007d36 <prvProcessReceivedCommands+0x166>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <prvProcessReceivedCommands+0x40>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007cad 	.word	0x08007cad
 8007c20:	08007cc1 	.word	0x08007cc1
 8007c24:	08007d0b 	.word	0x08007d0b
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c39 	.word	0x08007c39
 8007c30:	08007cad 	.word	0x08007cad
 8007c34:	08007cc1 	.word	0x08007cc1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	18d1      	adds	r1, r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a3a      	ldr	r2, [r7, #32]
 8007c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c58:	f7ff ff78 	bl	8007b4c <prvInsertTimerInActiveList>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d069      	beq.n	8007d36 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c68:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d05e      	beq.n	8007d36 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	441a      	add	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c8a:	f7ff fe21 	bl	80078d0 <xTimerGenericCommand>
 8007c8e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d14f      	bne.n	8007d36 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61bb      	str	r3, [r7, #24]
    }
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007cbe:	e03a      	b.n	8007d36 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	617b      	str	r3, [r7, #20]
    }
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	18d1      	adds	r1, r2, r3
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	6a3a      	ldr	r2, [r7, #32]
 8007d02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d04:	f7ff ff22 	bl	8007b4c <prvInsertTimerInActiveList>
                        break;
 8007d08:	e015      	b.n	8007d36 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d1a:	f000 fc87 	bl	800862c <vPortFree>
 8007d1e:	e00a      	b.n	8007d36 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007d32:	e000      	b.n	8007d36 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007d34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d36:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <prvProcessReceivedCommands+0x188>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f107 0108 	add.w	r1, r7, #8
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f94f 	bl	8005fe4 <xQueueReceive>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f47f af45 	bne.w	8007bd8 <prvProcessReceivedCommands+0x8>
        }
    }
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200002f0 	.word	0x200002f0

08007d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d62:	e048      	b.n	8007df6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d64:	4b2d      	ldr	r3, [pc, #180]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6e:	4b2b      	ldr	r3, [pc, #172]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fd fe75 	bl	8005a6c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d02e      	beq.n	8007df6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90e      	bls.n	8007dc8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f7fd fe1a 	bl	80059fa <vListInsert>
 8007dc6:	e016      	b.n	8007df6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fd7c 	bl	80078d0 <xTimerGenericCommand>
 8007dd8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	603b      	str	r3, [r7, #0]
    }
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1b1      	bne.n	8007d64 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <prvSwitchTimerLists+0xc4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a04      	ldr	r2, [pc, #16]	; (8007e1c <prvSwitchTimerLists+0xc0>)
 8007e0c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <prvSwitchTimerLists+0xc4>)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	6013      	str	r3, [r2, #0]
    }
 8007e14:	bf00      	nop
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	200002e8 	.word	0x200002e8
 8007e20:	200002ec 	.word	0x200002ec

08007e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007e28:	f000 f9fc 	bl	8008224 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <prvCheckForValidListAndQueue+0x54>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d11d      	bne.n	8007e70 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007e34:	4811      	ldr	r0, [pc, #68]	; (8007e7c <prvCheckForValidListAndQueue+0x58>)
 8007e36:	f7fd fd8f 	bl	8005958 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007e3a:	4811      	ldr	r0, [pc, #68]	; (8007e80 <prvCheckForValidListAndQueue+0x5c>)
 8007e3c:	f7fd fd8c 	bl	8005958 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e42:	4a0e      	ldr	r2, [pc, #56]	; (8007e7c <prvCheckForValidListAndQueue+0x58>)
 8007e44:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <prvCheckForValidListAndQueue+0x64>)
 8007e48:	4a0d      	ldr	r2, [pc, #52]	; (8007e80 <prvCheckForValidListAndQueue+0x5c>)
 8007e4a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	210c      	movs	r1, #12
 8007e50:	200a      	movs	r0, #10
 8007e52:	f7fd fe9d 	bl	8005b90 <xQueueGenericCreate>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4a07      	ldr	r2, [pc, #28]	; (8007e78 <prvCheckForValidListAndQueue+0x54>)
 8007e5a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <prvCheckForValidListAndQueue+0x54>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e64:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <prvCheckForValidListAndQueue+0x54>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4908      	ldr	r1, [pc, #32]	; (8007e8c <prvCheckForValidListAndQueue+0x68>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fb7e 	bl	800656c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007e70:	f000 fa08 	bl	8008284 <vPortExitCritical>
    }
 8007e74:	bf00      	nop
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200002f0 	.word	0x200002f0
 8007e7c:	200002c0 	.word	0x200002c0
 8007e80:	200002d4 	.word	0x200002d4
 8007e84:	200002e8 	.word	0x200002e8
 8007e88:	200002ec 	.word	0x200002ec
 8007e8c:	08008ac4 	.word	0x08008ac4

08007e90 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <pvTimerGetTimerID+0x28>
        __asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60fb      	str	r3, [r7, #12]
    }
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007eb8:	f000 f9b4 	bl	8008224 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007ec2:	f000 f9df 	bl	8008284 <vPortExitCritical>

        return pvReturn;
 8007ec6:	693b      	ldr	r3, [r7, #16]
    }
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ee8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3b04      	subs	r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 0201 	bic.w	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007f00:	4a0c      	ldr	r2, [pc, #48]	; (8007f34 <pxPortInitialiseStack+0x64>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b14      	subs	r3, #20
 8007f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3b04      	subs	r3, #4
 8007f16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f06f 0202 	mvn.w	r2, #2
 8007f1e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3b20      	subs	r3, #32
 8007f24:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	08007f39 	.word	0x08007f39

08007f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <prvTaskExitError+0x54>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d00a      	beq.n	8007f62 <prvTaskExitError+0x2a>
        __asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
    }
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <prvTaskExitError+0x28>
        __asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60bb      	str	r3, [r7, #8]
    }
 8007f74:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007f76:	bf00      	nop
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0fc      	beq.n	8007f78 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20000020 	.word	0x20000020

08007f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <pxCurrentTCBConst2>)
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	6808      	ldr	r0, [r1, #0]
 8007f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	f380 8809 	msr	PSP, r0
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	4770      	bx	lr
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst2>:
 8007fb0:	200001bc 	.word	0x200001bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007fb8:	4808      	ldr	r0, [pc, #32]	; (8007fdc <prvPortStartFirstTask+0x24>)
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	6800      	ldr	r0, [r0, #0]
 8007fbe:	f380 8808 	msr	MSP, r0
 8007fc2:	f04f 0000 	mov.w	r0, #0
 8007fc6:	f380 8814 	msr	CONTROL, r0
 8007fca:	b662      	cpsie	i
 8007fcc:	b661      	cpsie	f
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	df00      	svc	0
 8007fd8:	bf00      	nop
 8007fda:	0000      	.short	0x0000
 8007fdc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop

08007fe4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fea:	4b46      	ldr	r3, [pc, #280]	; (8008104 <xPortStartScheduler+0x120>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a46      	ldr	r2, [pc, #280]	; (8008108 <xPortStartScheduler+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d10a      	bne.n	800800a <xPortStartScheduler+0x26>
        __asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	613b      	str	r3, [r7, #16]
    }
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800800a:	4b3e      	ldr	r3, [pc, #248]	; (8008104 <xPortStartScheduler+0x120>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a3f      	ldr	r2, [pc, #252]	; (800810c <xPortStartScheduler+0x128>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10a      	bne.n	800802a <xPortStartScheduler+0x46>
        __asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	60fb      	str	r3, [r7, #12]
    }
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <xPortStartScheduler+0x12c>)
 800802c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800804c:	b2da      	uxtb	r2, r3
 800804e:	4b31      	ldr	r3, [pc, #196]	; (8008114 <xPortStartScheduler+0x130>)
 8008050:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008052:	4b31      	ldr	r3, [pc, #196]	; (8008118 <xPortStartScheduler+0x134>)
 8008054:	2207      	movs	r2, #7
 8008056:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008058:	e009      	b.n	800806e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800805a:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <xPortStartScheduler+0x134>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3b01      	subs	r3, #1
 8008060:	4a2d      	ldr	r2, [pc, #180]	; (8008118 <xPortStartScheduler+0x134>)
 8008062:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b80      	cmp	r3, #128	; 0x80
 8008078:	d0ef      	beq.n	800805a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800807a:	4b27      	ldr	r3, [pc, #156]	; (8008118 <xPortStartScheduler+0x134>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f1c3 0307 	rsb	r3, r3, #7
 8008082:	2b04      	cmp	r3, #4
 8008084:	d00a      	beq.n	800809c <xPortStartScheduler+0xb8>
        __asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60bb      	str	r3, [r7, #8]
    }
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800809c:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <xPortStartScheduler+0x134>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <xPortStartScheduler+0x134>)
 80080a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <xPortStartScheduler+0x134>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ae:	4a1a      	ldr	r2, [pc, #104]	; (8008118 <xPortStartScheduler+0x134>)
 80080b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <xPortStartScheduler+0x138>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a17      	ldr	r2, [pc, #92]	; (800811c <xPortStartScheduler+0x138>)
 80080c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <xPortStartScheduler+0x138>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a14      	ldr	r2, [pc, #80]	; (800811c <xPortStartScheduler+0x138>)
 80080cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80080d2:	f000 f95b 	bl	800838c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <xPortStartScheduler+0x13c>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80080dc:	f000 f97a 	bl	80083d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080e0:	4b10      	ldr	r3, [pc, #64]	; (8008124 <xPortStartScheduler+0x140>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <xPortStartScheduler+0x140>)
 80080e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80080ec:	f7ff ff64 	bl	8007fb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80080f0:	f7fe fda4 	bl	8006c3c <vTaskSwitchContext>
    prvTaskExitError();
 80080f4:	f7ff ff20 	bl	8007f38 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	e000ed00 	.word	0xe000ed00
 8008108:	410fc271 	.word	0x410fc271
 800810c:	410fc270 	.word	0x410fc270
 8008110:	e000e400 	.word	0xe000e400
 8008114:	200002fc 	.word	0x200002fc
 8008118:	20000300 	.word	0x20000300
 800811c:	e000ed20 	.word	0xe000ed20
 8008120:	20000020 	.word	0x20000020
 8008124:	e000ef34 	.word	0xe000ef34

08008128 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800812e:	4b37      	ldr	r3, [pc, #220]	; (800820c <vInitPrioGroupValue+0xe4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a37      	ldr	r2, [pc, #220]	; (8008210 <vInitPrioGroupValue+0xe8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d10a      	bne.n	800814e <vInitPrioGroupValue+0x26>
        __asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	613b      	str	r3, [r7, #16]
    }
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <vInitPrioGroupValue+0xe4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a30      	ldr	r2, [pc, #192]	; (8008214 <vInitPrioGroupValue+0xec>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d10a      	bne.n	800816e <vInitPrioGroupValue+0x46>
        __asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
    }
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800816e:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <vInitPrioGroupValue+0xf0>)
 8008170:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008190:	b2da      	uxtb	r2, r3
 8008192:	4b22      	ldr	r3, [pc, #136]	; (800821c <vInitPrioGroupValue+0xf4>)
 8008194:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008196:	4b22      	ldr	r3, [pc, #136]	; (8008220 <vInitPrioGroupValue+0xf8>)
 8008198:	2207      	movs	r2, #7
 800819a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800819c:	e009      	b.n	80081b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d0ef      	beq.n	800819e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081be:	4b18      	ldr	r3, [pc, #96]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1c3 0307 	rsb	r3, r3, #7
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d00a      	beq.n	80081e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60bb      	str	r3, [r7, #8]
    }
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	4a0e      	ldr	r2, [pc, #56]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081ea:	4b0d      	ldr	r3, [pc, #52]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081f2:	4a0b      	ldr	r2, [pc, #44]	; (8008220 <vInitPrioGroupValue+0xf8>)
 80081f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	e000ed00 	.word	0xe000ed00
 8008210:	410fc271 	.word	0x410fc271
 8008214:	410fc270 	.word	0x410fc270
 8008218:	e000e400 	.word	0xe000e400
 800821c:	200002fc 	.word	0x200002fc
 8008220:	20000300 	.word	0x20000300

08008224 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
        __asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	607b      	str	r3, [r7, #4]
    }
 800823c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <vPortEnterCritical+0x58>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a0d      	ldr	r2, [pc, #52]	; (800827c <vPortEnterCritical+0x58>)
 8008246:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <vPortEnterCritical+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortEnterCritical+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <vPortEnterCritical+0x4c>
        __asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
    }
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x4a>
    }
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000020 	.word	0x20000020
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <vPortExitCritical+0x50>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortExitCritical+0x24>
        __asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	607b      	str	r3, [r7, #4]
    }
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vPortExitCritical+0x50>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <vPortExitCritical+0x50>)
 80082b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <vPortExitCritical+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <vPortExitCritical+0x42>
 80082ba:	2300      	movs	r3, #0
 80082bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f383 8811 	msr	BASEPRI, r3
    }
 80082c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000020 	.word	0x20000020
	...

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	f380 8811 	msr	BASEPRI, r0
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f7fe fc94 	bl	8006c3c <vTaskSwitchContext>
 8008314:	f04f 0000 	mov.w	r0, #0
 8008318:	f380 8811 	msr	BASEPRI, r0
 800831c:	bc09      	pop	{r0, r3}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008326:	f01e 0f10 	tst.w	lr, #16
 800832a:	bf08      	it	eq
 800832c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008330:	f380 8809 	msr	PSP, r0
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst>:
 8008340:	200001bc 	.word	0x200001bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
        __asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
    }
 8008360:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008362:	f7fe fbb3 	bl	8006acc <xTaskIncrementTick>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <SysTick_Handler+0x40>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
    }
 800837e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x38>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <vPortSetupTimerInterrupt+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x40>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <vPortSetupTimerInterrupt+0x44>)
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vPortSetupTimerInterrupt+0x34>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	601a      	str	r2, [r3, #0]
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	e000e010 	.word	0xe000e010
 80083c4:	e000e018 	.word	0xe000e018
 80083c8:	2000000c 	.word	0x2000000c
 80083cc:	10624dd3 	.word	0x10624dd3
 80083d0:	e000e014 	.word	0xe000e014

080083d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80083d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e4 <vPortEnableVFP+0x10>
 80083d8:	6801      	ldr	r1, [r0, #0]
 80083da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083de:	6001      	str	r1, [r0, #0]
 80083e0:	4770      	bx	lr
 80083e2:	0000      	.short	0x0000
 80083e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop

080083ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80083f2:	f3ef 8305 	mrs	r3, IPSR
 80083f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b0f      	cmp	r3, #15
 80083fc:	d914      	bls.n	8008428 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fe:	4a17      	ldr	r2, [pc, #92]	; (800845c <vPortValidateInterruptPriority+0x70>)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <vPortValidateInterruptPriority+0x74>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	7afa      	ldrb	r2, [r7, #11]
 800840e:	429a      	cmp	r2, r3
 8008410:	d20a      	bcs.n	8008428 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
    }
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <vPortValidateInterruptPriority+0x78>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <vPortValidateInterruptPriority+0x7c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d90a      	bls.n	800844e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	603b      	str	r3, [r7, #0]
    }
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <vPortValidateInterruptPriority+0x60>
    }
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	e000e3f0 	.word	0xe000e3f0
 8008460:	200002fc 	.word	0x200002fc
 8008464:	e000ed0c 	.word	0xe000ed0c
 8008468:	20000300 	.word	0x20000300

0800846c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008478:	f7fe fa6e 	bl	8006958 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800847c:	4b65      	ldr	r3, [pc, #404]	; (8008614 <pvPortMalloc+0x1a8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008484:	f000 f934 	bl	80086f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008488:	4b63      	ldr	r3, [pc, #396]	; (8008618 <pvPortMalloc+0x1ac>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4013      	ands	r3, r2
 8008490:	2b00      	cmp	r3, #0
 8008492:	f040 80a7 	bne.w	80085e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d02d      	beq.n	80084f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800849c:	2208      	movs	r2, #8
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d227      	bcs.n	80084f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80084a8:	2208      	movs	r2, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d021      	beq.n	80084fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f023 0307 	bic.w	r3, r3, #7
 80084c0:	3308      	adds	r3, #8
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d214      	bcs.n	80084f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	3308      	adds	r3, #8
 80084d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <pvPortMalloc+0x92>
        __asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	617b      	str	r3, [r7, #20]
    }
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084f6:	e002      	b.n	80084fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	e000      	b.n	8008500 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d06e      	beq.n	80085e4 <pvPortMalloc+0x178>
 8008506:	4b45      	ldr	r3, [pc, #276]	; (800861c <pvPortMalloc+0x1b0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d869      	bhi.n	80085e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008510:	4b43      	ldr	r3, [pc, #268]	; (8008620 <pvPortMalloc+0x1b4>)
 8008512:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008514:	4b42      	ldr	r3, [pc, #264]	; (8008620 <pvPortMalloc+0x1b4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800851a:	e004      	b.n	8008526 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d903      	bls.n	8008538 <pvPortMalloc+0xcc>
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f1      	bne.n	800851c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008538:	4b36      	ldr	r3, [pc, #216]	; (8008614 <pvPortMalloc+0x1a8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853e:	429a      	cmp	r2, r3
 8008540:	d050      	beq.n	80085e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2208      	movs	r2, #8
 8008548:	4413      	add	r3, r2
 800854a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	1ad2      	subs	r2, r2, r3
 800855c:	2308      	movs	r3, #8
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	429a      	cmp	r2, r3
 8008562:	d91f      	bls.n	80085a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <pvPortMalloc+0x120>
        __asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	613b      	str	r3, [r7, #16]
    }
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800859e:	69b8      	ldr	r0, [r7, #24]
 80085a0:	f000 f908 	bl	80087b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085a4:	4b1d      	ldr	r3, [pc, #116]	; (800861c <pvPortMalloc+0x1b0>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	4a1b      	ldr	r2, [pc, #108]	; (800861c <pvPortMalloc+0x1b0>)
 80085b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085b2:	4b1a      	ldr	r3, [pc, #104]	; (800861c <pvPortMalloc+0x1b0>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <pvPortMalloc+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d203      	bcs.n	80085c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085be:	4b17      	ldr	r3, [pc, #92]	; (800861c <pvPortMalloc+0x1b0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <pvPortMalloc+0x1b8>)
 80085c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	4b13      	ldr	r3, [pc, #76]	; (8008618 <pvPortMalloc+0x1ac>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <pvPortMalloc+0x1bc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	4a11      	ldr	r2, [pc, #68]	; (8008628 <pvPortMalloc+0x1bc>)
 80085e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80085e4:	f7fe f9c6 	bl	8006974 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <pvPortMalloc+0x19c>
        __asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60fb      	str	r3, [r7, #12]
    }
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <pvPortMalloc+0x19a>
    return pvReturn;
 8008608:	69fb      	ldr	r3, [r7, #28]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2000230c 	.word	0x2000230c
 8008618:	20002320 	.word	0x20002320
 800861c:	20002310 	.word	0x20002310
 8008620:	20002304 	.word	0x20002304
 8008624:	20002314 	.word	0x20002314
 8008628:	20002318 	.word	0x20002318

0800862c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d04d      	beq.n	80086da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800863e:	2308      	movs	r3, #8
 8008640:	425b      	negs	r3, r3
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <vPortFree+0xb8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10a      	bne.n	8008670 <vPortFree+0x44>
        __asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	60fb      	str	r3, [r7, #12]
    }
 800866c:	bf00      	nop
 800866e:	e7fe      	b.n	800866e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <vPortFree+0x62>
        __asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	60bb      	str	r3, [r7, #8]
    }
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <vPortFree+0xb8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4013      	ands	r3, r2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01e      	beq.n	80086da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11a      	bne.n	80086da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <vPortFree+0xb8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80086b4:	f7fe f950 	bl	8006958 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <vPortFree+0xbc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <vPortFree+0xbc>)
 80086c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086c6:	6938      	ldr	r0, [r7, #16]
 80086c8:	f000 f874 	bl	80087b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <vPortFree+0xc0>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a06      	ldr	r2, [pc, #24]	; (80086ec <vPortFree+0xc0>)
 80086d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80086d6:	f7fe f94d 	bl	8006974 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80086da:	bf00      	nop
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20002320 	.word	0x20002320
 80086e8:	20002310 	.word	0x20002310
 80086ec:	2000231c 	.word	0x2000231c

080086f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80086fc:	4b27      	ldr	r3, [pc, #156]	; (800879c <prvHeapInit+0xac>)
 80086fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00c      	beq.n	8008724 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0307 	bic.w	r3, r3, #7
 8008716:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	4a1f      	ldr	r2, [pc, #124]	; (800879c <prvHeapInit+0xac>)
 8008720:	4413      	add	r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008728:	4a1d      	ldr	r2, [pc, #116]	; (80087a0 <prvHeapInit+0xb0>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800872e:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <prvHeapInit+0xb0>)
 8008730:	2200      	movs	r2, #0
 8008732:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800873c:	2208      	movs	r2, #8
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a15      	ldr	r2, [pc, #84]	; (80087a4 <prvHeapInit+0xb4>)
 8008750:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008752:	4b14      	ldr	r3, [pc, #80]	; (80087a4 <prvHeapInit+0xb4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <prvHeapInit+0xb4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <prvHeapInit+0xb4>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <prvHeapInit+0xb8>)
 800877e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <prvHeapInit+0xbc>)
 8008786:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008788:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <prvHeapInit+0xc0>)
 800878a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800878e:	601a      	str	r2, [r3, #0]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20000304 	.word	0x20000304
 80087a0:	20002304 	.word	0x20002304
 80087a4:	2000230c 	.word	0x2000230c
 80087a8:	20002314 	.word	0x20002314
 80087ac:	20002310 	.word	0x20002310
 80087b0:	20002320 	.word	0x20002320

080087b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087bc:	4b28      	ldr	r3, [pc, #160]	; (8008860 <prvInsertBlockIntoFreeList+0xac>)
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e002      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x14>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d8f7      	bhi.n	80087c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d108      	bne.n	80087f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d118      	bne.n	800883c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b15      	ldr	r3, [pc, #84]	; (8008864 <prvInsertBlockIntoFreeList+0xb0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d00d      	beq.n	8008832 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	441a      	add	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e008      	b.n	8008844 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008832:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <prvInsertBlockIntoFreeList+0xb0>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e003      	b.n	8008844 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	429a      	cmp	r2, r3
 800884a:	d002      	beq.n	8008852 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20002304 	.word	0x20002304
 8008864:	2000230c 	.word	0x2000230c

08008868 <__libc_init_array>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4d0d      	ldr	r5, [pc, #52]	; (80088a0 <__libc_init_array+0x38>)
 800886c:	4c0d      	ldr	r4, [pc, #52]	; (80088a4 <__libc_init_array+0x3c>)
 800886e:	1b64      	subs	r4, r4, r5
 8008870:	10a4      	asrs	r4, r4, #2
 8008872:	2600      	movs	r6, #0
 8008874:	42a6      	cmp	r6, r4
 8008876:	d109      	bne.n	800888c <__libc_init_array+0x24>
 8008878:	4d0b      	ldr	r5, [pc, #44]	; (80088a8 <__libc_init_array+0x40>)
 800887a:	4c0c      	ldr	r4, [pc, #48]	; (80088ac <__libc_init_array+0x44>)
 800887c:	f000 f842 	bl	8008904 <_init>
 8008880:	1b64      	subs	r4, r4, r5
 8008882:	10a4      	asrs	r4, r4, #2
 8008884:	2600      	movs	r6, #0
 8008886:	42a6      	cmp	r6, r4
 8008888:	d105      	bne.n	8008896 <__libc_init_array+0x2e>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008890:	4798      	blx	r3
 8008892:	3601      	adds	r6, #1
 8008894:	e7ee      	b.n	8008874 <__libc_init_array+0xc>
 8008896:	f855 3b04 	ldr.w	r3, [r5], #4
 800889a:	4798      	blx	r3
 800889c:	3601      	adds	r6, #1
 800889e:	e7f2      	b.n	8008886 <__libc_init_array+0x1e>
 80088a0:	08008b9c 	.word	0x08008b9c
 80088a4:	08008b9c 	.word	0x08008b9c
 80088a8:	08008b9c 	.word	0x08008b9c
 80088ac:	08008ba0 	.word	0x08008ba0

080088b0 <memcpy>:
 80088b0:	440a      	add	r2, r1
 80088b2:	4291      	cmp	r1, r2
 80088b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b8:	d100      	bne.n	80088bc <memcpy+0xc>
 80088ba:	4770      	bx	lr
 80088bc:	b510      	push	{r4, lr}
 80088be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c6:	4291      	cmp	r1, r2
 80088c8:	d1f9      	bne.n	80088be <memcpy+0xe>
 80088ca:	bd10      	pop	{r4, pc}

080088cc <memset>:
 80088cc:	4402      	add	r2, r0
 80088ce:	4603      	mov	r3, r0
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d100      	bne.n	80088d6 <memset+0xa>
 80088d4:	4770      	bx	lr
 80088d6:	f803 1b01 	strb.w	r1, [r3], #1
 80088da:	e7f9      	b.n	80088d0 <memset+0x4>

080088dc <strncmp>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	b17a      	cbz	r2, 8008900 <strncmp+0x24>
 80088e0:	4603      	mov	r3, r0
 80088e2:	3901      	subs	r1, #1
 80088e4:	1884      	adds	r4, r0, r2
 80088e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80088ee:	4290      	cmp	r0, r2
 80088f0:	d101      	bne.n	80088f6 <strncmp+0x1a>
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	d101      	bne.n	80088fa <strncmp+0x1e>
 80088f6:	1a80      	subs	r0, r0, r2
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1f3      	bne.n	80088e6 <strncmp+0xa>
 80088fe:	e7fa      	b.n	80088f6 <strncmp+0x1a>
 8008900:	4610      	mov	r0, r2
 8008902:	e7f9      	b.n	80088f8 <strncmp+0x1c>

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
