
QueuesnTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000845c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000008  08008838  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016fc  20000024  08008854  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001720  08008854  00021720  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b3bc  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a50  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018f8  00000000  00000000  0003ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017a0  00000000  00000000  00040758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020604  00000000  00000000  00041ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a874  00000000  00000000  000624fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb3c0  00000000  00000000  0007cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00148130  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006880  00000000  00000000  00148180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000024 	.word	0x20000024
 800015c:	00000000 	.word	0x00000000
 8000160:	08008584 	.word	0x08008584

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000028 	.word	0x20000028
 800017c:	08008584 	.word	0x08008584

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b974 	b.w	8000490 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9d08      	ldr	r5, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	468e      	mov	lr, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14d      	bne.n	800026a <__udivmoddi4+0xaa>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4694      	mov	ip, r2
 80001d2:	d969      	bls.n	80002a8 <__udivmoddi4+0xe8>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b152      	cbz	r2, 80001f0 <__udivmoddi4+0x30>
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	f1c2 0120 	rsb	r1, r2, #32
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ea:	ea41 0e03 	orr.w	lr, r1, r3
 80001ee:	4094      	lsls	r4, r2
 80001f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001f4:	0c21      	lsrs	r1, r4, #16
 80001f6:	fbbe f6f8 	udiv	r6, lr, r8
 80001fa:	fa1f f78c 	uxth.w	r7, ip
 80001fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000202:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000206:	fb06 f107 	mul.w	r1, r6, r7
 800020a:	4299      	cmp	r1, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x64>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f106 30ff 	add.w	r0, r6, #4294967295
 8000216:	f080 811f 	bcs.w	8000458 <__udivmoddi4+0x298>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 811c 	bls.w	8000458 <__udivmoddi4+0x298>
 8000220:	3e02      	subs	r6, #2
 8000222:	4463      	add	r3, ip
 8000224:	1a5b      	subs	r3, r3, r1
 8000226:	b2a4      	uxth	r4, r4
 8000228:	fbb3 f0f8 	udiv	r0, r3, r8
 800022c:	fb08 3310 	mls	r3, r8, r0, r3
 8000230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000234:	fb00 f707 	mul.w	r7, r0, r7
 8000238:	42a7      	cmp	r7, r4
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x92>
 800023c:	eb1c 0404 	adds.w	r4, ip, r4
 8000240:	f100 33ff 	add.w	r3, r0, #4294967295
 8000244:	f080 810a 	bcs.w	800045c <__udivmoddi4+0x29c>
 8000248:	42a7      	cmp	r7, r4
 800024a:	f240 8107 	bls.w	800045c <__udivmoddi4+0x29c>
 800024e:	4464      	add	r4, ip
 8000250:	3802      	subs	r0, #2
 8000252:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000256:	1be4      	subs	r4, r4, r7
 8000258:	2600      	movs	r6, #0
 800025a:	b11d      	cbz	r5, 8000264 <__udivmoddi4+0xa4>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	e9c5 4300 	strd	r4, r3, [r5]
 8000264:	4631      	mov	r1, r6
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0xc2>
 800026e:	2d00      	cmp	r5, #0
 8000270:	f000 80ef 	beq.w	8000452 <__udivmoddi4+0x292>
 8000274:	2600      	movs	r6, #0
 8000276:	e9c5 0100 	strd	r0, r1, [r5]
 800027a:	4630      	mov	r0, r6
 800027c:	4631      	mov	r1, r6
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f683 	clz	r6, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d14a      	bne.n	8000320 <__udivmoddi4+0x160>
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd4>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80f9 	bhi.w	8000486 <__udivmoddi4+0x2c6>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb61 0303 	sbc.w	r3, r1, r3
 800029a:	2001      	movs	r0, #1
 800029c:	469e      	mov	lr, r3
 800029e:	2d00      	cmp	r5, #0
 80002a0:	d0e0      	beq.n	8000264 <__udivmoddi4+0xa4>
 80002a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002a6:	e7dd      	b.n	8000264 <__udivmoddi4+0xa4>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xec>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 8092 	bne.w	80003da <__udivmoddi4+0x21a>
 80002b6:	eba1 010c 	sub.w	r1, r1, ip
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f fe8c 	uxth.w	lr, ip
 80002c2:	2601      	movs	r6, #1
 80002c4:	0c20      	lsrs	r0, r4, #16
 80002c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ca:	fb07 1113 	mls	r1, r7, r3, r1
 80002ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002d2:	fb0e f003 	mul.w	r0, lr, r3
 80002d6:	4288      	cmp	r0, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x12c>
 80002da:	eb1c 0101 	adds.w	r1, ip, r1
 80002de:	f103 38ff 	add.w	r8, r3, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x12a>
 80002e4:	4288      	cmp	r0, r1
 80002e6:	f200 80cb 	bhi.w	8000480 <__udivmoddi4+0x2c0>
 80002ea:	4643      	mov	r3, r8
 80002ec:	1a09      	subs	r1, r1, r0
 80002ee:	b2a4      	uxth	r4, r4
 80002f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002f4:	fb07 1110 	mls	r1, r7, r0, r1
 80002f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000300:	45a6      	cmp	lr, r4
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x156>
 8000304:	eb1c 0404 	adds.w	r4, ip, r4
 8000308:	f100 31ff 	add.w	r1, r0, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x154>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f200 80bb 	bhi.w	800048a <__udivmoddi4+0x2ca>
 8000314:	4608      	mov	r0, r1
 8000316:	eba4 040e 	sub.w	r4, r4, lr
 800031a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031e:	e79c      	b.n	800025a <__udivmoddi4+0x9a>
 8000320:	f1c6 0720 	rsb	r7, r6, #32
 8000324:	40b3      	lsls	r3, r6
 8000326:	fa22 fc07 	lsr.w	ip, r2, r7
 800032a:	ea4c 0c03 	orr.w	ip, ip, r3
 800032e:	fa20 f407 	lsr.w	r4, r0, r7
 8000332:	fa01 f306 	lsl.w	r3, r1, r6
 8000336:	431c      	orrs	r4, r3
 8000338:	40f9      	lsrs	r1, r7
 800033a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800033e:	fa00 f306 	lsl.w	r3, r0, r6
 8000342:	fbb1 f8f9 	udiv	r8, r1, r9
 8000346:	0c20      	lsrs	r0, r4, #16
 8000348:	fa1f fe8c 	uxth.w	lr, ip
 800034c:	fb09 1118 	mls	r1, r9, r8, r1
 8000350:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000354:	fb08 f00e 	mul.w	r0, r8, lr
 8000358:	4288      	cmp	r0, r1
 800035a:	fa02 f206 	lsl.w	r2, r2, r6
 800035e:	d90b      	bls.n	8000378 <__udivmoddi4+0x1b8>
 8000360:	eb1c 0101 	adds.w	r1, ip, r1
 8000364:	f108 3aff 	add.w	sl, r8, #4294967295
 8000368:	f080 8088 	bcs.w	800047c <__udivmoddi4+0x2bc>
 800036c:	4288      	cmp	r0, r1
 800036e:	f240 8085 	bls.w	800047c <__udivmoddi4+0x2bc>
 8000372:	f1a8 0802 	sub.w	r8, r8, #2
 8000376:	4461      	add	r1, ip
 8000378:	1a09      	subs	r1, r1, r0
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000380:	fb09 1110 	mls	r1, r9, r0, r1
 8000384:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	458e      	cmp	lr, r1
 800038e:	d908      	bls.n	80003a2 <__udivmoddi4+0x1e2>
 8000390:	eb1c 0101 	adds.w	r1, ip, r1
 8000394:	f100 34ff 	add.w	r4, r0, #4294967295
 8000398:	d26c      	bcs.n	8000474 <__udivmoddi4+0x2b4>
 800039a:	458e      	cmp	lr, r1
 800039c:	d96a      	bls.n	8000474 <__udivmoddi4+0x2b4>
 800039e:	3802      	subs	r0, #2
 80003a0:	4461      	add	r1, ip
 80003a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a6:	fba0 9402 	umull	r9, r4, r0, r2
 80003aa:	eba1 010e 	sub.w	r1, r1, lr
 80003ae:	42a1      	cmp	r1, r4
 80003b0:	46c8      	mov	r8, r9
 80003b2:	46a6      	mov	lr, r4
 80003b4:	d356      	bcc.n	8000464 <__udivmoddi4+0x2a4>
 80003b6:	d053      	beq.n	8000460 <__udivmoddi4+0x2a0>
 80003b8:	b15d      	cbz	r5, 80003d2 <__udivmoddi4+0x212>
 80003ba:	ebb3 0208 	subs.w	r2, r3, r8
 80003be:	eb61 010e 	sbc.w	r1, r1, lr
 80003c2:	fa01 f707 	lsl.w	r7, r1, r7
 80003c6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ca:	40f1      	lsrs	r1, r6
 80003cc:	431f      	orrs	r7, r3
 80003ce:	e9c5 7100 	strd	r7, r1, [r5]
 80003d2:	2600      	movs	r6, #0
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	40d8      	lsrs	r0, r3
 80003e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e4:	fa21 f303 	lsr.w	r3, r1, r3
 80003e8:	4091      	lsls	r1, r2
 80003ea:	4301      	orrs	r1, r0
 80003ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003f8:	fb07 3610 	mls	r6, r7, r0, r3
 80003fc:	0c0b      	lsrs	r3, r1, #16
 80003fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000402:	fb00 f60e 	mul.w	r6, r0, lr
 8000406:	429e      	cmp	r6, r3
 8000408:	fa04 f402 	lsl.w	r4, r4, r2
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x260>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 38ff 	add.w	r8, r0, #4294967295
 8000416:	d22f      	bcs.n	8000478 <__udivmoddi4+0x2b8>
 8000418:	429e      	cmp	r6, r3
 800041a:	d92d      	bls.n	8000478 <__udivmoddi4+0x2b8>
 800041c:	3802      	subs	r0, #2
 800041e:	4463      	add	r3, ip
 8000420:	1b9b      	subs	r3, r3, r6
 8000422:	b289      	uxth	r1, r1
 8000424:	fbb3 f6f7 	udiv	r6, r3, r7
 8000428:	fb07 3316 	mls	r3, r7, r6, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb06 f30e 	mul.w	r3, r6, lr
 8000434:	428b      	cmp	r3, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x28a>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000440:	d216      	bcs.n	8000470 <__udivmoddi4+0x2b0>
 8000442:	428b      	cmp	r3, r1
 8000444:	d914      	bls.n	8000470 <__udivmoddi4+0x2b0>
 8000446:	3e02      	subs	r6, #2
 8000448:	4461      	add	r1, ip
 800044a:	1ac9      	subs	r1, r1, r3
 800044c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000450:	e738      	b.n	80002c4 <__udivmoddi4+0x104>
 8000452:	462e      	mov	r6, r5
 8000454:	4628      	mov	r0, r5
 8000456:	e705      	b.n	8000264 <__udivmoddi4+0xa4>
 8000458:	4606      	mov	r6, r0
 800045a:	e6e3      	b.n	8000224 <__udivmoddi4+0x64>
 800045c:	4618      	mov	r0, r3
 800045e:	e6f8      	b.n	8000252 <__udivmoddi4+0x92>
 8000460:	454b      	cmp	r3, r9
 8000462:	d2a9      	bcs.n	80003b8 <__udivmoddi4+0x1f8>
 8000464:	ebb9 0802 	subs.w	r8, r9, r2
 8000468:	eb64 0e0c 	sbc.w	lr, r4, ip
 800046c:	3801      	subs	r0, #1
 800046e:	e7a3      	b.n	80003b8 <__udivmoddi4+0x1f8>
 8000470:	4646      	mov	r6, r8
 8000472:	e7ea      	b.n	800044a <__udivmoddi4+0x28a>
 8000474:	4620      	mov	r0, r4
 8000476:	e794      	b.n	80003a2 <__udivmoddi4+0x1e2>
 8000478:	4640      	mov	r0, r8
 800047a:	e7d1      	b.n	8000420 <__udivmoddi4+0x260>
 800047c:	46d0      	mov	r8, sl
 800047e:	e77b      	b.n	8000378 <__udivmoddi4+0x1b8>
 8000480:	3b02      	subs	r3, #2
 8000482:	4461      	add	r1, ip
 8000484:	e732      	b.n	80002ec <__udivmoddi4+0x12c>
 8000486:	4630      	mov	r0, r6
 8000488:	e709      	b.n	800029e <__udivmoddi4+0xde>
 800048a:	4464      	add	r4, ip
 800048c:	3802      	subs	r0, #2
 800048e:	e742      	b.n	8000316 <__udivmoddi4+0x156>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <LedStartTimer>:

#include "led_effect.h"


void LedStartTimer(uint8_t n)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b085      	sub	sp, #20
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	LedEffectStop();
 800049e:	f000 f817 	bl	80004d0 <LedEffectStop>
	xTimerStart(hLedTimer[n-1], portMAX_DELAY);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	4a09      	ldr	r2, [pc, #36]	; (80004cc <LedStartTimer+0x38>)
 80004a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80004ac:	f006 f93a 	bl	8006724 <xTaskGetTickCount>
 80004b0:	4602      	mov	r2, r0
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	4620      	mov	r0, r4
 80004be:	f007 f843 	bl	8007548 <xTimerGenericCommand>


}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000114 	.word	0x20000114

080004d0 <LedEffectStop>:

void LedEffectStop(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af02      	add	r7, sp, #8
	for(uint8_t i = 0; i < 3 ; i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	e00e      	b.n	80004fa <LedEffectStop+0x2a>
		xTimerStop(hLedTimer[i],portMAX_DELAY);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <LedEffectStop+0x3c>)
 80004e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2103      	movs	r1, #3
 80004f0:	f007 f82a 	bl	8007548 <xTimerGenericCommand>
	for(uint8_t i = 0; i < 3 ; i++)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3301      	adds	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d9ed      	bls.n	80004dc <LedEffectStop+0xc>
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000114 	.word	0x20000114

08000510 <LedEffect1>:

void LedEffect1(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <LedEffect1+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f083 0301 	eor.w	r3, r3, #1
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <LedEffect1+0x28>)
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <LedEffect1+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <LedEffect1+0x1e>
 8000528:	f000 f83c 	bl	80005a4 <TurnOffAllLeds>
}
 800052c:	e001      	b.n	8000532 <LedEffect1+0x22>
	(flag ^= 1) ? TurnOffAllLeds() : TurnOnAllLeds();
 800052e:	f000 f823 	bl	8000578 <TurnOnAllLeds>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000008 	.word	0x20000008

0800053c <LedEffect2>:

void LedEffect2(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? TurnOnEvenLeds() : TurnOnOddLeds();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LedEffect2+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <LedEffect2+0x28>)
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LedEffect2+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d002      	beq.n	800055a <LedEffect2+0x1e>
 8000554:	f000 f852 	bl	80005fc <TurnOnEvenLeds>
}
 8000558:	e001      	b.n	800055e <LedEffect2+0x22>
	(flag ^= 1) ? TurnOnEvenLeds() : TurnOnOddLeds();
 800055a:	f000 f839 	bl	80005d0 <TurnOnOddLeds>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000000c 	.word	0x2000000c

08000568 <LedEffect3>:


/* TODO: Implement LedEffect3 and LedControl */

void LedEffect3(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <TurnOnAllLeds>:

}


void TurnOnAllLeds(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2120      	movs	r1, #32
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <TurnOnAllLeds+0x28>)
 8000582:	f001 fa07 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2102      	movs	r1, #2
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <TurnOnAllLeds+0x28>)
 800058c:	f001 fa02 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <TurnOnAllLeds+0x28>)
 8000596:	f001 f9fd 	bl	8001994 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	48000400 	.word	0x48000400

080005a4 <TurnOffAllLeds>:

void TurnOffAllLeds(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2120      	movs	r1, #32
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <TurnOffAllLeds+0x28>)
 80005ae:	f001 f9f1 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <TurnOffAllLeds+0x28>)
 80005b8:	f001 f9ec 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <TurnOffAllLeds+0x28>)
 80005c2:	f001 f9e7 	bl	8001994 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	48000400 	.word	0x48000400

080005d0 <TurnOnOddLeds>:

void TurnOnOddLeds(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <TurnOnOddLeds+0x28>)
 80005da:	f001 f9db 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <TurnOnOddLeds+0x28>)
 80005e4:	f001 f9d6 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <TurnOnOddLeds+0x28>)
 80005ee:	f001 f9d1 	bl	8001994 <HAL_GPIO_WritePin>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	48000400 	.word	0x48000400

080005fc <TurnOnEvenLeds>:

void TurnOnEvenLeds(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BLUE_LED, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2120      	movs	r1, #32
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <TurnOnEvenLeds+0x28>)
 8000606:	f001 f9c5 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_LED, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2101      	movs	r1, #1
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <TurnOnEvenLeds+0x28>)
 8000610:	f001 f9c0 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TurnOnEvenLeds+0x28>)
 800061a:	f001 f9bb 	bl	8001994 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	48000400 	.word	0x48000400

08000628 <LedEffectCbx>:

void LedEffectCbx(TimerHandle_t xTimer)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint32_t id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f007 fa69 	bl	8007b08 <pvTimerGetTimerID>
 8000636:	4603      	mov	r3, r0
 8000638:	60fb      	str	r3, [r7, #12]

	switch(id)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d00d      	beq.n	800065c <LedEffectCbx+0x34>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d80c      	bhi.n	8000660 <LedEffectCbx+0x38>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d003      	beq.n	8000654 <LedEffectCbx+0x2c>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d002      	beq.n	8000658 <LedEffectCbx+0x30>
		LedEffect2();
	case LED_EFFECT3:
		LedEffect3();
	}

}
 8000652:	e005      	b.n	8000660 <LedEffectCbx+0x38>
		LedEffect1();
 8000654:	f7ff ff5c 	bl	8000510 <LedEffect1>
		LedEffect2();
 8000658:	f7ff ff70 	bl	800053c <LedEffect2>
		LedEffect3();
 800065c:	f7ff ff84 	bl	8000568 <LedEffect3>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000678:	f023 0218 	bic.w	r2, r3, #24
 800067c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800069c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006b8:	68fb      	ldr	r3, [r7, #12]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08d      	sub	sp, #52	; 0x34
 80006cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fe23 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f907 	bl	80008e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006d6:	f000 f95b 	bl	8000990 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f9e9 	bl	8000ab0 <MX_GPIO_Init>
  MX_RTC_Init();
 80006de:	f000 f975 	bl	80009cc <MX_RTC_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 f999 	bl	8000a18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BaseType_t status;

  status = xTaskCreate(menuTask, "Menu-Task", 250, NULL, 2, &hMenu);
 80006e6:	4b69      	ldr	r3, [pc, #420]	; (800088c <main+0x1c4>)
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	22fa      	movs	r2, #250	; 0xfa
 80006f2:	4967      	ldr	r1, [pc, #412]	; (8000890 <main+0x1c8>)
 80006f4:	4867      	ldr	r0, [pc, #412]	; (8000894 <main+0x1cc>)
 80006f6:	f005 fdd3 	bl	80062a0 <xTaskCreate>
 80006fa:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d00a      	beq.n	8000718 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000706:	f383 8811 	msr	BASEPRI, r3
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000714:	bf00      	nop
 8000716:	e7fe      	b.n	8000716 <main+0x4e>

  status = xTaskCreate(ledTask, "Led-Task", 250, NULL, 2, &hLed);
 8000718:	4b5f      	ldr	r3, [pc, #380]	; (8000898 <main+0x1d0>)
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2302      	movs	r3, #2
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2300      	movs	r3, #0
 8000722:	22fa      	movs	r2, #250	; 0xfa
 8000724:	495d      	ldr	r1, [pc, #372]	; (800089c <main+0x1d4>)
 8000726:	485e      	ldr	r0, [pc, #376]	; (80008a0 <main+0x1d8>)
 8000728:	f005 fdba 	bl	80062a0 <xTaskCreate>
 800072c:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d00a      	beq.n	800074a <main+0x82>
        __asm volatile
 8000734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000738:	f383 8811 	msr	BASEPRI, r3
 800073c:	f3bf 8f6f 	isb	sy
 8000740:	f3bf 8f4f 	dsb	sy
 8000744:	61bb      	str	r3, [r7, #24]
    }
 8000746:	bf00      	nop
 8000748:	e7fe      	b.n	8000748 <main+0x80>

  status = xTaskCreate(RTCTask, "RTC-Task", 250, NULL, 2, &hRTC);
 800074a:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <main+0x1dc>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2302      	movs	r3, #2
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	22fa      	movs	r2, #250	; 0xfa
 8000756:	4954      	ldr	r1, [pc, #336]	; (80008a8 <main+0x1e0>)
 8000758:	4854      	ldr	r0, [pc, #336]	; (80008ac <main+0x1e4>)
 800075a:	f005 fda1 	bl	80062a0 <xTaskCreate>
 800075e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d00a      	beq.n	800077c <main+0xb4>
        __asm volatile
 8000766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076a:	f383 8811 	msr	BASEPRI, r3
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	617b      	str	r3, [r7, #20]
    }
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <main+0xb2>

  status = xTaskCreate(printTask, "Print-Task", 250, NULL, 2, &hPrint);
 800077c:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <main+0x1e8>)
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2302      	movs	r3, #2
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	22fa      	movs	r2, #250	; 0xfa
 8000788:	494a      	ldr	r1, [pc, #296]	; (80008b4 <main+0x1ec>)
 800078a:	484b      	ldr	r0, [pc, #300]	; (80008b8 <main+0x1f0>)
 800078c:	f005 fd88 	bl	80062a0 <xTaskCreate>
 8000790:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d00a      	beq.n	80007ae <main+0xe6>
        __asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	613b      	str	r3, [r7, #16]
    }
 80007aa:	bf00      	nop
 80007ac:	e7fe      	b.n	80007ac <main+0xe4>

  status = xTaskCreate(commandTask, "Command-Task", 250, NULL, 2, &hCommand);
 80007ae:	4b43      	ldr	r3, [pc, #268]	; (80008bc <main+0x1f4>)
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	22fa      	movs	r2, #250	; 0xfa
 80007ba:	4941      	ldr	r1, [pc, #260]	; (80008c0 <main+0x1f8>)
 80007bc:	4841      	ldr	r0, [pc, #260]	; (80008c4 <main+0x1fc>)
 80007be:	f005 fd6f 	bl	80062a0 <xTaskCreate>
 80007c2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d00a      	beq.n	80007e0 <main+0x118>
        __asm volatile
 80007ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ce:	f383 8811 	msr	BASEPRI, r3
 80007d2:	f3bf 8f6f 	isb	sy
 80007d6:	f3bf 8f4f 	dsb	sy
 80007da:	60fb      	str	r3, [r7, #12]
    }
 80007dc:	bf00      	nop
 80007de:	e7fe      	b.n	80007de <main+0x116>

  hInputDataQueue = xQueueCreate(10, sizeof(char));
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	200a      	movs	r0, #10
 80007e6:	f005 f80f 	bl	8005808 <xQueueGenericCreate>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <main+0x200>)
 80007ee:	6013      	str	r3, [r2, #0]
  configASSERT(hInputDataQueue != NULL);
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <main+0x200>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10a      	bne.n	800080e <main+0x146>
        __asm volatile
 80007f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fc:	f383 8811 	msr	BASEPRI, r3
 8000800:	f3bf 8f6f 	isb	sy
 8000804:	f3bf 8f4f 	dsb	sy
 8000808:	60bb      	str	r3, [r7, #8]
    }
 800080a:	bf00      	nop
 800080c:	e7fe      	b.n	800080c <main+0x144>

  /* We pass a string (a reference to char) to the queue API
   * Since a pointer is unsigned long int we used sizeof(unsigned long int) */
  hPrintQueue = xQueueCreate(10, sizeof(size_t));
 800080e:	2200      	movs	r2, #0
 8000810:	2104      	movs	r1, #4
 8000812:	200a      	movs	r0, #10
 8000814:	f004 fff8 	bl	8005808 <xQueueGenericCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <main+0x204>)
 800081c:	6013      	str	r3, [r2, #0]
  configASSERT(hPrintQueue != NULL);
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <main+0x204>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10a      	bne.n	800083c <main+0x174>
        __asm volatile
 8000826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082a:	f383 8811 	msr	BASEPRI, r3
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	607b      	str	r3, [r7, #4]
    }
 8000838:	bf00      	nop
 800083a:	e7fe      	b.n	800083a <main+0x172>

  // Create timers for LED effects
  for(uint8_t i = 0; i < 3; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000842:	e017      	b.n	8000874 <main+0x1ac>
	  hLedTimer[i] = xTimerCreate("Led Timer",pdMS_TO_TICKS(500),pdTRUE,(void*)(i+1),LedEffectCbx);
 8000844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000848:	3301      	adds	r3, #1
 800084a:	461a      	mov	r2, r3
 800084c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <main+0x208>)
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800085c:	481d      	ldr	r0, [pc, #116]	; (80008d4 <main+0x20c>)
 800085e:	f006 fe17 	bl	8007490 <xTimerCreate>
 8000862:	4603      	mov	r3, r0
 8000864:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <main+0x210>)
 8000866:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for(uint8_t i = 0; i < 3; i++)
 800086a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086e:	3301      	adds	r3, #1
 8000870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000878:	2b02      	cmp	r3, #2
 800087a:	d9e3      	bls.n	8000844 <main+0x17c>



  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 800087c:	2201      	movs	r2, #1
 800087e:	4917      	ldr	r1, [pc, #92]	; (80008dc <main+0x214>)
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <main+0x218>)
 8000882:	f002 ff31 	bl	80036e8 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000886:	f005 fe51 	bl	800652c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x1c2>
 800088c:	200000f8 	.word	0x200000f8
 8000890:	0800859c 	.word	0x0800859c
 8000894:	08000f3d 	.word	0x08000f3d
 8000898:	200000fc 	.word	0x200000fc
 800089c:	080085a8 	.word	0x080085a8
 80008a0:	08001025 	.word	0x08001025
 80008a4:	20000100 	.word	0x20000100
 80008a8:	080085b4 	.word	0x080085b4
 80008ac:	0800113d 	.word	0x0800113d
 80008b0:	20000104 	.word	0x20000104
 80008b4:	080085c0 	.word	0x080085c0
 80008b8:	08001149 	.word	0x08001149
 80008bc:	20000108 	.word	0x20000108
 80008c0:	080085cc 	.word	0x080085cc
 80008c4:	08001189 	.word	0x08001189
 80008c8:	2000010c 	.word	0x2000010c
 80008cc:	20000110 	.word	0x20000110
 80008d0:	08000629 	.word	0x08000629
 80008d4:	080085dc 	.word	0x080085dc
 80008d8:	20000114 	.word	0x20000114
 80008dc:	20000120 	.word	0x20000120
 80008e0:	20000064 	.word	0x20000064

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b098      	sub	sp, #96	; 0x60
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2244      	movs	r2, #68	; 0x44
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fe2a 	bl	800854c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
 8000906:	615a      	str	r2, [r3, #20]
 8000908:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800090a:	f001 f85b 	bl	80019c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff feaa 	bl	8000668 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000914:	232f      	movs	r3, #47	; 0x2f
 8000916:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000934:	2360      	movs	r3, #96	; 0x60
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000938:	2305      	movs	r3, #5
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb9b 	bl	8002080 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000950:	f000 f93e 	bl	8000bd0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000954:	236f      	movs	r3, #111	; 0x6f
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f001 feb9 	bl	80026ec <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000980:	f000 f926 	bl	8000bd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000984:	f002 fbab 	bl	80030de <HAL_RCCEx_EnableMSIPLLMode>
}
 8000988:	bf00      	nop
 800098a:	3760      	adds	r7, #96	; 0x60
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2230      	movs	r2, #48	; 0x30
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f007 fdd5 	bl	800854c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80009ac:	2310      	movs	r3, #16
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fa9d 	bl	8002ef2 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80009be:	f000 f907 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_RTC_Init+0x44>)
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <MX_RTC_Init+0x48>)
 80009d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_RTC_Init+0x44>)
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_RTC_Init+0x44>)
 80009de:	227f      	movs	r2, #127	; 0x7f
 80009e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_RTC_Init+0x44>)
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_RTC_Init+0x44>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_RTC_Init+0x44>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_RTC_Init+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_RTC_Init+0x44>)
 80009fc:	f002 fb76 	bl	80030ec <HAL_RTC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a06:	f000 f8e3 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000040 	.word	0x20000040
 8000a14:	40002800 	.word	0x40002800

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART1_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a62:	f002 fd63 	bl	800352c <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f8b0 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a74:	f004 fce1 	bl	800543a <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 f8a7 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a86:	f004 fd16 	bl	80054b6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f89e 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART1_UART_Init+0x90>)
 8000a96:	f004 fc97 	bl	80053c8 <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f896 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000064 	.word	0x20000064
 8000aac:	40013800 	.word	0x40013800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f7ff fde5 	bl	8000694 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fde2 	bl	8000694 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f7ff fddf 	bl	8000694 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f7ff fddc 	bl	8000694 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2123      	movs	r1, #35	; 0x23
 8000ae0:	4815      	ldr	r0, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x88>)
 8000ae2:	f000 ff57 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 fde3 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000afe:	2323      	movs	r3, #35	; 0x23
 8000b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_GPIO_Init+0x88>)
 8000b14:	f000 fdd6 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x8c>)
 8000b2a:	f000 fdcb 	bl	80016c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48001000 	.word	0x48001000

08000b40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	BaseType_t isQueueFull;
	// return pdFALSE if the queue is not full, or pdTRUE if the queue is full.
	isQueueFull = xQueueIsQueueFullFromISR(hInputDataQueue);
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_UART_RxCpltCallback+0x80>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f005 fb22 	bl	8006196 <xQueueIsQueueFullFromISR>
 8000b52:	60f8      	str	r0, [r7, #12]
	if(isQueueFull == pdFALSE)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d107      	bne.n	8000b6a <HAL_UART_RxCpltCallback+0x2a>
	{
		/* Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_UART_RxCpltCallback+0x80>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	4918      	ldr	r1, [pc, #96]	; (8000bc4 <HAL_UART_RxCpltCallback+0x84>)
 8000b64:	f004 ffd0 	bl	8005b08 <xQueueGenericSendFromISR>
 8000b68:	e012      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_UART_RxCpltCallback+0x84>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b0a      	cmp	r3, #10
 8000b70:	d10e      	bne.n	8000b90 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/* make sure that last data byte of the queue is '\n' */
			// Copy the last received item to the queue into dummy and delete it
			xQueueReceiveFromISR(hInputDataQueue, (void*)&dummy, NULL);
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_UART_RxCpltCallback+0x80>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f107 010b 	add.w	r1, r7, #11
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 f94d 	bl	8005e1c <xQueueReceiveFromISR>

			// Keep '\n' on the back of the queue
			xQueueSendFromISR(hInputDataQueue,(void*)&user_data,NULL);
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_UART_RxCpltCallback+0x80>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	2200      	movs	r2, #0
 8000b8a:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <HAL_UART_RxCpltCallback+0x84>)
 8000b8c:	f004 ffbc 	bl	8005b08 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
			if(user_data == '\n')
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_UART_RxCpltCallback+0x84>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b0a      	cmp	r3, #10
 8000b96:	d10a      	bne.n	8000bae <HAL_UART_RxCpltCallback+0x6e>
			{
				xTaskNotifyFromISR(hCommand,0,eNoAction,NULL);
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_UART_RxCpltCallback+0x88>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f006 facf 	bl	800714c <xTaskGenericNotifyFromISR>
			}



	/* Enable UART data byte reception again in IT mode */
	  HAL_UART_Receive_IT(&huart1, &user_data, sizeof(uint8_t));
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <HAL_UART_RxCpltCallback+0x84>)
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_UART_RxCpltCallback+0x8c>)
 8000bb4:	f002 fd98 	bl	80036e8 <HAL_UART_Receive_IT>



}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000120 	.word	0x20000120
 8000bc8:	20000108 	.word	0x20000108
 8000bcc:	20000064 	.word	0x20000064

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>

08000bda <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_AHB2_GRP1_EnableClock>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8000c96:	f007 f887 	bl	8007da8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2230      	movs	r2, #48	; 0x30
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f007 fc4b 	bl	800854c <memset>
  if(hrtc->Instance==RTC)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_RTC_MspInit+0x54>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d115      	bne.n	8000cec <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f90e 	bl	8002ef2 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000cdc:	f7ff ff78 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ce0:	f7ff ff7b 	bl	8000bda <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ce4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ce8:	f7ff ffa1 	bl	8000c2e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	; 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40002800 	.word	0x40002800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2230      	movs	r2, #48	; 0x30
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f007 fc17 	bl	800854c <memset>
  if(huart->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_UART_MspInit+0x98>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d12e      	bne.n	8000d86 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 f8dc 	bl	8002ef2 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff ff46 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d48:	f7ff ff8a 	bl	8000c60 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff ff55 	bl	8000bfc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fca7 	bl	80016c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2106      	movs	r1, #6
 8000d7a:	2024      	movs	r0, #36	; 0x24
 8000d7c:	f000 fbbc 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d80:	2024      	movs	r0, #36	; 0x24
 8000d82:	f000 fbd3 	bl	800152c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013800 	.word	0x40013800

08000d94 <LL_APB2_GRP1_EnableClock>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2019      	movs	r0, #25
 8000dde:	f000 fb8b 	bl	80014f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000de2:	2019      	movs	r0, #25
 8000de4:	f000 fba2 	bl	800152c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000de8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dec:	f7ff ffd2 	bl	8000d94 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df0:	f107 0208 	add.w	r2, r7, #8
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fe62 	bl	8002ac4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e00:	f001 fe4a 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8000e04:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <HAL_InitTick+0x8c>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3b01      	subs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_InitTick+0x90>)
 8000e16:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_InitTick+0x94>)
 8000e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_InitTick+0x90>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e22:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_InitTick+0x90>)
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_InitTick+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_InitTick+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <HAL_InitTick+0x90>)
 8000e36:	f002 fa59 	bl	80032ec <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_InitTick+0x90>)
 8000e42:	f002 fab5 	bl	80033b0 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	20000124 	.word	0x20000124
 8000e5c:	40012c00 	.word	0x40012c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART1_IRQHandler+0x10>)
 8000e92:	f002 fc75 	bl	8003780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000064 	.word	0x20000064

08000ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <SystemInit+0x90>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <SystemInit+0x90>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ecc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <SystemInit+0x94>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eea:	f023 0305 	bic.w	r3, r3, #5
 8000eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efe:	f023 0301 	bic.w	r3, r3, #1
 8000f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <SystemInit+0x98>)
 8000f0c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	faf6fefb 	.word	0xfaf6fefb
 8000f38:	22041000 	.word	0x22041000

08000f3c <menuTask>:
State_t currentProgramState = sMainMenu;

const char* invalid_message = "~~Invalid Message~~\n";

void menuTask(void* parameters)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	int8_t option;

	const char* entry_message = "=====================\n"
 8000f44:	4b31      	ldr	r3, [pc, #196]	; (800100c <menuTask+0xd0>)
 8000f46:	60bb      	str	r3, [r7, #8]
									"DATE & TIME --->  1\n"
									"EXIT 		 --->  2\n"
									"ENTER YOUR CHOICE HERE... :\n ";
	while(1)
	{
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <menuTask+0xd4>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f107 0108 	add.w	r1, r7, #8
 8000f50:	2300      	movs	r3, #0
 8000f52:	f04f 32ff 	mov.w	r2, #4294967295
 8000f56:	f004 fcd9 	bl	800590c <xQueueGenericSend>
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f005 ff83 	bl	8006e74 <xTaskGenericNotifyWait>

		// Wait for menu commands
		command = (Command_t*)command_adr;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	617b      	str	r3, [r7, #20]
		if(command -> len == 1)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	7a9b      	ldrb	r3, [r3, #10]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d133      	bne.n	8000fe2 <menuTask+0xa6>
		{
			// Converting ASCII to number by subtracting 48
			option = command->payload[0] - 48;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3b30      	subs	r3, #48	; 0x30
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	74fb      	strb	r3, [r7, #19]

			switch(option)
 8000f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d033      	beq.n	8000ff4 <menuTask+0xb8>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	dc1e      	bgt.n	8000fce <menuTask+0x92>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <menuTask+0x5e>
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d00d      	beq.n	8000fb4 <menuTask+0x78>
 8000f98:	e019      	b.n	8000fce <menuTask+0x92>
			{
			case LED_EFFECT:
				currentProgramState = sLedEffect;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <menuTask+0xd8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hLed,0,eNoAction);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <menuTask+0xdc>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	f005 ffe5 	bl	8006f7c <xTaskGenericNotify>
				break;
 8000fb2:	e020      	b.n	8000ff6 <menuTask+0xba>
			case DATE_TIME:
				currentProgramState = sRtcMenu;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <menuTask+0xd8>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	701a      	strb	r2, [r3, #0]
				xTaskNotify(hRTC,0,eNoAction);
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <menuTask+0xe0>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f005 ffd8 	bl	8006f7c <xTaskGenericNotify>
				break;
 8000fcc:	e013      	b.n	8000ff6 <menuTask+0xba>
			case EXIT_MENU:
				/* Todo: implement exit */
				break;
			default:
				xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <menuTask+0xd4>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	f004 fc96 	bl	800590c <xQueueGenericSend>
				continue;
 8000fe0:	e012      	b.n	8001008 <menuTask+0xcc>
			}
		}
		else
		{
			// Invalid entry
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <menuTask+0xd4>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <menuTask+0xe4>)
 8000fee:	f004 fc8d 	bl	800590c <xQueueGenericSend>
 8000ff2:	e000      	b.n	8000ff6 <menuTask+0xba>
				break;
 8000ff4:	bf00      	nop
		}

		// Wait to run again when some other task notifies menu task.
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f005 ff36 	bl	8006e74 <xTaskGenericNotifyWait>
		xQueueSend(hPrintQueue,&entry_message,portMAX_DELAY);
 8001008:	e79e      	b.n	8000f48 <menuTask+0xc>
 800100a:	bf00      	nop
 800100c:	08008600 	.word	0x08008600
 8001010:	20000110 	.word	0x20000110
 8001014:	20000170 	.word	0x20000170
 8001018:	200000fc 	.word	0x200000fc
 800101c:	20000100 	.word	0x20000100
 8001020:	20000014 	.word	0x20000014

08001024 <ledTask>:
	} // End of while loop

}

void ledTask(void* parameters)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
	uint32_t command_adr;
	Command_t* command;

	const char* led_message = 	"=====================\n"
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <ledTask+0xf4>)
 800102e:	60fb      	str	r3, [r7, #12]
								"OPTIONS: Please type none, e1, e2 or e3.\n"
								"ENTER YOUR CHOICE HERE... :\n ";
	while(1)
	{
		/* Wait for notification */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f005 ff19 	bl	8006e74 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(hPrintQueue,&led_message,portMAX_DELAY);
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <ledTask+0xf8>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	2300      	movs	r3, #0
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	f004 fc5c 	bl	800590c <xQueueGenericSend>

		/* Wait for LED commands */
		xTaskNotifyWait(0,0,&command_adr,portMAX_DELAY);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2000      	movs	r0, #0
 8001064:	f005 ff06 	bl	8006e74 <xTaskGenericNotifyWait>

		command = (Command_t*)command_adr;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	617b      	str	r3, [r7, #20]

		if( (command->len) <= 4)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	7a9b      	ldrb	r3, [r3, #10]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d83b      	bhi.n	80010ec <ledTask+0xc8>
		{
			if(! strncmp((char*)command->payload, "none", strlen("none")) )
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2204      	movs	r2, #4
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <ledTask+0xfc>)
 800107a:	4618      	mov	r0, r3
 800107c:	f007 fa6e 	bl	800855c <strncmp>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <ledTask+0x68>
				LedEffectStop();
 8001086:	f7ff fa23 	bl	80004d0 <LedEffectStop>
 800108a:	e037      	b.n	80010fc <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e1", strlen("e1")) )
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2202      	movs	r2, #2
 8001090:	4924      	ldr	r1, [pc, #144]	; (8001124 <ledTask+0x100>)
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fa62 	bl	800855c <strncmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <ledTask+0x82>
				LedStartTimer(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff f9f8 	bl	8000494 <LedStartTimer>
 80010a4:	e02a      	b.n	80010fc <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e2", strlen("e2")) )
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2202      	movs	r2, #2
 80010aa:	491f      	ldr	r1, [pc, #124]	; (8001128 <ledTask+0x104>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fa55 	bl	800855c <strncmp>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <ledTask+0x9c>
				LedStartTimer(2);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff f9eb 	bl	8000494 <LedStartTimer>
 80010be:	e01d      	b.n	80010fc <ledTask+0xd8>
			else if(! strncmp((char*)command->payload, "e3", strlen("e3")) )
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2202      	movs	r2, #2
 80010c4:	4919      	ldr	r1, [pc, #100]	; (800112c <ledTask+0x108>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 fa48 	bl	800855c <strncmp>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <ledTask+0xb6>
				LedStartTimer(3);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff f9de 	bl	8000494 <LedStartTimer>
 80010d8:	e010      	b.n	80010fc <ledTask+0xd8>
			else
				// Print invalid message
				xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <ledTask+0xf8>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	4912      	ldr	r1, [pc, #72]	; (8001130 <ledTask+0x10c>)
 80010e6:	f004 fc11 	bl	800590c <xQueueGenericSend>
 80010ea:	e007      	b.n	80010fc <ledTask+0xd8>
		}
		else
			// Print invalid message
			xQueueSend(hPrintQueue,&invalid_message,portMAX_DELAY);
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <ledTask+0xf8>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <ledTask+0x10c>)
 80010f8:	f004 fc08 	bl	800590c <xQueueGenericSend>

		// Update the state variable
		currentProgramState = sMainMenu;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <ledTask+0x110>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]

		// Notify menu task
		xTaskNotify(hMenu,0,eNoAction);
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <ledTask+0x114>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	f005 ff34 	bl	8006f7c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001114:	e78c      	b.n	8001030 <ledTask+0xc>
 8001116:	bf00      	nop
 8001118:	08008690 	.word	0x08008690
 800111c:	20000110 	.word	0x20000110
 8001120:	08008714 	.word	0x08008714
 8001124:	0800871c 	.word	0x0800871c
 8001128:	08008720 	.word	0x08008720
 800112c:	08008724 	.word	0x08008724
 8001130:	20000014 	.word	0x20000014
 8001134:	20000170 	.word	0x20000170
 8001138:	200000f8 	.word	0x200000f8

0800113c <RTCTask>:

	}
}

void RTCTask(void* parameters)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	while(1)
 8001144:	e7fe      	b.n	8001144 <RTCTask+0x8>
	...

08001148 <printTask>:

	}
}

void printTask(void* parameters)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint32_t* message;
	while(1)
	{
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <printTask+0x38>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f107 010c 	add.w	r1, r7, #12
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fd7d 	bl	8005c5c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen((char*)message), HAL_MAX_DELAY);
 8001162:	68fc      	ldr	r4, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f80a 	bl	8000180 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	4621      	mov	r1, r4
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <printTask+0x3c>)
 8001178:	f002 fa28 	bl	80035cc <HAL_UART_Transmit>
		xQueueReceive(hPrintQueue, &message, portMAX_DELAY);
 800117c:	e7e8      	b.n	8001150 <printTask+0x8>
 800117e:	bf00      	nop
 8001180:	20000110 	.word	0x20000110
 8001184:	20000064 	.word	0x20000064

08001188 <commandTask>:
	}
}

 void commandTask(void* parameters)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
	 //const TickType_t xFrequency = pdMS_TO_TICKS(1000);
	 Command_t command;
		while(1)
		{
			/* Implement notify wait */
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f005 fe69 	bl	8006e74 <xTaskGenericNotifyWait>
 80011a2:	6178      	str	r0, [r7, #20]
			if(status == pdTRUE)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d1f2      	bne.n	8001190 <commandTask+0x8>
			{
				/* Process the user data(command) stored in input data queue */
				/* Notify the command to relevant task */
				processCommand(&command);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f802 	bl	80011b8 <processCommand>
			status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011b4:	e7ec      	b.n	8001190 <commandTask+0x8>
	...

080011b8 <processCommand>:
/* The notification value of the target task is
 * unconditionally set to ulValue when eSetValueWithOverwrite
 * is used.   */

 void processCommand(Command_t* command)
 {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	 /* Extract the data bytes from the input data queue and form a command */
	 extract_command(command);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f835 	bl	8001230 <extract_command>

	 switch(currentProgramState)
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <processCommand+0x68>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	dc24      	bgt.n	8001218 <processCommand+0x60>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	da18      	bge.n	8001204 <processCommand+0x4c>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <processCommand+0x24>
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00a      	beq.n	80011f0 <processCommand+0x38>
		 /* Notify RTC task with the command */
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
		 break;

	 }
 }
 80011da:	e01d      	b.n	8001218 <processCommand+0x60>
		 xTaskNotify(hMenu, (uint32_t)command, eSetValueWithOverwrite);
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <processCommand+0x6c>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2303      	movs	r3, #3
 80011e8:	2100      	movs	r1, #0
 80011ea:	f005 fec7 	bl	8006f7c <xTaskGenericNotify>
		 break;
 80011ee:	e013      	b.n	8001218 <processCommand+0x60>
		 xTaskNotify(hLed, (uint32_t)command, eSetValueWithOverwrite);
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <processCommand+0x70>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2303      	movs	r3, #3
 80011fc:	2100      	movs	r1, #0
 80011fe:	f005 febd 	bl	8006f7c <xTaskGenericNotify>
		 break;
 8001202:	e009      	b.n	8001218 <processCommand+0x60>
		 xTaskNotify(hRTC, (uint32_t)command, eSetValueWithOverwrite);
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <processCommand+0x74>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2303      	movs	r3, #3
 8001210:	2100      	movs	r1, #0
 8001212:	f005 feb3 	bl	8006f7c <xTaskGenericNotify>
		 break;
 8001216:	bf00      	nop
 }
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000170 	.word	0x20000170
 8001224:	200000f8 	.word	0x200000f8
 8001228:	200000fc 	.word	0x200000fc
 800122c:	20000100 	.word	0x20000100

08001230 <extract_command>:

 int extract_command(Command_t* command)
 {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	 uint8_t item;
	 BaseType_t status;

	 // Return the number of messages stored in a queue.
	 status = uxQueueMessagesWaiting(hInputDataQueue);
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <extract_command+0x70>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f004 fe7c 	bl	8005f3a <uxQueueMessagesWaiting>
 8001242:	4603      	mov	r3, r0
 8001244:	613b      	str	r3, [r7, #16]
	 if(!status) return -1;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <extract_command+0x22>
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	e022      	b.n	8001298 <extract_command+0x68>

	 uint8_t i = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
	 do
	 {
		 // Received item into the hInputDataQueue will be copied to item buffer.
		 status = xQueueReceive(hInputDataQueue, (void*)&item, 0);
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <extract_command+0x70>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f107 010f 	add.w	r1, r7, #15
 800125e:	2200      	movs	r2, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fcfb 	bl	8005c5c <xQueueReceive>
 8001266:	6138      	str	r0, [r7, #16]
		 if(status == pdTRUE) command -> payload[i++] = item;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d106      	bne.n	800127c <extract_command+0x4c>
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	75fa      	strb	r2, [r7, #23]
 8001274:	461a      	mov	r2, r3
 8001276:	7bf9      	ldrb	r1, [r7, #15]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	5499      	strb	r1, [r3, r2]
	 }while(item != '\n');
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d1e9      	bne.n	8001256 <extract_command+0x26>

	 command -> payload[i-1] = '\0';
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	3b01      	subs	r3, #1
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	2100      	movs	r1, #0
 800128a:	54d1      	strb	r1, [r2, r3]
	 command -> len = i-1; /* Save length of the command excluding null char */
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3b01      	subs	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	729a      	strb	r2, [r3, #10]

	 return 0;
 8001296:	2300      	movs	r3, #0
 }
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000010c 	.word	0x2000010c

080012a4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80012a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a8:	3304      	adds	r3, #4

080012aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80012ae:	d3f9      	bcc.n	80012a4 <CopyDataInit>
  bx lr
 80012b0:	4770      	bx	lr

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80012b2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80012b4:	3004      	adds	r0, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80012b6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>
  bx lr
 80012ba:	4770      	bx	lr

080012bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c0:	f7ff fdee 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopForever+0x6>)
 80012c6:	490c      	ldr	r1, [pc, #48]	; (80012f8 <LoopForever+0xa>)
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LoopForever+0xe>)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f7ff ffed 	bl	80012aa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopForever+0x12>)
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopForever+0x16>)
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopForever+0x1a>)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f7ff ffe7 	bl	80012aa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopForever+0x1e>)
 80012de:	490c      	ldr	r1, [pc, #48]	; (8001310 <LoopForever+0x22>)
 80012e0:	2300      	movs	r3, #0
 80012e2:	f7ff ffe8 	bl	80012b6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e6:	f007 f8ff 	bl	80084e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012ea:	f7ff f9ed 	bl	80006c8 <main>

080012ee <LoopForever>:

LoopForever:
  b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   r0, =_estack
 80012f0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000024 	.word	0x20000024
 80012fc:	08008838 	.word	0x08008838
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001300:	20030000 	.word	0x20030000
 8001304:	20030000 	.word	0x20030000
 8001308:	08008854 	.word	0x08008854
  INIT_BSS _sbss, _ebss
 800130c:	20000024 	.word	0x20000024
 8001310:	20001720 	.word	0x20001720

08001314 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Init+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x3c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 f8d7 	bl	80014e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff fd47 	bl	8000dc8 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e001      	b.n	800134a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001346:	f7ff fca4 	bl	8000c92 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58004000 	.word	0x58004000

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000174 	.word	0x20000174

08001370 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTickPrio+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000018 	.word	0x20000018

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff4c 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001506:	f7ff ff63 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800150a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff ffb3 	bl	800147c <NVIC_EncodePriority>
 8001516:	4602      	mov	r2, r0
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff82 	bl	8001428 <__NVIC_SetPriority>
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff56 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e04f      	b.n	80015fa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d008      	beq.n	8001578 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2204      	movs	r2, #4
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e040      	b.n	80015fa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 020e 	bic.w	r2, r2, #14
 8001586:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001596:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f003 021c 	and.w	r2, r3, #28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d005      	beq.n	800162a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e047      	b.n	80016ba <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 020e 	bic.w	r2, r2, #14
 8001638:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f003 021c 	and.w	r2, r3, #28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001676:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00c      	beq.n	800169a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800168e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001698:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    }
  }
  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e146      	b.n	8001962 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8138 	beq.w	800195c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6939      	ldr	r1, [r7, #16]
 80017f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8092 	beq.w	800195c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001862:	d013      	beq.n	800188c <HAL_GPIO_Init+0x1c8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_GPIO_Init+0x2c0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1c4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_GPIO_Init+0x2c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1c0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <HAL_GPIO_Init+0x2c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1bc>
 800187c:	2304      	movs	r3, #4
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1ca>
 8001880:	2307      	movs	r3, #7
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1ca>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1ca>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1ca>
 800188c:	2300      	movs	r3, #0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189e:	4938      	ldr	r1, [pc, #224]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aeb1 	bne.w	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48001000 	.word	0x48001000
 8001990:	58000800 	.word	0x58000800

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	58000400 	.word	0x58000400

080019e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d101      	bne.n	80019fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_HSE_Enable>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_RCC_HSE_Disable>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_HSE_IsReady>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a56:	d101      	bne.n	8001a5c <LL_RCC_HSE_IsReady+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_RCC_HSE_IsReady+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_RCC_HSI_Enable>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_RCC_HSI_Disable>:
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_HSI_IsReady>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d101      	bne.n	8001abc <LL_RCC_HSI_IsReady+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_RCC_HSI_IsReady+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_LSE_Enable>:
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_LSE_Disable>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_LSE_EnableBypass>:
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_RCC_LSE_DisableBypass>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSE_IsReady>:
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSE_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSE_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_LSI1_Enable>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_LSI1_Disable>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_LSI1_IsReady>:
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d101      	bne.n	8001bfa <LL_RCC_LSI1_IsReady+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_RCC_LSI1_IsReady+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_LSI2_Enable>:
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_LSI2_Disable>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_LSI2_IsReady>:
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d101      	bne.n	8001c62 <LL_RCC_LSI2_IsReady+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_RCC_LSI2_IsReady+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_RCC_LSI2_SetTrimming>:
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_MSI_Enable>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_MSI_Disable>:
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_MSI_IsReady>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d101      	bne.n	8001cee <LL_RCC_MSI_IsReady+0x16>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_RCC_MSI_IsReady+0x18>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_RCC_MSI_SetRange>:
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_RCC_MSI_GetRange>:
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2bb0      	cmp	r3, #176	; 0xb0
 8001d38:	d901      	bls.n	8001d3e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001d3a:	23b0      	movs	r3, #176	; 0xb0
 8001d3c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_RCC_MSI_SetCalibTrimming>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_SetSysClkSource>:
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 0203 	bic.w	r2, r3, #3
 8001d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_GetSysClkSource>:
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_SetAHBPrescaler>:
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_C2_RCC_SetAHBPrescaler>:
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_SetAHB4Prescaler>:
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_SetAPB1Prescaler>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_SetAPB2Prescaler>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_GetAHBPrescaler>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_C2_RCC_GetAHBPrescaler>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_GetAHB4Prescaler>:
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_GetAPB1Prescaler>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_GetAPB2Prescaler>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f54:	d101      	bne.n	8001f5a <LL_RCC_PLL_IsReady+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_RCC_PLL_IsReady+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d101      	bne.n	8001fe0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002000:	d101      	bne.n	8002006 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d101      	bne.n	800202c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800204a:	d101      	bne.n	8002050 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800206e:	d101      	bne.n	8002074 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b08d      	sub	sp, #52	; 0x34
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e324      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 808d 	beq.w	80021ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a0:	f7ff fe7d 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80020a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a6:	f7ff ff83 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 80020aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x3e>
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d147      	bne.n	8002148 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d144      	bne.n	8002148 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e308      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020ce:	f7ff fe28 	bl	8001d22 <LL_RCC_MSI_GetRange>
 80020d2:	4603      	mov	r3, r0
 80020d4:	429c      	cmp	r4, r3
 80020d6:	d914      	bls.n	8002102 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd23 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e2f7      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe02 	bl	8001cfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fe26 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>
 8002100:	e013      	b.n	800212a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fdf7 	bl	8001cfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fe1b 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd04 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e2d8      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800212a:	f000 fc8b 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 800212e:	4603      	mov	r3, r0
 8002130:	4aa4      	ldr	r2, [pc, #656]	; (80023c4 <HAL_RCC_OscConfig+0x344>)
 8002132:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002134:	4ba4      	ldr	r3, [pc, #656]	; (80023c8 <HAL_RCC_OscConfig+0x348>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fe45 	bl	8000dc8 <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d039      	beq.n	80021b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e2c9      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01e      	beq.n	800218e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002150:	f7ff fda4 	bl	8001c9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002154:	f7ff f900 	bl	8001358 <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7ff f8fc 	bl	8001358 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e2b6      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800216e:	f7ff fdb3 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdbc 	bl	8001cfa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fde0 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800218e:	f7ff fd94 	bl	8001cba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002192:	f7ff f8e1 	bl	8001358 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219a:	f7ff f8dd 	bl	8001358 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e297      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021ac:	f7ff fd94 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f1      	bne.n	800219a <HAL_RCC_OscConfig+0x11a>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d047      	beq.n	8002256 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	f7ff fdea 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80021ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	f7ff fef0 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 80021d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x164>
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d134      	bne.n	8002256 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e275      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x180>
 80021fa:	f7ff fc05 	bl	8001a08 <LL_RCC_HSE_Enable>
 80021fe:	e001      	b.n	8002204 <HAL_RCC_OscConfig+0x184>
 8002200:	f7ff fc11 	bl	8001a26 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f8a4 	bl	8001358 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff f8a0 	bl	8001358 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e25a      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002226:	f7ff fc0d 	bl	8001a44 <LL_RCC_HSE_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f1      	beq.n	8002214 <HAL_RCC_OscConfig+0x194>
 8002230:	e011      	b.n	8002256 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7ff f891 	bl	8001358 <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223a:	f7ff f88d 	bl	8001358 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e247      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800224c:	f7ff fbfa 	bl	8001a44 <LL_RCC_HSE_IsReady>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f1      	bne.n	800223a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04c      	beq.n	80022fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	f7ff fd9c 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002266:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002268:	f7ff fea2 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 800226c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d10e      	bne.n	8002298 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e227      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fc19 	bl	8001ac8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002296:	e031      	b.n	80022fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	f7ff fbe2 	bl	8001a68 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff f858 	bl	8001358 <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7ff f854 	bl	8001358 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e20e      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022be:	f7ff fbf1 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fbfb 	bl	8001ac8 <LL_RCC_HSI_SetCalibTrimming>
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d4:	f7ff fbd7 	bl	8001a86 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff f83e 	bl	8001358 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff f83a 	bl	8001358 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1f4      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022f2:	f7ff fbd7 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f1      	bne.n	80022e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a3 	beq.w	800245c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d076      	beq.n	800240c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d046      	beq.n	80023b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800232a:	f7ff fc5a 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002334:	f7ff fc33 	bl	8001b9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002338:	f7ff f80e 	bl	8001358 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002340:	f7ff f80a 	bl	8001358 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1c4      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002352:	f7ff fc46 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f1      	beq.n	8002340 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800235c:	f7ff fc53 	bl	8001c06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fffa 	bl	8001358 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002368:	f7fe fff6 	bl	8001358 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b03      	cmp	r3, #3
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1b0      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800237a:	f7ff fc66 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc70 	bl	8001c6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800238e:	f7ff fc17 	bl	8001bc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe ffe1 	bl	8001358 <HAL_GetTick>
 8002396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800239a:	f7fe ffdd 	bl	8001358 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e197      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023ac:	f7ff fc19 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f1      	bne.n	800239a <HAL_RCC_OscConfig+0x31a>
 80023b6:	e051      	b.n	800245c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023b8:	f7ff fbf1 	bl	8001b9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe ffcc 	bl	8001358 <HAL_GetTick>
 80023c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023c2:	e00c      	b.n	80023de <HAL_RCC_OscConfig+0x35e>
 80023c4:	20000010 	.word	0x20000010
 80023c8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023cc:	f7fe ffc4 	bl	8001358 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e17e      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023de:	f7ff fc00 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023e8:	f7ff fc1e 	bl	8001c28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023ee:	f7fe ffb3 	bl	8001358 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e16d      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002400:	f7ff fc23 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f1      	bne.n	80023ee <HAL_RCC_OscConfig+0x36e>
 800240a:	e027      	b.n	800245c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800240c:	f7ff fc0c 	bl	8001c28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe ffa2 	bl	8001358 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002418:	f7fe ff9e 	bl	8001358 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b03      	cmp	r3, #3
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e158      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800242a:	f7ff fc0e 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f1      	bne.n	8002418 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002434:	f7ff fbc4 	bl	8001bc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe ff8e 	bl	8001358 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002440:	f7fe ff8a 	bl	8001358 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e144      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002452:	f7ff fbc6 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f1      	bne.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4b9e      	ldr	r3, [pc, #632]	; (80026e4 <HAL_RCC_OscConfig+0x664>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002474:	f7ff faa6 	bl	80019c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7fe ff6e 	bl	8001358 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe ff6a 	bl	8001358 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e124      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b94      	ldr	r3, [pc, #592]	; (80026e4 <HAL_RCC_OscConfig+0x664>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x42c>
 80024a6:	f7ff fb24 	bl	8001af2 <LL_RCC_LSE_Enable>
 80024aa:	e00c      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d104      	bne.n	80024be <HAL_RCC_OscConfig+0x43e>
 80024b4:	f7ff fb3f 	bl	8001b36 <LL_RCC_LSE_EnableBypass>
 80024b8:	f7ff fb1b 	bl	8001af2 <LL_RCC_LSE_Enable>
 80024bc:	e003      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
 80024be:	f7ff fb29 	bl	8001b14 <LL_RCC_LSE_Disable>
 80024c2:	f7ff fb49 	bl	8001b58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d014      	beq.n	80024f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe ff43 	bl	8001358 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe ff3f 	bl	8001358 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0f7      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024ec:	f7ff fb45 	bl	8001b7a <LL_RCC_LSE_IsReady>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ef      	beq.n	80024d6 <HAL_RCC_OscConfig+0x456>
 80024f6:	e013      	b.n	8002520 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe ff2e 	bl	8001358 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe ff2a 	bl	8001358 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0e2      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002516:	f7ff fb30 	bl	8001b7a <LL_RCC_LSE_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ef      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80d8 	beq.w	80026da <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	f7ff fc38 	bl	8001d9e <LL_RCC_GetSysClkSource>
 800252e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b02      	cmp	r3, #2
 800253e:	f040 80a6 	bne.w	800268e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d123      	bne.n	8002598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d114      	bne.n	8002598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d054      	beq.n	8002642 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d04f      	beq.n	800263e <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800259e:	f7ff fcc1 	bl	8001f24 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a2:	f7fe fed9 	bl	8001358 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fed5 	bl	8001358 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e08f      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b45      	ldr	r3, [pc, #276]	; (80026e8 <HAL_RCC_OscConfig+0x668>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	430a      	orrs	r2, r1
 80025f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002600:	f7ff fc81 	bl	8001f06 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002614:	f7fe fea0 	bl	8001358 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fe9c 	bl	8001358 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e056      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ef      	beq.n	800261c <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263c:	e04d      	b.n	80026da <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e04c      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d144      	bne.n	80026da <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002650:	f7ff fc59 	bl	8001f06 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002664:	f7fe fe78 	bl	8001358 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fe74 	bl	8001358 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e02e      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x5ec>
 800268c:	e025      	b.n	80026da <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	f7ff fc46 	bl	8001f24 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe fe5e 	bl	8001358 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fe5a 	bl	8001358 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ef      	bne.n	80026a0 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e001      	b.n	80026da <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3734      	adds	r7, #52	; 0x34
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	58000400 	.word	0x58000400
 80026e8:	11c1808c 	.word	0x11c1808c

080026ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e12d      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b98      	ldr	r3, [pc, #608]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d91b      	bls.n	8002746 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b95      	ldr	r3, [pc, #596]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4993      	ldr	r1, [pc, #588]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271e:	f7fe fe1b 	bl	8001358 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002724:	e008      	b.n	8002738 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002726:	f7fe fe17 	bl	8001358 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e111      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fb2d 	bl	8001db6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800275c:	f7fe fdfc 	bl	8001358 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002764:	f7fe fdf8 	bl	8001358 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0f2      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002776:	f7ff fc27 	bl	8001fc8 <LL_RCC_IsActiveFlag_HPRE>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fb24 	bl	8001dde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002796:	f7fe fddf 	bl	8001358 <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800279e:	f7fe fddb 	bl	8001358 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0d5      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80027b0:	f7ff fc1c 	bl	8001fec <LL_RCC_IsActiveFlag_C2HPRE>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f1      	beq.n	800279e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fb1d 	bl	8001e0a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fdc2 	bl	8001358 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d8:	f7fe fdbe 	bl	8001358 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b8      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027ea:	f7ff fc12 	bl	8002012 <LL_RCC_IsActiveFlag_SHDHPRE>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f1      	beq.n	80027d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fb17 	bl	8001e38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800280a:	f7fe fda5 	bl	8001358 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002812:	f7fe fda1 	bl	8001358 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e09b      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002824:	f7ff fc08 	bl	8002038 <LL_RCC_IsActiveFlag_PPRE1>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f1      	beq.n	8002812 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d017      	beq.n	800286a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fb0d 	bl	8001e60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002846:	f7fe fd87 	bl	8001358 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800284e:	f7fe fd83 	bl	8001358 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e07d      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002860:	f7ff fbfc 	bl	800205c <LL_RCC_IsActiveFlag_PPRE2>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f1      	beq.n	800284e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d043      	beq.n	80028fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d106      	bne.n	800288c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800287e:	f7ff f8e1 	bl	8001a44 <LL_RCC_HSE_IsReady>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11e      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e067      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002894:	f7ff fb55 	bl	8001f42 <LL_RCC_PLL_IsReady>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d113      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e05c      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80028aa:	f7ff fa15 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e051      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80028b8:	f7ff f8f4 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e04a      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fa53 	bl	8001d76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe fd42 	bl	8001358 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fe fd3e 	bl	8001358 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e036      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	f7ff fa56 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d1ec      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d21b      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 0207 	bic.w	r2, r3, #7
 8002914:	4913      	ldr	r1, [pc, #76]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fd1c 	bl	8001358 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	e008      	b.n	8002936 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002924:	f7fe fd18 	bl	8001358 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e012      	b.n	800295c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x278>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d1ef      	bne.n	8002924 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002944:	f000 f87e 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002948:	4603      	mov	r3, r0
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_RCC_ClockConfig+0x27c>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800294e:	f7fe fd0f 	bl	8001370 <HAL_GetTickPrio>
 8002952:	4603      	mov	r3, r0
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fa37 	bl	8000dc8 <HAL_InitTick>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	58004000 	.word	0x58004000
 8002968:	20000010 	.word	0x20000010

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002972:	f7ff fa14 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002976:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800297e:	f7ff f9d0 	bl	8001d22 <LL_RCC_MSI_GetRange>
 8002982:	4603      	mov	r3, r0
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e04b      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e045      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d10a      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029a6:	f7ff f81d 	bl	80019e4 <LL_RCC_HSE_IsEnabledDiv2>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e03a      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e037      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029bc:	f7ff faf8 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 80029c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d003      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x64>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80029ce:	e00d      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029d2:	60bb      	str	r3, [r7, #8]
        break;
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029d6:	f7ff f805 	bl	80019e4 <LL_RCC_HSE_IsEnabledDiv2>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029e4:	e00d      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029e8:	60bb      	str	r3, [r7, #8]
        break;
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029ec:	f7ff f999 	bl	8001d22 <LL_RCC_MSI_GetRange>
 80029f0:	4603      	mov	r3, r0
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	60bb      	str	r3, [r7, #8]
        break;
 8002a00:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a02:	f7ff fab0 	bl	8001f66 <LL_RCC_PLL_GetN>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	fb03 f402 	mul.w	r4, r3, r2
 8002a0e:	f7ff fac3 	bl	8001f98 <LL_RCC_PLL_GetDivider>
 8002a12:	4603      	mov	r3, r0
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	3301      	adds	r3, #1
 8002a18:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a1c:	f7ff fab0 	bl	8001f80 <LL_RCC_PLL_GetR>
 8002a20:	4603      	mov	r3, r0
 8002a22:	0f5b      	lsrs	r3, r3, #29
 8002a24:	3301      	adds	r3, #1
 8002a26:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	080087c0 	.word	0x080087c0
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	01e84800 	.word	0x01e84800

08002a44 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b598      	push	{r3, r4, r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a48:	f7ff ff90 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	f7ff fa1b 	bl	8001e88 <LL_RCC_GetAHBPrescaler>
 8002a52:	4603      	mov	r3, r0
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd98      	pop	{r3, r4, r7, pc}
 8002a68:	08008760 	.word	0x08008760

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b598      	push	{r3, r4, r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a70:	f7ff ffe8 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a74:	4604      	mov	r4, r0
 8002a76:	f7ff fa2e 	bl	8001ed6 <LL_RCC_GetAPB1Prescaler>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd98      	pop	{r3, r4, r7, pc}
 8002a94:	080087a0 	.word	0x080087a0

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b598      	push	{r3, r4, r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a9c:	f7ff ffd2 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	f7ff fa24 	bl	8001eee <LL_RCC_GetAPB2Prescaler>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	0adb      	lsrs	r3, r3, #11
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd98      	pop	{r3, r4, r7, pc}
 8002ac0:	080087a0 	.word	0x080087a0

08002ac4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	226f      	movs	r2, #111	; 0x6f
 8002ad2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002ad4:	f7ff f963 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002ade:	f7ff f9d3 	bl	8001e88 <LL_RCC_GetAHBPrescaler>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002ae8:	f7ff f9f5 	bl	8001ed6 <LL_RCC_GetAPB1Prescaler>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002af2:	f7ff f9fc 	bl	8001eee <LL_RCC_GetAPB2Prescaler>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002afc:	f7ff f9d0 	bl	8001ea0 <LL_C2_RCC_GetAHBPrescaler>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002b06:	f7ff f9d8 	bl	8001eba <LL_RCC_GetAHB4Prescaler>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_RCC_GetClockConfig+0x60>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0207 	and.w	r2, r3, #7
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58004000 	.word	0x58004000

08002b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2bb0      	cmp	r3, #176	; 0xb0
 8002b34:	d903      	bls.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e007      	b.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002b4e:	f7ff f9b4 	bl	8001eba <LL_RCC_GetAHB4Prescaler>
 8002b52:	4603      	mov	r3, r0
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f80c 	bl	8002b94 <RCC_SetFlashLatency>
 8002b7c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	080087c0 	.word	0x080087c0
 8002b8c:	08008760 	.word	0x08008760
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b08f      	sub	sp, #60	; 0x3c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <RCC_SetFlashLatency+0x9c>)
 8002ba0:	f107 041c 	add.w	r4, r7, #28
 8002ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <RCC_SetFlashLatency+0xa0>)
 8002bac:	f107 040c 	add.w	r4, r7, #12
 8002bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bbe:	e013      	b.n	8002be8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3338      	adds	r3, #56	; 0x38
 8002bc6:	443b      	add	r3, r7
 8002bc8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d807      	bhi.n	8002be2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3338      	adds	r3, #56	; 0x38
 8002bd8:	443b      	add	r3, r7
 8002bda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002be0:	e005      	b.n	8002bee <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	3301      	adds	r3, #1
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d9e8      	bls.n	8002bc0 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <RCC_SetFlashLatency+0xa4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4910      	ldr	r1, [pc, #64]	; (8002c38 <RCC_SetFlashLatency+0xa4>)
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bfe:	f7fe fbab 	bl	8001358 <HAL_GetTick>
 8002c02:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c04:	e008      	b.n	8002c18 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c06:	f7fe fba7 	bl	8001358 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e007      	b.n	8002c28 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <RCC_SetFlashLatency+0xa4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d1ef      	bne.n	8002c06 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	373c      	adds	r7, #60	; 0x3c
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}
 8002c30:	08008728 	.word	0x08008728
 8002c34:	08008738 	.word	0x08008738
 8002c38:	58004000 	.word	0x58004000

08002c3c <LL_RCC_LSE_IsEnabled>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <LL_RCC_LSE_IsEnabled+0x18>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_LSE_IsReady>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d101      	bne.n	8002c78 <LL_RCC_LSE_IsReady+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_RCC_LSE_IsReady+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_RCC_SetRFWKPClockSource>:
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_SetSMPSClockSource>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_SetSMPSPrescaler>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_RCC_SetUSARTClockSource>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_SetLPUARTClockSource>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_SetI2CClockSource>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_SetLPTIMClockSource>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_RCC_SetRNGClockSource>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_RCC_SetCLK48ClockSource>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_SetADCClockSource>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_SetRTCClockSource>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_GetRTCClockSource>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_ForceBackupDomainReset>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b088      	sub	sp, #32
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002efe:	2300      	movs	r3, #0
 8002f00:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d046      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f0e:	f7ff ffc1 	bl	8002e94 <LL_RCC_GetRTCClockSource>
 8002f12:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d03c      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f1e:	f7fe fd51 	bl	80019c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff9b 	bl	8002e68 <LL_RCC_SetRTCClockSource>
 8002f32:	e02e      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f3e:	f7ff ffb6 	bl	8002eae <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f42:	f7ff ffc5 	bl	8002ed0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002f5e:	f7ff fe6d 	bl	8002c3c <LL_RCC_LSE_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d114      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f68:	f7fe f9f6 	bl	8001358 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe f9f2 	bl	8001358 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d902      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	77fb      	strb	r3, [r7, #31]
              break;
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f88:	f7ff fe6a 	bl	8002c60 <LL_RCC_LSE_IsReady>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d1ee      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	77bb      	strb	r3, [r7, #30]
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff feb6 	bl	8002d1e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fec1 	bl	8002d4a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fee9 	bl	8002db0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fede 	bl	8002db0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff feb6 	bl	8002d76 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301e:	d008      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003028:	d003      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fed4 	bl	8002de4 <LL_RCC_SetRNGClockSource>
 800303c:	e00a      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	2000      	movs	r0, #0
 800304a:	f7ff fecb 	bl	8002de4 <LL_RCC_SetRNGClockSource>
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fede 	bl	8002e10 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800305c:	d107      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fedc 	bl	8002e3c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308c:	d107      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fdf7 	bl	8002ca2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fe16 	bl	8002cf6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fdfd 	bl	8002cce <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80030d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80030e2:	f7ff fdcf 	bl	8002c84 <LL_RCC_MSI_EnablePLLMode>
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09f      	b.n	800323e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fdc4 	bl	8000ca0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003120:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RTC_Init+0x15c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d07e      	beq.n	800322a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	22ca      	movs	r2, #202	; 0xca
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2253      	movs	r2, #83	; 0x53
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8ab 	bl	8003298 <RTC_EnterInitMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2204      	movs	r2, #4
 8003154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e067      	b.n	800322e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800316c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003170:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68d2      	ldr	r2, [r2, #12]
 8003198:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6919      	ldr	r1, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031bc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0202 	bic.w	r2, r2, #2
 80031cc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f829 	bl	800324c <HAL_RTC_WaitForSynchro>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	22ff      	movs	r2, #255	; 0xff
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e010      	b.n	800323e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e001      	b.n	800322e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40002800 	.word	0x40002800

0800324c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003262:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003264:	f7fe f878 	bl	8001358 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800326a:	e009      	b.n	8003280 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800326c:	f7fe f874 	bl	8001358 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800327a:	d901      	bls.n	8003280 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e007      	b.n	8003290 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d119      	bne.n	80032e2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032b8:	f7fe f84e 	bl	8001358 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032be:	e009      	b.n	80032d4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032c0:	f7fe f84a 	bl	8001358 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ce:	d901      	bls.n	80032d4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e007      	b.n	80032e4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e049      	b.n	8003392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f841 	bl	800339a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f88e 	bl	800344c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e036      	b.n	8003436 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_TIM_Base_Start_IT+0x94>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x44>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d115      	bne.n	8003420 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_TIM_Base_Start_IT+0x98>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d015      	beq.n	8003432 <HAL_TIM_Base_Start_IT+0x82>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d011      	beq.n	8003432 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e008      	b.n	8003432 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e000      	b.n	8003434 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	00010007 	.word	0x00010007

0800344c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <TIM_Base_SetConfig+0x9c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x20>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <TIM_Base_SetConfig+0x9c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x42>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <TIM_Base_SetConfig+0x9c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	615a      	str	r2, [r3, #20]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00

080034ec <LL_RCC_GetUSARTClockSource>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4013      	ands	r3, r2
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_RCC_GetLPUARTClockSource>:
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4013      	ands	r3, r2
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e042      	b.n	80035c4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd fbd1 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2224      	movs	r2, #36	; 0x24
 800355a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fc4a 	bl	8003e08 <UART_SetConfig>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e022      	b.n	80035c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fe66 	bl	8004258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 feed 	bl	800439c <UART_CheckIdleState>
 80035c2:	4603      	mov	r3, r0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d17b      	bne.n	80036de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UART_Transmit+0x26>
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e074      	b.n	80036e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2221      	movs	r2, #33	; 0x21
 8003602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003606:	f7fd fea7 	bl	8001358 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d108      	bne.n	8003638 <HAL_UART_Transmit+0x6c>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e003      	b.n	8003640 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003640:	e030      	b.n	80036a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 ff4f 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e03d      	b.n	80036e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3302      	adds	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e007      	b.n	8003692 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3301      	adds	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1c8      	bne.n	8003642 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 ff18 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e006      	b.n	80036e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80036de:	2302      	movs	r3, #2
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d137      	bne.n	8003770 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Receive_IT+0x24>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e030      	b.n	8003772 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_UART_Receive_IT+0x94>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01f      	beq.n	8003760 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	613b      	str	r3, [r7, #16]
   return(result);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	61bb      	str	r3, [r7, #24]
   return(result);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e6      	bne.n	800372e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	461a      	mov	r2, r3
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 ff2a 	bl	80045c0 <UART_Start_Receive_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	e000      	b.n	8003772 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40008000 	.word	0x40008000

08003780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b0ba      	sub	sp, #232	; 0xe8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80037aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80037ae:	4013      	ands	r3, r2
 80037b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80037b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11b      	bne.n	80037f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 82e3 	beq.w	8003db0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
      }
      return;
 80037f2:	e2dd      	b.n	8003db0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8123 	beq.w	8003a44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003802:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <HAL_UART_IRQHandler+0x2b8>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800380a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_UART_IRQHandler+0x2bc>)
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8116 	beq.w	8003a44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d011      	beq.n	8003848 <HAL_UART_IRQHandler+0xc8>
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d011      	beq.n	8003878 <HAL_UART_IRQHandler+0xf8>
 8003854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2202      	movs	r2, #2
 8003866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f043 0204 	orr.w	r2, r3, #4
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d011      	beq.n	80038a8 <HAL_UART_IRQHandler+0x128>
 8003884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2204      	movs	r2, #4
 8003896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d017      	beq.n	80038e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80038c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80038c4:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <HAL_UART_IRQHandler+0x2b8>)
 80038c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f043 0208 	orr.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d012      	beq.n	8003916 <HAL_UART_IRQHandler+0x196>
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8249 	beq.w	8003db4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800392e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800393a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800396e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003976:	2b00      	cmp	r3, #0
 8003978:	d054      	beq.n	8003a24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 ff42 	bl	8004804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d146      	bne.n	8003a1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d017      	beq.n	8003a14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_UART_IRQHandler+0x2c0>)
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fe06 	bl	8001606 <HAL_DMA_Abort_IT>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d019      	beq.n	8003a34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a12:	e00f      	b.n	8003a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f9e1 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1a:	e00b      	b.n	8003a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f9dd 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a22:	e007      	b.n	8003a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f9d9 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003a32:	e1bf      	b.n	8003db4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	bf00      	nop
    return;
 8003a36:	e1bd      	b.n	8003db4 <HAL_UART_IRQHandler+0x634>
 8003a38:	10000001 	.word	0x10000001
 8003a3c:	04000120 	.word	0x04000120
 8003a40:	080048d1 	.word	0x080048d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 8153 	bne.w	8003cf4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 814c 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8145 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2210      	movs	r2, #16
 8003a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	f040 80bb 	bne.w	8003bf8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 818f 	beq.w	8003db8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f080 8187 	bcs.w	8003db8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 8087 	bne.w	8003bd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003af6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1da      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e1      	bne.n	8003b12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3308      	adds	r3, #8
 8003b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e3      	bne.n	8003b4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e4      	bne.n	8003b94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd fcb9 	bl	8001548 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f8fd 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf6:	e0df      	b.n	8003db8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80d1 	beq.w	8003dbc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80cc 	beq.w	8003dbc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
 8003c48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e4      	bne.n	8003c24 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c82:	633a      	str	r2, [r7, #48]	; 0x30
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e1      	bne.n	8003c5a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e4      	bne.n	8003caa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ce6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f87f 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cf2:	e063      	b.n	8003dbc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_UART_IRQHandler+0x59e>
 8003d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 fb38 	bl	800538c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d1c:	e051      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d03a      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
    }
    return;
 8003d52:	e035      	b.n	8003dc0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <HAL_UART_IRQHandler+0x5f4>
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fdc5 	bl	80048fc <UART_EndTransmit_IT>
    return;
 8003d72:	e026      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_UART_IRQHandler+0x614>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f001 fb11 	bl	80053b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d92:	e016      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x642>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0c      	bge.n	8003dc2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 faf9 	bl	80053a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dae:	e008      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
      return;
 8003db0:	bf00      	nop
 8003db2:	e006      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
    return;
 8003db4:	bf00      	nop
 8003db6:	e004      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
      return;
 8003db8:	bf00      	nop
 8003dba:	e002      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
      return;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_IRQHandler+0x642>
    return;
 8003dc0:	bf00      	nop
  }
}
 8003dc2:	37e8      	adds	r7, #232	; 0xe8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b08c      	sub	sp, #48	; 0x30
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4baf      	ldr	r3, [pc, #700]	; (80040f4 <UART_SetConfig+0x2ec>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4aa4      	ldr	r2, [pc, #656]	; (80040f8 <UART_SetConfig+0x2f0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e70:	4313      	orrs	r3, r2
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f023 010f 	bic.w	r1, r3, #15
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a95      	ldr	r2, [pc, #596]	; (80040fc <UART_SetConfig+0x2f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d125      	bne.n	8003ef8 <UART_SetConfig+0xf0>
 8003eac:	2003      	movs	r0, #3
 8003eae:	f7ff fb1d 	bl	80034ec <LL_RCC_GetUSARTClockSource>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0xe8>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0xb8>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	e042      	b.n	8003f5e <UART_SetConfig+0x156>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ede:	e03e      	b.n	8003f5e <UART_SetConfig+0x156>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ee6:	e03a      	b.n	8003f5e <UART_SetConfig+0x156>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eee:	e036      	b.n	8003f5e <UART_SetConfig+0x156>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	e032      	b.n	8003f5e <UART_SetConfig+0x156>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <UART_SetConfig+0x2f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d12a      	bne.n	8003f58 <UART_SetConfig+0x150>
 8003f02:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f06:	f7ff fb01 	bl	800350c <LL_RCC_GetLPUARTClockSource>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f10:	d01a      	beq.n	8003f48 <UART_SetConfig+0x140>
 8003f12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f16:	d81b      	bhi.n	8003f50 <UART_SetConfig+0x148>
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1c:	d00c      	beq.n	8003f38 <UART_SetConfig+0x130>
 8003f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f22:	d815      	bhi.n	8003f50 <UART_SetConfig+0x148>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <UART_SetConfig+0x128>
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2c:	d008      	beq.n	8003f40 <UART_SetConfig+0x138>
 8003f2e:	e00f      	b.n	8003f50 <UART_SetConfig+0x148>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e012      	b.n	8003f5e <UART_SetConfig+0x156>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	e00e      	b.n	8003f5e <UART_SetConfig+0x156>
 8003f40:	2304      	movs	r3, #4
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f46:	e00a      	b.n	8003f5e <UART_SetConfig+0x156>
 8003f48:	2308      	movs	r3, #8
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f4e:	e006      	b.n	8003f5e <UART_SetConfig+0x156>
 8003f50:	2310      	movs	r3, #16
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f56:	e002      	b.n	8003f5e <UART_SetConfig+0x156>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <UART_SetConfig+0x2f0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f040 8097 	bne.w	8004098 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d823      	bhi.n	8003fba <UART_SetConfig+0x1b2>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x170>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fbb 	.word	0x08003fbb
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fbb 	.word	0x08003fbb
 8003f88:	08003fab 	.word	0x08003fab
 8003f8c:	08003fbb 	.word	0x08003fbb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fbb 	.word	0x08003fbb
 8003f98:	08003fb3 	.word	0x08003fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fd66 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa2:	e010      	b.n	8003fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa4:	4b56      	ldr	r3, [pc, #344]	; (8004100 <UART_SetConfig+0x2f8>)
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa8:	e00d      	b.n	8003fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003faa:	f7fe fcdf 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fb0:	e009      	b.n	8003fc6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb8:	e005      	b.n	8003fc6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 812b 	beq.w	8004224 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	4a4c      	ldr	r2, [pc, #304]	; (8004104 <UART_SetConfig+0x2fc>)
 8003fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d305      	bcc.n	8003ffe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d903      	bls.n	8004006 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004004:	e10e      	b.n	8004224 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2200      	movs	r2, #0
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	60fa      	str	r2, [r7, #12]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <UART_SetConfig+0x2fc>)
 8004014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004018:	b29b      	uxth	r3, r3
 800401a:	2200      	movs	r2, #0
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004028:	f7fc f8b2 	bl	8000190 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	020b      	lsls	r3, r1, #8
 800403e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004042:	0202      	lsls	r2, r0, #8
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	6849      	ldr	r1, [r1, #4]
 8004048:	0849      	lsrs	r1, r1, #1
 800404a:	2000      	movs	r0, #0
 800404c:	460c      	mov	r4, r1
 800404e:	4605      	mov	r5, r0
 8004050:	eb12 0804 	adds.w	r8, r2, r4
 8004054:	eb43 0905 	adc.w	r9, r3, r5
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	469a      	mov	sl, r3
 8004060:	4693      	mov	fp, r2
 8004062:	4652      	mov	r2, sl
 8004064:	465b      	mov	r3, fp
 8004066:	4640      	mov	r0, r8
 8004068:	4649      	mov	r1, r9
 800406a:	f7fc f891 	bl	8000190 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4613      	mov	r3, r2
 8004074:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407c:	d308      	bcc.n	8004090 <UART_SetConfig+0x288>
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004084:	d204      	bcs.n	8004090 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a3a      	ldr	r2, [r7, #32]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	e0c9      	b.n	8004224 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004096:	e0c5      	b.n	8004224 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d16d      	bne.n	800417e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80040a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040a6:	3b01      	subs	r3, #1
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	d82d      	bhi.n	8004108 <UART_SetConfig+0x300>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x2ac>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040d5 	.word	0x080040d5
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	08004109 	.word	0x08004109
 80040c0:	080040e3 	.word	0x080040e3
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004109 	.word	0x08004109
 80040cc:	08004109 	.word	0x08004109
 80040d0:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fce0 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040da:	e01b      	b.n	8004114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <UART_SetConfig+0x2f8>)
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e0:	e018      	b.n	8004114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe fc43 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040e8:	e014      	b.n	8004114 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040f0:	e010      	b.n	8004114 <UART_SetConfig+0x30c>
 80040f2:	bf00      	nop
 80040f4:	cfff69f3 	.word	0xcfff69f3
 80040f8:	40008000 	.word	0x40008000
 80040fc:	40013800 	.word	0x40013800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	08008800 	.word	0x08008800
      default:
        pclk = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8084 	beq.w	8004224 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <UART_SetConfig+0x448>)
 8004122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004126:	461a      	mov	r2, r3
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	fbb3 f3f2 	udiv	r3, r3, r2
 800412e:	005a      	lsls	r2, r3, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	441a      	add	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2b0f      	cmp	r3, #15
 8004146:	d916      	bls.n	8004176 <UART_SetConfig+0x36e>
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d212      	bcs.n	8004176 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f023 030f 	bic.w	r3, r3, #15
 8004158:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	b29a      	uxth	r2, r3
 8004166:	8bfb      	ldrh	r3, [r7, #30]
 8004168:	4313      	orrs	r3, r2
 800416a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	8bfa      	ldrh	r2, [r7, #30]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	e056      	b.n	8004224 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800417c:	e052      	b.n	8004224 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800417e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004182:	3b01      	subs	r3, #1
 8004184:	2b07      	cmp	r3, #7
 8004186:	d822      	bhi.n	80041ce <UART_SetConfig+0x3c6>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0x388>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041b1 	.word	0x080041b1
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041cf 	.word	0x080041cf
 800419c:	080041bf 	.word	0x080041bf
 80041a0:	080041cf 	.word	0x080041cf
 80041a4:	080041cf 	.word	0x080041cf
 80041a8:	080041cf 	.word	0x080041cf
 80041ac:	080041c7 	.word	0x080041c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b0:	f7fe fc72 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041b6:	e010      	b.n	80041da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <UART_SetConfig+0x44c>)
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041bc:	e00d      	b.n	80041da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041be:	f7fe fbd5 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80041c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041c4:	e009      	b.n	80041da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041cc:	e005      	b.n	80041da <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041d8:	bf00      	nop
    }

    if (pclk != 0U)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d021      	beq.n	8004224 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <UART_SetConfig+0x448>)
 80041e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	441a      	add	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d909      	bls.n	800421e <UART_SetConfig+0x416>
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d205      	bcs.n	800421e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	b29a      	uxth	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	e002      	b.n	8004224 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2201      	movs	r2, #1
 8004228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2201      	movs	r2, #1
 8004230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004240:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004244:	4618      	mov	r0, r3
 8004246:	3730      	adds	r7, #48	; 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	08008800 	.word	0x08008800
 8004254:	00f42400 	.word	0x00f42400

08004258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01a      	beq.n	800436e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004356:	d10a      	bne.n	800436e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b098      	sub	sp, #96	; 0x60
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043ac:	f7fc ffd4 	bl	8001358 <HAL_GetTick>
 80043b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d12f      	bne.n	8004420 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c8:	2200      	movs	r2, #0
 80043ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f88e 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d022      	beq.n	8004420 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	647b      	str	r3, [r7, #68]	; 0x44
 80043fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e063      	b.n	80044e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d149      	bne.n	80044c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800442e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004436:	2200      	movs	r2, #0
 8004438:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f857 	bl	80044f0 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d03c      	beq.n	80044c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	623b      	str	r3, [r7, #32]
   return(result);
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
 8004468:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	60fb      	str	r3, [r7, #12]
   return(result);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449a:	61fa      	str	r2, [r7, #28]
 800449c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	617b      	str	r3, [r7, #20]
   return(result);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e012      	b.n	80044e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3758      	adds	r7, #88	; 0x58
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004500:	e049      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d045      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fc ff25 	bl	8001358 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <UART_WaitOnFlagUntilTimeout+0x30>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e048      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d031      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d110      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2208      	movs	r2, #8
 8004546:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f95b 	bl	8004804 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2208      	movs	r2, #8
 8004552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e029      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d111      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f941 	bl	8004804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e00f      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d0a6      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b0a3      	sub	sp, #140	; 0x8c
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d10e      	bne.n	8004612 <UART_Start_Receive_IT+0x52>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <UART_Start_Receive_IT+0x48>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004606:	e02d      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004610:	e028      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <UART_Start_Receive_IT+0x76>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <UART_Start_Receive_IT+0x6c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800462a:	e01b      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	227f      	movs	r2, #127	; 0x7f
 8004630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004634:	e016      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800463e:	d10d      	bne.n	800465c <UART_Start_Receive_IT+0x9c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <UART_Start_Receive_IT+0x92>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	227f      	movs	r2, #127	; 0x7f
 800464c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004650:	e008      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	223f      	movs	r2, #63	; 0x3f
 8004656:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800465a:	e003      	b.n	8004664 <UART_Start_Receive_IT+0xa4>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2222      	movs	r2, #34	; 0x22
 8004670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004698:	673a      	str	r2, [r7, #112]	; 0x70
 800469a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800469e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80046a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e3      	bne.n	8004674 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b4:	d14f      	bne.n	8004756 <UART_Start_Receive_IT+0x196>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d349      	bcc.n	8004756 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d107      	bne.n	80046dc <UART_Start_Receive_IT+0x11c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a47      	ldr	r2, [pc, #284]	; (80047f4 <UART_Start_Receive_IT+0x234>)
 80046d8:	675a      	str	r2, [r3, #116]	; 0x74
 80046da:	e002      	b.n	80046e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a46      	ldr	r2, [pc, #280]	; (80047f8 <UART_Start_Receive_IT+0x238>)
 80046e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01a      	beq.n	8004720 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800470c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800470e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004712:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800471a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e4      	bne.n	80046ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3308      	adds	r3, #8
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004740:	64ba      	str	r2, [r7, #72]	; 0x48
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_Start_Receive_IT+0x160>
 8004754:	e046      	b.n	80047e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d107      	bne.n	8004770 <UART_Start_Receive_IT+0x1b0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <UART_Start_Receive_IT+0x23c>)
 800476c:	675a      	str	r2, [r3, #116]	; 0x74
 800476e:	e002      	b.n	8004776 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a23      	ldr	r2, [pc, #140]	; (8004800 <UART_Start_Receive_IT+0x240>)
 8004774:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004792:	677b      	str	r3, [r7, #116]	; 0x74
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_Start_Receive_IT+0x1be>
 80047b0:	e018      	b.n	80047e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	613b      	str	r3, [r7, #16]
   return(result);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	378c      	adds	r7, #140	; 0x8c
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	08005025 	.word	0x08005025
 80047f8:	08004cc5 	.word	0x08004cc5
 80047fc:	08004b0d 	.word	0x08004b0d
 8004800:	08004955 	.word	0x08004955

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b095      	sub	sp, #84	; 0x54
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
 800482c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e6      	bne.n	800480c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3308      	adds	r3, #8
 8004844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	61fb      	str	r3, [r7, #28]
   return(result);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e3      	bne.n	800483e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d118      	bne.n	80048b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048c4:	bf00      	nop
 80048c6:	3754      	adds	r7, #84	; 0x54
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fa74 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	60bb      	str	r3, [r7, #8]
   return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fa3f 	bl	8003dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494a:	bf00      	nop
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b09c      	sub	sp, #112	; 0x70
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004962:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	f040 80be 	bne.w	8004aee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800497c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004980:	b2d9      	uxtb	r1, r3
 8004982:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004986:	b2da      	uxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	400a      	ands	r2, r1
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 80a1 	bne.w	8004afe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
 80049dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e6      	bne.n	80049bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	667b      	str	r3, [r7, #100]	; 0x64
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a33      	ldr	r2, [pc, #204]	; (8004b08 <UART_RxISR_8BIT+0x1b4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d01f      	beq.n	8004a80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a62:	663b      	str	r3, [r7, #96]	; 0x60
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d12e      	bne.n	8004ae6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0310 	bic.w	r3, r3, #16
 8004aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d103      	bne.n	8004ad6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004adc:	4619      	mov	r1, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff f986 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ae4:	e00b      	b.n	8004afe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc f82a 	bl	8000b40 <HAL_UART_RxCpltCallback>
}
 8004aec:	e007      	b.n	8004afe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0208 	orr.w	r2, r2, #8
 8004afc:	619a      	str	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	3770      	adds	r7, #112	; 0x70
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40008000 	.word	0x40008000

08004b0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b09c      	sub	sp, #112	; 0x70
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	f040 80be 	bne.w	8004ca6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004b3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 80a1 	bne.w	8004cb6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b88:	667b      	str	r3, [r7, #100]	; 0x64
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b92:	657b      	str	r3, [r7, #84]	; 0x54
 8004b94:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e6      	bne.n	8004b74 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3308      	adds	r3, #8
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bc6:	643a      	str	r2, [r7, #64]	; 0x40
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e5      	bne.n	8004ba6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a33      	ldr	r2, [pc, #204]	; (8004cc0 <UART_RxISR_16BIT+0x1b4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01f      	beq.n	8004c38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d12e      	bne.n	8004c9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 0310 	bic.w	r3, r3, #16
 8004c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6979      	ldr	r1, [r7, #20]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	613b      	str	r3, [r7, #16]
   return(result);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d103      	bne.n	8004c8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff f8aa 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c9c:	e00b      	b.n	8004cb6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fb ff4e 	bl	8000b40 <HAL_UART_RxCpltCallback>
}
 8004ca4:	e007      	b.n	8004cb6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0208 	orr.w	r2, r2, #8
 8004cb4:	619a      	str	r2, [r3, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	3770      	adds	r7, #112	; 0x70
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40008000 	.word	0x40008000

08004cc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b0ac      	sub	sp, #176	; 0xb0
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfa:	2b22      	cmp	r3, #34	; 0x22
 8004cfc:	f040 8182 	bne.w	8005004 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d06:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d0a:	e125      	b.n	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004d1a:	b2d9      	uxtb	r1, r3
 8004d1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	400a      	ands	r2, r1
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d053      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2202      	movs	r2, #2
 8004dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f043 0202 	orr.w	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fe ffef 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 80a2 	bne.w	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e38:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004e3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e4      	bne.n	8004e14 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e72:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e74:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e1      	bne.n	8004e4a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	; (800501c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d021      	beq.n	8004ee8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01a      	beq.n	8004ee8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004eda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e4      	bne.n	8004eb2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d130      	bne.n	8004f52 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f18:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e4      	bne.n	8004ef6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d103      	bne.n	8004f42 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2210      	movs	r2, #16
 8004f40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe ff50 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
 8004f50:	e002      	b.n	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb fdf4 	bl	8000b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f aecf 	bne.w	8004d0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d049      	beq.n	8005014 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d242      	bcs.n	8005014 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e3      	bne.n	8004f8e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004fca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e4      	bne.n	8004fcc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005002:	e007      	b.n	8005014 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	619a      	str	r2, [r3, #24]
}
 8005014:	bf00      	nop
 8005016:	37b0      	adds	r7, #176	; 0xb0
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40008000 	.word	0x40008000
 8005020:	08004955 	.word	0x08004955

08005024 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b0ae      	sub	sp, #184	; 0xb8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005032:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505a:	2b22      	cmp	r3, #34	; 0x22
 800505c:	f040 8186 	bne.w	800536c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005066:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800506a:	e129      	b.n	80052c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800507e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005082:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005086:	4013      	ands	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800508e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	1c9a      	adds	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d053      	beq.n	800516a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d011      	beq.n	80050f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80050ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80050fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2202      	movs	r2, #2
 8005110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f043 0204 	orr.w	r2, r3, #4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800512e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2204      	movs	r2, #4
 8005140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f043 0202 	orr.w	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fe fe3d 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80a4 	bne.w	80052c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800519e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e2      	bne.n	8005178 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e1      	bne.n	80051b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a5f      	ldr	r2, [pc, #380]	; (8005384 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d021      	beq.n	8005250 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01a      	beq.n	8005250 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800522e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800523c:	65bb      	str	r3, [r7, #88]	; 0x58
 800523e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e4      	bne.n	800521a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d130      	bne.n	80052ba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
 8005282:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e4      	bne.n	800525e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d103      	bne.n	80052aa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2210      	movs	r2, #16
 80052a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fe fd9c 	bl	8003df0 <HAL_UARTEx_RxEventCallback>
 80052b8:	e002      	b.n	80052c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fb fc40 	bl	8000b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80052c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f47f aecb 	bne.w	800506c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80052e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d049      	beq.n	800537c <UART_RxISR_16BIT_FIFOEN+0x358>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d242      	bcs.n	800537c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	623b      	str	r3, [r7, #32]
   return(result);
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800531a:	633a      	str	r2, [r7, #48]	; 0x30
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005332:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	60fb      	str	r3, [r7, #12]
   return(result);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f043 0320 	orr.w	r3, r3, #32
 8005348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	617b      	str	r3, [r7, #20]
   return(result);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e4      	bne.n	8005334 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800536a:	e007      	b.n	800537c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	619a      	str	r2, [r3, #24]
}
 800537c:	bf00      	nop
 800537e:	37b8      	adds	r7, #184	; 0xb8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40008000 	.word	0x40008000
 8005388:	08004b0d 	.word	0x08004b0d

0800538c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_UARTEx_DisableFifoMode+0x16>
 80053da:	2302      	movs	r3, #2
 80053dc:	e027      	b.n	800542e <HAL_UARTEx_DisableFifoMode+0x66>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2224      	movs	r2, #36	; 0x24
 80053ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800540c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800544e:	2302      	movs	r3, #2
 8005450:	e02d      	b.n	80054ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2224      	movs	r2, #36	; 0x24
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f850 	bl	8005534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e02d      	b.n	800552a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2224      	movs	r2, #36	; 0x24
 80054da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f812 	bl	8005534 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005540:	2b00      	cmp	r3, #0
 8005542:	d108      	bne.n	8005556 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005554:	e031      	b.n	80055ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005556:	2308      	movs	r3, #8
 8005558:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800555a:	2308      	movs	r3, #8
 800555c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	0e5b      	lsrs	r3, r3, #25
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	0f5b      	lsrs	r3, r3, #29
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	7b3a      	ldrb	r2, [r7, #12]
 8005582:	4911      	ldr	r1, [pc, #68]	; (80055c8 <UARTEx_SetNbDataToProcess+0x94>)
 8005584:	5c8a      	ldrb	r2, [r1, r2]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800558a:	7b3a      	ldrb	r2, [r7, #12]
 800558c:	490f      	ldr	r1, [pc, #60]	; (80055cc <UARTEx_SetNbDataToProcess+0x98>)
 800558e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005590:	fb93 f3f2 	sdiv	r3, r3, r2
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	7b7a      	ldrb	r2, [r7, #13]
 80055a0:	4909      	ldr	r1, [pc, #36]	; (80055c8 <UARTEx_SetNbDataToProcess+0x94>)
 80055a2:	5c8a      	ldrb	r2, [r1, r2]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055a8:	7b7a      	ldrb	r2, [r7, #13]
 80055aa:	4908      	ldr	r1, [pc, #32]	; (80055cc <UARTEx_SetNbDataToProcess+0x98>)
 80055ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	08008818 	.word	0x08008818
 80055cc:	08008820 	.word	0x08008820

080055d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0208 	add.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0208 	add.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d103      	bne.n	8005692 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e00c      	b.n	80056ac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3308      	adds	r3, #8
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <vListInsert+0x2e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d2f6      	bcs.n	800569a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d103      	bne.n	8005718 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericReset+0x2a>
        __asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60bb      	str	r3, [r7, #8]
    }
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005762:	f002 fb9f 	bl	8007ea4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	441a      	add	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	3b01      	subs	r3, #1
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	441a      	add	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d114      	bne.n	80057e2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01a      	beq.n	80057f6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3310      	adds	r3, #16
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 f921 	bl	8006a0c <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <xQueueGenericReset+0xcc>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e009      	b.n	80057f6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3310      	adds	r3, #16
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fef2 	bl	80055d0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff feed 	bl	80055d0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80057f6:	f002 fb85 	bl	8007f04 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08c      	sub	sp, #48	; 0x30
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xQueueGenericCreate+0x2a>
        __asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61bb      	str	r3, [r7, #24]
    }
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <xQueueGenericCreate+0x48>
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	429a      	cmp	r2, r3
 800584e:	d101      	bne.n	8005854 <xQueueGenericCreate+0x4c>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <xQueueGenericCreate+0x4e>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <xQueueGenericCreate+0x68>
        __asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	617b      	str	r3, [r7, #20]
    }
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005876:	d90a      	bls.n	800588e <xQueueGenericCreate+0x86>
        __asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	613b      	str	r3, [r7, #16]
    }
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	3350      	adds	r3, #80	; 0x50
 8005892:	4618      	mov	r0, r3
 8005894:	f002 fc2a 	bl	80080ec <pvPortMalloc>
 8005898:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3350      	adds	r3, #80	; 0x50
 80058a8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058aa:	79fa      	ldrb	r2, [r7, #7]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f805 	bl	80058c6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80058bc:	6a3b      	ldr	r3, [r7, #32]
    }
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e002      	b.n	80058e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058f4:	2101      	movs	r1, #1
 80058f6:	69b8      	ldr	r0, [r7, #24]
 80058f8:	f7ff ff1e 	bl	8005738 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	; 0x38
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <xQueueGenericSend+0x32>
        __asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d103      	bne.n	800594c <xQueueGenericSend+0x40>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <xQueueGenericSend+0x44>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <xQueueGenericSend+0x46>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <xQueueGenericSend+0x60>
        __asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d103      	bne.n	800597a <xQueueGenericSend+0x6e>
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <xQueueGenericSend+0x72>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueGenericSend+0x74>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericSend+0x8e>
        __asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
    }
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599a:	f001 f9d3 	bl	8006d44 <xTaskGetSchedulerState>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <xQueueGenericSend+0x9e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <xQueueGenericSend+0xa2>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <xQueueGenericSend+0xa4>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <xQueueGenericSend+0xbe>
        __asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	61fb      	str	r3, [r7, #28]
    }
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80059ca:	f002 fa6b 	bl	8007ea4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <xQueueGenericSend+0xd4>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d129      	bne.n	8005a34 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e6:	f000 fac6 	bl	8005f76 <prvCopyDataToQueue>
 80059ea:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	3324      	adds	r3, #36	; 0x24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f807 	bl	8006a0c <xTaskRemoveFromEventList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005a04:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <xQueueGenericSend+0x1f8>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	e00a      	b.n	8005a2c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005a1c:	4b39      	ldr	r3, [pc, #228]	; (8005b04 <xQueueGenericSend+0x1f8>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005a2c:	f002 fa6a 	bl	8007f04 <vPortExitCritical>
                return pdPASS;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e063      	b.n	8005afc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a3a:	f002 fa63 	bl	8007f04 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e05c      	b.n	8005afc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f83f 	bl	8006ad0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a56:	f002 fa55 	bl	8007f04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a5a:	f000 fdb9 	bl	80065d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a5e:	f002 fa21 	bl	8007ea4 <vPortEnterCritical>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d103      	bne.n	8005a78 <xQueueGenericSend+0x16c>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a7e:	b25b      	sxtb	r3, r3
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x182>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8e:	f002 fa39 	bl	8007f04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a92:	1d3a      	adds	r2, r7, #4
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 f82e 	bl	8006afc <xTaskCheckForTimeOut>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d124      	bne.n	8005af0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa8:	f000 fb5d 	bl	8006166 <prvIsQueueFull>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d018      	beq.n	8005ae4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 ff56 	bl	800696c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac2:	f000 fae8 	bl	8006096 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005ac6:	f000 fd91 	bl	80065ec <xTaskResumeAll>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f47f af7c 	bne.w	80059ca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <xQueueGenericSend+0x1f8>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	e772      	b.n	80059ca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ae6:	f000 fad6 	bl	8006096 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005aea:	f000 fd7f 	bl	80065ec <xTaskResumeAll>
 8005aee:	e76c      	b.n	80059ca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af2:	f000 fad0 	bl	8006096 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005af6:	f000 fd79 	bl	80065ec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005afa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3738      	adds	r7, #56	; 0x38
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b090      	sub	sp, #64	; 0x40
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <xQueueGenericSendFromISR+0x3c>
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <xQueueGenericSendFromISR+0x40>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <xQueueGenericSendFromISR+0x42>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSendFromISR+0x6a>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSendFromISR+0x6e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSendFromISR+0x70>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
    }
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b92:	f002 fa6b 	bl	800806c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005b96:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fa      	str	r2, [r7, #28]
 8005bac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005bae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <xQueueGenericSendFromISR+0xbc>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d13e      	bne.n	8005c42 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bda:	f000 f9cc 	bl	8005f76 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005bde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d112      	bne.n	8005c0e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d025      	beq.n	8005c3c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 ff09 	bl	8006a0c <xTaskRemoveFromEventList>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01d      	beq.n	8005c3c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01a      	beq.n	8005c3c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e016      	b.n	8005c3c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005c0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c12:	2b7f      	cmp	r3, #127	; 0x7f
 8005c14:	d10a      	bne.n	8005c2c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
    }
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c30:	3301      	adds	r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	b25a      	sxtb	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005c40:	e001      	b.n	8005c46 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005c50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3740      	adds	r7, #64	; 0x40
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	; 0x30
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <xQueueReceive+0x30>
        __asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	623b      	str	r3, [r7, #32]
    }
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <xQueueReceive+0x3e>
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueReceive+0x42>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueReceive+0x44>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueReceive+0x5e>
        __asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
    }
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cba:	f001 f843 	bl	8006d44 <xTaskGetSchedulerState>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xQueueReceive+0x6e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueReceive+0x72>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueReceive+0x74>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueReceive+0x8e>
        __asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61bb      	str	r3, [r7, #24]
    }
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005cea:	f002 f8db 	bl	8007ea4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01f      	beq.n	8005d3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f000 f9a4 	bl	800604a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00f      	beq.n	8005d32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	3310      	adds	r3, #16
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fe78 	bl	8006a0c <xTaskRemoveFromEventList>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005d22:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <xQueueReceive+0x1bc>)
 8005d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005d32:	f002 f8e7 	bl	8007f04 <vPortExitCritical>
                return pdPASS;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e069      	b.n	8005e0e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005d40:	f002 f8e0 	bl	8007f04 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e062      	b.n	8005e0e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005d4e:	f107 0310 	add.w	r3, r7, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 febc 	bl	8006ad0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005d5c:	f002 f8d2 	bl	8007f04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005d60:	f000 fc36 	bl	80065d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005d64:	f002 f89e 	bl	8007ea4 <vPortEnterCritical>
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d103      	bne.n	8005d7e <xQueueReceive+0x122>
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d103      	bne.n	8005d94 <xQueueReceive+0x138>
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d94:	f002 f8b6 	bl	8007f04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d98:	1d3a      	adds	r2, r7, #4
 8005d9a:	f107 0310 	add.w	r3, r7, #16
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 feab 	bl	8006afc <xTaskCheckForTimeOut>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d123      	bne.n	8005df4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dae:	f000 f9c4 	bl	800613a <prvIsQueueEmpty>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d017      	beq.n	8005de8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fdd3 	bl	800696c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f000 f965 	bl	8006096 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005dcc:	f000 fc0e 	bl	80065ec <xTaskResumeAll>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d189      	bne.n	8005cea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <xQueueReceive+0x1bc>)
 8005dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	e780      	b.n	8005cea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dea:	f000 f954 	bl	8006096 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005dee:	f000 fbfd 	bl	80065ec <xTaskResumeAll>
 8005df2:	e77a      	b.n	8005cea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 f94e 	bl	8006096 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005dfa:	f000 fbf7 	bl	80065ec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e00:	f000 f99b 	bl	800613a <prvIsQueueEmpty>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f43f af6f 	beq.w	8005cea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005e0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3730      	adds	r7, #48	; 0x30
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <xQueueReceiveFromISR+0x3a>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <xQueueReceiveFromISR+0x3e>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <xQueueReceiveFromISR+0x40>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e76:	f002 f8f9 	bl	800806c <vPortValidateInterruptPriority>
        __asm volatile
 8005e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	623a      	str	r2, [r7, #32]
 8005e90:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005e92:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03e      	beq.n	8005f20 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eb0:	f000 f8cb 	bl	800604a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d112      	bne.n	8005eec <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d025      	beq.n	8005f1a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fd9a 	bl	8006a0c <xTaskRemoveFromEventList>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01d      	beq.n	8005f1a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01a      	beq.n	8005f1a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e016      	b.n	8005f1a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005eec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d10a      	bne.n	8005f0a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61bb      	str	r3, [r7, #24]
    }
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	b25a      	sxtb	r2, r3
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1e:	e001      	b.n	8005f24 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
    }
 8005f2e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3740      	adds	r7, #64	; 0x40
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60bb      	str	r3, [r7, #8]
    }
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005f5e:	f001 ffa1 	bl	8007ea4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005f68:	f001 ffcc 	bl	8007f04 <vPortExitCritical>

    return uxReturn;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10d      	bne.n	8005fb0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d14d      	bne.n	8006038 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 feed 	bl	8006d80 <xTaskPriorityDisinherit>
 8005fa6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	e043      	b.n	8006038 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d119      	bne.n	8005fea <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6858      	ldr	r0, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	f002 fab5 	bl	8008530 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	441a      	add	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d32b      	bcc.n	8006038 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]
 8005fe8:	e026      	b.n	8006038 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68d8      	ldr	r0, [r3, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	f002 fa9b 	bl	8008530 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	425b      	negs	r3, r3
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d207      	bcs.n	8006026 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	425b      	negs	r3, r3
 8006020:	441a      	add	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d105      	bne.n	8006038 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3b01      	subs	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006040:	697b      	ldr	r3, [r7, #20]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	441a      	add	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	d303      	bcc.n	800607e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68d9      	ldr	r1, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	461a      	mov	r2, r3
 8006088:	6838      	ldr	r0, [r7, #0]
 800608a:	f002 fa51 	bl	8008530 <memcpy>
    }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800609e:	f001 ff01 	bl	8007ea4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80060aa:	e011      	b.n	80060d0 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fca7 	bl	8006a0c <xTaskRemoveFromEventList>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80060c4:	f000 fd80 	bl	8006bc8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80060d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dce9      	bgt.n	80060ac <prvUnlockQueue+0x16>
 80060d8:	e000      	b.n	80060dc <prvUnlockQueue+0x46>
                        break;
 80060da:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80060e4:	f001 ff0e 	bl	8007f04 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80060e8:	f001 fedc 	bl	8007ea4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80060f4:	e011      	b.n	800611a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3310      	adds	r3, #16
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc82 	bl	8006a0c <xTaskRemoveFromEventList>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800610e:	f000 fd5b 	bl	8006bc8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	3b01      	subs	r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800611a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800611e:	2b00      	cmp	r3, #0
 8006120:	dce9      	bgt.n	80060f6 <prvUnlockQueue+0x60>
 8006122:	e000      	b.n	8006126 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006124:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800612e:	f001 fee9 	bl	8007f04 <vPortExitCritical>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006142:	f001 feaf 	bl	8007ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800614e:	2301      	movs	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e001      	b.n	8006158 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006158:	f001 fed4 	bl	8007f04 <vPortExitCritical>

    return xReturn;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800616e:	f001 fe99 	bl	8007ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	429a      	cmp	r2, r3
 800617c:	d102      	bne.n	8006184 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800617e:	2301      	movs	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e001      	b.n	8006188 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006188:	f001 febc 	bl	8007f04 <vPortExitCritical>

    return xReturn;
 800618c:	68fb      	ldr	r3, [r7, #12]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60fb      	str	r3, [r7, #12]
    }
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d102      	bne.n	80061d0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80061ca:	2301      	movs	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e001      	b.n	80061d4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80061d4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80061d6:	4618      	mov	r0, r3
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e014      	b.n	800621e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061f4:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <vQueueAddToRegistry+0x50>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006200:	490c      	ldr	r1, [pc, #48]	; (8006234 <vQueueAddToRegistry+0x50>)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <vQueueAddToRegistry+0x50>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006216:	e006      	b.n	8006226 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b07      	cmp	r3, #7
 8006222:	d9e7      	bls.n	80061f4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000178 	.word	0x20000178

08006238 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006248:	f001 fe2c 	bl	8007ea4 <vPortEnterCritical>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006252:	b25b      	sxtb	r3, r3
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d103      	bne.n	8006262 <vQueueWaitForMessageRestricted+0x2a>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006268:	b25b      	sxtb	r3, r3
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d103      	bne.n	8006278 <vQueueWaitForMessageRestricted+0x40>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006278:	f001 fe44 	bl	8007f04 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fb91 	bl	80069b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006292:	6978      	ldr	r0, [r7, #20]
 8006294:	f7ff feff 	bl	8006096 <prvUnlockQueue>
    }
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	af04      	add	r7, sp, #16
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 ff19 	bl	80080ec <pvPortMalloc>
 80062ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062c2:	205c      	movs	r0, #92	; 0x5c
 80062c4:	f001 ff12 	bl	80080ec <pvPortMalloc>
 80062c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
 80062d6:	e005      	b.n	80062e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80062d8:	6978      	ldr	r0, [r7, #20]
 80062da:	f001 ffe7 	bl	80082ac <vPortFree>
 80062de:	e001      	b.n	80062e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	9302      	str	r3, [sp, #8]
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f80e 	bl	8006322 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006306:	69f8      	ldr	r0, [r7, #28]
 8006308:	f000 f8a2 	bl	8006450 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800630c:	2301      	movs	r3, #1
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	e002      	b.n	8006318 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295
 8006316:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006318:	69bb      	ldr	r3, [r7, #24]
    }
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b088      	sub	sp, #32
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	461a      	mov	r2, r3
 800633a:	21a5      	movs	r1, #165	; 0xa5
 800633c:	f002 f906 	bl	800854c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800634a:	3b01      	subs	r3, #1
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f023 0307 	bic.w	r3, r3, #7
 8006358:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <prvInitialiseNewTask+0x58>
        __asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	617b      	str	r3, [r7, #20]
    }
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01f      	beq.n	80063c0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006380:	2300      	movs	r3, #0
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e012      	b.n	80063ac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	7819      	ldrb	r1, [r3, #0]
 800638e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	3334      	adds	r3, #52	; 0x34
 8006396:	460a      	mov	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	d9e9      	bls.n	8006386 <prvInitialiseNewTask+0x64>
 80063b2:	e000      	b.n	80063b6 <prvInitialiseNewTask+0x94>
            {
                break;
 80063b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063be:	e003      	b.n	80063c8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d901      	bls.n	80063d2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063ce:	2304      	movs	r3, #4
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063dc:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2200      	movs	r2, #0
 80063e2:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	3304      	adds	r3, #4
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff f911 	bl	8005610 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	3318      	adds	r3, #24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff f90c 	bl	8005610 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	f1c3 0205 	rsb	r2, r3, #5
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	3354      	adds	r3, #84	; 0x54
 8006412:	2204      	movs	r2, #4
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f002 f898 	bl	800854c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	3358      	adds	r3, #88	; 0x58
 8006420:	2201      	movs	r2, #1
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f002 f891 	bl	800854c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	69b8      	ldr	r0, [r7, #24]
 8006430:	f001 fb8a 	bl	8007b48 <pxPortInitialiseStack>
 8006434:	4602      	mov	r2, r0
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006446:	bf00      	nop
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006458:	f001 fd24 	bl	8007ea4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800645c:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <prvAddNewTaskToReadyList+0xc0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <prvAddNewTaskToReadyList+0xc0>)
 8006464:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006466:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800646e:	4a29      	ldr	r2, [pc, #164]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006474:	4b26      	ldr	r3, [pc, #152]	; (8006510 <prvAddNewTaskToReadyList+0xc0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d110      	bne.n	800649e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800647c:	f000 fbc8 	bl	8006c10 <prvInitialiseTaskLists>
 8006480:	e00d      	b.n	800649e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006482:	4b25      	ldr	r3, [pc, #148]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800648a:	4b22      	ldr	r3, [pc, #136]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	429a      	cmp	r2, r3
 8006496:	d802      	bhi.n	800649e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006498:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800649e:	4b1f      	ldr	r3, [pc, #124]	; (800651c <prvAddNewTaskToReadyList+0xcc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <prvAddNewTaskToReadyList+0xcc>)
 80064a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064a8:	4b1c      	ldr	r3, [pc, #112]	; (800651c <prvAddNewTaskToReadyList+0xcc>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <prvAddNewTaskToReadyList+0xd0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <prvAddNewTaskToReadyList+0xd0>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a15      	ldr	r2, [pc, #84]	; (8006524 <prvAddNewTaskToReadyList+0xd4>)
 80064d0:	441a      	add	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7ff f8a6 	bl	800562a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80064de:	f001 fd11 	bl	8007f04 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d207      	bcs.n	8006508 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvAddNewTaskToReadyList+0xd8>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000290 	.word	0x20000290
 8006514:	200001b8 	.word	0x200001b8
 8006518:	2000029c 	.word	0x2000029c
 800651c:	200002ac 	.word	0x200002ac
 8006520:	20000298 	.word	0x20000298
 8006524:	200001bc 	.word	0x200001bc
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <vTaskStartScheduler+0x88>)
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	2300      	movs	r3, #0
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	2300      	movs	r3, #0
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	491e      	ldr	r1, [pc, #120]	; (80065b8 <vTaskStartScheduler+0x8c>)
 8006540:	481e      	ldr	r0, [pc, #120]	; (80065bc <vTaskStartScheduler+0x90>)
 8006542:	f7ff fead 	bl	80062a0 <xTaskCreate>
 8006546:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d102      	bne.n	8006554 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800654e:	f000 ff6d 	bl	800742c <xTimerCreateTimerTask>
 8006552:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d116      	bne.n	8006588 <vTaskStartScheduler+0x5c>
        __asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60bb      	str	r3, [r7, #8]
    }
 800656c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <vTaskStartScheduler+0x94>)
 8006570:	f04f 32ff 	mov.w	r2, #4294967295
 8006574:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <vTaskStartScheduler+0x98>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <vTaskStartScheduler+0x9c>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006582:	f001 fb6f 	bl	8007c64 <xPortStartScheduler>
 8006586:	e00e      	b.n	80065a6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d10a      	bne.n	80065a6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	607b      	str	r3, [r7, #4]
    }
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <vTaskStartScheduler+0xa0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200002b4 	.word	0x200002b4
 80065b8:	08008748 	.word	0x08008748
 80065bc:	08006be1 	.word	0x08006be1
 80065c0:	200002b0 	.word	0x200002b0
 80065c4:	2000029c 	.word	0x2000029c
 80065c8:	20000294 	.word	0x20000294
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <vTaskSuspendAll+0x18>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	4a03      	ldr	r2, [pc, #12]	; (80065e8 <vTaskSuspendAll+0x18>)
 80065dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80065de:	bf00      	nop
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	200002b8 	.word	0x200002b8

080065ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80065fa:	4b41      	ldr	r3, [pc, #260]	; (8006700 <xTaskResumeAll+0x114>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <xTaskResumeAll+0x2c>
        __asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	603b      	str	r3, [r7, #0]
    }
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006618:	f001 fc44 	bl	8007ea4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <xTaskResumeAll+0x114>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3b01      	subs	r3, #1
 8006622:	4a37      	ldr	r2, [pc, #220]	; (8006700 <xTaskResumeAll+0x114>)
 8006624:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006626:	4b36      	ldr	r3, [pc, #216]	; (8006700 <xTaskResumeAll+0x114>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d161      	bne.n	80066f2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800662e:	4b35      	ldr	r3, [pc, #212]	; (8006704 <xTaskResumeAll+0x118>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d05d      	beq.n	80066f2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006636:	e02e      	b.n	8006696 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006638:	4b33      	ldr	r3, [pc, #204]	; (8006708 <xTaskResumeAll+0x11c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3318      	adds	r3, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff f84d 	bl	80056e4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff f848 	bl	80056e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	4b2b      	ldr	r3, [pc, #172]	; (800670c <xTaskResumeAll+0x120>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4313      	orrs	r3, r2
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <xTaskResumeAll+0x120>)
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4a27      	ldr	r2, [pc, #156]	; (8006710 <xTaskResumeAll+0x124>)
 8006674:	441a      	add	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3304      	adds	r3, #4
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f7fe ffd4 	bl	800562a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006686:	4b23      	ldr	r3, [pc, #140]	; (8006714 <xTaskResumeAll+0x128>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	429a      	cmp	r2, r3
 800668e:	d302      	bcc.n	8006696 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006690:	4b21      	ldr	r3, [pc, #132]	; (8006718 <xTaskResumeAll+0x12c>)
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006696:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <xTaskResumeAll+0x11c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1cc      	bne.n	8006638 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80066a4:	f000 fb32 	bl	8006d0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <xTaskResumeAll+0x130>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80066b4:	f000 f846 	bl	8006744 <xTaskIncrementTick>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80066be:	4b16      	ldr	r3, [pc, #88]	; (8006718 <xTaskResumeAll+0x12c>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1f1      	bne.n	80066b4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <xTaskResumeAll+0x130>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <xTaskResumeAll+0x12c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <xTaskResumeAll+0x134>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80066f2:	f001 fc07 	bl	8007f04 <vPortExitCritical>

    return xAlreadyYielded;
 80066f6:	68bb      	ldr	r3, [r7, #8]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200002b8 	.word	0x200002b8
 8006704:	20000290 	.word	0x20000290
 8006708:	20000250 	.word	0x20000250
 800670c:	20000298 	.word	0x20000298
 8006710:	200001bc 	.word	0x200001bc
 8006714:	200001b8 	.word	0x200001b8
 8006718:	200002a4 	.word	0x200002a4
 800671c:	200002a0 	.word	0x200002a0
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <xTaskGetTickCount+0x1c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006730:	687b      	ldr	r3, [r7, #4]
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000294 	.word	0x20000294

08006744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674e:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <xTaskIncrementTick+0x144>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 808e 	bne.w	8006874 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006758:	4b4c      	ldr	r3, [pc, #304]	; (800688c <xTaskIncrementTick+0x148>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006760:	4a4a      	ldr	r2, [pc, #296]	; (800688c <xTaskIncrementTick+0x148>)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d120      	bne.n	80067ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800676c:	4b48      	ldr	r3, [pc, #288]	; (8006890 <xTaskIncrementTick+0x14c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <xTaskIncrementTick+0x48>
        __asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	603b      	str	r3, [r7, #0]
    }
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xTaskIncrementTick+0x46>
 800678c:	4b40      	ldr	r3, [pc, #256]	; (8006890 <xTaskIncrementTick+0x14c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	4b40      	ldr	r3, [pc, #256]	; (8006894 <xTaskIncrementTick+0x150>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a3e      	ldr	r2, [pc, #248]	; (8006890 <xTaskIncrementTick+0x14c>)
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4a3e      	ldr	r2, [pc, #248]	; (8006894 <xTaskIncrementTick+0x150>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <xTaskIncrementTick+0x154>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <xTaskIncrementTick+0x154>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	f000 faaf 	bl	8006d0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80067ae:	4b3b      	ldr	r3, [pc, #236]	; (800689c <xTaskIncrementTick+0x158>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d348      	bcc.n	800684a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <xTaskIncrementTick+0x14c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c2:	4b36      	ldr	r3, [pc, #216]	; (800689c <xTaskIncrementTick+0x158>)
 80067c4:	f04f 32ff 	mov.w	r2, #4294967295
 80067c8:	601a      	str	r2, [r3, #0]
                    break;
 80067ca:	e03e      	b.n	800684a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067cc:	4b30      	ldr	r3, [pc, #192]	; (8006890 <xTaskIncrementTick+0x14c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d203      	bcs.n	80067ec <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80067e4:	4a2d      	ldr	r2, [pc, #180]	; (800689c <xTaskIncrementTick+0x158>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ea:	e02e      	b.n	800684a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe ff77 	bl	80056e4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	3318      	adds	r3, #24
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe ff6e 	bl	80056e4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	2201      	movs	r2, #1
 800680e:	409a      	lsls	r2, r3
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <xTaskIncrementTick+0x15c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4313      	orrs	r3, r2
 8006816:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <xTaskIncrementTick+0x15c>)
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <xTaskIncrementTick+0x160>)
 8006828:	441a      	add	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe fefa 	bl	800562a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <xTaskIncrementTick+0x164>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d3b9      	bcc.n	80067b8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006848:	e7b6      	b.n	80067b8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <xTaskIncrementTick+0x164>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4914      	ldr	r1, [pc, #80]	; (80068a4 <xTaskIncrementTick+0x160>)
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d901      	bls.n	8006866 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <xTaskIncrementTick+0x168>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800686e:	2301      	movs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e004      	b.n	800687e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <xTaskIncrementTick+0x16c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <xTaskIncrementTick+0x16c>)
 800687c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800687e:	697b      	ldr	r3, [r7, #20]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200002b8 	.word	0x200002b8
 800688c:	20000294 	.word	0x20000294
 8006890:	20000248 	.word	0x20000248
 8006894:	2000024c 	.word	0x2000024c
 8006898:	200002a8 	.word	0x200002a8
 800689c:	200002b0 	.word	0x200002b0
 80068a0:	20000298 	.word	0x20000298
 80068a4:	200001bc 	.word	0x200001bc
 80068a8:	200001b8 	.word	0x200001b8
 80068ac:	200002a4 	.word	0x200002a4
 80068b0:	200002a0 	.word	0x200002a0

080068b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ba:	4b27      	ldr	r3, [pc, #156]	; (8006958 <vTaskSwitchContext+0xa4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80068c2:	4b26      	ldr	r3, [pc, #152]	; (800695c <vTaskSwitchContext+0xa8>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80068c8:	e03f      	b.n	800694a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <vTaskSwitchContext+0xa8>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <vTaskSwitchContext+0xac>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	f1c3 031f 	rsb	r3, r3, #31
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	491f      	ldr	r1, [pc, #124]	; (8006964 <vTaskSwitchContext+0xb0>)
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <vTaskSwitchContext+0x5c>
        __asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
    }
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vTaskSwitchContext+0x5a>
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <vTaskSwitchContext+0xb0>)
 800691c:	4413      	add	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3308      	adds	r3, #8
 8006932:	429a      	cmp	r2, r3
 8006934:	d104      	bne.n	8006940 <vTaskSwitchContext+0x8c>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	4a08      	ldr	r2, [pc, #32]	; (8006968 <vTaskSwitchContext+0xb4>)
 8006948:	6013      	str	r3, [r2, #0]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	200002b8 	.word	0x200002b8
 800695c:	200002a4 	.word	0x200002a4
 8006960:	20000298 	.word	0x20000298
 8006964:	200001bc 	.word	0x200001bc
 8006968:	200001b8 	.word	0x200001b8

0800696c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
    }
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vTaskPlaceOnEventList+0x44>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3318      	adds	r3, #24
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe fe69 	bl	8005672 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069a0:	2101      	movs	r1, #1
 80069a2:	6838      	ldr	r0, [r7, #0]
 80069a4:	f000 fcdc 	bl	8007360 <prvAddCurrentTaskToDelayedList>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200001b8 	.word	0x200001b8

080069b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	617b      	str	r3, [r7, #20]
    }
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vTaskPlaceOnEventListRestricted+0x54>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3318      	adds	r3, #24
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7fe fe20 	bl	800562a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f000 fcb1 	bl	8007360 <prvAddCurrentTaskToDelayedList>
    }
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200001b8 	.word	0x200001b8

08006a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
    }
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe51 	bl	80056e4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a42:	4b1d      	ldr	r3, [pc, #116]	; (8006ab8 <xTaskRemoveFromEventList+0xac>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11c      	bne.n	8006a84 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fe48 	bl	80056e4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	2201      	movs	r2, #1
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <xTaskRemoveFromEventList+0xb0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <xTaskRemoveFromEventList+0xb0>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <xTaskRemoveFromEventList+0xb4>)
 8006a74:	441a      	add	r2, r3
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fe fdd4 	bl	800562a <vListInsertEnd>
 8006a82:	e005      	b.n	8006a90 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3318      	adds	r3, #24
 8006a88:	4619      	mov	r1, r3
 8006a8a:	480e      	ldr	r0, [pc, #56]	; (8006ac4 <xTaskRemoveFromEventList+0xb8>)
 8006a8c:	f7fe fdcd 	bl	800562a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <xTaskRemoveFromEventList+0xbc>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d905      	bls.n	8006aaa <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <xTaskRemoveFromEventList+0xc0>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e001      	b.n	8006aae <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006aae:	697b      	ldr	r3, [r7, #20]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200002b8 	.word	0x200002b8
 8006abc:	20000298 	.word	0x20000298
 8006ac0:	200001bc 	.word	0x200001bc
 8006ac4:	20000250 	.word	0x20000250
 8006ac8:	200001b8 	.word	0x200001b8
 8006acc:	200002a4 	.word	0x200002a4

08006ad0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <vTaskInternalSetTimeOutState+0x24>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <vTaskInternalSetTimeOutState+0x28>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	605a      	str	r2, [r3, #4]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	200002a8 	.word	0x200002a8
 8006af8:	20000294 	.word	0x20000294

08006afc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	613b      	str	r3, [r7, #16]
    }
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
    }
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006b3e:	f001 f9b1 	bl	8007ea4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006b42:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <xTaskCheckForTimeOut+0xc4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d102      	bne.n	8006b62 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e026      	b.n	8006bb0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <xTaskCheckForTimeOut+0xc8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d00a      	beq.n	8006b84 <xTaskCheckForTimeOut+0x88>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d305      	bcc.n	8006b84 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e015      	b.n	8006bb0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d20b      	bcs.n	8006ba6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff ff98 	bl	8006ad0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e004      	b.n	8006bb0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006bb0:	f001 f9a8 	bl	8007f04 <vPortExitCritical>

    return xReturn;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000294 	.word	0x20000294
 8006bc4:	200002a8 	.word	0x200002a8

08006bc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <vTaskMissedYield+0x14>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	200002a4 	.word	0x200002a4

08006be0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006be8:	f000 f852 	bl	8006c90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <prvIdleTask+0x28>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d9f9      	bls.n	8006be8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <prvIdleTask+0x2c>)
 8006bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006c04:	e7f0      	b.n	8006be8 <prvIdleTask+0x8>
 8006c06:	bf00      	nop
 8006c08:	200001bc 	.word	0x200001bc
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
 8006c1a:	e00c      	b.n	8006c36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4a12      	ldr	r2, [pc, #72]	; (8006c70 <prvInitialiseTaskLists+0x60>)
 8006c28:	4413      	add	r3, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fcd0 	bl	80055d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3301      	adds	r3, #1
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d9ef      	bls.n	8006c1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006c3c:	480d      	ldr	r0, [pc, #52]	; (8006c74 <prvInitialiseTaskLists+0x64>)
 8006c3e:	f7fe fcc7 	bl	80055d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006c42:	480d      	ldr	r0, [pc, #52]	; (8006c78 <prvInitialiseTaskLists+0x68>)
 8006c44:	f7fe fcc4 	bl	80055d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006c48:	480c      	ldr	r0, [pc, #48]	; (8006c7c <prvInitialiseTaskLists+0x6c>)
 8006c4a:	f7fe fcc1 	bl	80055d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006c4e:	480c      	ldr	r0, [pc, #48]	; (8006c80 <prvInitialiseTaskLists+0x70>)
 8006c50:	f7fe fcbe 	bl	80055d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006c54:	480b      	ldr	r0, [pc, #44]	; (8006c84 <prvInitialiseTaskLists+0x74>)
 8006c56:	f7fe fcbb 	bl	80055d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <prvInitialiseTaskLists+0x78>)
 8006c5c:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <prvInitialiseTaskLists+0x64>)
 8006c5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <prvInitialiseTaskLists+0x7c>)
 8006c62:	4a05      	ldr	r2, [pc, #20]	; (8006c78 <prvInitialiseTaskLists+0x68>)
 8006c64:	601a      	str	r2, [r3, #0]
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200001bc 	.word	0x200001bc
 8006c74:	20000220 	.word	0x20000220
 8006c78:	20000234 	.word	0x20000234
 8006c7c:	20000250 	.word	0x20000250
 8006c80:	20000264 	.word	0x20000264
 8006c84:	2000027c 	.word	0x2000027c
 8006c88:	20000248 	.word	0x20000248
 8006c8c:	2000024c 	.word	0x2000024c

08006c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c96:	e019      	b.n	8006ccc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006c98:	f001 f904 	bl	8007ea4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9c:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <prvCheckTasksWaitingTermination+0x50>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe fd1b 	bl	80056e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006cae:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <prvCheckTasksWaitingTermination+0x54>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4a0b      	ldr	r2, [pc, #44]	; (8006ce4 <prvCheckTasksWaitingTermination+0x54>)
 8006cb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <prvCheckTasksWaitingTermination+0x58>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <prvCheckTasksWaitingTermination+0x58>)
 8006cc0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006cc2:	f001 f91f 	bl	8007f04 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f810 	bl	8006cec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <prvCheckTasksWaitingTermination+0x58>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e1      	bne.n	8006c98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000264 	.word	0x20000264
 8006ce4:	20000290 	.word	0x20000290
 8006ce8:	20000278 	.word	0x20000278

08006cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fad7 	bl	80082ac <vPortFree>
                vPortFree( pxTCB );
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fad4 	bl	80082ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvResetNextTaskUnblockTime+0x30>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <prvResetNextTaskUnblockTime+0x34>)
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006d22:	e005      	b.n	8006d30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <prvResetNextTaskUnblockTime+0x30>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <prvResetNextTaskUnblockTime+0x34>)
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000248 	.word	0x20000248
 8006d40:	200002b0 	.word	0x200002b0

08006d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <xTaskGetSchedulerState+0x34>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006d52:	2301      	movs	r3, #1
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	e008      	b.n	8006d6a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <xTaskGetSchedulerState+0x38>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006d60:	2302      	movs	r3, #2
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	e001      	b.n	8006d6a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006d6a:	687b      	ldr	r3, [r7, #4]
    }
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	2000029c 	.word	0x2000029c
 8006d7c:	200002b8 	.word	0x200002b8

08006d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d063      	beq.n	8006e5e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006d96:	4b34      	ldr	r3, [pc, #208]	; (8006e68 <xTaskPriorityDisinherit+0xe8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d00a      	beq.n	8006db6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
    }
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60bb      	str	r3, [r7, #8]
    }
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d039      	beq.n	8006e5e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d135      	bne.n	8006e5e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fc74 	bl	80056e4 <uxListRemove>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	2201      	movs	r2, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	43da      	mvns	r2, r3
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <xTaskPriorityDisinherit+0xec>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4013      	ands	r3, r2
 8006e14:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <xTaskPriorityDisinherit+0xec>)
 8006e16:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	f1c3 0205 	rsb	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	2201      	movs	r2, #1
 8006e32:	409a      	lsls	r2, r3
 8006e34:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <xTaskPriorityDisinherit+0xec>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <xTaskPriorityDisinherit+0xec>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <xTaskPriorityDisinherit+0xf0>)
 8006e4c:	441a      	add	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe fbe8 	bl	800562a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006e5e:	697b      	ldr	r3, [r7, #20]
    }
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200001b8 	.word	0x200001b8
 8006e6c:	20000298 	.word	0x20000298
 8006e70:	200001bc 	.word	0x200001bc

08006e74 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	613b      	str	r3, [r7, #16]
    }
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006e9e:	f001 f801 	bl	8007ea4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006ea2:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3358      	adds	r3, #88	; 0x58
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d024      	beq.n	8006efe <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006eb4:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3314      	adds	r3, #20
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	6859      	ldr	r1, [r3, #4]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	4019      	ands	r1, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006ed2:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	3358      	adds	r3, #88	; 0x58
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	6a38      	ldr	r0, [r7, #32]
 8006eea:	f000 fa39 	bl	8007360 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006eee:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <xTaskGenericNotifyWait+0x104>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006efe:	f001 f801 	bl	8007f04 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006f02:	f000 ffcf 	bl	8007ea4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <xTaskGenericNotifyWait+0xaa>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006f0c:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3314      	adds	r3, #20
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006f1e:	4b15      	ldr	r3, [pc, #84]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	3358      	adds	r3, #88	; 0x58
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d002      	beq.n	8006f36 <xTaskGenericNotifyWait+0xc2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e010      	b.n	8006f58 <xTaskGenericNotifyWait+0xe4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3314      	adds	r3, #20
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	4019      	ands	r1, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <xTaskGenericNotifyWait+0x100>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3358      	adds	r3, #88	; 0x58
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006f66:	f000 ffcd 	bl	8007f04 <vPortExitCritical>

        return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
    }
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200001b8 	.word	0x200001b8
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08c      	sub	sp, #48	; 0x30
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <xTaskGenericNotify+0x2e>
        __asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	623b      	str	r3, [r7, #32]
    }
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	61fb      	str	r3, [r7, #28]
    }
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006fca:	f000 ff6b 	bl	8007ea4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3314      	adds	r3, #20
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	3358      	adds	r3, #88	; 0x58
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3358      	adds	r3, #88	; 0x58
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d841      	bhi.n	8007088 <xTaskGenericNotify+0x10c>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <xTaskGenericNotify+0x90>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	080070a7 	.word	0x080070a7
 8007010:	08007021 	.word	0x08007021
 8007014:	0800703f 	.word	0x0800703f
 8007018:	0800705b 	.word	0x0800705b
 800701c:	0800706b 	.word	0x0800706b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3314      	adds	r3, #20
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	431a      	orrs	r2, r3
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3314      	adds	r3, #20
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	605a      	str	r2, [r3, #4]
                    break;
 800703c:	e036      	b.n	80070ac <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800703e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3314      	adds	r3, #20
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3314      	adds	r3, #20
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	605a      	str	r2, [r3, #4]
                    break;
 8007058:	e028      	b.n	80070ac <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800705a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	3314      	adds	r3, #20
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]
                    break;
 8007068:	e020      	b.n	80070ac <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800706a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706e:	2b02      	cmp	r3, #2
 8007070:	d007      	beq.n	8007082 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	3314      	adds	r3, #20
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007080:	e014      	b.n	80070ac <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8007082:	2300      	movs	r3, #0
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8007086:	e011      	b.n	80070ac <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007088:	4b2b      	ldr	r3, [pc, #172]	; (8007138 <xTaskGenericNotify+0x1bc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <xTaskGenericNotify+0x12e>
        __asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	61bb      	str	r3, [r7, #24]
    }
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskGenericNotify+0x128>
                    break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <xTaskGenericNotify+0x130>

                    break;
 80070aa:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d139      	bne.n	8007128 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fb13 	bl	80056e4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	2201      	movs	r2, #1
 80070c4:	409a      	lsls	r2, r3
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <xTaskGenericNotify+0x1c0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	4a1b      	ldr	r2, [pc, #108]	; (800713c <xTaskGenericNotify+0x1c0>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4a18      	ldr	r2, [pc, #96]	; (8007140 <xTaskGenericNotify+0x1c4>)
 80070de:	441a      	add	r2, r3
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fa9f 	bl	800562a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <xTaskGenericNotify+0x18e>
        __asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	617b      	str	r3, [r7, #20]
    }
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <xTaskGenericNotify+0x1c8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	429a      	cmp	r2, r3
 8007116:	d907      	bls.n	8007128 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <xTaskGenericNotify+0x1cc>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007128:	f000 feec 	bl	8007f04 <vPortExitCritical>

        return xReturn;
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800712e:	4618      	mov	r0, r3
 8007130:	3730      	adds	r7, #48	; 0x30
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000294 	.word	0x20000294
 800713c:	20000298 	.word	0x20000298
 8007140:	200001bc 	.word	0x200001bc
 8007144:	200001b8 	.word	0x200001b8
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800714c:	b580      	push	{r7, lr}
 800714e:	b090      	sub	sp, #64	; 0x40
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800715a:	2301      	movs	r3, #1
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007196:	f000 ff69 	bl	800806c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800719e:	f3ef 8211 	mrs	r2, BASEPRI
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	627a      	str	r2, [r7, #36]	; 0x24
 80071b4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80071ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80071c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3314      	adds	r3, #20
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ce:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80071d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	3358      	adds	r3, #88	; 0x58
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80071de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	3358      	adds	r3, #88	; 0x58
 80071e6:	2202      	movs	r2, #2
 80071e8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d841      	bhi.n	8007274 <xTaskGenericNotifyFromISR+0x128>
 80071f0:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <xTaskGenericNotifyFromISR+0xac>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	08007293 	.word	0x08007293
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	0800722b 	.word	0x0800722b
 8007204:	08007247 	.word	0x08007247
 8007208:	08007257 	.word	0x08007257
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800720c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3314      	adds	r3, #20
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	431a      	orrs	r2, r3
 800721c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3314      	adds	r3, #20
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	605a      	str	r2, [r3, #4]
                    break;
 8007228:	e036      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800722a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	3314      	adds	r3, #20
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3314      	adds	r3, #20
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	605a      	str	r2, [r3, #4]
                    break;
 8007244:	e028      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3314      	adds	r3, #20
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	605a      	str	r2, [r3, #4]
                    break;
 8007254:	e020      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800725a:	2b02      	cmp	r3, #2
 800725c:	d007      	beq.n	800726e <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800725e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	3314      	adds	r3, #20
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800726c:	e014      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8007272:	e011      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007274:	4b33      	ldr	r3, [pc, #204]	; (8007344 <xTaskGenericNotifyFromISR+0x1f8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	61fb      	str	r3, [r7, #28]
    }
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8007296:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800729c:	2b01      	cmp	r3, #1
 800729e:	d145      	bne.n	800732c <xTaskGenericNotifyFromISR+0x1e0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <xTaskGenericNotifyFromISR+0x172>
        __asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	61bb      	str	r3, [r7, #24]
    }
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xTaskGenericNotifyFromISR+0x170>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072be:	4b22      	ldr	r3, [pc, #136]	; (8007348 <xTaskGenericNotifyFromISR+0x1fc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11c      	bne.n	8007300 <xTaskGenericNotifyFromISR+0x1b4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	3304      	adds	r3, #4
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fa0a 	bl	80056e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	2201      	movs	r2, #1
 80072d6:	409a      	lsls	r2, r3
 80072d8:	4b1c      	ldr	r3, [pc, #112]	; (800734c <xTaskGenericNotifyFromISR+0x200>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4313      	orrs	r3, r2
 80072de:	4a1b      	ldr	r2, [pc, #108]	; (800734c <xTaskGenericNotifyFromISR+0x200>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a18      	ldr	r2, [pc, #96]	; (8007350 <xTaskGenericNotifyFromISR+0x204>)
 80072f0:	441a      	add	r2, r3
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	3304      	adds	r3, #4
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7fe f996 	bl	800562a <vListInsertEnd>
 80072fe:	e005      	b.n	800730c <xTaskGenericNotifyFromISR+0x1c0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	3318      	adds	r3, #24
 8007304:	4619      	mov	r1, r3
 8007306:	4813      	ldr	r0, [pc, #76]	; (8007354 <xTaskGenericNotifyFromISR+0x208>)
 8007308:	f7fe f98f 	bl	800562a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4b11      	ldr	r3, [pc, #68]	; (8007358 <xTaskGenericNotifyFromISR+0x20c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	429a      	cmp	r2, r3
 8007318:	d908      	bls.n	800732c <xTaskGenericNotifyFromISR+0x1e0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <xTaskGenericNotifyFromISR+0x1da>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007326:	4b0d      	ldr	r3, [pc, #52]	; (800735c <xTaskGenericNotifyFromISR+0x210>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f383 8811 	msr	BASEPRI, r3
    }
 8007336:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800733a:	4618      	mov	r0, r3
 800733c:	3740      	adds	r7, #64	; 0x40
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000294 	.word	0x20000294
 8007348:	200002b8 	.word	0x200002b8
 800734c:	20000298 	.word	0x20000298
 8007350:	200001bc 	.word	0x200001bc
 8007354:	20000250 	.word	0x20000250
 8007358:	200001b8 	.word	0x200001b8
 800735c:	200002a4 	.word	0x200002a4

08007360 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800736a:	4b29      	ldr	r3, [pc, #164]	; (8007410 <prvAddCurrentTaskToDelayedList+0xb0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3304      	adds	r3, #4
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe f9b4 	bl	80056e4 <uxListRemove>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	2201      	movs	r2, #1
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43da      	mvns	r2, r3
 8007390:	4b21      	ldr	r3, [pc, #132]	; (8007418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4013      	ands	r3, r2
 8007396:	4a20      	ldr	r2, [pc, #128]	; (8007418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007398:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d10a      	bne.n	80073b8 <prvAddCurrentTaskToDelayedList+0x58>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a8:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	481a      	ldr	r0, [pc, #104]	; (800741c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073b2:	f7fe f93a 	bl	800562a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80073b6:	e026      	b.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d209      	bcs.n	80073e4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe f948 	bl	8005672 <vListInsert>
}
 80073e2:	e010      	b.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe f93e 	bl	8005672 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d202      	bcs.n	8007406 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007400:	4a09      	ldr	r2, [pc, #36]	; (8007428 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6013      	str	r3, [r2, #0]
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000294 	.word	0x20000294
 8007414:	200001b8 	.word	0x200001b8
 8007418:	20000298 	.word	0x20000298
 800741c:	2000027c 	.word	0x2000027c
 8007420:	2000024c 	.word	0x2000024c
 8007424:	20000248 	.word	0x20000248
 8007428:	200002b0 	.word	0x200002b0

0800742c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007436:	f000 fb31 	bl	8007a9c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <xTimerCreateTimerTask+0x54>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <xTimerCreateTimerTask+0x58>)
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	2302      	movs	r3, #2
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007450:	490d      	ldr	r1, [pc, #52]	; (8007488 <xTimerCreateTimerTask+0x5c>)
 8007452:	480e      	ldr	r0, [pc, #56]	; (800748c <xTimerCreateTimerTask+0x60>)
 8007454:	f7fe ff24 	bl	80062a0 <xTaskCreate>
 8007458:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	603b      	str	r3, [r7, #0]
    }
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007476:	687b      	ldr	r3, [r7, #4]
    }
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200002ec 	.word	0x200002ec
 8007484:	200002f0 	.word	0x200002f0
 8007488:	08008750 	.word	0x08008750
 800748c:	0800767d 	.word	0x0800767d

08007490 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800749e:	202c      	movs	r0, #44	; 0x2c
 80074a0:	f000 fe24 	bl	80080ec <pvPortMalloc>
 80074a4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00d      	beq.n	80074c8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f805 	bl	80074d2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80074c8:	697b      	ldr	r3, [r7, #20]
        }
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	617b      	str	r3, [r7, #20]
    }
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d01e      	beq.n	8007540 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8007502:	f000 facb 	bl	8007a9c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	6a3a      	ldr	r2, [r7, #32]
 800751c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	3304      	adds	r3, #4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f874 	bl	8005610 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007534:	f043 0304 	orr.w	r3, r3, #4
 8007538:	b2da      	uxtb	r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8007540:	bf00      	nop
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	; 0x28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	623b      	str	r3, [r7, #32]
    }
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007576:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <xTimerGenericCommand+0x98>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d02a      	beq.n	80075d4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b05      	cmp	r3, #5
 800758e:	dc18      	bgt.n	80075c2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007590:	f7ff fbd8 	bl	8006d44 <xTaskGetSchedulerState>
 8007594:	4603      	mov	r3, r0
 8007596:	2b02      	cmp	r3, #2
 8007598:	d109      	bne.n	80075ae <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <xTimerGenericCommand+0x98>)
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f107 0114 	add.w	r1, r7, #20
 80075a2:	2300      	movs	r3, #0
 80075a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a6:	f7fe f9b1 	bl	800590c <xQueueGenericSend>
 80075aa:	6278      	str	r0, [r7, #36]	; 0x24
 80075ac:	e012      	b.n	80075d4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <xTimerGenericCommand+0x98>)
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f107 0114 	add.w	r1, r7, #20
 80075b6:	2300      	movs	r3, #0
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7fe f9a7 	bl	800590c <xQueueGenericSend>
 80075be:	6278      	str	r0, [r7, #36]	; 0x24
 80075c0:	e008      	b.n	80075d4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075c2:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <xTimerGenericCommand+0x98>)
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	f107 0114 	add.w	r1, r7, #20
 80075ca:	2300      	movs	r3, #0
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	f7fe fa9b 	bl	8005b08 <xQueueGenericSendFromISR>
 80075d2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80075d6:	4618      	mov	r0, r3
 80075d8:	3728      	adds	r7, #40	; 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200002ec 	.word	0x200002ec

080075e4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ee:	4b22      	ldr	r3, [pc, #136]	; (8007678 <prvProcessExpiredTimer+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe f871 	bl	80056e4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d022      	beq.n	8007656 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	18d1      	adds	r1, r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	6978      	ldr	r0, [r7, #20]
 800761e:	f000 f8d1 	bl	80077c4 <prvInsertTimerInActiveList>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01f      	beq.n	8007668 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007628:	2300      	movs	r3, #0
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	2100      	movs	r1, #0
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f7ff ff88 	bl	8007548 <xTimerGenericCommand>
 8007638:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d113      	bne.n	8007668 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
    }
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	4798      	blx	r3
    }
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	200002e4 	.word	0x200002e4

0800767c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f857 	bl	800773c <prvGetNextExpireTime>
 800768e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4619      	mov	r1, r3
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f803 	bl	80076a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800769a:	f000 f8d5 	bl	8007848 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800769e:	e7f1      	b.n	8007684 <prvTimerTask+0x8>

080076a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80076aa:	f7fe ff91 	bl	80065d0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f866 	bl	8007784 <prvSampleTimeNow>
 80076b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d130      	bne.n	8007722 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <prvProcessTimerOrBlockTask+0x3c>
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d806      	bhi.n	80076dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80076ce:	f7fe ff8d 	bl	80065ec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff85 	bl	80075e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80076da:	e024      	b.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <prvProcessTimerOrBlockTask+0x90>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <prvProcessTimerOrBlockTask+0x50>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <prvProcessTimerOrBlockTask+0x52>
 80076f0:	2300      	movs	r3, #0
 80076f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <prvProcessTimerOrBlockTask+0x94>)
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	f7fe fd99 	bl	8006238 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007706:	f7fe ff71 	bl	80065ec <xTaskResumeAll>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <prvProcessTimerOrBlockTask+0x98>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
    }
 8007720:	e001      	b.n	8007726 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007722:	f7fe ff63 	bl	80065ec <xTaskResumeAll>
    }
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200002e8 	.word	0x200002e8
 8007734:	200002ec 	.word	0x200002ec
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <prvGetNextExpireTime+0x44>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <prvGetNextExpireTime+0x16>
 800774e:	2201      	movs	r2, #1
 8007750:	e000      	b.n	8007754 <prvGetNextExpireTime+0x18>
 8007752:	2200      	movs	r2, #0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <prvGetNextExpireTime+0x44>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e001      	b.n	8007770 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007770:	68fb      	ldr	r3, [r7, #12]
    }
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	200002e4 	.word	0x200002e4

08007784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800778c:	f7fe ffca 	bl	8006724 <xTaskGetTickCount>
 8007790:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <prvSampleTimeNow+0x3c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	429a      	cmp	r2, r3
 800779a:	d205      	bcs.n	80077a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800779c:	f000 f91a 	bl	80079d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e002      	b.n	80077ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80077ae:	4a04      	ldr	r2, [pc, #16]	; (80077c0 <prvSampleTimeNow+0x3c>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80077b4:	68fb      	ldr	r3, [r7, #12]
    }
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200002f4 	.word	0x200002f4

080077c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d812      	bhi.n	8007810 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80077f8:	2301      	movs	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e01b      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <prvInsertTimerInActiveList+0x7c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7fd ff32 	bl	8005672 <vListInsert>
 800780e:	e012      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d206      	bcs.n	8007826 <prvInsertTimerInActiveList+0x62>
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d302      	bcc.n	8007826 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e007      	b.n	8007836 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007826:	4b07      	ldr	r3, [pc, #28]	; (8007844 <prvInsertTimerInActiveList+0x80>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3304      	adds	r3, #4
 800782e:	4619      	mov	r1, r3
 8007830:	4610      	mov	r0, r2
 8007832:	f7fd ff1e 	bl	8005672 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007836:	697b      	ldr	r3, [r7, #20]
    }
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	200002e8 	.word	0x200002e8
 8007844:	200002e4 	.word	0x200002e4

08007848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	; 0x30
 800784c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800784e:	e0ae      	b.n	80079ae <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f2c0 80aa 	blt.w	80079ac <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	3304      	adds	r3, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f7fd ff3b 	bl	80056e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff87 	bl	8007784 <prvSampleTimeNow>
 8007876:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b09      	cmp	r3, #9
 800787c:	f200 8097 	bhi.w	80079ae <prvProcessReceivedCommands+0x166>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <prvProcessReceivedCommands+0x40>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b1 	.word	0x080078b1
 8007894:	08007925 	.word	0x08007925
 8007898:	08007939 	.word	0x08007939
 800789c:	08007983 	.word	0x08007983
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b1 	.word	0x080078b1
 80078a8:	08007925 	.word	0x08007925
 80078ac:	08007939 	.word	0x08007939
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	18d1      	adds	r1, r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d0:	f7ff ff78 	bl	80077c4 <prvInsertTimerInActiveList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d069      	beq.n	80079ae <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d05e      	beq.n	80079ae <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	441a      	add	r2, r3
 80078f8:	2300      	movs	r3, #0
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007902:	f7ff fe21 	bl	8007548 <xTimerGenericCommand>
 8007906:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d14f      	bne.n	80079ae <prvProcessReceivedCommands+0x166>
        __asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	61bb      	str	r3, [r7, #24]
    }
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007936:	e03a      	b.n	80079ae <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	617b      	str	r3, [r7, #20]
    }
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	18d1      	adds	r1, r2, r3
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800797c:	f7ff ff22 	bl	80077c4 <prvInsertTimerInActiveList>
                        break;
 8007980:	e015      	b.n	80079ae <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007992:	f000 fc8b 	bl	80082ac <vPortFree>
 8007996:	e00a      	b.n	80079ae <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80079aa:	e000      	b.n	80079ae <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80079ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <prvProcessReceivedCommands+0x188>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f107 0108 	add.w	r1, r7, #8
 80079b6:	2200      	movs	r2, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe f94f 	bl	8005c5c <xQueueReceive>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f af45 	bne.w	8007850 <prvProcessReceivedCommands+0x8>
        }
    }
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	3728      	adds	r7, #40	; 0x28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200002ec 	.word	0x200002ec

080079d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079da:	e048      	b.n	8007a6e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e6:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fe75 	bl	80056e4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d02e      	beq.n	8007a6e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d90e      	bls.n	8007a40 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a2e:	4b19      	ldr	r3, [pc, #100]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fd fe1a 	bl	8005672 <vListInsert>
 8007a3e:	e016      	b.n	8007a6e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a40:	2300      	movs	r3, #0
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f7ff fd7c 	bl	8007548 <xTimerGenericCommand>
 8007a50:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	603b      	str	r3, [r7, #0]
    }
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1b1      	bne.n	80079dc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <prvSwitchTimerLists+0xc4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a84:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <prvSwitchTimerLists+0xc4>)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	6013      	str	r3, [r2, #0]
    }
 8007a8c:	bf00      	nop
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200002e4 	.word	0x200002e4
 8007a98:	200002e8 	.word	0x200002e8

08007a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007aa0:	f000 fa00 	bl	8007ea4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <prvCheckForValidListAndQueue+0x54>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d11d      	bne.n	8007ae8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007aac:	4811      	ldr	r0, [pc, #68]	; (8007af4 <prvCheckForValidListAndQueue+0x58>)
 8007aae:	f7fd fd8f 	bl	80055d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007ab2:	4811      	ldr	r0, [pc, #68]	; (8007af8 <prvCheckForValidListAndQueue+0x5c>)
 8007ab4:	f7fd fd8c 	bl	80055d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007ab8:	4b10      	ldr	r3, [pc, #64]	; (8007afc <prvCheckForValidListAndQueue+0x60>)
 8007aba:	4a0e      	ldr	r2, [pc, #56]	; (8007af4 <prvCheckForValidListAndQueue+0x58>)
 8007abc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007abe:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <prvCheckForValidListAndQueue+0x64>)
 8007ac0:	4a0d      	ldr	r2, [pc, #52]	; (8007af8 <prvCheckForValidListAndQueue+0x5c>)
 8007ac2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	210c      	movs	r1, #12
 8007ac8:	200a      	movs	r0, #10
 8007aca:	f7fd fe9d 	bl	8005808 <xQueueGenericCreate>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4a07      	ldr	r2, [pc, #28]	; (8007af0 <prvCheckForValidListAndQueue+0x54>)
 8007ad2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <prvCheckForValidListAndQueue+0x54>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <prvCheckForValidListAndQueue+0x54>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4908      	ldr	r1, [pc, #32]	; (8007b04 <prvCheckForValidListAndQueue+0x68>)
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fb7e 	bl	80061e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007ae8:	f000 fa0c 	bl	8007f04 <vPortExitCritical>
    }
 8007aec:	bf00      	nop
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200002ec 	.word	0x200002ec
 8007af4:	200002bc 	.word	0x200002bc
 8007af8:	200002d0 	.word	0x200002d0
 8007afc:	200002e4 	.word	0x200002e4
 8007b00:	200002e8 	.word	0x200002e8
 8007b04:	08008758 	.word	0x08008758

08007b08 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <pvTimerGetTimerID+0x28>
        __asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	60fb      	str	r3, [r7, #12]
    }
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007b30:	f000 f9b8 	bl	8007ea4 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007b3a:	f000 f9e3 	bl	8007f04 <vPortExitCritical>

        return pvReturn;
 8007b3e:	693b      	ldr	r3, [r7, #16]
    }
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3b04      	subs	r3, #4
 8007b58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3b04      	subs	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f023 0201 	bic.w	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b04      	subs	r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007b78:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <pxPortInitialiseStack+0x64>)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b14      	subs	r3, #20
 8007b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f06f 0202 	mvn.w	r2, #2
 8007b96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3b20      	subs	r3, #32
 8007b9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	08007bb1 	.word	0x08007bb1

08007bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <prvTaskExitError+0x54>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d00a      	beq.n	8007bda <prvTaskExitError+0x2a>
        __asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	60fb      	str	r3, [r7, #12]
    }
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <prvTaskExitError+0x28>
        __asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	60bb      	str	r3, [r7, #8]
    }
 8007bec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007bee:	bf00      	nop
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0fc      	beq.n	8007bf0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000020 	.word	0x20000020
	...

08007c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <pxCurrentTCBConst2>)
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	6808      	ldr	r0, [r1, #0]
 8007c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	f380 8809 	msr	PSP, r0
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst2>:
 8007c30:	200001b8 	.word	0x200001b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <prvPortStartFirstTask+0x24>)
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	6800      	ldr	r0, [r0, #0]
 8007c3e:	f380 8808 	msr	MSP, r0
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8814 	msr	CONTROL, r0
 8007c4a:	b662      	cpsie	i
 8007c4c:	b661      	cpsie	f
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	df00      	svc	0
 8007c58:	bf00      	nop
 8007c5a:	0000      	.short	0x0000
 8007c5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop

08007c64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c6a:	4b46      	ldr	r3, [pc, #280]	; (8007d84 <xPortStartScheduler+0x120>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a46      	ldr	r2, [pc, #280]	; (8007d88 <xPortStartScheduler+0x124>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10a      	bne.n	8007c8a <xPortStartScheduler+0x26>
        __asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	613b      	str	r3, [r7, #16]
    }
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c8a:	4b3e      	ldr	r3, [pc, #248]	; (8007d84 <xPortStartScheduler+0x120>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a3f      	ldr	r2, [pc, #252]	; (8007d8c <xPortStartScheduler+0x128>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d10a      	bne.n	8007caa <xPortStartScheduler+0x46>
        __asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
    }
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007caa:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <xPortStartScheduler+0x12c>)
 8007cac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <xPortStartScheduler+0x130>)
 8007cd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cd2:	4b31      	ldr	r3, [pc, #196]	; (8007d98 <xPortStartScheduler+0x134>)
 8007cd4:	2207      	movs	r2, #7
 8007cd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd8:	e009      	b.n	8007cee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007cda:	4b2f      	ldr	r3, [pc, #188]	; (8007d98 <xPortStartScheduler+0x134>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	; (8007d98 <xPortStartScheduler+0x134>)
 8007ce2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	d0ef      	beq.n	8007cda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cfa:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <xPortStartScheduler+0x134>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1c3 0307 	rsb	r3, r3, #7
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d00a      	beq.n	8007d1c <xPortStartScheduler+0xb8>
        __asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
    }
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <xPortStartScheduler+0x134>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	4a1d      	ldr	r2, [pc, #116]	; (8007d98 <xPortStartScheduler+0x134>)
 8007d24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d26:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <xPortStartScheduler+0x134>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2e:	4a1a      	ldr	r2, [pc, #104]	; (8007d98 <xPortStartScheduler+0x134>)
 8007d30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007d3a:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <xPortStartScheduler+0x138>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <xPortStartScheduler+0x138>)
 8007d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <xPortStartScheduler+0x138>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a14      	ldr	r2, [pc, #80]	; (8007d9c <xPortStartScheduler+0x138>)
 8007d4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007d52:	f000 f95b 	bl	800800c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007d56:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <xPortStartScheduler+0x13c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007d5c:	f000 f97a 	bl	8008054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d60:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <xPortStartScheduler+0x140>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <xPortStartScheduler+0x140>)
 8007d66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007d6c:	f7ff ff64 	bl	8007c38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007d70:	f7fe fda0 	bl	80068b4 <vTaskSwitchContext>
    prvTaskExitError();
 8007d74:	f7ff ff1c 	bl	8007bb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	e000ed00 	.word	0xe000ed00
 8007d88:	410fc271 	.word	0x410fc271
 8007d8c:	410fc270 	.word	0x410fc270
 8007d90:	e000e400 	.word	0xe000e400
 8007d94:	200002f8 	.word	0x200002f8
 8007d98:	200002fc 	.word	0x200002fc
 8007d9c:	e000ed20 	.word	0xe000ed20
 8007da0:	20000020 	.word	0x20000020
 8007da4:	e000ef34 	.word	0xe000ef34

08007da8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dae:	4b37      	ldr	r3, [pc, #220]	; (8007e8c <vInitPrioGroupValue+0xe4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a37      	ldr	r2, [pc, #220]	; (8007e90 <vInitPrioGroupValue+0xe8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d10a      	bne.n	8007dce <vInitPrioGroupValue+0x26>
        __asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	613b      	str	r3, [r7, #16]
    }
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007dce:	4b2f      	ldr	r3, [pc, #188]	; (8007e8c <vInitPrioGroupValue+0xe4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a30      	ldr	r2, [pc, #192]	; (8007e94 <vInitPrioGroupValue+0xec>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d10a      	bne.n	8007dee <vInitPrioGroupValue+0x46>
        __asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
    }
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dee:	4b2a      	ldr	r3, [pc, #168]	; (8007e98 <vInitPrioGroupValue+0xf0>)
 8007df0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	22ff      	movs	r2, #255	; 0xff
 8007dfe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <vInitPrioGroupValue+0xf4>)
 8007e14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e18:	2207      	movs	r2, #7
 8007e1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e1c:	e009      	b.n	8007e32 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d0ef      	beq.n	8007e1e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e3e:	4b18      	ldr	r3, [pc, #96]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1c3 0307 	rsb	r3, r3, #7
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d00a      	beq.n	8007e60 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
    }
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e60:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	4a0e      	ldr	r2, [pc, #56]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e68:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e72:	4a0b      	ldr	r2, [pc, #44]	; (8007ea0 <vInitPrioGroupValue+0xf8>)
 8007e74:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000ed00 	.word	0xe000ed00
 8007e90:	410fc271 	.word	0x410fc271
 8007e94:	410fc270 	.word	0x410fc270
 8007e98:	e000e400 	.word	0xe000e400
 8007e9c:	200002f8 	.word	0x200002f8
 8007ea0:	200002fc 	.word	0x200002fc

08007ea4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
        __asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	607b      	str	r3, [r7, #4]
    }
 8007ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <vPortEnterCritical+0x58>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	4a0d      	ldr	r2, [pc, #52]	; (8007efc <vPortEnterCritical+0x58>)
 8007ec6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <vPortEnterCritical+0x58>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10f      	bne.n	8007ef0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <vPortEnterCritical+0x5c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <vPortEnterCritical+0x4c>
        __asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	603b      	str	r3, [r7, #0]
    }
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <vPortEnterCritical+0x4a>
    }
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	20000020 	.word	0x20000020
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007f0a:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <vPortExitCritical+0x50>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <vPortExitCritical+0x24>
        __asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	607b      	str	r3, [r7, #4]
    }
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <vPortExitCritical+0x50>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <vPortExitCritical+0x50>)
 8007f30:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007f32:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <vPortExitCritical+0x50>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <vPortExitCritical+0x42>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	f383 8811 	msr	BASEPRI, r3
    }
 8007f44:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20000020 	.word	0x20000020
	...

08007f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007f60:	f3ef 8009 	mrs	r0, PSP
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	4b15      	ldr	r3, [pc, #84]	; (8007fc0 <pxCurrentTCBConst>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	f01e 0f10 	tst.w	lr, #16
 8007f70:	bf08      	it	eq
 8007f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	6010      	str	r0, [r2, #0]
 8007f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f84:	f380 8811 	msr	BASEPRI, r0
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f7fe fc90 	bl	80068b4 <vTaskSwitchContext>
 8007f94:	f04f 0000 	mov.w	r0, #0
 8007f98:	f380 8811 	msr	BASEPRI, r0
 8007f9c:	bc09      	pop	{r0, r3}
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	6808      	ldr	r0, [r1, #0]
 8007fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa6:	f01e 0f10 	tst.w	lr, #16
 8007faa:	bf08      	it	eq
 8007fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fb0:	f380 8809 	msr	PSP, r0
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	f3af 8000 	nop.w

08007fc0 <pxCurrentTCBConst>:
 8007fc0:	200001b8 	.word	0x200001b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	607b      	str	r3, [r7, #4]
    }
 8007fe0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007fe2:	f7fe fbaf 	bl	8006744 <xTaskIncrementTick>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <SysTick_Handler+0x40>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f383 8811 	msr	BASEPRI, r3
    }
 8007ffe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <vPortSetupTimerInterrupt+0x34>)
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008016:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <vPortSetupTimerInterrupt+0x38>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <vPortSetupTimerInterrupt+0x3c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0a      	ldr	r2, [pc, #40]	; (800804c <vPortSetupTimerInterrupt+0x40>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <vPortSetupTimerInterrupt+0x44>)
 800802a:	3b01      	subs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800802e:	4b04      	ldr	r3, [pc, #16]	; (8008040 <vPortSetupTimerInterrupt+0x34>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	e000e010 	.word	0xe000e010
 8008044:	e000e018 	.word	0xe000e018
 8008048:	20000010 	.word	0x20000010
 800804c:	10624dd3 	.word	0x10624dd3
 8008050:	e000e014 	.word	0xe000e014

08008054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008064 <vPortEnableVFP+0x10>
 8008058:	6801      	ldr	r1, [r0, #0]
 800805a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800805e:	6001      	str	r1, [r0, #0]
 8008060:	4770      	bx	lr
 8008062:	0000      	.short	0x0000
 8008064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop

0800806c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b0f      	cmp	r3, #15
 800807c:	d914      	bls.n	80080a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800807e:	4a17      	ldr	r2, [pc, #92]	; (80080dc <vPortValidateInterruptPriority+0x70>)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <vPortValidateInterruptPriority+0x74>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	7afa      	ldrb	r2, [r7, #11]
 800808e:	429a      	cmp	r2, r3
 8008090:	d20a      	bcs.n	80080a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	607b      	str	r3, [r7, #4]
    }
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <vPortValidateInterruptPriority+0x78>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <vPortValidateInterruptPriority+0x7c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d90a      	bls.n	80080ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	603b      	str	r3, [r7, #0]
    }
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <vPortValidateInterruptPriority+0x60>
    }
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	e000e3f0 	.word	0xe000e3f0
 80080e0:	200002f8 	.word	0x200002f8
 80080e4:	e000ed0c 	.word	0xe000ed0c
 80080e8:	200002fc 	.word	0x200002fc

080080ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80080f8:	f7fe fa6a 	bl	80065d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80080fc:	4b65      	ldr	r3, [pc, #404]	; (8008294 <pvPortMalloc+0x1a8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008104:	f000 f934 	bl	8008370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008108:	4b63      	ldr	r3, [pc, #396]	; (8008298 <pvPortMalloc+0x1ac>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 80a7 	bne.w	8008264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d02d      	beq.n	8008178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800811c:	2208      	movs	r2, #8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d227      	bcs.n	8008178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008128:	2208      	movs	r2, #8
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4413      	add	r3, r2
 800812e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	2b00      	cmp	r3, #0
 8008138:	d021      	beq.n	800817e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f023 0307 	bic.w	r3, r3, #7
 8008140:	3308      	adds	r3, #8
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d214      	bcs.n	8008172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	2b00      	cmp	r3, #0
 800815a:	d010      	beq.n	800817e <pvPortMalloc+0x92>
        __asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	617b      	str	r3, [r7, #20]
    }
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008176:	e002      	b.n	800817e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	607b      	str	r3, [r7, #4]
 800817c:	e000      	b.n	8008180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800817e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d06e      	beq.n	8008264 <pvPortMalloc+0x178>
 8008186:	4b45      	ldr	r3, [pc, #276]	; (800829c <pvPortMalloc+0x1b0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d869      	bhi.n	8008264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008190:	4b43      	ldr	r3, [pc, #268]	; (80082a0 <pvPortMalloc+0x1b4>)
 8008192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008194:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <pvPortMalloc+0x1b4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800819a:	e004      	b.n	80081a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d903      	bls.n	80081b8 <pvPortMalloc+0xcc>
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f1      	bne.n	800819c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80081b8:	4b36      	ldr	r3, [pc, #216]	; (8008294 <pvPortMalloc+0x1a8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081be:	429a      	cmp	r2, r3
 80081c0:	d050      	beq.n	8008264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2208      	movs	r2, #8
 80081c8:	4413      	add	r3, r2
 80081ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	1ad2      	subs	r2, r2, r3
 80081dc:	2308      	movs	r3, #8
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d91f      	bls.n	8008224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <pvPortMalloc+0x120>
        __asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	613b      	str	r3, [r7, #16]
    }
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800821e:	69b8      	ldr	r0, [r7, #24]
 8008220:	f000 f908 	bl	8008434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <pvPortMalloc+0x1b0>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	4a1b      	ldr	r2, [pc, #108]	; (800829c <pvPortMalloc+0x1b0>)
 8008230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008232:	4b1a      	ldr	r3, [pc, #104]	; (800829c <pvPortMalloc+0x1b0>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <pvPortMalloc+0x1b8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d203      	bcs.n	8008246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800823e:	4b17      	ldr	r3, [pc, #92]	; (800829c <pvPortMalloc+0x1b0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <pvPortMalloc+0x1b8>)
 8008244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <pvPortMalloc+0x1ac>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	431a      	orrs	r2, r3
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800825a:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <pvPortMalloc+0x1bc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	4a11      	ldr	r2, [pc, #68]	; (80082a8 <pvPortMalloc+0x1bc>)
 8008262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008264:	f7fe f9c2 	bl	80065ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <pvPortMalloc+0x19c>
        __asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
    }
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <pvPortMalloc+0x19a>
    return pvReturn;
 8008288:	69fb      	ldr	r3, [r7, #28]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3728      	adds	r7, #40	; 0x28
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20001708 	.word	0x20001708
 8008298:	2000171c 	.word	0x2000171c
 800829c:	2000170c 	.word	0x2000170c
 80082a0:	20001700 	.word	0x20001700
 80082a4:	20001710 	.word	0x20001710
 80082a8:	20001714 	.word	0x20001714

080082ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d04d      	beq.n	800835a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80082be:	2308      	movs	r3, #8
 80082c0:	425b      	negs	r3, r3
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4413      	add	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	4b24      	ldr	r3, [pc, #144]	; (8008364 <vPortFree+0xb8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4013      	ands	r3, r2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <vPortFree+0x44>
        __asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60fb      	str	r3, [r7, #12]
    }
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <vPortFree+0x62>
        __asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	60bb      	str	r3, [r7, #8]
    }
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <vPortFree+0xb8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4013      	ands	r3, r2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01e      	beq.n	800835a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11a      	bne.n	800835a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <vPortFree+0xb8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	43db      	mvns	r3, r3
 800832e:	401a      	ands	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008334:	f7fe f94c 	bl	80065d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <vPortFree+0xbc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4413      	add	r3, r2
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <vPortFree+0xbc>)
 8008344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008346:	6938      	ldr	r0, [r7, #16]
 8008348:	f000 f874 	bl	8008434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <vPortFree+0xc0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	4a06      	ldr	r2, [pc, #24]	; (800836c <vPortFree+0xc0>)
 8008354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008356:	f7fe f949 	bl	80065ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800835a:	bf00      	nop
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000171c 	.word	0x2000171c
 8008368:	2000170c 	.word	0x2000170c
 800836c:	20001718 	.word	0x20001718

08008370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008376:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800837a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <prvHeapInit+0xac>)
 800837e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00c      	beq.n	80083a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3307      	adds	r3, #7
 800838e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0307 	bic.w	r3, r3, #7
 8008396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	4a1f      	ldr	r2, [pc, #124]	; (800841c <prvHeapInit+0xac>)
 80083a0:	4413      	add	r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083a8:	4a1d      	ldr	r2, [pc, #116]	; (8008420 <prvHeapInit+0xb0>)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80083ae:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <prvHeapInit+0xb0>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	4413      	add	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80083bc:	2208      	movs	r2, #8
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0307 	bic.w	r3, r3, #7
 80083ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a15      	ldr	r2, [pc, #84]	; (8008424 <prvHeapInit+0xb4>)
 80083d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <prvHeapInit+0xb4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <prvHeapInit+0xb4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <prvHeapInit+0xb4>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <prvHeapInit+0xb8>)
 80083fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a09      	ldr	r2, [pc, #36]	; (800842c <prvHeapInit+0xbc>)
 8008406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008408:	4b09      	ldr	r3, [pc, #36]	; (8008430 <prvHeapInit+0xc0>)
 800840a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800840e:	601a      	str	r2, [r3, #0]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000300 	.word	0x20000300
 8008420:	20001700 	.word	0x20001700
 8008424:	20001708 	.word	0x20001708
 8008428:	20001710 	.word	0x20001710
 800842c:	2000170c 	.word	0x2000170c
 8008430:	2000171c 	.word	0x2000171c

08008434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800843c:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <prvInsertBlockIntoFreeList+0xac>)
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e002      	b.n	8008448 <prvInsertBlockIntoFreeList+0x14>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d8f7      	bhi.n	8008442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d108      	bne.n	8008476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	441a      	add	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d118      	bne.n	80084bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <prvInsertBlockIntoFreeList+0xb0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d00d      	beq.n	80084b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	441a      	add	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	e008      	b.n	80084c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084b2:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <prvInsertBlockIntoFreeList+0xb0>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e003      	b.n	80084c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d002      	beq.n	80084d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20001700 	.word	0x20001700
 80084e4:	20001708 	.word	0x20001708

080084e8 <__libc_init_array>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4d0d      	ldr	r5, [pc, #52]	; (8008520 <__libc_init_array+0x38>)
 80084ec:	4c0d      	ldr	r4, [pc, #52]	; (8008524 <__libc_init_array+0x3c>)
 80084ee:	1b64      	subs	r4, r4, r5
 80084f0:	10a4      	asrs	r4, r4, #2
 80084f2:	2600      	movs	r6, #0
 80084f4:	42a6      	cmp	r6, r4
 80084f6:	d109      	bne.n	800850c <__libc_init_array+0x24>
 80084f8:	4d0b      	ldr	r5, [pc, #44]	; (8008528 <__libc_init_array+0x40>)
 80084fa:	4c0c      	ldr	r4, [pc, #48]	; (800852c <__libc_init_array+0x44>)
 80084fc:	f000 f842 	bl	8008584 <_init>
 8008500:	1b64      	subs	r4, r4, r5
 8008502:	10a4      	asrs	r4, r4, #2
 8008504:	2600      	movs	r6, #0
 8008506:	42a6      	cmp	r6, r4
 8008508:	d105      	bne.n	8008516 <__libc_init_array+0x2e>
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008510:	4798      	blx	r3
 8008512:	3601      	adds	r6, #1
 8008514:	e7ee      	b.n	80084f4 <__libc_init_array+0xc>
 8008516:	f855 3b04 	ldr.w	r3, [r5], #4
 800851a:	4798      	blx	r3
 800851c:	3601      	adds	r6, #1
 800851e:	e7f2      	b.n	8008506 <__libc_init_array+0x1e>
 8008520:	08008830 	.word	0x08008830
 8008524:	08008830 	.word	0x08008830
 8008528:	08008830 	.word	0x08008830
 800852c:	08008834 	.word	0x08008834

08008530 <memcpy>:
 8008530:	440a      	add	r2, r1
 8008532:	4291      	cmp	r1, r2
 8008534:	f100 33ff 	add.w	r3, r0, #4294967295
 8008538:	d100      	bne.n	800853c <memcpy+0xc>
 800853a:	4770      	bx	lr
 800853c:	b510      	push	{r4, lr}
 800853e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008546:	4291      	cmp	r1, r2
 8008548:	d1f9      	bne.n	800853e <memcpy+0xe>
 800854a:	bd10      	pop	{r4, pc}

0800854c <memset>:
 800854c:	4402      	add	r2, r0
 800854e:	4603      	mov	r3, r0
 8008550:	4293      	cmp	r3, r2
 8008552:	d100      	bne.n	8008556 <memset+0xa>
 8008554:	4770      	bx	lr
 8008556:	f803 1b01 	strb.w	r1, [r3], #1
 800855a:	e7f9      	b.n	8008550 <memset+0x4>

0800855c <strncmp>:
 800855c:	b510      	push	{r4, lr}
 800855e:	b17a      	cbz	r2, 8008580 <strncmp+0x24>
 8008560:	4603      	mov	r3, r0
 8008562:	3901      	subs	r1, #1
 8008564:	1884      	adds	r4, r0, r2
 8008566:	f813 0b01 	ldrb.w	r0, [r3], #1
 800856a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800856e:	4290      	cmp	r0, r2
 8008570:	d101      	bne.n	8008576 <strncmp+0x1a>
 8008572:	42a3      	cmp	r3, r4
 8008574:	d101      	bne.n	800857a <strncmp+0x1e>
 8008576:	1a80      	subs	r0, r0, r2
 8008578:	bd10      	pop	{r4, pc}
 800857a:	2800      	cmp	r0, #0
 800857c:	d1f3      	bne.n	8008566 <strncmp+0xa>
 800857e:	e7fa      	b.n	8008576 <strncmp+0x1a>
 8008580:	4610      	mov	r0, r2
 8008582:	e7f9      	b.n	8008578 <strncmp+0x1c>

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
