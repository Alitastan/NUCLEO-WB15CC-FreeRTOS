
002LedTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000008  08005430  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c08  2000001c  08005444  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c24  08005444  00021c24  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001561e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002dd2  00000000  00000000  0003566a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001710  00000000  00000000  00038440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015a8  00000000  00000000  00039b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c5db  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015505  00000000  00000000  000576d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c38cc  00000000  00000000  0006cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001304a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006098  00000000  00000000  001304f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005294 	.word	0x08005294

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	08005294 	.word	0x08005294

08000180 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000180:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000182:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000186:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000210 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800018a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800018e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000192:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000194:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000196:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000198:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800019a:	d332      	bcc.n	8000202 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800019c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800019e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001a0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001a2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001a4:	d314      	bcc.n	80001d0 <_CheckCase2>

080001a6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001a6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001a8:	19d0      	adds	r0, r2, r7
 80001aa:	bf00      	nop

080001ac <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001ac:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b0:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001b4:	3a01      	subs	r2, #1
        BEQ      _CSDone
 80001b6:	d005      	beq.n	80001c4 <_CSDone>
        LDRB     R3,[R1], #+1
 80001b8:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001bc:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001c0:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 80001c2:	d1f3      	bne.n	80001ac <_LoopCopyStraight>

080001c4 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001c4:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 80001c8:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 80001ca:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001ce:	4770      	bx	lr

080001d0 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 80001d0:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 80001d2:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001d4:	d319      	bcc.n	800020a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001d6:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001d8:	1b12      	subs	r2, r2, r4

080001da <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001da:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001de:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001e2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001e4:	d1f9      	bne.n	80001da <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001e6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001e8:	d005      	beq.n	80001f6 <_No2ChunkNeeded>

080001ea <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001ea:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ee:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001f2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001f4:	d1f9      	bne.n	80001ea <_LoopCopyAfterWrapAround>

080001f6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80001f6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001fa:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001fc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001fe:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000200:	4770      	bx	lr

08000202 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000202:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000204:	3801      	subs	r0, #1
        CMP      R0,R2
 8000206:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000208:	d2cd      	bcs.n	80001a6 <_Case4>

0800020a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800020a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800020c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800020e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000210:	20001608 	.word	0x20001608

08000214 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f103 0208 	add.w	r2, r3, #8
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f103 0208 	add.w	r2, r3, #8
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f103 0208 	add.w	r2, r3, #8
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b6:	b480      	push	{r7}
 80002b8:	b085      	sub	sp, #20
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002cc:	d103      	bne.n	80002d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e00c      	b.n	80002f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3308      	adds	r3, #8
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e002      	b.n	80002e4 <vListInsert+0x2e>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d2f6      	bcs.n	80002de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	683a      	ldr	r2, [r7, #0]
 80002fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6892      	ldr	r2, [r2, #8]
 800033e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6852      	ldr	r2, [r2, #4]
 8000348:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d103      	bne.n	800035c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800037c:	b580      	push	{r7, lr}
 800037e:	b08c      	sub	sp, #48	; 0x30
 8000380:	af04      	add	r7, sp, #16
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	4613      	mov	r3, r2
 800038a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 ffdb 	bl	800134c <pvPortMalloc>
 8000396:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00e      	beq.n	80003bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800039e:	205c      	movs	r0, #92	; 0x5c
 80003a0:	f000 ffd4 	bl	800134c <pvPortMalloc>
 80003a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	631a      	str	r2, [r3, #48]	; 0x30
 80003b2:	e005      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80003b4:	6978      	ldr	r0, [r7, #20]
 80003b6:	f001 f8a9 	bl	800150c <vPortFree>
 80003ba:	e001      	b.n	80003c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d013      	beq.n	80003ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	2300      	movs	r3, #0
 80003ca:	9303      	str	r3, [sp, #12]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	9302      	str	r3, [sp, #8]
 80003d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f000 f80e 	bl	80003fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80003e2:	69f8      	ldr	r0, [r7, #28]
 80003e4:	f000 f8a2 	bl	800052c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80003e8:	2301      	movs	r3, #1
 80003ea:	61bb      	str	r3, [r7, #24]
 80003ec:	e002      	b.n	80003f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80003f4:	69bb      	ldr	r3, [r7, #24]
    }
 80003f6:	4618      	mov	r0, r3
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b088      	sub	sp, #32
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	461a      	mov	r2, r3
 8000416:	21a5      	movs	r1, #165	; 0xa5
 8000418:	f004 ff34 	bl	8005284 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000426:	3b01      	subs	r3, #1
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	f023 0307 	bic.w	r3, r3, #7
 8000434:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00a      	beq.n	8000456 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000444:	f383 8811 	msr	BASEPRI, r3
 8000448:	f3bf 8f6f 	isb	sy
 800044c:	f3bf 8f4f 	dsb	sy
 8000450:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000452:	bf00      	nop
 8000454:	e7fe      	b.n	8000454 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d01f      	beq.n	800049c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	e012      	b.n	8000488 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	4413      	add	r3, r2
 8000468:	7819      	ldrb	r1, [r3, #0]
 800046a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	4413      	add	r3, r2
 8000470:	3334      	adds	r3, #52	; 0x34
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d006      	beq.n	8000490 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	3301      	adds	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d9e9      	bls.n	8000462 <prvInitialiseNewTask+0x64>
 800048e:	e000      	b.n	8000492 <prvInitialiseNewTask+0x94>
            {
                break;
 8000490:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800049a:	e003      	b.n	80004a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d901      	bls.n	80004ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004aa:	2304      	movs	r3, #4
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80004ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80004b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b8:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80004ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004bc:	2200      	movs	r2, #0
 80004be:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80004c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c2:	3304      	adds	r3, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fec5 	bl	8000254 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80004ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004cc:	3318      	adds	r3, #24
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fec0 	bl	8000254 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80004d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004dc:	f1c3 0205 	rsb	r2, r3, #5
 80004e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80004e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80004ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ec:	3354      	adds	r3, #84	; 0x54
 80004ee:	2204      	movs	r2, #4
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f004 fec6 	bl	8005284 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80004f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fa:	3358      	adds	r3, #88	; 0x58
 80004fc:	2201      	movs	r2, #1
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f004 febf 	bl	8005284 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	68f9      	ldr	r1, [r7, #12]
 800050a:	69b8      	ldr	r0, [r7, #24]
 800050c:	f000 fc86 	bl	8000e1c <pxPortInitialiseStack>
 8000510:	4602      	mov	r2, r0
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000534:	f000 fe1e 	bl	8001174 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a3a      	ldr	r2, [pc, #232]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000540:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000542:	4b3a      	ldr	r3, [pc, #232]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d109      	bne.n	800055e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800054a:	4a38      	ldr	r2, [pc, #224]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <prvAddNewTaskToReadyList+0xfc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d110      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000558:	f000 fb4e 	bl	8000bf8 <prvInitialiseTaskLists>
 800055c:	e00d      	b.n	800057a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000570:	429a      	cmp	r2, r3
 8000572:	d802      	bhi.n	800057a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000582:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <prvAddNewTaskToReadyList+0x108>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <prvAddNewTaskToReadyList+0x94>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f851 	bl	800263c <SEGGER_SYSVIEW_OnTaskCreate>
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	461d      	mov	r5, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	1ae3      	subs	r3, r4, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	462b      	mov	r3, r5
 80005bc:	f001 f8c4 	bl	8001748 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f8be 	bl	8002744 <SEGGER_SYSVIEW_OnTaskStartReady>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <prvAddNewTaskToReadyList+0x10c>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <prvAddNewTaskToReadyList+0x110>)
 80005e8:	441a      	add	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3304      	adds	r3, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f7ff fe3c 	bl	800026e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80005f6:	f000 fded 	bl	80011d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <prvAddNewTaskToReadyList+0x104>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <prvAddNewTaskToReadyList+0x100>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <prvAddNewTaskToReadyList+0x114>)
 8000612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	20000110 	.word	0x20000110
 800062c:	20000038 	.word	0x20000038
 8000630:	2000011c 	.word	0x2000011c
 8000634:	2000012c 	.word	0x2000012c
 8000638:	20000118 	.word	0x20000118
 800063c:	2000003c 	.word	0x2000003c
 8000640:	e000ed04 	.word	0xe000ed04

08000644 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10a      	bne.n	800066e <xTaskDelayUntil+0x2a>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	617b      	str	r3, [r7, #20]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10a      	bne.n	800068a <xTaskDelayUntil+0x46>
        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	613b      	str	r3, [r7, #16]
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <xTaskDelayUntil+0xf8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <xTaskDelayUntil+0x64>
        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60fb      	str	r3, [r7, #12]
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80006a8:	f000 f8aa 	bl	8000800 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <xTaskDelayUntil+0xfc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a3a      	ldr	r2, [r7, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d20b      	bcs.n	80006de <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d211      	bcs.n	80006f4 <xTaskDelayUntil+0xb0>
 80006d0:	69fa      	ldr	r2, [r7, #28]
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d90d      	bls.n	80006f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80006d8:	2301      	movs	r3, #1
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	e00a      	b.n	80006f4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	69fa      	ldr	r2, [r7, #28]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d303      	bcc.n	80006f0 <xTaskDelayUntil+0xac>
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d901      	bls.n	80006f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8000700:	2024      	movs	r0, #36	; 0x24
 8000702:	f001 fbad 	bl	8001e60 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fb0c 	bl	8000d2c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000714:	f000 f882 	bl	800081c <xTaskResumeAll>
 8000718:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d107      	bne.n	8000730 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <xTaskDelayUntil+0x100>)
 8000722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	f3bf 8f4f 	dsb	sy
 800072c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000732:	4618      	mov	r0, r3
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000138 	.word	0x20000138
 8000740:	20000114 	.word	0x20000114
 8000744:	e000ed04 	.word	0xe000ed04

08000748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <vTaskStartScheduler+0x98>)
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2300      	movs	r3, #0
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	4922      	ldr	r1, [pc, #136]	; (80007e4 <vTaskStartScheduler+0x9c>)
 800075c:	4822      	ldr	r0, [pc, #136]	; (80007e8 <vTaskStartScheduler+0xa0>)
 800075e:	f7ff fe0d 	bl	800037c <xTaskCreate>
 8000762:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d124      	bne.n	80007b4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076e:	f383 8811 	msr	BASEPRI, r3
 8000772:	f3bf 8f6f 	isb	sy
 8000776:	f3bf 8f4f 	dsb	sy
 800077a:	60bb      	str	r3, [r7, #8]
    }
 800077c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <vTaskStartScheduler+0xa4>)
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <vTaskStartScheduler+0xa8>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <vTaskStartScheduler+0xac>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <vTaskStartScheduler+0xb0>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <vTaskStartScheduler+0x98>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d102      	bne.n	80007a4 <vTaskStartScheduler+0x5c>
 800079e:	f001 ff31 	bl	8002604 <SEGGER_SYSVIEW_OnIdle>
 80007a2:	e004      	b.n	80007ae <vTaskStartScheduler+0x66>
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <vTaskStartScheduler+0xb0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 ff89 	bl	80026c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80007ae:	f000 fbc1 	bl	8000f34 <xPortStartScheduler>
 80007b2:	e00e      	b.n	80007d2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ba:	d10a      	bne.n	80007d2 <vTaskStartScheduler+0x8a>
        __asm volatile
 80007bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c0:	f383 8811 	msr	BASEPRI, r3
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	607b      	str	r3, [r7, #4]
    }
 80007ce:	bf00      	nop
 80007d0:	e7fe      	b.n	80007d0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <vTaskStartScheduler+0xb4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000134 	.word	0x20000134
 80007e4:	080052ac 	.word	0x080052ac
 80007e8:	08000bc9 	.word	0x08000bc9
 80007ec:	20000130 	.word	0x20000130
 80007f0:	2000011c 	.word	0x2000011c
 80007f4:	20000114 	.word	0x20000114
 80007f8:	20000038 	.word	0x20000038
 80007fc:	20000008 	.word	0x20000008

08000800 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <vTaskSuspendAll+0x18>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a03      	ldr	r2, [pc, #12]	; (8000818 <vTaskSuspendAll+0x18>)
 800080c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	20000138 	.word	0x20000138

0800081c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <xTaskResumeAll+0x11c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <xTaskResumeAll+0x2c>
        __asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	603b      	str	r3, [r7, #0]
    }
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000848:	f000 fc94 	bl	8001174 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <xTaskResumeAll+0x11c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	4a39      	ldr	r2, [pc, #228]	; (8000938 <xTaskResumeAll+0x11c>)
 8000854:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <xTaskResumeAll+0x11c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d165      	bne.n	800092a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800085e:	4b37      	ldr	r3, [pc, #220]	; (800093c <xTaskResumeAll+0x120>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d061      	beq.n	800092a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000866:	e032      	b.n	80008ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <xTaskResumeAll+0x124>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3318      	adds	r3, #24
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fd57 	bl	8000328 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3304      	adds	r3, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fd52 	bl	8000328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4618      	mov	r0, r3
 8000888:	f001 ff5c 	bl	8002744 <SEGGER_SYSVIEW_OnTaskStartReady>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	2201      	movs	r2, #1
 8000892:	409a      	lsls	r2, r3
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <xTaskResumeAll+0x128>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4313      	orrs	r3, r2
 800089a:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <xTaskResumeAll+0x128>)
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <xTaskResumeAll+0x12c>)
 80008ac:	441a      	add	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3304      	adds	r3, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f7ff fcda 	bl	800026e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <xTaskResumeAll+0x130>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d302      	bcc.n	80008ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <xTaskResumeAll+0x134>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <xTaskResumeAll+0x124>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1c8      	bne.n	8000868 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80008dc:	f000 fa0a 	bl	8000cf4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <xTaskResumeAll+0x138>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d010      	beq.n	800090e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80008ec:	f000 f846 	bl	800097c <xTaskIncrementTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <xTaskResumeAll+0x134>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f1      	bne.n	80008ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <xTaskResumeAll+0x138>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <xTaskResumeAll+0x134>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d009      	beq.n	800092a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000916:	2301      	movs	r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <xTaskResumeAll+0x13c>)
 800091c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800092a:	f000 fc53 	bl	80011d4 <vPortExitCritical>

    return xAlreadyYielded;
 800092e:	68bb      	ldr	r3, [r7, #8]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000138 	.word	0x20000138
 800093c:	20000110 	.word	0x20000110
 8000940:	200000d0 	.word	0x200000d0
 8000944:	20000118 	.word	0x20000118
 8000948:	2000003c 	.word	0x2000003c
 800094c:	20000038 	.word	0x20000038
 8000950:	20000124 	.word	0x20000124
 8000954:	20000120 	.word	0x20000120
 8000958:	e000ed04 	.word	0xe000ed04

0800095c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <xTaskGetTickCount+0x1c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000114 	.word	0x20000114

0800097c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <xTaskIncrementTick+0x14c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f040 8092 	bne.w	8000ab4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000990:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <xTaskIncrementTick+0x150>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000998:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <xTaskIncrementTick+0x150>)
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d120      	bne.n	80009e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <xTaskIncrementTick+0x154>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00a      	beq.n	80009c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80009ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b2:	f383 8811 	msr	BASEPRI, r3
 80009b6:	f3bf 8f6f 	isb	sy
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	603b      	str	r3, [r7, #0]
    }
 80009c0:	bf00      	nop
 80009c2:	e7fe      	b.n	80009c2 <xTaskIncrementTick+0x46>
 80009c4:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <xTaskIncrementTick+0x154>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <xTaskIncrementTick+0x158>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <xTaskIncrementTick+0x154>)
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4a40      	ldr	r2, [pc, #256]	; (8000ad4 <xTaskIncrementTick+0x158>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <xTaskIncrementTick+0x15c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a3e      	ldr	r2, [pc, #248]	; (8000ad8 <xTaskIncrementTick+0x15c>)
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	f000 f987 	bl	8000cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <xTaskIncrementTick+0x160>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d34c      	bcc.n	8000a8a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <xTaskIncrementTick+0x154>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <xTaskIncrementTick+0x160>)
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	601a      	str	r2, [r3, #0]
                    break;
 8000a02:	e042      	b.n	8000a8a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <xTaskIncrementTick+0x154>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d203      	bcs.n	8000a24 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <xTaskIncrementTick+0x160>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000a22:	e032      	b.n	8000a8a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	3304      	adds	r3, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fc7d 	bl	8000328 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3318      	adds	r3, #24
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fc74 	bl	8000328 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fe7e 	bl	8002744 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <xTaskIncrementTick+0x164>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <xTaskIncrementTick+0x164>)
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <xTaskIncrementTick+0x168>)
 8000a68:	441a      	add	r2, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4610      	mov	r0, r2
 8000a72:	f7ff fbfc 	bl	800026e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <xTaskIncrementTick+0x16c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3b5      	bcc.n	80009f0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a88:	e7b2      	b.n	80009f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <xTaskIncrementTick+0x16c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a90:	4914      	ldr	r1, [pc, #80]	; (8000ae4 <xTaskIncrementTick+0x168>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d901      	bls.n	8000aa6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <xTaskIncrementTick+0x170>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e004      	b.n	8000abe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <xTaskIncrementTick+0x174>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <xTaskIncrementTick+0x174>)
 8000abc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000abe:	697b      	ldr	r3, [r7, #20]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000138 	.word	0x20000138
 8000acc:	20000114 	.word	0x20000114
 8000ad0:	200000c8 	.word	0x200000c8
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	20000128 	.word	0x20000128
 8000adc:	20000130 	.word	0x20000130
 8000ae0:	20000118 	.word	0x20000118
 8000ae4:	2000003c 	.word	0x2000003c
 8000ae8:	20000038 	.word	0x20000038
 8000aec:	20000124 	.word	0x20000124
 8000af0:	20000120 	.word	0x20000120

08000af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <vTaskSwitchContext+0xbc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <vTaskSwitchContext+0xc0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000b08:	e04d      	b.n	8000ba6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <vTaskSwitchContext+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <vTaskSwitchContext+0xc4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	f1c3 031f 	rsb	r3, r3, #31
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4925      	ldr	r1, [pc, #148]	; (8000bbc <vTaskSwitchContext+0xc8>)
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10a      	bne.n	8000b50 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3e:	f383 8811 	msr	BASEPRI, r3
 8000b42:	f3bf 8f6f 	isb	sy
 8000b46:	f3bf 8f4f 	dsb	sy
 8000b4a:	607b      	str	r3, [r7, #4]
    }
 8000b4c:	bf00      	nop
 8000b4e:	e7fe      	b.n	8000b4e <vTaskSwitchContext+0x5a>
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <vTaskSwitchContext+0xc8>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3308      	adds	r3, #8
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d104      	bne.n	8000b80 <vTaskSwitchContext+0x8c>
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <vTaskSwitchContext+0xcc>)
 8000b88:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <vTaskSwitchContext+0xcc>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <vTaskSwitchContext+0xd0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d102      	bne.n	8000b9c <vTaskSwitchContext+0xa8>
 8000b96:	f001 fd35 	bl	8002604 <SEGGER_SYSVIEW_OnIdle>
}
 8000b9a:	e004      	b.n	8000ba6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <vTaskSwitchContext+0xcc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd8d 	bl	80026c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000138 	.word	0x20000138
 8000bb4:	20000124 	.word	0x20000124
 8000bb8:	20000118 	.word	0x20000118
 8000bbc:	2000003c 	.word	0x2000003c
 8000bc0:	20000038 	.word	0x20000038
 8000bc4:	20000134 	.word	0x20000134

08000bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000bd0:	f000 f852 	bl	8000c78 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <prvIdleTask+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d9f9      	bls.n	8000bd0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <prvIdleTask+0x2c>)
 8000bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	f3bf 8f4f 	dsb	sy
 8000be8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000bec:	e7f0      	b.n	8000bd0 <prvIdleTask+0x8>
 8000bee:	bf00      	nop
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	e000ed04 	.word	0xe000ed04

08000bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e00c      	b.n	8000c1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <prvInitialiseTaskLists+0x60>)
 8000c10:	4413      	add	r3, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fafe 	bl	8000214 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d9ef      	bls.n	8000c04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <prvInitialiseTaskLists+0x64>)
 8000c26:	f7ff faf5 	bl	8000214 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <prvInitialiseTaskLists+0x68>)
 8000c2c:	f7ff faf2 	bl	8000214 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <prvInitialiseTaskLists+0x6c>)
 8000c32:	f7ff faef 	bl	8000214 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <prvInitialiseTaskLists+0x70>)
 8000c38:	f7ff faec 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <prvInitialiseTaskLists+0x74>)
 8000c3e:	f7ff fae9 	bl	8000214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <prvInitialiseTaskLists+0x78>)
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <prvInitialiseTaskLists+0x64>)
 8000c46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <prvInitialiseTaskLists+0x7c>)
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <prvInitialiseTaskLists+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000003c 	.word	0x2000003c
 8000c5c:	200000a0 	.word	0x200000a0
 8000c60:	200000b4 	.word	0x200000b4
 8000c64:	200000d0 	.word	0x200000d0
 8000c68:	200000e4 	.word	0x200000e4
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	200000c8 	.word	0x200000c8
 8000c74:	200000cc 	.word	0x200000cc

08000c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000c7e:	e019      	b.n	8000cb4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000c80:	f000 fa78 	bl	8001174 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <prvCheckTasksWaitingTermination+0x50>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fb49 	bl	8000328 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <prvCheckTasksWaitingTermination+0x54>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <prvCheckTasksWaitingTermination+0x54>)
 8000c9e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <prvCheckTasksWaitingTermination+0x58>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <prvCheckTasksWaitingTermination+0x58>)
 8000ca8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000caa:	f000 fa93 	bl	80011d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 f810 	bl	8000cd4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <prvCheckTasksWaitingTermination+0x58>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e1      	bne.n	8000c80 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000e4 	.word	0x200000e4
 8000ccc:	20000110 	.word	0x20000110
 8000cd0:	200000f8 	.word	0x200000f8

08000cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fc13 	bl	800150c <vPortFree>
                vPortFree( pxTCB );
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 fc10 	bl	800150c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <prvResetNextTaskUnblockTime+0x30>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d104      	bne.n	8000d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <prvResetNextTaskUnblockTime+0x34>)
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d0a:	e005      	b.n	8000d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <prvResetNextTaskUnblockTime+0x30>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <prvResetNextTaskUnblockTime+0x34>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000c8 	.word	0x200000c8
 8000d28:	20000130 	.word	0x20000130

08000d2c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <prvAddCurrentTaskToDelayedList+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3304      	adds	r3, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff faf0 	bl	8000328 <uxListRemove>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10b      	bne.n	8000d66 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	2201      	movs	r2, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xdc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4013      	ands	r3, r2
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xdc>)
 8000d64:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d110      	bne.n	8000d90 <prvAddCurrentTaskToDelayedList+0x64>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00d      	beq.n	8000d90 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	211b      	movs	r1, #27
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fd24 	bl	80027c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3304      	adds	r3, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <prvAddCurrentTaskToDelayedList+0xe0>)
 8000d8a:	f7ff fa70 	bl	800026e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000d8e:	e032      	b.n	8000df6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d20f      	bcs.n	8000dc8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2104      	movs	r1, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fd0a 	bl	80027c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <prvAddCurrentTaskToDelayedList+0xe4>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	f7ff fa78 	bl	80002b6 <vListInsert>
}
 8000dc6:	e016      	b.n	8000df6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fcfa 	bl	80027c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4610      	mov	r0, r2
 8000de2:	f7ff fa68 	bl	80002b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <prvAddCurrentTaskToDelayedList+0xec>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d202      	bcs.n	8000df6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <prvAddCurrentTaskToDelayedList+0xec>)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000114 	.word	0x20000114
 8000e04:	20000038 	.word	0x20000038
 8000e08:	20000118 	.word	0x20000118
 8000e0c:	200000fc 	.word	0x200000fc
 8000e10:	200000cc 	.word	0x200000cc
 8000e14:	200000c8 	.word	0x200000c8
 8000e18:	20000130 	.word	0x20000130

08000e1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3b04      	subs	r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f023 0201 	bic.w	r2, r3, #1
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b04      	subs	r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <pxPortInitialiseStack+0x64>)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3b14      	subs	r3, #20
 8000e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3b04      	subs	r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f06f 0202 	mvn.w	r2, #2
 8000e6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3b20      	subs	r3, #32
 8000e70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	08000e85 	.word	0x08000e85

08000e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <prvTaskExitError+0x54>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e96:	d00a      	beq.n	8000eae <prvTaskExitError+0x2a>
        __asm volatile
 8000e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9c:	f383 8811 	msr	BASEPRI, r3
 8000ea0:	f3bf 8f6f 	isb	sy
 8000ea4:	f3bf 8f4f 	dsb	sy
 8000ea8:	60fb      	str	r3, [r7, #12]
    }
 8000eaa:	bf00      	nop
 8000eac:	e7fe      	b.n	8000eac <prvTaskExitError+0x28>
        __asm volatile
 8000eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	60bb      	str	r3, [r7, #8]
    }
 8000ec0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000ec2:	bf00      	nop
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0fc      	beq.n	8000ec4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	00000000 	.word	0x00000000

08000ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <pxCurrentTCBConst2>)
 8000ee2:	6819      	ldr	r1, [r3, #0]
 8000ee4:	6808      	ldr	r0, [r1, #0]
 8000ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eea:	f380 8809 	msr	PSP, r0
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	f380 8811 	msr	BASEPRI, r0
 8000efa:	4770      	bx	lr
 8000efc:	f3af 8000 	nop.w

08000f00 <pxCurrentTCBConst2>:
 8000f00:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop

08000f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <prvPortStartFirstTask+0x24>)
 8000f0a:	6800      	ldr	r0, [r0, #0]
 8000f0c:	6800      	ldr	r0, [r0, #0]
 8000f0e:	f380 8808 	msr	MSP, r0
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	f380 8814 	msr	CONTROL, r0
 8000f1a:	b662      	cpsie	i
 8000f1c:	b661      	cpsie	f
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
 8000f26:	df00      	svc	0
 8000f28:	bf00      	nop
 8000f2a:	0000      	.short	0x0000
 8000f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop

08000f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f3a:	4b46      	ldr	r3, [pc, #280]	; (8001054 <xPortStartScheduler+0x120>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <xPortStartScheduler+0x124>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d10a      	bne.n	8000f5a <xPortStartScheduler+0x26>
        __asm volatile
 8000f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f48:	f383 8811 	msr	BASEPRI, r3
 8000f4c:	f3bf 8f6f 	isb	sy
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	613b      	str	r3, [r7, #16]
    }
 8000f56:	bf00      	nop
 8000f58:	e7fe      	b.n	8000f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <xPortStartScheduler+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <xPortStartScheduler+0x128>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10a      	bne.n	8000f7a <xPortStartScheduler+0x46>
        __asm volatile
 8000f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f68:	f383 8811 	msr	BASEPRI, r3
 8000f6c:	f3bf 8f6f 	isb	sy
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	60fb      	str	r3, [r7, #12]
    }
 8000f76:	bf00      	nop
 8000f78:	e7fe      	b.n	8000f78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <xPortStartScheduler+0x12c>)
 8000f7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <xPortStartScheduler+0x130>)
 8000fa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <xPortStartScheduler+0x134>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fa8:	e009      	b.n	8000fbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <xPortStartScheduler+0x134>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <xPortStartScheduler+0x134>)
 8000fb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	2b80      	cmp	r3, #128	; 0x80
 8000fc8:	d0ef      	beq.n	8000faa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <xPortStartScheduler+0x134>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d00a      	beq.n	8000fec <xPortStartScheduler+0xb8>
        __asm volatile
 8000fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fda:	f383 8811 	msr	BASEPRI, r3
 8000fde:	f3bf 8f6f 	isb	sy
 8000fe2:	f3bf 8f4f 	dsb	sy
 8000fe6:	60bb      	str	r3, [r7, #8]
    }
 8000fe8:	bf00      	nop
 8000fea:	e7fe      	b.n	8000fea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <xPortStartScheduler+0x134>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <xPortStartScheduler+0x134>)
 8000ff4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <xPortStartScheduler+0x134>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <xPortStartScheduler+0x134>)
 8001000:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <xPortStartScheduler+0x138>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <xPortStartScheduler+0x138>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <xPortStartScheduler+0x138>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <xPortStartScheduler+0x138>)
 800101c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001020:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001022:	f000 f963 	bl	80012ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <xPortStartScheduler+0x13c>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800102c:	f000 f982 	bl	8001334 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <xPortStartScheduler+0x140>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <xPortStartScheduler+0x140>)
 8001036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800103a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800103c:	f7ff ff64 	bl	8000f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001040:	f7ff fd58 	bl	8000af4 <vTaskSwitchContext>
    prvTaskExitError();
 8001044:	f7ff ff1e 	bl	8000e84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00
 8001058:	410fc271 	.word	0x410fc271
 800105c:	410fc270 	.word	0x410fc270
 8001060:	e000e400 	.word	0xe000e400
 8001064:	2000013c 	.word	0x2000013c
 8001068:	20000140 	.word	0x20000140
 800106c:	e000ed20 	.word	0xe000ed20
 8001070:	2000000c 	.word	0x2000000c
 8001074:	e000ef34 	.word	0xe000ef34

08001078 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <vInitPrioGroupValue+0xe4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <vInitPrioGroupValue+0xe8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d10a      	bne.n	800109e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	613b      	str	r3, [r7, #16]
    }
 800109a:	bf00      	nop
 800109c:	e7fe      	b.n	800109c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <vInitPrioGroupValue+0xe4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <vInitPrioGroupValue+0xec>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d10a      	bne.n	80010be <vInitPrioGroupValue+0x46>
        __asm volatile
 80010a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ac:	f383 8811 	msr	BASEPRI, r3
 80010b0:	f3bf 8f6f 	isb	sy
 80010b4:	f3bf 8f4f 	dsb	sy
 80010b8:	60fb      	str	r3, [r7, #12]
    }
 80010ba:	bf00      	nop
 80010bc:	e7fe      	b.n	80010bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <vInitPrioGroupValue+0xf0>)
 80010c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <vInitPrioGroupValue+0xf4>)
 80010e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <vInitPrioGroupValue+0xf8>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80010ec:	e009      	b.n	8001102 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <vInitPrioGroupValue+0xf8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <vInitPrioGroupValue+0xf8>)
 80010f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	2b80      	cmp	r3, #128	; 0x80
 800110c:	d0ef      	beq.n	80010ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <vInitPrioGroupValue+0xf8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00a      	beq.n	8001130 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111e:	f383 8811 	msr	BASEPRI, r3
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	60bb      	str	r3, [r7, #8]
    }
 800112c:	bf00      	nop
 800112e:	e7fe      	b.n	800112e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <vInitPrioGroupValue+0xf8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <vInitPrioGroupValue+0xf8>)
 8001138:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <vInitPrioGroupValue+0xf8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <vInitPrioGroupValue+0xf8>)
 8001144:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	410fc271 	.word	0x410fc271
 8001164:	410fc270 	.word	0x410fc270
 8001168:	e000e400 	.word	0xe000e400
 800116c:	2000013c 	.word	0x2000013c
 8001170:	20000140 	.word	0x20000140

08001174 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
        __asm volatile
 800117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	607b      	str	r3, [r7, #4]
    }
 800118c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <vPortEnterCritical+0x58>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <vPortEnterCritical+0x58>)
 8001196:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <vPortEnterCritical+0x58>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10f      	bne.n	80011c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <vPortEnterCritical+0x5c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	603b      	str	r3, [r7, #0]
    }
 80011bc:	bf00      	nop
 80011be:	e7fe      	b.n	80011be <vPortEnterCritical+0x4a>
    }
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	e000ed04 	.word	0xe000ed04

080011d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <vPortExitCritical+0x50>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <vPortExitCritical+0x24>
        __asm volatile
 80011e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	607b      	str	r3, [r7, #4]
    }
 80011f4:	bf00      	nop
 80011f6:	e7fe      	b.n	80011f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <vPortExitCritical+0x50>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <vPortExitCritical+0x50>)
 8001200:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <vPortExitCritical+0x50>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <vPortExitCritical+0x42>
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001214:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000000c 	.word	0x2000000c
	...

08001230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001230:	f3ef 8009 	mrs	r0, PSP
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <pxCurrentTCBConst>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f01e 0f10 	tst.w	lr, #16
 8001240:	bf08      	it	eq
 8001242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800124a:	6010      	str	r0, [r2, #0]
 800124c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001254:	f380 8811 	msr	BASEPRI, r0
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f7ff fc48 	bl	8000af4 <vTaskSwitchContext>
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	f380 8811 	msr	BASEPRI, r0
 800126c:	bc09      	pop	{r0, r3}
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	6808      	ldr	r0, [r1, #0]
 8001272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001276:	f01e 0f10 	tst.w	lr, #16
 800127a:	bf08      	it	eq
 800127c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001280:	f380 8809 	msr	PSP, r0
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w

08001290 <pxCurrentTCBConst>:
 8001290:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop

08001298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
        __asm volatile
 800129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a2:	f383 8811 	msr	BASEPRI, r3
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	f3bf 8f4f 	dsb	sy
 80012ae:	607b      	str	r3, [r7, #4]
    }
 80012b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80012b2:	f001 f92d 	bl	8002510 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80012b6:	f7ff fb61 	bl	800097c <xTaskIncrementTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80012c0:	f001 f984 	bl	80025cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <SysTick_Handler+0x50>)
 80012c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e001      	b.n	80012d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80012ce:	f001 f961 	bl	8002594 <SEGGER_SYSVIEW_RecordExitISR>
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f383 8811 	msr	BASEPRI, r3
    }
 80012dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000ed04 	.word	0xe000ed04

080012ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <vPortSetupTimerInterrupt+0x34>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <vPortSetupTimerInterrupt+0x38>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <vPortSetupTimerInterrupt+0x3c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <vPortSetupTimerInterrupt+0x40>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	099b      	lsrs	r3, r3, #6
 8001308:	4a09      	ldr	r2, [pc, #36]	; (8001330 <vPortSetupTimerInterrupt+0x44>)
 800130a:	3b01      	subs	r3, #1
 800130c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <vPortSetupTimerInterrupt+0x34>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010
 8001324:	e000e018 	.word	0xe000e018
 8001328:	20000010 	.word	0x20000010
 800132c:	10624dd3 	.word	0x10624dd3
 8001330:	e000e014 	.word	0xe000e014

08001334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001344 <vPortEnableVFP+0x10>
 8001338:	6801      	ldr	r1, [r0, #0]
 800133a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800133e:	6001      	str	r1, [r0, #0]
 8001340:	4770      	bx	lr
 8001342:	0000      	.short	0x0000
 8001344:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop

0800134c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001358:	f7ff fa52 	bl	8000800 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <pvPortMalloc+0x1a8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001364:	f000 f934 	bl	80015d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001368:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <pvPortMalloc+0x1ac>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 80a7 	bne.w	80014c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d02d      	beq.n	80013d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800137c:	2208      	movs	r2, #8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	d227      	bcs.n	80013d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001388:	2208      	movs	r2, #8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	2b00      	cmp	r3, #0
 8001398:	d021      	beq.n	80013de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f023 0307 	bic.w	r3, r3, #7
 80013a0:	3308      	adds	r3, #8
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d214      	bcs.n	80013d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	3308      	adds	r3, #8
 80013b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d010      	beq.n	80013de <pvPortMalloc+0x92>
        __asm volatile
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	617b      	str	r3, [r7, #20]
    }
 80013ce:	bf00      	nop
 80013d0:	e7fe      	b.n	80013d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80013d6:	e002      	b.n	80013de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e000      	b.n	80013e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80013de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d06e      	beq.n	80014c4 <pvPortMalloc+0x178>
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <pvPortMalloc+0x1b0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d869      	bhi.n	80014c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <pvPortMalloc+0x1b4>)
 80013f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <pvPortMalloc+0x1b4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013fa:	e004      	b.n	8001406 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d903      	bls.n	8001418 <pvPortMalloc+0xcc>
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f1      	bne.n	80013fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <pvPortMalloc+0x1a8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	429a      	cmp	r2, r3
 8001420:	d050      	beq.n	80014c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2208      	movs	r2, #8
 8001428:	4413      	add	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	2308      	movs	r3, #8
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	429a      	cmp	r2, r3
 8001442:	d91f      	bls.n	8001484 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <pvPortMalloc+0x120>
        __asm volatile
 8001456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	613b      	str	r3, [r7, #16]
    }
 8001468:	bf00      	nop
 800146a:	e7fe      	b.n	800146a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	1ad2      	subs	r2, r2, r3
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800147e:	69b8      	ldr	r0, [r7, #24]
 8001480:	f000 f908 	bl	8001694 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <pvPortMalloc+0x1b0>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <pvPortMalloc+0x1b0>)
 8001490:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <pvPortMalloc+0x1b0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <pvPortMalloc+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d203      	bcs.n	80014a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <pvPortMalloc+0x1b0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <pvPortMalloc+0x1b8>)
 80014a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <pvPortMalloc+0x1ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <pvPortMalloc+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <pvPortMalloc+0x1bc>)
 80014c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80014c4:	f7ff f9aa 	bl	800081c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00a      	beq.n	80014e8 <pvPortMalloc+0x19c>
        __asm volatile
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	60fb      	str	r3, [r7, #12]
    }
 80014e4:	bf00      	nop
 80014e6:	e7fe      	b.n	80014e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80014e8:	69fb      	ldr	r3, [r7, #28]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000154c 	.word	0x2000154c
 80014f8:	20001560 	.word	0x20001560
 80014fc:	20001550 	.word	0x20001550
 8001500:	20001544 	.word	0x20001544
 8001504:	20001554 	.word	0x20001554
 8001508:	20001558 	.word	0x20001558

0800150c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04d      	beq.n	80015ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800151e:	2308      	movs	r3, #8
 8001520:	425b      	negs	r3, r3
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4413      	add	r3, r2
 8001526:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <vPortFree+0xb8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10a      	bne.n	8001550 <vPortFree+0x44>
        __asm volatile
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	60fb      	str	r3, [r7, #12]
    }
 800154c:	bf00      	nop
 800154e:	e7fe      	b.n	800154e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <vPortFree+0x62>
        __asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	60bb      	str	r3, [r7, #8]
    }
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <vPortFree+0xb8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01e      	beq.n	80015ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11a      	bne.n	80015ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <vPortFree+0xb8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001594:	f7ff f934 	bl	8000800 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <vPortFree+0xbc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <vPortFree+0xbc>)
 80015a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80015a6:	6938      	ldr	r0, [r7, #16]
 80015a8:	f000 f874 	bl	8001694 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <vPortFree+0xc0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <vPortFree+0xc0>)
 80015b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80015b6:	f7ff f931 	bl	800081c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20001560 	.word	0x20001560
 80015c8:	20001550 	.word	0x20001550
 80015cc:	2000155c 	.word	0x2000155c

080015d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80015d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <prvHeapInit+0xac>)
 80015de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3307      	adds	r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f023 0307 	bic.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	4a1f      	ldr	r2, [pc, #124]	; (800167c <prvHeapInit+0xac>)
 8001600:	4413      	add	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <prvHeapInit+0xb0>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <prvHeapInit+0xb0>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800161c:	2208      	movs	r2, #8
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 0307 	bic.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <prvHeapInit+0xb4>)
 8001630:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <prvHeapInit+0xb4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <prvHeapInit+0xb4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <prvHeapInit+0xb4>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <prvHeapInit+0xb8>)
 800165e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <prvHeapInit+0xbc>)
 8001666:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <prvHeapInit+0xc0>)
 800166a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000144 	.word	0x20000144
 8001680:	20001544 	.word	0x20001544
 8001684:	2000154c 	.word	0x2000154c
 8001688:	20001554 	.word	0x20001554
 800168c:	20001550 	.word	0x20001550
 8001690:	20001560 	.word	0x20001560

08001694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <prvInsertBlockIntoFreeList+0xac>)
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e002      	b.n	80016a8 <prvInsertBlockIntoFreeList+0x14>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8f7      	bhi.n	80016a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d108      	bne.n	80016d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	441a      	add	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	441a      	add	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d118      	bne.n	800171c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <prvInsertBlockIntoFreeList+0xb0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d00d      	beq.n	8001712 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e008      	b.n	8001724 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <prvInsertBlockIntoFreeList+0xb0>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e003      	b.n	8001724 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	d002      	beq.n	8001732 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20001544 	.word	0x20001544
 8001744:	2000154c 	.word	0x2000154c

08001748 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001756:	2205      	movs	r2, #5
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <SYSVIEW_AddTask+0xc0>)
 800175a:	68b8      	ldr	r0, [r7, #8]
 800175c:	f003 fd74 	bl	8005248 <memcmp>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d04b      	beq.n	80017fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <SYSVIEW_AddTask+0xc4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b07      	cmp	r3, #7
 800176c:	d903      	bls.n	8001776 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800176e:	4828      	ldr	r0, [pc, #160]	; (8001810 <SYSVIEW_AddTask+0xc8>)
 8001770:	f001 f966 	bl	8002a40 <SEGGER_SYSVIEW_Warn>
    return;
 8001774:	e044      	b.n	8001800 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <SYSVIEW_AddTask+0xc4>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4926      	ldr	r1, [pc, #152]	; (8001814 <SYSVIEW_AddTask+0xcc>)
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <SYSVIEW_AddTask+0xc4>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <SYSVIEW_AddTask+0xcc>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3304      	adds	r3, #4
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <SYSVIEW_AddTask+0xc4>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	491b      	ldr	r1, [pc, #108]	; (8001814 <SYSVIEW_AddTask+0xcc>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3308      	adds	r3, #8
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <SYSVIEW_AddTask+0xc4>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4916      	ldr	r1, [pc, #88]	; (8001814 <SYSVIEW_AddTask+0xcc>)
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	330c      	adds	r3, #12
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <SYSVIEW_AddTask+0xc4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4910      	ldr	r1, [pc, #64]	; (8001814 <SYSVIEW_AddTask+0xcc>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3310      	adds	r3, #16
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <SYSVIEW_AddTask+0xc4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <SYSVIEW_AddTask+0xc4>)
 80017ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f80e 	bl	8001818 <SYSVIEW_SendTaskInfo>
 80017fc:	e000      	b.n	8001800 <SYSVIEW_AddTask+0xb8>
    return;
 80017fe:	bf00      	nop

}
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	080052b4 	.word	0x080052b4
 800180c:	20001604 	.word	0x20001604
 8001810:	080052bc 	.word	0x080052bc
 8001814:	20001564 	.word	0x20001564

08001818 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2214      	movs	r2, #20
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fd28 	bl	8005284 <memset>
  TaskInfo.TaskID     = TaskID;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fd35 	bl	80022bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <_DoInit+0x98>)
 8001864:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <_DoInit+0x9c>)
 8001876:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <_DoInit+0xa0>)
 800187c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001884:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <_DoInit+0x9c>)
 800189c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <_DoInit+0xa4>)
 80018a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2210      	movs	r2, #16
 80018a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3307      	adds	r3, #7
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <_DoInit+0xa8>)
 80018c2:	6810      	ldr	r0, [r2, #0]
 80018c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80018c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <_DoInit+0xac>)
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	6018      	str	r0, [r3, #0]
 80018d2:	8891      	ldrh	r1, [r2, #4]
 80018d4:	7992      	ldrb	r2, [r2, #6]
 80018d6:	8099      	strh	r1, [r3, #4]
 80018d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80018da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80018e4:	f3bf 8f5f 	dmb	sy
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20001608 	.word	0x20001608
 80018f8:	0800530c 	.word	0x0800530c
 80018fc:	200016b0 	.word	0x200016b0
 8001900:	20001ab0 	.word	0x20001ab0
 8001904:	08005318 	.word	0x08005318
 8001908:	0800531c 	.word	0x0800531c

0800190c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <SEGGER_RTT_ReadNoLock+0x108>)
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <SEGGER_RTT_ReadNoLock+0x1e>
 8001926:	f7ff ff99 	bl	800185c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	3360      	adds	r3, #96	; 0x60
 8001936:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <SEGGER_RTT_ReadNoLock+0x108>)
 8001938:	4413      	add	r3, r2
 800193a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	429a      	cmp	r2, r3
 8001956:	d92b      	bls.n	80019b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4293      	cmp	r3, r2
 8001968:	bf28      	it	cs
 800196a:	4613      	movcs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	4413      	add	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6939      	ldr	r1, [r7, #16]
 800197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197e:	f003 fc73 	bl	8005268 <memcpy>
    NumBytesRead += NumBytesRem;
 8001982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4413      	add	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4413      	add	r3, r2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800199a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4413      	add	r3, r2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d101      	bne.n	80019b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4293      	cmp	r3, r2
 80019be:	bf28      	it	cs
 80019c0:	4613      	movcs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d019      	beq.n	80019fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	4413      	add	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019da:	f003 fc45 	bl	8005268 <memcpy>
    NumBytesRead += NumBytesRem;
 80019de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4413      	add	r3, r2
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4413      	add	r3, r2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80019f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4413      	add	r3, r2
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20001608 	.word	0x20001608

08001a18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001a28:	e002      	b.n	8001a30 <_EncodeStr+0x18>
    Len++;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f6      	bne.n	8001a2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d901      	bls.n	8001a48 <_EncodeStr+0x30>
    Len = Limit;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2bfe      	cmp	r3, #254	; 0xfe
 8001a4c:	d806      	bhi.n	8001a5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e011      	b.n	8001a80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60fa      	str	r2, [r7, #12]
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	0a19      	lsrs	r1, r3, #8
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	60fa      	str	r2, [r7, #12]
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001a84:	e00a      	b.n	8001a9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	1c53      	adds	r3, r2, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	60f9      	str	r1, [r7, #12]
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	701a      	strb	r2, [r3, #0]
    n++;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d3f0      	bcc.n	8001a86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <_HandleIncomingPacket+0xe0>)
 8001ad4:	7e1b      	ldrb	r3, [r3, #24]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	1cfb      	adds	r3, r7, #3
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff ff15 	bl	800190c <SEGGER_RTT_ReadNoLock>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dd54      	ble.n	8001b96 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b80      	cmp	r3, #128	; 0x80
 8001af0:	d032      	beq.n	8001b58 <_HandleIncomingPacket+0x8c>
 8001af2:	2b80      	cmp	r3, #128	; 0x80
 8001af4:	dc42      	bgt.n	8001b7c <_HandleIncomingPacket+0xb0>
 8001af6:	2b07      	cmp	r3, #7
 8001af8:	dc16      	bgt.n	8001b28 <_HandleIncomingPacket+0x5c>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	dd3e      	ble.n	8001b7c <_HandleIncomingPacket+0xb0>
 8001afe:	3b01      	subs	r3, #1
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d83b      	bhi.n	8001b7c <_HandleIncomingPacket+0xb0>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <_HandleIncomingPacket+0x40>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b2f 	.word	0x08001b2f
 8001b10:	08001b35 	.word	0x08001b35
 8001b14:	08001b3b 	.word	0x08001b3b
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	08001b47 	.word	0x08001b47
 8001b20:	08001b4d 	.word	0x08001b4d
 8001b24:	08001b53 	.word	0x08001b53
 8001b28:	2b7f      	cmp	r3, #127	; 0x7f
 8001b2a:	d036      	beq.n	8001b9a <_HandleIncomingPacket+0xce>
 8001b2c:	e026      	b.n	8001b7c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8001b2e:	f000 fa4b 	bl	8001fc8 <SEGGER_SYSVIEW_Start>
      break;
 8001b32:	e037      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001b34:	f000 fb02 	bl	800213c <SEGGER_SYSVIEW_Stop>
      break;
 8001b38:	e034      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001b3a:	f000 fcb7 	bl	80024ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 8001b3e:	e031      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001b40:	f000 fca0 	bl	8002484 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001b44:	e02e      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001b46:	f000 fb1f 	bl	8002188 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001b4a:	e02b      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001b4c:	f000 ff3a 	bl	80029c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001b50:	e028      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001b52:	f000 ff19 	bl	8002988 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001b56:	e025      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <_HandleIncomingPacket+0xe0>)
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	1cfb      	adds	r3, r7, #3
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff fed2 	bl	800190c <SEGGER_RTT_ReadNoLock>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dd15      	ble.n	8001b9e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe87 	bl	8002888 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001b7a:	e010      	b.n	8001b9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da0e      	bge.n	8001ba2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <_HandleIncomingPacket+0xe0>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	1cfb      	adds	r3, r7, #3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff febc 	bl	800190c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001b94:	e005      	b.n	8001ba2 <_HandleIncomingPacket+0xd6>
    }
  }
 8001b96:	bf00      	nop
 8001b98:	e004      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e002      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
      break;
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <_HandleIncomingPacket+0xd8>
      break;
 8001ba2:	bf00      	nop
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20001ac0 	.word	0x20001ac0

08001bb0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	e00b      	b.n	8001be4 <_TrySendOverflowPacket+0x34>
 8001bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	09db      	lsrs	r3, r3, #7
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	2b7f      	cmp	r3, #127	; 0x7f
 8001be8:	d8f0      	bhi.n	8001bcc <_TrySendOverflowPacket+0x1c>
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <_TrySendOverflowPacket+0xe0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	e00b      	b.n	8001c2c <_TrySendOverflowPacket+0x7c>
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	1c59      	adds	r1, r3, #1
 8001c1c:	6279      	str	r1, [r7, #36]	; 0x24
 8001c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	09db      	lsrs	r3, r3, #7
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c30:	d8f0      	bhi.n	8001c14 <_TrySendOverflowPacket+0x64>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	627a      	str	r2, [r7, #36]	; 0x24
 8001c38:	6a3a      	ldr	r2, [r7, #32]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	4618      	mov	r0, r3
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fa94 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e004      	b.n	8001c80 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <_TrySendOverflowPacket+0xdc>)
 8001c7e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001c80:	693b      	ldr	r3, [r7, #16]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3730      	adds	r7, #48	; 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001ac0 	.word	0x20001ac0
 8001c90:	e0001004 	.word	0xe0001004

08001c94 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001ca0:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <_SendPacket+0x1c0>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d010      	beq.n	8001cca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <_SendPacket+0x1c0>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a3 	beq.w	8001df8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001cb2:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <_SendPacket+0x1c0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d109      	bne.n	8001cce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8001cba:	f7ff ff79 	bl	8001bb0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001cbe:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <_SendPacket+0x1c0>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	f040 809a 	bne.w	8001dfc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8001cc8:	e001      	b.n	8001cce <_SendPacket+0x3a>
    goto Send;
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <_SendPacket+0x3c>
Send:
 8001cce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b1f      	cmp	r3, #31
 8001cd4:	d809      	bhi.n	8001cea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <_SendPacket+0x1c0>)
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 808b 	bne.w	8001e00 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b17      	cmp	r3, #23
 8001cee:	d807      	bhi.n	8001d00 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e03d      	b.n	8001d7c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0c:	d912      	bls.n	8001d34 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	09da      	lsrs	r2, r3, #7
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	3a01      	subs	r2, #1
 8001d26:	60fa      	str	r2, [r7, #12]
 8001d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e006      	b.n	8001d42 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b7f      	cmp	r3, #127	; 0x7f
 8001d46:	d912      	bls.n	8001d6e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	09da      	lsrs	r2, r3, #7
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	3a01      	subs	r2, #1
 8001d60:	60fa      	str	r2, [r7, #12]
 8001d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e006      	b.n	8001d7c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <_SendPacket+0x1c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <_SendPacket+0x1c0>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	e00b      	b.n	8001dae <_SendPacket+0x11a>
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	1c59      	adds	r1, r3, #1
 8001d9e:	6279      	str	r1, [r7, #36]	; 0x24
 8001da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	09db      	lsrs	r3, r3, #7
 8001dac:	623b      	str	r3, [r7, #32]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b7f      	cmp	r3, #127	; 0x7f
 8001db2:	d8f0      	bhi.n	8001d96 <_SendPacket+0x102>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	627a      	str	r2, [r7, #36]	; 0x24
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <_SendPacket+0x1c0>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	f7fe f9d4 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <_SendPacket+0x1c0>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	60d3      	str	r3, [r2, #12]
 8001de8:	e00b      	b.n	8001e02 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <_SendPacket+0x1c0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <_SendPacket+0x1c0>)
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e004      	b.n	8001e02 <_SendPacket+0x16e>
    goto SendDone;
 8001df8:	bf00      	nop
 8001dfa:	e002      	b.n	8001e02 <_SendPacket+0x16e>
      goto SendDone;
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <_SendPacket+0x16e>
      goto SendDone;
 8001e00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <_SendPacket+0x1c0>)
 8001e04:	7e1b      	ldrb	r3, [r3, #24]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_SendPacket+0x1c8>)
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	440b      	add	r3, r1
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	336c      	adds	r3, #108	; 0x6c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <_SendPacket+0x1c0>)
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	490f      	ldr	r1, [pc, #60]	; (8001e5c <_SendPacket+0x1c8>)
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4403      	add	r3, r0
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3370      	adds	r3, #112	; 0x70
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d00b      	beq.n	8001e4a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <_SendPacket+0x1c0>)
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <_SendPacket+0x1c0>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001e40:	f7ff fe44 	bl	8001acc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <_SendPacket+0x1c0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001ac0 	.word	0x20001ac0
 8001e58:	e0001004 	.word	0xe0001004
 8001e5c:	20001608 	.word	0x20001608

08001e60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001e68:	f3ef 8311 	mrs	r3, BASEPRI
 8001e6c:	f04f 0120 	mov.w	r1, #32
 8001e70:	f381 8811 	msr	BASEPRI, r1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4808      	ldr	r0, [pc, #32]	; (8001e98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001e78:	f7ff fe1b 	bl	8001ab2 <_PreparePacket>
 8001e7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68b8      	ldr	r0, [r7, #8]
 8001e84:	f7ff ff06 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f383 8811 	msr	BASEPRI, r3
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001af0 	.word	0x20001af0

08001e9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8001eaa:	f04f 0120 	mov.w	r1, #32
 8001eae:	f381 8811 	msr	BASEPRI, r1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001eb6:	f7ff fdfc 	bl	8001ab2 <_PreparePacket>
 8001eba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	e00b      	b.n	8001ee2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	1c59      	adds	r1, r3, #1
 8001ed2:	61f9      	str	r1, [r7, #28]
 8001ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	09db      	lsrs	r3, r3, #7
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee6:	d8f0      	bhi.n	8001eca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	61fa      	str	r2, [r7, #28]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	6938      	ldr	r0, [r7, #16]
 8001efe:	f7ff fec9 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f383 8811 	msr	BASEPRI, r3
}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20001af0 	.word	0x20001af0

08001f14 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001f20:	f3ef 8311 	mrs	r3, BASEPRI
 8001f24:	f04f 0120 	mov.w	r1, #32
 8001f28:	f381 8811 	msr	BASEPRI, r1
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001f30:	f7ff fdbf 	bl	8001ab2 <_PreparePacket>
 8001f34:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f42:	e00b      	b.n	8001f5c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	1c59      	adds	r1, r3, #1
 8001f4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001f4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	09db      	lsrs	r3, r3, #7
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f60:	d8f0      	bhi.n	8001f44 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	e00b      	b.n	8001f94 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	6279      	str	r1, [r7, #36]	; 0x24
 8001f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	09db      	lsrs	r3, r3, #7
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b7f      	cmp	r3, #127	; 0x7f
 8001f98:	d8f0      	bhi.n	8001f7c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	69b8      	ldr	r0, [r7, #24]
 8001fb0:	f7ff fe70 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f383 8811 	msr	BASEPRI, r3
}
 8001fba:	bf00      	nop
 8001fbc:	3730      	adds	r7, #48	; 0x30
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001af0 	.word	0x20001af0

08001fc8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8001fd8:	f04f 0120 	mov.w	r1, #32
 8001fdc:	f381 8811 	msr	BASEPRI, r1
 8001fe0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	220a      	movs	r2, #10
 8001fe8:	4952      	ldr	r1, [pc, #328]	; (8002134 <SEGGER_SYSVIEW_Start+0x16c>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe f8c8 	bl	8000180 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f7ff ff32 	bl	8001e60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8002000:	f04f 0120 	mov.w	r1, #32
 8002004:	f381 8811 	msr	BASEPRI, r1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	484b      	ldr	r0, [pc, #300]	; (8002138 <SEGGER_SYSVIEW_Start+0x170>)
 800200c:	f7ff fd51 	bl	8001ab2 <_PreparePacket>
 8002010:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	e00b      	b.n	800203a <SEGGER_SYSVIEW_Start+0x72>
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	b2da      	uxtb	r2, r3
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	1c59      	adds	r1, r3, #1
 800202a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800202c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	09db      	lsrs	r3, r3, #7
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2b7f      	cmp	r3, #127	; 0x7f
 800203e:	d8f0      	bhi.n	8002022 <SEGGER_SYSVIEW_Start+0x5a>
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e00b      	b.n	8002074 <SEGGER_SYSVIEW_Start+0xac>
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	6279      	str	r1, [r7, #36]	; 0x24
 8002066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	09db      	lsrs	r3, r3, #7
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	2b7f      	cmp	r3, #127	; 0x7f
 8002078:	d8f0      	bhi.n	800205c <SEGGER_SYSVIEW_Start+0x94>
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	627a      	str	r2, [r7, #36]	; 0x24
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e00b      	b.n	80020ae <SEGGER_SYSVIEW_Start+0xe6>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	1c59      	adds	r1, r3, #1
 800209e:	61f9      	str	r1, [r7, #28]
 80020a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	09db      	lsrs	r3, r3, #7
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b7f      	cmp	r3, #127	; 0x7f
 80020b2:	d8f0      	bhi.n	8002096 <SEGGER_SYSVIEW_Start+0xce>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	61fa      	str	r2, [r7, #28]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e00b      	b.n	80020e6 <SEGGER_SYSVIEW_Start+0x11e>
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	1c59      	adds	r1, r3, #1
 80020d6:	6179      	str	r1, [r7, #20]
 80020d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	09db      	lsrs	r3, r3, #7
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d8f0      	bhi.n	80020ce <SEGGER_SYSVIEW_Start+0x106>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	617a      	str	r2, [r7, #20]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020fc:	2218      	movs	r2, #24
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fdc7 	bl	8001c94 <_SendPacket>
      RECORD_END();
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <SEGGER_SYSVIEW_Start+0x168>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800211a:	f000 f9c7 	bl	80024ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800211e:	f000 f9b1 	bl	8002484 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002122:	f000 fc4f 	bl	80029c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	; 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20001ac0 	.word	0x20001ac0
 8002134:	0800537c 	.word	0x0800537c
 8002138:	20001af0 	.word	0x20001af0

0800213c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002142:	f3ef 8311 	mrs	r3, BASEPRI
 8002146:	f04f 0120 	mov.w	r1, #32
 800214a:	f381 8811 	msr	BASEPRI, r1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <SEGGER_SYSVIEW_Stop+0x44>)
 8002152:	f7ff fcae 	bl	8001ab2 <_PreparePacket>
 8002156:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <SEGGER_SYSVIEW_Stop+0x48>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002160:	220b      	movs	r2, #11
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f7ff fd95 	bl	8001c94 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SEGGER_SYSVIEW_Stop+0x48>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f383 8811 	msr	BASEPRI, r3
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001af0 	.word	0x20001af0
 8002184:	20001ac0 	.word	0x20001ac0

08002188 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800218e:	f3ef 8311 	mrs	r3, BASEPRI
 8002192:	f04f 0120 	mov.w	r1, #32
 8002196:	f381 8811 	msr	BASEPRI, r1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4845      	ldr	r0, [pc, #276]	; (80022b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800219e:	f7ff fc88 	bl	8001ab2 <_PreparePacket>
 80021a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b2:	e00b      	b.n	80021cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80021be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	09db      	lsrs	r3, r3, #7
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2b7f      	cmp	r3, #127	; 0x7f
 80021d0:	d8f0      	bhi.n	80021b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	e00b      	b.n	8002206 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1c59      	adds	r1, r3, #1
 80021f6:	6279      	str	r1, [r7, #36]	; 0x24
 80021f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	09db      	lsrs	r3, r3, #7
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2b7f      	cmp	r3, #127	; 0x7f
 800220a:	d8f0      	bhi.n	80021ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	627a      	str	r2, [r7, #36]	; 0x24
 8002212:	6a3a      	ldr	r2, [r7, #32]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e00b      	b.n	8002240 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1c59      	adds	r1, r3, #1
 8002230:	61f9      	str	r1, [r7, #28]
 8002232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	09db      	lsrs	r3, r3, #7
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b7f      	cmp	r3, #127	; 0x7f
 8002244:	d8f0      	bhi.n	8002228 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	61fa      	str	r2, [r7, #28]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e00b      	b.n	8002278 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	6179      	str	r1, [r7, #20]
 800226a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	09db      	lsrs	r3, r3, #7
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b7f      	cmp	r3, #127	; 0x7f
 800227c:	d8f0      	bhi.n	8002260 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	617a      	str	r2, [r7, #20]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800228e:	2218      	movs	r2, #24
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f7ff fcfe 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	4798      	blx	r3
  }
}
 80022ac:	bf00      	nop
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20001af0 	.word	0x20001af0
 80022b8:	20001ac0 	.word	0x20001ac0

080022bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b092      	sub	sp, #72	; 0x48
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80022c4:	f3ef 8311 	mrs	r3, BASEPRI
 80022c8:	f04f 0120 	mov.w	r1, #32
 80022cc:	f381 8811 	msr	BASEPRI, r1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	486a      	ldr	r0, [pc, #424]	; (800247c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80022d4:	f7ff fbed 	bl	8001ab2 <_PreparePacket>
 80022d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b66      	ldr	r3, [pc, #408]	; (8002480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
 80022ee:	e00b      	b.n	8002308 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	6479      	str	r1, [r7, #68]	; 0x44
 80022fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002304:	09db      	lsrs	r3, r3, #7
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
 8002308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230a:	2b7f      	cmp	r3, #127	; 0x7f
 800230c:	d8f0      	bhi.n	80022f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	647a      	str	r2, [r7, #68]	; 0x44
 8002314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
 8002328:	e00b      	b.n	8002342 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	b2da      	uxtb	r2, r3
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	09db      	lsrs	r3, r3, #7
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	2b7f      	cmp	r3, #127	; 0x7f
 8002346:	d8f0      	bhi.n	800232a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800234e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	4619      	mov	r1, r3
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fb59 	bl	8001a18 <_EncodeStr>
 8002366:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002368:	2209      	movs	r2, #9
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	6938      	ldr	r0, [r7, #16]
 800236e:	f7ff fc91 	bl	8001c94 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b40      	ldr	r3, [pc, #256]	; (8002480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
 8002386:	e00b      	b.n	80023a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	b2da      	uxtb	r2, r3
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	6379      	str	r1, [r7, #52]	; 0x34
 8002392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	09db      	lsrs	r3, r3, #7
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	2b7f      	cmp	r3, #127	; 0x7f
 80023a4:	d8f0      	bhi.n	8002388 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	637a      	str	r2, [r7, #52]	; 0x34
 80023ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c0:	e00b      	b.n	80023da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	1c59      	adds	r1, r3, #1
 80023ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80023cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	09db      	lsrs	r3, r3, #7
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	2b7f      	cmp	r3, #127	; 0x7f
 80023de:	d8f0      	bhi.n	80023c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	e00b      	b.n	8002414 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	6279      	str	r1, [r7, #36]	; 0x24
 8002406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	09db      	lsrs	r3, r3, #7
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	2b7f      	cmp	r3, #127	; 0x7f
 8002418:	d8f0      	bhi.n	80023fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	627a      	str	r2, [r7, #36]	; 0x24
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	e00b      	b.n	800244c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	1c59      	adds	r1, r3, #1
 800243c:	61f9      	str	r1, [r7, #28]
 800243e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	09db      	lsrs	r3, r3, #7
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b7f      	cmp	r3, #127	; 0x7f
 8002450:	d8f0      	bhi.n	8002434 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	61fa      	str	r2, [r7, #28]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002462:	2215      	movs	r2, #21
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	f7ff fc14 	bl	8001c94 <_SendPacket>
  RECORD_END();
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f383 8811 	msr	BASEPRI, r3
}
 8002472:	bf00      	nop
 8002474:	3748      	adds	r7, #72	; 0x48
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20001af0 	.word	0x20001af0
 8002480:	20001ac0 	.word	0x20001ac0

08002484 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4798      	blx	r3
  }
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20001ac0 	.word	0x20001ac0

080024ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4798      	blx	r3
 80024cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80024d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80024d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	000a      	movs	r2, r1
 80024e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80024e2:	4613      	mov	r3, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4621      	mov	r1, r4
 80024e8:	200d      	movs	r0, #13
 80024ea:	f7ff fd13 	bl	8001f14 <SEGGER_SYSVIEW_RecordU32x2>
 80024ee:	e006      	b.n	80024fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	200c      	movs	r0, #12
 80024f8:	f7ff fcd0 	bl	8001e9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	20001ac0 	.word	0x20001ac0
 800250c:	e0001004 	.word	0xe0001004

08002510 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002516:	f3ef 8311 	mrs	r3, BASEPRI
 800251a:	f04f 0120 	mov.w	r1, #32
 800251e:	f381 8811 	msr	BASEPRI, r1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4819      	ldr	r0, [pc, #100]	; (800258c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002526:	f7ff fac4 	bl	8001ab2 <_PreparePacket>
 800252a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002538:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e00b      	b.n	800255c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	6179      	str	r1, [r7, #20]
 800254e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	09db      	lsrs	r3, r3, #7
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b7f      	cmp	r3, #127	; 0x7f
 8002560:	d8f0      	bhi.n	8002544 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	617a      	str	r2, [r7, #20]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002572:	2202      	movs	r2, #2
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68b8      	ldr	r0, [r7, #8]
 8002578:	f7ff fb8c 	bl	8001c94 <_SendPacket>
  RECORD_END();
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f383 8811 	msr	BASEPRI, r3
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20001af0 	.word	0x20001af0
 8002590:	e000ed04 	.word	0xe000ed04

08002594 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800259a:	f3ef 8311 	mrs	r3, BASEPRI
 800259e:	f04f 0120 	mov.w	r1, #32
 80025a2:	f381 8811 	msr	BASEPRI, r1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80025aa:	f7ff fa82 	bl	8001ab2 <_PreparePacket>
 80025ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80025b0:	2203      	movs	r2, #3
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f7ff fb6d 	bl	8001c94 <_SendPacket>
  RECORD_END();
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f383 8811 	msr	BASEPRI, r3
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20001af0 	.word	0x20001af0

080025cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80025d2:	f3ef 8311 	mrs	r3, BASEPRI
 80025d6:	f04f 0120 	mov.w	r1, #32
 80025da:	f381 8811 	msr	BASEPRI, r1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	4807      	ldr	r0, [pc, #28]	; (8002600 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80025e2:	f7ff fa66 	bl	8001ab2 <_PreparePacket>
 80025e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80025e8:	2212      	movs	r2, #18
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6838      	ldr	r0, [r7, #0]
 80025ee:	f7ff fb51 	bl	8001c94 <_SendPacket>
  RECORD_END();
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f383 8811 	msr	BASEPRI, r3
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20001af0 	.word	0x20001af0

08002604 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800260a:	f3ef 8311 	mrs	r3, BASEPRI
 800260e:	f04f 0120 	mov.w	r1, #32
 8002612:	f381 8811 	msr	BASEPRI, r1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	4807      	ldr	r0, [pc, #28]	; (8002638 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800261a:	f7ff fa4a 	bl	8001ab2 <_PreparePacket>
 800261e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002620:	2211      	movs	r2, #17
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f7ff fb35 	bl	8001c94 <_SendPacket>
  RECORD_END();
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f383 8811 	msr	BASEPRI, r3
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20001af0 	.word	0x20001af0

0800263c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002644:	f3ef 8311 	mrs	r3, BASEPRI
 8002648:	f04f 0120 	mov.w	r1, #32
 800264c:	f381 8811 	msr	BASEPRI, r1
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	4819      	ldr	r0, [pc, #100]	; (80026b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002654:	f7ff fa2d 	bl	8001ab2 <_PreparePacket>
 8002658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	e00b      	b.n	800268a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	61f9      	str	r1, [r7, #28]
 800267c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	09db      	lsrs	r3, r3, #7
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b7f      	cmp	r3, #127	; 0x7f
 800268e:	d8f0      	bhi.n	8002672 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	61fa      	str	r2, [r7, #28]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80026a0:	2208      	movs	r2, #8
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f7ff faf5 	bl	8001c94 <_SendPacket>
  RECORD_END();
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f383 8811 	msr	BASEPRI, r3
}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20001af0 	.word	0x20001af0
 80026bc:	20001ac0 	.word	0x20001ac0

080026c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80026c8:	f3ef 8311 	mrs	r3, BASEPRI
 80026cc:	f04f 0120 	mov.w	r1, #32
 80026d0:	f381 8811 	msr	BASEPRI, r1
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	4819      	ldr	r0, [pc, #100]	; (800273c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80026d8:	f7ff f9eb 	bl	8001ab2 <_PreparePacket>
 80026dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e00b      	b.n	800270e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	61f9      	str	r1, [r7, #28]
 8002700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	09db      	lsrs	r3, r3, #7
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b7f      	cmp	r3, #127	; 0x7f
 8002712:	d8f0      	bhi.n	80026f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	61fa      	str	r2, [r7, #28]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002724:	2204      	movs	r2, #4
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6938      	ldr	r0, [r7, #16]
 800272a:	f7ff fab3 	bl	8001c94 <_SendPacket>
  RECORD_END();
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f383 8811 	msr	BASEPRI, r3
}
 8002734:	bf00      	nop
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20001af0 	.word	0x20001af0
 8002740:	20001ac0 	.word	0x20001ac0

08002744 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800274c:	f3ef 8311 	mrs	r3, BASEPRI
 8002750:	f04f 0120 	mov.w	r1, #32
 8002754:	f381 8811 	msr	BASEPRI, r1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	4819      	ldr	r0, [pc, #100]	; (80027c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800275c:	f7ff f9a9 	bl	8001ab2 <_PreparePacket>
 8002760:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e00b      	b.n	8002792 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	61f9      	str	r1, [r7, #28]
 8002784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	09db      	lsrs	r3, r3, #7
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b7f      	cmp	r3, #127	; 0x7f
 8002796:	d8f0      	bhi.n	800277a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	61fa      	str	r2, [r7, #28]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80027a8:	2206      	movs	r2, #6
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f7ff fa71 	bl	8001c94 <_SendPacket>
  RECORD_END();
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f383 8811 	msr	BASEPRI, r3
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20001af0 	.word	0x20001af0
 80027c4:	20001ac0 	.word	0x20001ac0

080027c8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80027d2:	f3ef 8311 	mrs	r3, BASEPRI
 80027d6:	f04f 0120 	mov.w	r1, #32
 80027da:	f381 8811 	msr	BASEPRI, r1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	4827      	ldr	r0, [pc, #156]	; (8002880 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80027e2:	f7ff f966 	bl	8001ab2 <_PreparePacket>
 80027e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	e00b      	b.n	8002818 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1c59      	adds	r1, r3, #1
 8002808:	6279      	str	r1, [r7, #36]	; 0x24
 800280a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	09db      	lsrs	r3, r3, #7
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b7f      	cmp	r3, #127	; 0x7f
 800281c:	d8f0      	bhi.n	8002800 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	627a      	str	r2, [r7, #36]	; 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e00b      	b.n	8002850 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	61f9      	str	r1, [r7, #28]
 8002842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	09db      	lsrs	r3, r3, #7
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b7f      	cmp	r3, #127	; 0x7f
 8002854:	d8f0      	bhi.n	8002838 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	61fa      	str	r2, [r7, #28]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002866:	2207      	movs	r2, #7
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	6938      	ldr	r0, [r7, #16]
 800286c:	f7ff fa12 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f383 8811 	msr	BASEPRI, r3
}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20001af0 	.word	0x20001af0
 8002884:	20001ac0 	.word	0x20001ac0

08002888 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d06d      	beq.n	8002976 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a4:	e008      	b.n	80028b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	3301      	adds	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3f2      	bcc.n	80028a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80028c0:	e000      	b.n	80028c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80028c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d055      	beq.n	8002976 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80028ca:	f3ef 8311 	mrs	r3, BASEPRI
 80028ce:	f04f 0120 	mov.w	r1, #32
 80028d2:	f381 8811 	msr	BASEPRI, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	482a      	ldr	r0, [pc, #168]	; (8002984 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80028da:	f7ff f8ea 	bl	8001ab2 <_PreparePacket>
 80028de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	e00b      	b.n	8002906 <SEGGER_SYSVIEW_SendModule+0x7e>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	6279      	str	r1, [r7, #36]	; 0x24
 80028f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	09db      	lsrs	r3, r3, #7
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2b7f      	cmp	r3, #127	; 0x7f
 800290a:	d8f0      	bhi.n	80028ee <SEGGER_SYSVIEW_SendModule+0x66>
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	627a      	str	r2, [r7, #36]	; 0x24
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e00b      	b.n	8002940 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	61f9      	str	r1, [r7, #28]
 8002932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	09db      	lsrs	r3, r3, #7
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b7f      	cmp	r3, #127	; 0x7f
 8002944:	d8f0      	bhi.n	8002928 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	61fa      	str	r2, [r7, #28]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4619      	mov	r1, r3
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff f85a 	bl	8001a18 <_EncodeStr>
 8002964:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002966:	2216      	movs	r2, #22
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	6938      	ldr	r0, [r7, #16]
 800296c:	f7ff f992 	bl	8001c94 <_SendPacket>
      RECORD_END();
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002976:	bf00      	nop
 8002978:	3730      	adds	r7, #48	; 0x30
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20001ae8 	.word	0x20001ae8
 8002984:	20001af0 	.word	0x20001af0

08002988 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f2      	bne.n	800299c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20001ae8 	.word	0x20001ae8

080029c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80029ca:	f3ef 8311 	mrs	r3, BASEPRI
 80029ce:	f04f 0120 	mov.w	r1, #32
 80029d2:	f381 8811 	msr	BASEPRI, r1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4817      	ldr	r0, [pc, #92]	; (8002a38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80029da:	f7ff f86a 	bl	8001ab2 <_PreparePacket>
 80029de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e00b      	b.n	8002a08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	6179      	str	r1, [r7, #20]
 80029fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	09db      	lsrs	r3, r3, #7
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a0c:	d8f0      	bhi.n	80029f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	617a      	str	r2, [r7, #20]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002a1e:	221b      	movs	r2, #27
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f7ff f936 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f383 8811 	msr	BASEPRI, r3
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20001af0 	.word	0x20001af0
 8002a3c:	20001aec 	.word	0x20001aec

08002a40 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a48:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4c:	f04f 0120 	mov.w	r1, #32
 8002a50:	f381 8811 	msr	BASEPRI, r1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4827      	ldr	r0, [pc, #156]	; (8002af4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8002a58:	f7ff f82b 	bl	8001ab2 <_PreparePacket>
 8002a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6938      	ldr	r0, [r7, #16]
 8002a64:	f7fe ffd8 	bl	8001a18 <_EncodeStr>
 8002a68:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	2301      	movs	r3, #1
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	e00b      	b.n	8002a8c <SEGGER_SYSVIEW_Warn+0x4c>
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	6279      	str	r1, [r7, #36]	; 0x24
 8002a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	09db      	lsrs	r3, r3, #7
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a90:	d8f0      	bhi.n	8002a74 <SEGGER_SYSVIEW_Warn+0x34>
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	627a      	str	r2, [r7, #36]	; 0x24
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e00b      	b.n	8002ac4 <SEGGER_SYSVIEW_Warn+0x84>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	61f9      	str	r1, [r7, #28]
 8002ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	09db      	lsrs	r3, r3, #7
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac8:	d8f0      	bhi.n	8002aac <SEGGER_SYSVIEW_Warn+0x6c>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	61fa      	str	r2, [r7, #28]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002ada:	221a      	movs	r2, #26
 8002adc:	68f9      	ldr	r1, [r7, #12]
 8002ade:	6938      	ldr	r0, [r7, #16]
 8002ae0:	f7ff f8d8 	bl	8001c94 <_SendPacket>
  RECORD_END();
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f383 8811 	msr	BASEPRI, r3
}
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20001af0 	.word	0x20001af0

08002af8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f023 0218 	bic.w	r2, r3, #24
 8002b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5e:	f000 faa7 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b62:	f000 f869 	bl	8002c38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b66:	f000 f8bb 	bl	8002ce0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b6a:	f000 f8d7 	bl	8002d1c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter for Arm Cortex M3/M4 processor register

  DWT_CTRL |= (1 << 0);
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <main+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <main+0xc4>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]

  // Call Segger APIs to start tracing
 // SEGGER_SYSVIEW_Conf();
 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(GreenLedHandler,
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	22c8      	movs	r2, #200	; 0xc8
 8002b88:	4925      	ldr	r1, [pc, #148]	; (8002c20 <main+0xc8>)
 8002b8a:	4826      	ldr	r0, [pc, #152]	; (8002c24 <main+0xcc>)
 8002b8c:	f7fd fbf6 	bl	800037c <xTaskCreate>
 8002b90:	61f8      	str	r0, [r7, #28]
		  200,
		  NULL,
		  2,
		  &gLedHandle);

  configASSERT(status == pdPASS);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d00a      	beq.n	8002bae <main+0x56>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <main+0x54>

  status = xTaskCreate(BlueLedHandler,
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	22c8      	movs	r2, #200	; 0xc8
 8002bbc:	491a      	ldr	r1, [pc, #104]	; (8002c28 <main+0xd0>)
 8002bbe:	481b      	ldr	r0, [pc, #108]	; (8002c2c <main+0xd4>)
 8002bc0:	f7fd fbdc 	bl	800037c <xTaskCreate>
 8002bc4:	61f8      	str	r0, [r7, #28]
		  200,
		  NULL,
		  2,
		  &bLedHandle);

  configASSERT(status == pdPASS);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d00a      	beq.n	8002be2 <main+0x8a>
        __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	617b      	str	r3, [r7, #20]
    }
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <main+0x88>

  status = xTaskCreate(RedLedHandler,
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	2302      	movs	r3, #2
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	22c8      	movs	r2, #200	; 0xc8
 8002bee:	4910      	ldr	r1, [pc, #64]	; (8002c30 <main+0xd8>)
 8002bf0:	4810      	ldr	r0, [pc, #64]	; (8002c34 <main+0xdc>)
 8002bf2:	f7fd fbc3 	bl	800037c <xTaskCreate>
 8002bf6:	61f8      	str	r0, [r7, #28]
		  200,
		  NULL,
		  2,
		  &rLedHandle);

  configASSERT(status == pdPASS);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00a      	beq.n	8002c14 <main+0xbc>
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	613b      	str	r3, [r7, #16]
    }
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <main+0xba>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8002c14:	f7fd fd98 	bl	8000748 <vTaskStartScheduler>
  // -- END --
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <main+0xc0>
 8002c1a:	bf00      	nop
 8002c1c:	e0001000 	.word	0xe0001000
 8002c20:	08005324 	.word	0x08005324
 8002c24:	08002dfd 	.word	0x08002dfd
 8002c28:	08005338 	.word	0x08005338
 8002c2c:	08002dcd 	.word	0x08002dcd
 8002c30:	0800534c 	.word	0x0800534c
 8002c34:	08002e2d 	.word	0x08002e2d

08002c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b098      	sub	sp, #96	; 0x60
 8002c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	2244      	movs	r2, #68	; 0x44
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fb1c 	bl	8005284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c5e:	f000 fced 	bl	800363c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7ff ff48 	bl	8002af8 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002c68:	2327      	movs	r3, #39	; 0x27
 8002c6a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002c84:	2300      	movs	r3, #0
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c88:	2360      	movs	r3, #96	; 0x60
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f82f 	bl	8003cf8 <HAL_RCC_OscConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002ca0:	f000 f8ee 	bl	8002e80 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002ca4:	236f      	movs	r3, #111	; 0x6f
 8002ca6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fb4d 	bl	8004364 <HAL_RCC_ClockConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002cd0:	f000 f8d6 	bl	8002e80 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002cd4:	f002 f829 	bl	8004d2a <HAL_RCCEx_EnableMSIPLLMode>
}
 8002cd8:	bf00      	nop
 8002cda:	3760      	adds	r7, #96	; 0x60
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	2230      	movs	r2, #48	; 0x30
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fac9 	bl	8005284 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8002cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 ff1b 	bl	8004b3e <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8002d0e:	f000 f8b7 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d12:	bf00      	nop
 8002d14:	3730      	adds	r7, #48	; 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d30:	2004      	movs	r0, #4
 8002d32:	f7ff fef7 	bl	8002b24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7ff fef4 	bl	8002b24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f7ff fef1 	bl	8002b24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d42:	2010      	movs	r0, #16
 8002d44:	f7ff feee 	bl	8002b24 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2123      	movs	r1, #35	; 0x23
 8002d4c:	481d      	ldr	r0, [pc, #116]	; (8002dc4 <MX_GPIO_Init+0xa8>)
 8002d4e:	f000 fc43 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f000 facf 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d88:	f000 fabe 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002d8c:	2323      	movs	r3, #35	; 0x23
 8002d8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <MX_GPIO_Init+0xa8>)
 8002da2:	f000 fab1 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8002da6:	2310      	movs	r3, #16
 8002da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <MX_GPIO_Init+0xac>)
 8002db8:	f000 faa6 	bl	8003308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	48000400 	.word	0x48000400
 8002dc8:	48001000 	.word	0x48001000

08002dcc <BlueLedHandler>:

/* USER CODE BEGIN 4 */

static void BlueLedHandler(void* param)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1000);
 8002dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd8:	60fb      	str	r3, [r7, #12]

	// One time initialization
	xLastWakeTime = xTaskGetTickCount();
 8002dda:	f7fd fdbf 	bl	800095c <xTaskGetTickCount>
 8002dde:	4603      	mov	r3, r0
 8002de0:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling blue led");
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 8002de2:	2120      	movs	r1, #32
 8002de4:	4804      	ldr	r0, [pc, #16]	; (8002df8 <BlueLedHandler+0x2c>)
 8002de6:	f000 fc0f 	bl	8003608 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&xLastWakeTime,xFrequency);
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fc27 	bl	8000644 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 8002df6:	e7f4      	b.n	8002de2 <BlueLedHandler+0x16>
 8002df8:	48000400 	.word	0x48000400

08002dfc <GreenLedHandler>:
	}
}


static void GreenLedHandler(void* param)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(800);
 8002e04:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e08:	60fb      	str	r3, [r7, #12]

	// One time initialization
	xLastWakeTime = xTaskGetTickCount();
 8002e0a:	f7fd fda7 	bl	800095c <xTaskGetTickCount>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 8002e12:	2101      	movs	r1, #1
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <GreenLedHandler+0x2c>)
 8002e16:	f000 fbf7 	bl	8003608 <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		//vTaskDelay(pdMS_TO_TICKS(800));
		vTaskDelayUntil(&xLastWakeTime,xFrequency);
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fc0f 	bl	8000644 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 8002e26:	e7f4      	b.n	8002e12 <GreenLedHandler+0x16>
 8002e28:	48000400 	.word	0x48000400

08002e2c <RedLedHandler>:
	}
}


static void RedLedHandler(void* param)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(400);
 8002e34:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e38:	60fb      	str	r3, [r7, #12]

	// One time initialization
	xLastWakeTime = xTaskGetTickCount();
 8002e3a:	f7fd fd8f 	bl	800095c <xTaskGetTickCount>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8002e42:	2102      	movs	r1, #2
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <RedLedHandler+0x2c>)
 8002e46:	f000 fbdf 	bl	8003608 <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		//vTaskDelay(pdMS_TO_TICKS(400));
		vTaskDelayUntil(&xLastWakeTime,xFrequency);
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fbf7 	bl	8000644 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8002e56:	e7f4      	b.n	8002e42 <RedLedHandler+0x16>
 8002e58:	48000400 	.word	0x48000400

08002e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e6e:	f000 f93f 	bl	80030f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40012c00 	.word	0x40012c00

08002e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e84:	b672      	cpsid	i
}
 8002e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <Error_Handler+0x8>

08002e8a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	// Initialize manually before creating Tasks. Normally it is done by the scheduler.
	vInitPrioGroupValue();
 8002e8e:	f7fe f8f3 	bl	8001078 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	2019      	movs	r0, #25
 8002ede:	f000 f9eb 	bl	80032b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ee2:	2019      	movs	r0, #25
 8002ee4:	f000 fa02 	bl	80032ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ee8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002eec:	f7ff ffd3 	bl	8002e96 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ef0:	f107 0208 	add.w	r2, r7, #8
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fc08 	bl	8004710 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f00:	f001 fbf0 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 8002f04:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_InitTick+0x8c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	3b01      	subs	r3, #1
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_InitTick+0x90>)
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_InitTick+0x94>)
 8002f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_InitTick+0x90>)
 8002f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f22:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <HAL_InitTick+0x90>)
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_InitTick+0x90>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_InitTick+0x90>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002f34:	4808      	ldr	r0, [pc, #32]	; (8002f58 <HAL_InitTick+0x90>)
 8002f36:	f001 fefe 	bl	8004d36 <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <HAL_InitTick+0x90>)
 8002f42:	f001 ff59 	bl	8004df8 <HAL_TIM_Base_Start_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3730      	adds	r7, #48	; 0x30
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	431bde83 	.word	0x431bde83
 8002f58:	20001bd4 	.word	0x20001bd4
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <NMI_Handler+0x4>

08002f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <HardFault_Handler+0x4>

08002f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <MemManage_Handler+0x4>

08002f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <BusFault_Handler+0x4>

08002f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <UsageFault_Handler+0x4>

08002f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <TIM1_UP_IRQHandler+0x10>)
 8002f92:	f001 ff7f 	bl	8004e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20001bd4 	.word	0x20001bd4

08002fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002fa4:	4b22      	ldr	r3, [pc, #136]	; (8003030 <SystemInit+0x90>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <SystemInit+0x90>)
 8002fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002fcc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd8:	4b16      	ldr	r3, [pc, #88]	; (8003034 <SystemInit+0x94>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fea:	f023 0305 	bic.w	r3, r3, #5
 8002fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <SystemInit+0x98>)
 800300c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	faf6fefb 	.word	0xfaf6fefb
 8003038:	22041000 	.word	0x22041000

0800303c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800303c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003040:	3304      	adds	r3, #4

08003042 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003042:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003044:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003046:	d3f9      	bcc.n	800303c <CopyDataInit>
  bx lr
 8003048:	4770      	bx	lr

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800304a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800304c:	3004      	adds	r0, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800304e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>
  bx lr
 8003052:	4770      	bx	lr

08003054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003054:	480c      	ldr	r0, [pc, #48]	; (8003088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003056:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003058:	f7ff ffa2 	bl	8002fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800305c:	480b      	ldr	r0, [pc, #44]	; (800308c <LoopForever+0x6>)
 800305e:	490c      	ldr	r1, [pc, #48]	; (8003090 <LoopForever+0xa>)
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <LoopForever+0xe>)
 8003062:	2300      	movs	r3, #0
 8003064:	f7ff ffed 	bl	8003042 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <LoopForever+0x12>)
 800306a:	490c      	ldr	r1, [pc, #48]	; (800309c <LoopForever+0x16>)
 800306c:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <LoopForever+0x1a>)
 800306e:	2300      	movs	r3, #0
 8003070:	f7ff ffe7 	bl	8003042 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <LoopForever+0x1e>)
 8003076:	490c      	ldr	r1, [pc, #48]	; (80030a8 <LoopForever+0x22>)
 8003078:	2300      	movs	r3, #0
 800307a:	f7ff ffe8 	bl	800304e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800307e:	f002 f8bf 	bl	8005200 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003082:	f7ff fd69 	bl	8002b58 <main>

08003086 <LoopForever>:

LoopForever:
  b LoopForever
 8003086:	e7fe      	b.n	8003086 <LoopForever>
  ldr   r0, =_estack
 8003088:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800308c:	20000008 	.word	0x20000008
 8003090:	2000001c 	.word	0x2000001c
 8003094:	08005430 	.word	0x08005430
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003098:	20030000 	.word	0x20030000
 800309c:	20030000 	.word	0x20030000
 80030a0:	08005444 	.word	0x08005444
  INIT_BSS _sbss, _ebss
 80030a4:	2000001c 	.word	0x2000001c
 80030a8:	20001c24 	.word	0x20001c24

080030ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC1_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <HAL_Init+0x3c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <HAL_Init+0x3c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c6:	2003      	movs	r0, #3
 80030c8:	f000 f8eb 	bl	80032a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030cc:	200f      	movs	r0, #15
 80030ce:	f7ff fefb 	bl	8002ec8 <HAL_InitTick>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	e001      	b.n	80030e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030de:	f7ff fed4 	bl	8002e8a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e2:	79fb      	ldrb	r3, [r7, #7]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	58004000 	.word	0x58004000

080030f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000018 	.word	0x20000018
 8003114:	20001c20 	.word	0x20001c20

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20001c20 	.word	0x20001c20

08003130 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_GetTickPrio+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000014 	.word	0x20000014

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60d3      	str	r3, [r2, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4907      	ldr	r1, [pc, #28]	; (80031e4 <__NVIC_EnableIRQ+0x38>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000e100 	.word	0xe000e100

080031e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0a      	blt.n	8003212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <__NVIC_SetPriority+0x4c>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	440b      	add	r3, r1
 800320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003210:	e00a      	b.n	8003228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4908      	ldr	r1, [pc, #32]	; (8003238 <__NVIC_SetPriority+0x50>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3b04      	subs	r3, #4
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	440b      	add	r3, r1
 8003226:	761a      	strb	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000e100 	.word	0xe000e100
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf28      	it	cs
 800325a:	2304      	movcs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3304      	adds	r3, #4
 8003262:	2b06      	cmp	r3, #6
 8003264:	d902      	bls.n	800326c <NVIC_EncodePriority+0x30>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3b03      	subs	r3, #3
 800326a:	e000      	b.n	800326e <NVIC_EncodePriority+0x32>
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43d9      	mvns	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	4313      	orrs	r3, r2
         );
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ff4c 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c6:	f7ff ff63 	bl	8003190 <__NVIC_GetPriorityGrouping>
 80032ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	6978      	ldr	r0, [r7, #20]
 80032d2:	f7ff ffb3 	bl	800323c <NVIC_EncodePriority>
 80032d6:	4602      	mov	r2, r0
 80032d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff82 	bl	80031e8 <__NVIC_SetPriority>
}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff56 	bl	80031ac <__NVIC_EnableIRQ>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003316:	e146      	b.n	80035a6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8138 	beq.w	80035a0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d005      	beq.n	8003348 <HAL_GPIO_Init+0x40>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d130      	bne.n	80033aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800337e:	2201      	movs	r2, #1
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0201 	and.w	r2, r3, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d017      	beq.n	80033e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	2203      	movs	r2, #3
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d123      	bne.n	800343a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	08da      	lsrs	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3208      	adds	r2, #8
 8003434:	6939      	ldr	r1, [r7, #16]
 8003436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0203 	and.w	r2, r3, #3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8092 	beq.w	80035a0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800347c:	4a51      	ldr	r2, [pc, #324]	; (80035c4 <HAL_GPIO_Init+0x2bc>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a6:	d013      	beq.n	80034d0 <HAL_GPIO_Init+0x1c8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a47      	ldr	r2, [pc, #284]	; (80035c8 <HAL_GPIO_Init+0x2c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00d      	beq.n	80034cc <HAL_GPIO_Init+0x1c4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a46      	ldr	r2, [pc, #280]	; (80035cc <HAL_GPIO_Init+0x2c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <HAL_GPIO_Init+0x1c0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a45      	ldr	r2, [pc, #276]	; (80035d0 <HAL_GPIO_Init+0x2c8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_GPIO_Init+0x1bc>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e006      	b.n	80034d2 <HAL_GPIO_Init+0x1ca>
 80034c4:	2307      	movs	r3, #7
 80034c6:	e004      	b.n	80034d2 <HAL_GPIO_Init+0x1ca>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x1ca>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_GPIO_Init+0x1ca>
 80034d0:	2300      	movs	r3, #0
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_GPIO_Init+0x2bc>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034f0:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003514:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800351a:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 8003574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_GPIO_Init+0x2cc>)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f aeb1 	bne.w	8003318 <HAL_GPIO_Init+0x10>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40010000 	.word	0x40010000
 80035c8:	48000400 	.word	0x48000400
 80035cc:	48000800 	.word	0x48000800
 80035d0:	48001000 	.word	0x48001000
 80035d4:	58000800 	.word	0x58000800

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e8:	787b      	ldrb	r3, [r7, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	041a      	lsls	r2, r3, #16
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43d9      	mvns	r1, r3
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	400b      	ands	r3, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	58000400 	.word	0x58000400

0800365c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366e:	d101      	bne.n	8003674 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <LL_RCC_HSE_Enable>:
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_RCC_HSE_Disable>:
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_RCC_HSE_IsReady>:
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ce:	d101      	bne.n	80036d4 <LL_RCC_HSE_IsReady+0x18>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <LL_RCC_HSE_IsReady+0x1a>
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_HSI_Enable>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_RCC_HSI_Disable>:
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_RCC_HSI_IsReady>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d101      	bne.n	8003734 <LL_RCC_HSI_IsReady+0x18>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <LL_RCC_HSI_IsReady+0x1a>
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_RCC_LSE_Enable>:
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_RCC_LSE_Disable>:
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_LSE_EnableBypass>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_RCC_LSE_DisableBypass>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d101      	bne.n	800380a <LL_RCC_LSE_IsReady+0x18>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_RCC_LSE_IsReady+0x1a>
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d101      	bne.n	8003872 <LL_RCC_LSI1_IsReady+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_RCC_LSI1_IsReady+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d101      	bne.n	80038da <LL_RCC_LSI2_IsReady+0x18>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_RCC_LSI2_IsReady+0x1a>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d101      	bne.n	8003966 <LL_RCC_MSI_IsReady+0x16>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_RCC_MSI_IsReady+0x18>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2bb0      	cmp	r3, #176	; 0xb0
 80039b0:	d901      	bls.n	80039b6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80039b2:	23b0      	movs	r3, #176	; 0xb0
 80039b4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 0203 	bic.w	r2, r3, #3
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a92:	f023 020f 	bic.w	r2, r3, #15
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bcc:	d101      	bne.n	8003bd2 <LL_RCC_PLL_IsReady+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_RCC_PLL_IsReady+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0303 	and.w	r3, r3, #3
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d101      	bne.n	8003c58 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c78:	d101      	bne.n	8003c7e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9e:	d101      	bne.n	8003ca4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc2:	d101      	bne.n	8003cc8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce6:	d101      	bne.n	8003cec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf8:	b590      	push	{r4, r7, lr}
 8003cfa:	b08d      	sub	sp, #52	; 0x34
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e324      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 808d 	beq.w	8003e32 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d18:	f7ff fe7d 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1e:	f7ff ff83 	bl	8003c28 <LL_RCC_PLL_GetMainSource>
 8003d22:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x3e>
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d147      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d144      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e308      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d46:	f7ff fe28 	bl	800399a <LL_RCC_MSI_GetRange>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	d914      	bls.n	8003d7a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fd0d 	bl	8004774 <RCC_SetFlashLatencyFromMSIRange>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e2f7      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fe02 	bl	8003972 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fe26 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>
 8003d78:	e013      	b.n	8003da2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fdf7 	bl	8003972 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fe1b 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fcee 	bl	8004774 <RCC_SetFlashLatencyFromMSIRange>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e2d8      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003da2:	f000 fc8b 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4aa4      	ldr	r2, [pc, #656]	; (800403c <HAL_RCC_OscConfig+0x344>)
 8003daa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dac:	4ba4      	ldr	r3, [pc, #656]	; (8004040 <HAL_RCC_OscConfig+0x348>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f889 	bl	8002ec8 <HAL_InitTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d039      	beq.n	8003e30 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e2c9      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01e      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dc8:	f7ff fda4 	bl	8003914 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dcc:	f7ff f9a4 	bl	8003118 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd4:	f7ff f9a0 	bl	8003118 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e2b6      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003de6:	f7ff fdb3 	bl	8003950 <LL_RCC_MSI_IsReady>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f1      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fdbc 	bl	8003972 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fde0 	bl	80039c4 <LL_RCC_MSI_SetCalibTrimming>
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e06:	f7ff fd94 	bl	8003932 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e0a:	f7ff f985 	bl	8003118 <HAL_GetTick>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e12:	f7ff f981 	bl	8003118 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e297      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e24:	f7ff fd94 	bl	8003950 <LL_RCC_MSI_IsReady>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f1      	bne.n	8003e12 <HAL_RCC_OscConfig+0x11a>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e30:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d047      	beq.n	8003ece <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3e:	f7ff fdea 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003e42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	f7ff fef0 	bl	8003c28 <LL_RCC_PLL_GetMainSource>
 8003e48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x164>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d108      	bne.n	8003e68 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d134      	bne.n	8003ece <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e275      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d102      	bne.n	8003e78 <HAL_RCC_OscConfig+0x180>
 8003e72:	f7ff fc05 	bl	8003680 <LL_RCC_HSE_Enable>
 8003e76:	e001      	b.n	8003e7c <HAL_RCC_OscConfig+0x184>
 8003e78:	f7ff fc11 	bl	800369e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d012      	beq.n	8003eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7ff f948 	bl	8003118 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7ff f944 	bl	8003118 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e25a      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e9e:	f7ff fc0d 	bl	80036bc <LL_RCC_HSE_IsReady>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f1      	beq.n	8003e8c <HAL_RCC_OscConfig+0x194>
 8003ea8:	e011      	b.n	8003ece <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7ff f935 	bl	8003118 <HAL_GetTick>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb2:	f7ff f931 	bl	8003118 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e247      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ec4:	f7ff fbfa 	bl	80036bc <LL_RCC_HSE_IsReady>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f1      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eda:	f7ff fd9c 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8003ede:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	f7ff fea2 	bl	8003c28 <LL_RCC_PLL_GetMainSource>
 8003ee4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x200>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d10e      	bne.n	8003f10 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e227      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fc19 	bl	8003740 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f0e:	e031      	b.n	8003f74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d019      	beq.n	8003f4c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f18:	f7ff fbe2 	bl	80036e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7ff f8fc 	bl	8003118 <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f24:	f7ff f8f8 	bl	8003118 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e20e      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f36:	f7ff fbf1 	bl	800371c <LL_RCC_HSI_IsReady>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f1      	beq.n	8003f24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fbfb 	bl	8003740 <LL_RCC_HSI_SetCalibTrimming>
 8003f4a:	e013      	b.n	8003f74 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4c:	f7ff fbd7 	bl	80036fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7ff f8e2 	bl	8003118 <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7ff f8de 	bl	8003118 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1f4      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f6a:	f7ff fbd7 	bl	800371c <LL_RCC_HSI_IsReady>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f1      	bne.n	8003f58 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80a3 	beq.w	80040d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d076      	beq.n	8004084 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d046      	beq.n	8004030 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003fa2:	f7ff fc5a 	bl	800385a <LL_RCC_LSI1_IsReady>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d113      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fac:	f7ff fc33 	bl	8003816 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb0:	f7ff f8b2 	bl	8003118 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fb8:	f7ff f8ae 	bl	8003118 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1c4      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fca:	f7ff fc46 	bl	800385a <LL_RCC_LSI1_IsReady>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f1      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003fd4:	f7ff fc53 	bl	800387e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7ff f89e 	bl	8003118 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fe0:	f7ff f89a 	bl	8003118 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e1b0      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003ff2:	f7ff fc66 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f1      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fc70 	bl	80038e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004006:	f7ff fc17 	bl	8003838 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7ff f885 	bl	8003118 <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004012:	f7ff f881 	bl	8003118 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e197      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004024:	f7ff fc19 	bl	800385a <LL_RCC_LSI1_IsReady>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f1      	bne.n	8004012 <HAL_RCC_OscConfig+0x31a>
 800402e:	e051      	b.n	80040d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004030:	f7ff fbf1 	bl	8003816 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7ff f870 	bl	8003118 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800403a:	e00c      	b.n	8004056 <HAL_RCC_OscConfig+0x35e>
 800403c:	20000010 	.word	0x20000010
 8004040:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004044:	f7ff f868 	bl	8003118 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e17e      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004056:	f7ff fc00 	bl	800385a <LL_RCC_LSI1_IsReady>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f1      	beq.n	8004044 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004060:	f7ff fc1e 	bl	80038a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004066:	f7ff f857 	bl	8003118 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b03      	cmp	r3, #3
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e16d      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004078:	f7ff fc23 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f1      	bne.n	8004066 <HAL_RCC_OscConfig+0x36e>
 8004082:	e027      	b.n	80040d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004084:	f7ff fc0c 	bl	80038a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7ff f846 	bl	8003118 <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004090:	f7ff f842 	bl	8003118 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e158      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040a2:	f7ff fc0e 	bl	80038c2 <LL_RCC_LSI2_IsReady>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f1      	bne.n	8004090 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040ac:	f7ff fbc4 	bl	8003838 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7ff f832 	bl	8003118 <HAL_GetTick>
 80040b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040b8:	f7ff f82e 	bl	8003118 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e144      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040ca:	f7ff fbc6 	bl	800385a <LL_RCC_LSI1_IsReady>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f1      	bne.n	80040b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05b      	beq.n	8004198 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e0:	4b9e      	ldr	r3, [pc, #632]	; (800435c <HAL_RCC_OscConfig+0x664>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d114      	bne.n	8004116 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040ec:	f7ff faa6 	bl	800363c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7ff f812 	bl	8003118 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7ff f80e 	bl	8003118 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e124      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410a:	4b94      	ldr	r3, [pc, #592]	; (800435c <HAL_RCC_OscConfig+0x664>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d102      	bne.n	8004124 <HAL_RCC_OscConfig+0x42c>
 800411e:	f7ff fb24 	bl	800376a <LL_RCC_LSE_Enable>
 8004122:	e00c      	b.n	800413e <HAL_RCC_OscConfig+0x446>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d104      	bne.n	8004136 <HAL_RCC_OscConfig+0x43e>
 800412c:	f7ff fb3f 	bl	80037ae <LL_RCC_LSE_EnableBypass>
 8004130:	f7ff fb1b 	bl	800376a <LL_RCC_LSE_Enable>
 8004134:	e003      	b.n	800413e <HAL_RCC_OscConfig+0x446>
 8004136:	f7ff fb29 	bl	800378c <LL_RCC_LSE_Disable>
 800413a:	f7ff fb49 	bl	80037d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fe ffe7 	bl	8003118 <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fe ffe3 	bl	8003118 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0f7      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004164:	f7ff fb45 	bl	80037f2 <LL_RCC_LSE_IsReady>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ef      	beq.n	800414e <HAL_RCC_OscConfig+0x456>
 800416e:	e013      	b.n	8004198 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe ffd2 	bl	8003118 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe ffce 	bl	8003118 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0e2      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800418e:	f7ff fb30 	bl	80037f2 <LL_RCC_LSE_IsReady>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ef      	bne.n	8004178 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80d8 	beq.w	8004352 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	f7ff fc38 	bl	8003a16 <LL_RCC_GetSysClkSource>
 80041a6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f040 80a6 	bne.w	8004306 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0203 	and.w	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d123      	bne.n	8004210 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11c      	bne.n	8004210 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d114      	bne.n	8004210 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10d      	bne.n	8004210 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d054      	beq.n	80042ba <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d04f      	beq.n	80042b6 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004216:	f7ff fcc1 	bl	8003b9c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800421a:	f7fe ff7d 	bl	8003118 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe ff79 	bl	8003118 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e08f      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ef      	bne.n	8004222 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	4b45      	ldr	r3, [pc, #276]	; (8004360 <HAL_RCC_OscConfig+0x668>)
 800424a:	4013      	ands	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004254:	4311      	orrs	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800425a:	0212      	lsls	r2, r2, #8
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004262:	4311      	orrs	r1, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800426e:	430a      	orrs	r2, r1
 8004270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004278:	f7ff fc81 	bl	8003b7e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800428c:	f7fe ff44 	bl	8003118 <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fe ff40 	bl	8003118 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e056      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b4:	e04d      	b.n	8004352 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e04c      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d144      	bne.n	8004352 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042c8:	f7ff fc59 	bl	8003b7e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042dc:	f7fe ff1c 	bl	8003118 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe ff18 	bl	8003118 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e02e      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCC_OscConfig+0x5ec>
 8004304:	e025      	b.n	8004352 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430c:	f7ff fc46 	bl	8003b9c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe ff02 	bl	8003118 <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe fefe 	bl	8003118 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ef      	bne.n	8004318 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	60d3      	str	r3, [r2, #12]
 800434c:	e001      	b.n	8004352 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3734      	adds	r7, #52	; 0x34
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	58000400 	.word	0x58000400
 8004360:	11c1808c 	.word	0x11c1808c

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e12d      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d91b      	bls.n	80043be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b95      	ldr	r3, [pc, #596]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4993      	ldr	r1, [pc, #588]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004396:	f7fe febf 	bl	8003118 <HAL_GetTick>
 800439a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800439e:	f7fe febb 	bl	8003118 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e111      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b0:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d1ef      	bne.n	800439e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fb2d 	bl	8003a2e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043d4:	f7fe fea0 	bl	8003118 <HAL_GetTick>
 80043d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043dc:	f7fe fe9c 	bl	8003118 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0f2      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043ee:	f7ff fc27 	bl	8003c40 <LL_RCC_IsActiveFlag_HPRE>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f1      	beq.n	80043dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d016      	beq.n	8004432 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fb24 	bl	8003a56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800440e:	f7fe fe83 	bl	8003118 <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004416:	f7fe fe7f 	bl	8003118 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0d5      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004428:	f7ff fc1c 	bl	8003c64 <LL_RCC_IsActiveFlag_C2HPRE>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f1      	beq.n	8004416 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fb1d 	bl	8003a82 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004448:	f7fe fe66 	bl	8003118 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004450:	f7fe fe62 	bl	8003118 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0b8      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004462:	f7ff fc12 	bl	8003c8a <LL_RCC_IsActiveFlag_SHDHPRE>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f1      	beq.n	8004450 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d016      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fb17 	bl	8003ab0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004482:	f7fe fe49 	bl	8003118 <HAL_GetTick>
 8004486:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800448a:	f7fe fe45 	bl	8003118 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e09b      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800449c:	f7ff fc08 	bl	8003cb0 <LL_RCC_IsActiveFlag_PPRE1>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f1      	beq.n	800448a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d017      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fb0d 	bl	8003ad8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044be:	f7fe fe2b 	bl	8003118 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044c6:	f7fe fe27 	bl	8003118 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e07d      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044d8:	f7ff fbfc 	bl	8003cd4 <LL_RCC_IsActiveFlag_PPRE2>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f1      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d043      	beq.n	8004576 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80044f6:	f7ff f8e1 	bl	80036bc <LL_RCC_HSE_IsReady>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11e      	bne.n	800453e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e067      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d106      	bne.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800450c:	f7ff fb55 	bl	8003bba <LL_RCC_PLL_IsReady>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d113      	bne.n	800453e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e05c      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004522:	f7ff fa15 	bl	8003950 <LL_RCC_MSI_IsReady>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e051      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004530:	f7ff f8f4 	bl	800371c <LL_RCC_HSI_IsReady>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e04a      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fa53 	bl	80039ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fe fde6 	bl	8003118 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe fde2 	bl	8003118 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e036      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	f7ff fa56 	bl	8003a16 <LL_RCC_GetSysClkSource>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	429a      	cmp	r2, r3
 8004574:	d1ec      	bne.n	8004550 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d21b      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004584:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 0207 	bic.w	r2, r3, #7
 800458c:	4913      	ldr	r1, [pc, #76]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fe fdc0 	bl	8003118 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	e008      	b.n	80045ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800459c:	f7fe fdbc 	bl	8003118 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e012      	b.n	80045d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x278>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1ef      	bne.n	800459c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045bc:	f000 f87e 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <HAL_RCC_ClockConfig+0x27c>)
 80045c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80045c6:	f7fe fdb3 	bl	8003130 <HAL_GetTickPrio>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fc7b 	bl	8002ec8 <HAL_InitTick>
 80045d2:	4603      	mov	r3, r0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	58004000 	.word	0x58004000
 80045e0:	20000010 	.word	0x20000010

080045e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ea:	f7ff fa14 	bl	8003a16 <LL_RCC_GetSysClkSource>
 80045ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80045f6:	f7ff f9d0 	bl	800399a <LL_RCC_MSI_GetRange>
 80045fa:	4603      	mov	r3, r0
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	4a2b      	ldr	r2, [pc, #172]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e04b      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d102      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e045      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d10a      	bne.n	8004634 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800461e:	f7ff f81d 	bl	800365c <LL_RCC_HSE_IsEnabledDiv2>
 8004622:	4603      	mov	r3, r0
 8004624:	2b01      	cmp	r3, #1
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e03a      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e037      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004634:	f7ff faf8 	bl	8003c28 <LL_RCC_PLL_GetMainSource>
 8004638:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d003      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x64>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d003      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x6a>
 8004646:	e00d      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800464a:	60bb      	str	r3, [r7, #8]
        break;
 800464c:	e015      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800464e:	f7ff f805 	bl	800365c <LL_RCC_HSE_IsEnabledDiv2>
 8004652:	4603      	mov	r3, r0
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800465a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800465c:	e00d      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004660:	60bb      	str	r3, [r7, #8]
        break;
 8004662:	e00a      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004664:	f7ff f999 	bl	800399a <LL_RCC_MSI_GetRange>
 8004668:	4603      	mov	r3, r0
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	60bb      	str	r3, [r7, #8]
        break;
 8004678:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800467a:	f7ff fab0 	bl	8003bde <LL_RCC_PLL_GetN>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	fb03 f402 	mul.w	r4, r3, r2
 8004686:	f7ff fac3 	bl	8003c10 <LL_RCC_PLL_GetDivider>
 800468a:	4603      	mov	r3, r0
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	3301      	adds	r3, #1
 8004690:	fbb4 f4f3 	udiv	r4, r4, r3
 8004694:	f7ff fab0 	bl	8003bf8 <LL_RCC_PLL_GetR>
 8004698:	4603      	mov	r3, r0
 800469a:	0f5b      	lsrs	r3, r3, #29
 800469c:	3301      	adds	r3, #1
 800469e:	fbb4 f3f3 	udiv	r3, r4, r3
 80046a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	080053e8 	.word	0x080053e8
 80046b4:	00f42400 	.word	0x00f42400
 80046b8:	01e84800 	.word	0x01e84800

080046bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b598      	push	{r3, r4, r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80046c0:	f7ff ff90 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80046c4:	4604      	mov	r4, r0
 80046c6:	f7ff fa1b 	bl	8003b00 <LL_RCC_GetAHBPrescaler>
 80046ca:	4603      	mov	r3, r0
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd98      	pop	{r3, r4, r7, pc}
 80046e0:	08005388 	.word	0x08005388

080046e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e4:	b598      	push	{r3, r4, r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80046e8:	f7ff ffe8 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80046ec:	4604      	mov	r4, r0
 80046ee:	f7ff fa3a 	bl	8003b66 <LL_RCC_GetAPB2Prescaler>
 80046f2:	4603      	mov	r3, r0
 80046f4:	0adb      	lsrs	r3, r3, #11
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	4a04      	ldr	r2, [pc, #16]	; (800470c <HAL_RCC_GetPCLK2Freq+0x28>)
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd98      	pop	{r3, r4, r7, pc}
 800470c:	080053c8 	.word	0x080053c8

08004710 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	226f      	movs	r2, #111	; 0x6f
 800471e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004720:	f7ff f979 	bl	8003a16 <LL_RCC_GetSysClkSource>
 8004724:	4602      	mov	r2, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800472a:	f7ff f9e9 	bl	8003b00 <LL_RCC_GetAHBPrescaler>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004734:	f7ff fa0b 	bl	8003b4e <LL_RCC_GetAPB1Prescaler>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800473e:	f7ff fa12 	bl	8003b66 <LL_RCC_GetAPB2Prescaler>
 8004742:	4602      	mov	r2, r0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004748:	f7ff f9e6 	bl	8003b18 <LL_C2_RCC_GetAHBPrescaler>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004752:	f7ff f9ee 	bl	8003b32 <LL_RCC_GetAHB4Prescaler>
 8004756:	4602      	mov	r2, r0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <HAL_RCC_GetClockConfig+0x60>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0207 	and.w	r2, r3, #7
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	58004000 	.word	0x58004000

08004774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2bb0      	cmp	r3, #176	; 0xb0
 8004780:	d903      	bls.n	800478a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e007      	b.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800479a:	f7ff f9ca 	bl	8003b32 <LL_RCC_GetAHB4Prescaler>
 800479e:	4603      	mov	r3, r0
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	0c9b      	lsrs	r3, r3, #18
 80047be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f80c 	bl	80047e0 <RCC_SetFlashLatency>
 80047c8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	080053e8 	.word	0x080053e8
 80047d8:	08005388 	.word	0x08005388
 80047dc:	431bde83 	.word	0x431bde83

080047e0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b08f      	sub	sp, #60	; 0x3c
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <RCC_SetFlashLatency+0x9c>)
 80047ec:	f107 041c 	add.w	r4, r7, #28
 80047f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <RCC_SetFlashLatency+0xa0>)
 80047f8:	f107 040c 	add.w	r4, r7, #12
 80047fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004806:	2300      	movs	r3, #0
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
 800480a:	e013      	b.n	8004834 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3338      	adds	r3, #56	; 0x38
 8004812:	443b      	add	r3, r7
 8004814:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d807      	bhi.n	800482e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	3338      	adds	r3, #56	; 0x38
 8004824:	443b      	add	r3, r7
 8004826:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800482c:	e005      	b.n	800483a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	3301      	adds	r3, #1
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	2b03      	cmp	r3, #3
 8004838:	d9e8      	bls.n	800480c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <RCC_SetFlashLatency+0xa4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0207 	bic.w	r2, r3, #7
 8004842:	4910      	ldr	r1, [pc, #64]	; (8004884 <RCC_SetFlashLatency+0xa4>)
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800484a:	f7fe fc65 	bl	8003118 <HAL_GetTick>
 800484e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004850:	e008      	b.n	8004864 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004852:	f7fe fc61 	bl	8003118 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e007      	b.n	8004874 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <RCC_SetFlashLatency+0xa4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800486e:	429a      	cmp	r2, r3
 8004870:	d1ef      	bne.n	8004852 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	373c      	adds	r7, #60	; 0x3c
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0800535c 	.word	0x0800535c
 8004880:	0800536c 	.word	0x0800536c
 8004884:	58004000 	.word	0x58004000

08004888 <LL_RCC_LSE_IsEnabled>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <LL_RCC_LSE_IsEnabled+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_RCC_LSE_IsReady>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d101      	bne.n	80048c4 <LL_RCC_LSE_IsReady+0x18>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <LL_RCC_LSE_IsReady+0x1a>
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_RCC_MSI_EnablePLLMode>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	6013      	str	r3, [r2, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_SetRFWKPClockSource>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_RCC_SetSMPSClockSource>:
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f023 0203 	bic.w	r2, r3, #3
 800492c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4313      	orrs	r3, r2
 8004934:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_SetSMPSPrescaler>:
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4313      	orrs	r3, r2
 800495c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_SetUSARTClockSource>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetLPUARTClockSource>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_SetI2CClockSource>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049da:	43db      	mvns	r3, r3
 80049dc:	401a      	ands	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_RCC_SetLPTIMClockSource>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	43db      	mvns	r3, r3
 8004a14:	401a      	ands	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_RCC_SetRNGClockSource>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_SetCLK48ClockSource>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_SetADCClockSource>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_RCC_SetRTCClockSource>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_RCC_GetRTCClockSource>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_ForceBackupDomainReset>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_RCC_ReleaseBackupDomainReset>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b088      	sub	sp, #32
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004b46:	2300      	movs	r3, #0
 8004b48:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d046      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004b5a:	f7ff ffc1 	bl	8004ae0 <LL_RCC_GetRTCClockSource>
 8004b5e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d03c      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b6a:	f7fe fd67 	bl	800363c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff9b 	bl	8004ab4 <LL_RCC_SetRTCClockSource>
 8004b7e:	e02e      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004b8a:	f7ff ffb6 	bl	8004afa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004b8e:	f7ff ffc5 	bl	8004b1c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004baa:	f7ff fe6d 	bl	8004888 <LL_RCC_LSE_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d114      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bb4:	f7fe fab0 	bl	8003118 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fe faac 	bl	8003118 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	77fb      	strb	r3, [r7, #31]
              break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004bd4:	f7ff fe6a 	bl	80048ac <LL_RCC_LSE_IsReady>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d1ee      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	77bb      	strb	r3, [r7, #30]
 8004be2:	e001      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff feb6 	bl	800496a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fec1 	bl	8004996 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fee9 	bl	80049fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fede 	bl	80049fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff feb6 	bl	80049c2 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02b      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fed4 	bl	8004a30 <LL_RCC_SetRNGClockSource>
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7ff fecb 	bl	8004a30 <LL_RCC_SetRNGClockSource>
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff fede 	bl	8004a5c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ca8:	d107      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fedc 	bl	8004a88 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd8:	d107      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fdf7 	bl	80048ee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fe16 	bl	8004942 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fdfd 	bl	800491a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004d20:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004d2e:	f7ff fdcf 	bl	80048d0 <LL_RCC_MSI_EnablePLLMode>
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e049      	b.n	8004ddc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f841 	bl	8004de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 f9d5 	bl	8005124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e036      	b.n	8004e7e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_TIM_Base_Start_IT+0x94>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x44>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d115      	bne.n	8004e68 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_TIM_Base_Start_IT+0x98>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d015      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x82>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d011      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	e008      	b.n	8004e7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e000      	b.n	8004e7c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	00010007 	.word	0x00010007

08004e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0202 	mvn.w	r2, #2
 8004ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f905 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8f7 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f908 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0204 	mvn.w	r2, #4
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8db 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8cd 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8de 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0208 	mvn.w	r2, #8
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8b1 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8a3 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8b4 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0210 	mvn.w	r2, #16
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f887 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f879 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f88a 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0201 	mvn.w	r2, #1
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd ff22 	bl	8002e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8ca 	bl	80051d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8bd 	bl	80051ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f838 	bl	800510e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d10e      	bne.n	80050ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0220 	mvn.w	r2, #32
 80050c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f87d 	bl	80051c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <TIM_Base_SetConfig+0x9c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x20>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <TIM_Base_SetConfig+0x9c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0x42>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d108      	bne.n	8005178 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <TIM_Base_SetConfig+0x9c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00

080051c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	; (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	; (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	; (8005244 <__libc_init_array+0x44>)
 8005214:	f000 f83e 	bl	8005294 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08005428 	.word	0x08005428
 800523c:	08005428 	.word	0x08005428
 8005240:	08005428 	.word	0x08005428
 8005244:	0800542c 	.word	0x0800542c

08005248 <memcmp>:
 8005248:	b510      	push	{r4, lr}
 800524a:	3901      	subs	r1, #1
 800524c:	4402      	add	r2, r0
 800524e:	4290      	cmp	r0, r2
 8005250:	d101      	bne.n	8005256 <memcmp+0xe>
 8005252:	2000      	movs	r0, #0
 8005254:	e005      	b.n	8005262 <memcmp+0x1a>
 8005256:	7803      	ldrb	r3, [r0, #0]
 8005258:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800525c:	42a3      	cmp	r3, r4
 800525e:	d001      	beq.n	8005264 <memcmp+0x1c>
 8005260:	1b18      	subs	r0, r3, r4
 8005262:	bd10      	pop	{r4, pc}
 8005264:	3001      	adds	r0, #1
 8005266:	e7f2      	b.n	800524e <memcmp+0x6>

08005268 <memcpy>:
 8005268:	440a      	add	r2, r1
 800526a:	4291      	cmp	r1, r2
 800526c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005270:	d100      	bne.n	8005274 <memcpy+0xc>
 8005272:	4770      	bx	lr
 8005274:	b510      	push	{r4, lr}
 8005276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527e:	4291      	cmp	r1, r2
 8005280:	d1f9      	bne.n	8005276 <memcpy+0xe>
 8005282:	bd10      	pop	{r4, pc}

08005284 <memset>:
 8005284:	4402      	add	r2, r0
 8005286:	4603      	mov	r3, r0
 8005288:	4293      	cmp	r3, r2
 800528a:	d100      	bne.n	800528e <memset+0xa>
 800528c:	4770      	bx	lr
 800528e:	f803 1b01 	strb.w	r1, [r3], #1
 8005292:	e7f9      	b.n	8005288 <memset+0x4>

08005294 <_init>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr

080052a0 <_fini>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr
